{"version":3,"file":"468.bundle.js","mappings":"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","sources":["webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/snippets/browser/commands/abstractSnippetsActions.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/snippets/browser/commands/configureSnippets.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/snippets/browser/commands/fileTemplateSnippets.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/snippets/browser/snippetPicker.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/snippets/browser/commands/insertSnippet.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/snippets/browser/commands/surroundWithSnippet.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/snippets/browser/snippetCodeActionProvider.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/snippets/browser/snippets.contribution.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/service-override/snippets.js"],"sourcesContent":["import { EditorAction2 } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { Action2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nconst defaultOptions = {\n    category: {\n        value: ( localize('snippets', 'Snippets')),\n        original: 'Snippets'\n    },\n};\nclass SnippetsAction extends Action2 {\n    constructor(desc) {\n        super({ ...defaultOptions, ...desc });\n    }\n}\nclass SnippetEditorAction extends EditorAction2 {\n    constructor(desc) {\n        super({ ...defaultOptions, ...desc });\n    }\n}\nexport { SnippetEditorAction, SnippetsAction };\n","import { isValidBasename } from 'monaco-editor/esm/vs/base/common/extpath.js';\nimport { extname } from 'monaco-editor/esm/vs/base/common/path.js';\nimport { basename, joinPath } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';\nimport { IOpenerService } from 'monaco-editor/esm/vs/platform/opener/common/opener.js';\nimport { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { SnippetsAction } from './abstractSnippetsActions.js';\nimport { ISnippetsService } from '../snippets.js';\nimport { ITextFileService } from '../../../../services/textfile/common/textfiles.js';\nimport { IUserDataProfileService } from '../../../../services/userDataProfile/common/userDataProfile.js';\nvar ISnippetPick;\n( (function(ISnippetPick) {\n    function is(thing) {\n        return !!thing && URI.isUri(thing.filepath);\n    }\n    ISnippetPick.is = is;\n})(ISnippetPick || (ISnippetPick = {})));\nasync function computePicks(snippetService, userDataProfileService, languageService, labelService) {\n    const existing = [];\n    const future = [];\n    const seen = ( new Set());\n    const added = ( new Map());\n    for (const file of await snippetService.getSnippetFiles()) {\n        if (file.source === 3 ) {\n            continue;\n        }\n        if (file.isGlobalSnippets) {\n            await file.load();\n            const names = ( new Set());\n            let source;\n            outer: for (const snippet of file.data) {\n                if (!source) {\n                    source = snippet.source;\n                }\n                for (const scope of snippet.scopes) {\n                    const name = languageService.getLanguageName(scope);\n                    if (name) {\n                        if (names.size >= 4) {\n                            names.add(`${name}...`);\n                            break outer;\n                        }\n                        else {\n                            names.add(name);\n                        }\n                    }\n                }\n            }\n            const snippet = {\n                label: basename(file.location),\n                filepath: file.location,\n                description: names.size === 0\n                    ? ( nls.localize('global.scope', \"(global)\"))\n                    : ( nls.localize('global.1', \"({0})\", [...names].join(', ')))\n            };\n            existing.push(snippet);\n            if (!source) {\n                continue;\n            }\n            const detail = ( nls.localize(\n                'detail.label',\n                \"({0}) {1}\",\n                source,\n                labelService.getUriLabel(file.location, { relative: true })\n            ));\n            const lastItem = added.get(basename(file.location));\n            if (lastItem) {\n                snippet.detail = detail;\n                lastItem.snippet.detail = lastItem.detail;\n            }\n            added.set(basename(file.location), { snippet, detail });\n        }\n        else {\n            const mode = basename(file.location).replace(/\\.json$/, '');\n            existing.push({\n                label: basename(file.location),\n                description: `(${languageService.getLanguageName(mode)})`,\n                filepath: file.location\n            });\n            seen.add(mode);\n        }\n    }\n    const dir = userDataProfileService.currentProfile.snippetsHome;\n    for (const languageId of languageService.getRegisteredLanguageIds()) {\n        const label = languageService.getLanguageName(languageId);\n        if (label && !( seen.has(languageId))) {\n            future.push({\n                label: languageId,\n                description: `(${label})`,\n                filepath: joinPath(dir, `${languageId}.json`),\n                hint: true\n            });\n        }\n    }\n    existing.sort((a, b) => {\n        const a_ext = extname(a.filepath.path);\n        const b_ext = extname(b.filepath.path);\n        if (a_ext === b_ext) {\n            return a.label.localeCompare(b.label);\n        }\n        else if (a_ext === '.code-snippets') {\n            return -1;\n        }\n        else {\n            return 1;\n        }\n    });\n    future.sort((a, b) => {\n        return a.label.localeCompare(b.label);\n    });\n    return { existing, future };\n}\nasync function createSnippetFile(scope, defaultPath, quickInputService, fileService, textFileService, opener) {\n    function createSnippetUri(input) {\n        const filename = extname(input) !== '.code-snippets'\n            ? `${input}.code-snippets`\n            : input;\n        return joinPath(defaultPath, filename);\n    }\n    await fileService.createFolder(defaultPath);\n    const input = await quickInputService.input({\n        placeHolder: ( nls.localize('name', \"Type snippet file name\")),\n        async validateInput(input) {\n            if (!input) {\n                return ( nls.localize('bad_name1', \"Invalid file name\"));\n            }\n            if (!isValidBasename(input)) {\n                return ( nls.localize('bad_name2', \"'{0}' is not a valid file name\", input));\n            }\n            if (await fileService.exists(createSnippetUri(input))) {\n                return ( nls.localize('bad_name3', \"'{0}' already exists\", input));\n            }\n            return undefined;\n        }\n    });\n    if (!input) {\n        return undefined;\n    }\n    const resource = createSnippetUri(input);\n    await textFileService.write(resource, [\n        '{',\n        '\\t// Place your ' + scope + ' snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and ',\n        '\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope ',\n        '\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is ',\n        '\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: ',\n        '\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. ',\n        '\\t// Placeholders with the same ids are connected.',\n        '\\t// Example:',\n        '\\t// \"Print to console\": {',\n        '\\t// \\t\"scope\": \"javascript,typescript\",',\n        '\\t// \\t\"prefix\": \"log\",',\n        '\\t// \\t\"body\": [',\n        '\\t// \\t\\t\"console.log(\\'$1\\');\",',\n        '\\t// \\t\\t\"$2\"',\n        '\\t// \\t],',\n        '\\t// \\t\"description\": \"Log output to console\"',\n        '\\t// }',\n        '}'\n    ].join('\\n'));\n    await opener.open(resource);\n    return undefined;\n}\nasync function createLanguageSnippetFile(pick, fileService, textFileService) {\n    if (await fileService.exists(pick.filepath)) {\n        return;\n    }\n    const contents = [\n        '{',\n        '\\t// Place your snippets for ' + pick.label + ' here. Each snippet is defined under a snippet name and has a prefix, body and ',\n        '\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:',\n        '\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the ',\n        '\\t// same ids are connected.',\n        '\\t// Example:',\n        '\\t// \"Print to console\": {',\n        '\\t// \\t\"prefix\": \"log\",',\n        '\\t// \\t\"body\": [',\n        '\\t// \\t\\t\"console.log(\\'$1\\');\",',\n        '\\t// \\t\\t\"$2\"',\n        '\\t// \\t],',\n        '\\t// \\t\"description\": \"Log output to console\"',\n        '\\t// }',\n        '}'\n    ].join('\\n');\n    await textFileService.write(pick.filepath, contents);\n}\nclass ConfigureSnippetsAction extends SnippetsAction {\n    constructor() {\n        super({\n            id: 'workbench.action.openSnippets',\n            title: {\n                value: ( nls.localize('openSnippet.label', \"Configure User Snippets\")),\n                original: 'Configure User Snippets'\n            },\n            shortTitle: {\n                value: ( nls.localize('userSnippets', \"User Snippets\")),\n                mnemonicTitle: ( nls.localize(\n                    { key: 'miOpenSnippets', comment: ['&& denotes a mnemonic'] },\n                    \"User &&Snippets\"\n                )),\n                original: 'User Snippets'\n            },\n            f1: true,\n            menu: [\n                { id: MenuId.MenubarPreferencesMenu, group: '2_configuration', order: 4 },\n                { id: MenuId.GlobalActivity, group: '2_configuration', order: 4 },\n            ]\n        });\n    }\n    async run(accessor) {\n        const snippetService = accessor.get(ISnippetsService);\n        const quickInputService = accessor.get(IQuickInputService);\n        const opener = accessor.get(IOpenerService);\n        const languageService = accessor.get(ILanguageService);\n        const userDataProfileService = accessor.get(IUserDataProfileService);\n        const workspaceService = accessor.get(IWorkspaceContextService);\n        const fileService = accessor.get(IFileService);\n        const textFileService = accessor.get(ITextFileService);\n        const labelService = accessor.get(ILabelService);\n        const picks = await computePicks(snippetService, userDataProfileService, languageService, labelService);\n        const existing = picks.existing;\n        const globalSnippetPicks = [{\n                scope: ( nls.localize('new.global_scope', 'global')),\n                label: ( nls.localize('new.global', \"New Global Snippets file...\")),\n                uri: userDataProfileService.currentProfile.snippetsHome\n            }];\n        const workspaceSnippetPicks = [];\n        for (const folder of workspaceService.getWorkspace().folders) {\n            workspaceSnippetPicks.push({\n                scope: ( nls.localize('new.workspace_scope', \"{0} workspace\", folder.name)),\n                label: ( nls.localize('new.folder', \"New Snippets file for '{0}'...\", folder.name)),\n                uri: folder.toResource('.vscode')\n            });\n        }\n        if (existing.length > 0) {\n            existing.unshift({ type: 'separator', label: ( nls.localize('group.global', \"Existing Snippets\")) });\n            existing.push({ type: 'separator', label: ( nls.localize('new.global.sep', \"New Snippets\")) });\n        }\n        else {\n            existing.push({ type: 'separator', label: ( nls.localize('new.global.sep', \"New Snippets\")) });\n        }\n        const pick = await quickInputService.pick([].concat(existing, globalSnippetPicks, workspaceSnippetPicks, picks.future), {\n            placeHolder: ( nls.localize('openSnippet.pickLanguage', \"Select Snippets File or Create Snippets\")),\n            matchOnDescription: true\n        });\n        if (globalSnippetPicks.indexOf(pick) >= 0) {\n            return createSnippetFile(pick.scope, pick.uri, quickInputService, fileService, textFileService, opener);\n        }\n        else if (workspaceSnippetPicks.indexOf(pick) >= 0) {\n            return createSnippetFile(pick.scope, pick.uri, quickInputService, fileService, textFileService, opener);\n        }\n        else if (ISnippetPick.is(pick)) {\n            if (pick.hint) {\n                await createLanguageSnippetFile(pick, fileService, textFileService);\n            }\n            return opener.open(pick.filepath);\n        }\n    }\n}\nexport { ConfigureSnippetsAction };\n","import { isFalsyOrEmpty, groupBy } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { compare } from 'monaco-editor/esm/vs/base/common/strings.js';\nimport { getCodeEditor } from 'monaco-editor/esm/vs/editor/browser/editorBrowser.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport { SnippetController2 } from 'monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetController2.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';\nimport { SnippetsAction } from './abstractSnippetsActions.js';\nimport { ISnippetsService } from '../snippets.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nclass ApplyFileSnippetAction extends SnippetsAction {\n    static { this.Id = 'workbench.action.populateFileFromSnippet'; }\n    constructor() {\n        super({\n            id: ApplyFileSnippetAction.Id,\n            title: {\n                value: ( localize('label', 'Fill File with Snippet')),\n                original: 'Fill File with Snippet'\n            },\n            f1: true,\n        });\n    }\n    async run(accessor) {\n        const snippetService = accessor.get(ISnippetsService);\n        const quickInputService = accessor.get(IQuickInputService);\n        const editorService = accessor.get(IEditorService);\n        const langService = accessor.get(ILanguageService);\n        const editor = getCodeEditor(editorService.activeTextEditorControl);\n        if (!editor || !editor.hasModel()) {\n            return;\n        }\n        const snippets = await snippetService.getSnippets(undefined, { fileTemplateSnippets: true, noRecencySort: true, includeNoPrefixSnippets: true });\n        if (snippets.length === 0) {\n            return;\n        }\n        const selection = await this._pick(quickInputService, langService, snippets);\n        if (!selection) {\n            return;\n        }\n        if (editor.hasModel()) {\n            SnippetController2.get(editor)?.apply([{\n                    range: editor.getModel().getFullModelRange(),\n                    template: selection.snippet.body\n                }]);\n            editor.getModel().setLanguage(langService.createById(selection.langId), ApplyFileSnippetAction.Id);\n            editor.focus();\n        }\n    }\n    async _pick(quickInputService, langService, snippets) {\n        const all = [];\n        for (const snippet of snippets) {\n            if (isFalsyOrEmpty(snippet.scopes)) {\n                all.push({ langId: '', snippet });\n            }\n            else {\n                for (const langId of snippet.scopes) {\n                    all.push({ langId, snippet });\n                }\n            }\n        }\n        const picks = [];\n        const groups = groupBy(all, (a, b) => compare(a.langId, b.langId));\n        for (const group of groups) {\n            let first = true;\n            for (const item of group) {\n                if (first) {\n                    picks.push({\n                        type: 'separator',\n                        label: langService.getLanguageName(item.langId) ?? item.langId\n                    });\n                    first = false;\n                }\n                picks.push({\n                    snippet: item,\n                    label: item.snippet.prefix || item.snippet.name,\n                    detail: item.snippet.description\n                });\n            }\n        }\n        const pick = await quickInputService.pick(picks, {\n            placeHolder: ( localize('placeholder', 'Select a snippet')),\n            matchOnDetail: true,\n        });\n        return pick?.snippet;\n    }\n}\nexport { ApplyFileSnippetAction };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { ISnippetsService } from './snippets.js';\nimport { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';\nimport { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';\nimport { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';\nimport { Event } from 'monaco-editor/esm/vs/base/common/event.js';\nasync function pickSnippet(accessor, languageIdOrSnippets) {\n    const snippetService = accessor.get(ISnippetsService);\n    const quickInputService = accessor.get(IQuickInputService);\n    let snippets;\n    if (Array.isArray(languageIdOrSnippets)) {\n        snippets = languageIdOrSnippets;\n    }\n    else {\n        snippets = (await snippetService.getSnippets(languageIdOrSnippets, { includeDisabledSnippets: true, includeNoPrefixSnippets: true }));\n    }\n    snippets.sort((a, b) => a.snippetSource - b.snippetSource);\n    const makeSnippetPicks = () => {\n        const result = [];\n        let prevSnippet;\n        for (const snippet of snippets) {\n            const pick = {\n                label: snippet.prefix || snippet.name,\n                detail: snippet.description || snippet.body,\n                snippet\n            };\n            if (!prevSnippet || prevSnippet.snippetSource !== snippet.snippetSource || prevSnippet.source !== snippet.source) {\n                let label = '';\n                switch (snippet.snippetSource) {\n                    case 1 :\n                        label = ( nls.localize('sep.userSnippet', \"User Snippets\"));\n                        break;\n                    case 3 :\n                        label = snippet.source;\n                        break;\n                    case 2 :\n                        label = ( nls.localize('sep.workspaceSnippet', \"Workspace Snippets\"));\n                        break;\n                }\n                result.push({ type: 'separator', label });\n            }\n            if (snippet.snippetSource === 3 ) {\n                const isEnabled = snippetService.isEnabled(snippet);\n                if (isEnabled) {\n                    pick.buttons = [{\n                            iconClass: ThemeIcon.asClassName(Codicon.eyeClosed),\n                            tooltip: ( nls.localize('disableSnippet', 'Hide from IntelliSense'))\n                        }];\n                }\n                else {\n                    pick.description = ( nls.localize('isDisabled', \"(hidden from IntelliSense)\"));\n                    pick.buttons = [{\n                            iconClass: ThemeIcon.asClassName(Codicon.eye),\n                            tooltip: ( nls.localize('enable.snippet', 'Show in IntelliSense'))\n                        }];\n                }\n            }\n            result.push(pick);\n            prevSnippet = snippet;\n        }\n        return result;\n    };\n    const picker = quickInputService.createQuickPick();\n    picker.placeholder = ( nls.localize('pick.placeholder', \"Select a snippet\"));\n    picker.matchOnDetail = true;\n    picker.ignoreFocusOut = false;\n    picker.keepScrollPosition = true;\n    picker.onDidTriggerItemButton(ctx => {\n        const isEnabled = snippetService.isEnabled(ctx.item.snippet);\n        snippetService.updateEnablement(ctx.item.snippet, !isEnabled);\n        picker.items = makeSnippetPicks();\n    });\n    picker.items = makeSnippetPicks();\n    if (!picker.items.length) {\n        picker.validationMessage = ( nls.localize('pick.noSnippetAvailable', \"No snippet available\"));\n    }\n    picker.show();\n    await Promise.race([Event.toPromise(picker.onDidAccept), Event.toPromise(picker.onDidHide)]);\n    const result = picker.selectedItems[0]?.snippet;\n    picker.dispose();\n    return result;\n}\nexport { pickSnippet };\n","import { EditorContextKeys } from 'monaco-editor/esm/vs/editor/common/editorContextKeys.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport { SnippetController2 } from 'monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetController2.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { IClipboardService } from 'monaco-editor/esm/vs/platform/clipboard/common/clipboardService.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { SnippetEditorAction } from './abstractSnippetsActions.js';\nimport { pickSnippet } from '../snippetPicker.js';\nimport { ISnippetsService } from '../snippets.js';\nimport { Snippet } from '../snippetsFile.js';\nclass Args {\n    static fromUser(arg) {\n        if (!arg || typeof arg !== 'object') {\n            return Args._empty;\n        }\n        let { snippet, name, langId } = arg;\n        if (typeof snippet !== 'string') {\n            snippet = undefined;\n        }\n        if (typeof name !== 'string') {\n            name = undefined;\n        }\n        if (typeof langId !== 'string') {\n            langId = undefined;\n        }\n        return ( new Args(snippet, name, langId));\n    }\n    static { this._empty = ( new Args(undefined, undefined, undefined)); }\n    constructor(snippet, name, langId) {\n        this.snippet = snippet;\n        this.name = name;\n        this.langId = langId;\n    }\n}\nclass InsertSnippetAction extends SnippetEditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertSnippet',\n            title: {\n                value: ( nls.localize('snippet.suggestions.label', \"Insert Snippet\")),\n                original: 'Insert Snippet'\n            },\n            f1: true,\n            precondition: EditorContextKeys.writable,\n            description: {\n                description: `Insert Snippet`,\n                args: [{\n                        name: 'args',\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'snippet': {\n                                    'type': 'string'\n                                },\n                                'langId': {\n                                    'type': 'string',\n                                },\n                                'name': {\n                                    'type': 'string'\n                                }\n                            },\n                        }\n                    }]\n            }\n        });\n    }\n    async runEditorCommand(accessor, editor, arg) {\n        const languageService = accessor.get(ILanguageService);\n        const snippetService = accessor.get(ISnippetsService);\n        if (!editor.hasModel()) {\n            return;\n        }\n        const clipboardService = accessor.get(IClipboardService);\n        const instaService = accessor.get(IInstantiationService);\n        const snippet = await ( new Promise((resolve, reject) => {\n            const { lineNumber, column } = editor.getPosition();\n            const { snippet, name, langId } = Args.fromUser(arg);\n            if (snippet) {\n                return resolve(( new Snippet(\n                    false,\n                    [],\n                    '',\n                    '',\n                    '',\n                    snippet,\n                    '',\n                    1 ,\n                    `random/${Math.random()}`\n                )));\n            }\n            let languageId;\n            if (langId) {\n                if (!languageService.isRegisteredLanguageId(langId)) {\n                    return resolve(undefined);\n                }\n                languageId = langId;\n            }\n            else {\n                editor.getModel().tokenization.tokenizeIfCheap(lineNumber);\n                languageId = editor.getModel().getLanguageIdAtPosition(lineNumber, column);\n                if (!languageService.getLanguageName(languageId)) {\n                    languageId = editor.getModel().getLanguageId();\n                }\n            }\n            if (name) {\n                snippetService.getSnippets(languageId, { includeNoPrefixSnippets: true })\n                    .then(snippets => snippets.find(snippet => snippet.name === name))\n                    .then(resolve, reject);\n            }\n            else {\n                resolve(instaService.invokeFunction(pickSnippet, languageId));\n            }\n        }));\n        if (!snippet) {\n            return;\n        }\n        let clipboardText;\n        if (snippet.needsClipboard) {\n            clipboardText = await clipboardService.readText();\n        }\n        editor.focus();\n        SnippetController2.get(editor)?.insert(snippet.codeSnippet, { clipboardText });\n        snippetService.updateUsageTimestamp(snippet);\n    }\n}\nexport { InsertSnippetAction };\n","import { EditorContextKeys } from 'monaco-editor/esm/vs/editor/common/editorContextKeys.js';\nimport { SnippetController2 } from 'monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetController2.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { IClipboardService } from 'monaco-editor/esm/vs/platform/clipboard/common/clipboardService.js';\nimport { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { SnippetEditorAction } from './abstractSnippetsActions.js';\nimport { pickSnippet } from '../snippetPicker.js';\nimport { ISnippetsService } from '../snippets.js';\nasync function getSurroundableSnippets(snippetsService, model, position, includeDisabledSnippets) {\n    const { lineNumber, column } = position;\n    model.tokenization.tokenizeIfCheap(lineNumber);\n    const languageId = model.getLanguageIdAtPosition(lineNumber, column);\n    const allSnippets = await snippetsService.getSnippets(languageId, { includeNoPrefixSnippets: true, includeDisabledSnippets });\n    return allSnippets.filter(snippet => snippet.usesSelection);\n}\nclass SurroundWithSnippetEditorAction extends SnippetEditorAction {\n    static { this.options = {\n        id: 'editor.action.surroundWithSnippet',\n        title: {\n            value: ( localize('label', 'Surround With Snippet...')),\n            original: 'Surround With Snippet...'\n        }\n    }; }\n    constructor() {\n        super({\n            ...SurroundWithSnippetEditorAction.options,\n            precondition: ( ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasNonEmptySelection)),\n            f1: true,\n        });\n    }\n    async runEditorCommand(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const instaService = accessor.get(IInstantiationService);\n        const snippetsService = accessor.get(ISnippetsService);\n        const clipboardService = accessor.get(IClipboardService);\n        const snippets = await getSurroundableSnippets(snippetsService, editor.getModel(), editor.getPosition(), true);\n        if (!snippets.length) {\n            return;\n        }\n        const snippet = await instaService.invokeFunction(pickSnippet, snippets);\n        if (!snippet) {\n            return;\n        }\n        let clipboardText;\n        if (snippet.needsClipboard) {\n            clipboardText = await clipboardService.readText();\n        }\n        editor.focus();\n        SnippetController2.get(editor)?.insert(snippet.codeSnippet, { clipboardText });\n        snippetsService.updateUsageTimestamp(snippet);\n    }\n}\nexport { SurroundWithSnippetEditorAction, getSurroundableSnippets };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Selection } from 'monaco-editor/esm/vs/editor/common/core/selection.js';\nimport { ILanguageFeaturesService } from 'monaco-editor/esm/vs/editor/common/services/languageFeatures.js';\nimport { CodeActionKind } from 'monaco-editor/esm/vs/editor/contrib/codeAction/common/types.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { ApplyFileSnippetAction } from './commands/fileTemplateSnippets.js';\nimport { SurroundWithSnippetEditorAction, getSurroundableSnippets } from './commands/surroundWithSnippet.js';\nimport { ISnippetsService } from './snippets.js';\nlet SurroundWithSnippetCodeActionProvider = class SurroundWithSnippetCodeActionProvider {\n    static { this._MAX_CODE_ACTIONS = 4; }\n    static { this._overflowCommandCodeAction = {\n        kind: CodeActionKind.SurroundWith.value,\n        title: SurroundWithSnippetEditorAction.options.title.value,\n        command: {\n            id: SurroundWithSnippetEditorAction.options.id,\n            title: SurroundWithSnippetEditorAction.options.title.value,\n        },\n    }; }\n    constructor(_snippetService) {\n        this._snippetService = _snippetService;\n    }\n    async provideCodeActions(model, range) {\n        if (range.isEmpty()) {\n            return undefined;\n        }\n        const position = Selection.isISelection(range) ? range.getPosition() : range.getStartPosition();\n        const snippets = await getSurroundableSnippets(this._snippetService, model, position, false);\n        if (!snippets.length) {\n            return undefined;\n        }\n        const actions = [];\n        for (const snippet of snippets) {\n            if (actions.length >= SurroundWithSnippetCodeActionProvider._MAX_CODE_ACTIONS) {\n                actions.push(SurroundWithSnippetCodeActionProvider._overflowCommandCodeAction);\n                break;\n            }\n            actions.push({\n                title: ( localize('codeAction', \"Surround With: {0}\", snippet.name)),\n                kind: CodeActionKind.SurroundWith.value,\n                edit: asWorkspaceEdit(model, range, snippet)\n            });\n        }\n        return {\n            actions,\n            dispose() { }\n        };\n    }\n};\nSurroundWithSnippetCodeActionProvider = ( __decorate([\n    ( __param(0, ISnippetsService))\n], SurroundWithSnippetCodeActionProvider));\nlet FileTemplateCodeActionProvider = class FileTemplateCodeActionProvider {\n    static { this._MAX_CODE_ACTIONS = 4; }\n    static { this._overflowCommandCodeAction = {\n        title: ( localize('overflow.start.title', 'Start with Snippet')),\n        kind: CodeActionKind.SurroundWith.value,\n        command: {\n            id: ApplyFileSnippetAction.Id,\n            title: ''\n        }\n    }; }\n    constructor(_snippetService) {\n        this._snippetService = _snippetService;\n        this.providedCodeActionKinds = [CodeActionKind.SurroundWith.value];\n    }\n    async provideCodeActions(model) {\n        if (model.getValueLength() !== 0) {\n            return undefined;\n        }\n        const snippets = await this._snippetService.getSnippets(model.getLanguageId(), { fileTemplateSnippets: true, includeNoPrefixSnippets: true });\n        const actions = [];\n        for (const snippet of snippets) {\n            if (actions.length >= FileTemplateCodeActionProvider._MAX_CODE_ACTIONS) {\n                actions.push(FileTemplateCodeActionProvider._overflowCommandCodeAction);\n                break;\n            }\n            actions.push({\n                title: ( localize('title', 'Start with: {0}', snippet.name)),\n                kind: CodeActionKind.SurroundWith.value,\n                edit: asWorkspaceEdit(model, model.getFullModelRange(), snippet)\n            });\n        }\n        return {\n            actions,\n            dispose() { }\n        };\n    }\n};\nFileTemplateCodeActionProvider = ( __decorate([\n    ( __param(0, ISnippetsService))\n], FileTemplateCodeActionProvider));\nfunction asWorkspaceEdit(model, range, snippet) {\n    return {\n        edits: [{\n                versionId: model.getVersionId(),\n                resource: model.uri,\n                textEdit: {\n                    range,\n                    text: snippet.body,\n                    insertAsSnippet: true,\n                }\n            }]\n    };\n}\nlet SnippetCodeActions = class SnippetCodeActions {\n    constructor(instantiationService, languageFeaturesService, configService) {\n        this._store = ( new DisposableStore());\n        const setting = 'editor.snippets.codeActions.enabled';\n        const sessionStore = ( new DisposableStore());\n        const update = () => {\n            sessionStore.clear();\n            if (configService.getValue(setting)) {\n                sessionStore.add(languageFeaturesService.codeActionProvider.register('*', instantiationService.createInstance(SurroundWithSnippetCodeActionProvider)));\n                sessionStore.add(languageFeaturesService.codeActionProvider.register('*', instantiationService.createInstance(FileTemplateCodeActionProvider)));\n            }\n        };\n        update();\n        this._store.add(configService.onDidChangeConfiguration(e => e.affectsConfiguration(setting) && update()));\n        this._store.add(sessionStore);\n    }\n    dispose() {\n        this._store.dispose();\n    }\n};\nSnippetCodeActions = ( __decorate([\n    ( __param(0, IInstantiationService)),\n    ( __param(1, ILanguageFeaturesService)),\n    ( __param(2, IConfigurationService))\n], SnippetCodeActions));\nexport { SnippetCodeActions };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { registerAction2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { CommandsRegistry } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport * as JSONContributionRegistry from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions as Extensions$1 } from '../../../common/contributions.js';\nimport { ConfigureSnippetsAction } from './commands/configureSnippets.js';\nimport { ApplyFileSnippetAction } from './commands/fileTemplateSnippets.js';\nimport { InsertSnippetAction } from './commands/insertSnippet.js';\nimport { SurroundWithSnippetEditorAction } from './commands/surroundWithSnippet.js';\nimport { SnippetCodeActions } from './snippetCodeActionProvider.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { editorConfigurationBaseNode } from 'monaco-editor/esm/vs/editor/common/config/editorConfigurationSchema.js';\nregisterAction2(InsertSnippetAction);\nCommandsRegistry.registerCommandAlias('editor.action.showSnippets', 'editor.action.insertSnippet');\nregisterAction2(SurroundWithSnippetEditorAction);\nregisterAction2(ApplyFileSnippetAction);\nregisterAction2(ConfigureSnippetsAction);\nconst workbenchContribRegistry = ( Registry.as(Extensions$1.Workbench));\nworkbenchContribRegistry.registerWorkbenchContribution(SnippetCodeActions, 3 );\n( Registry\n    .as(Extensions.Configuration))\n    .registerConfiguration({\n    ...editorConfigurationBaseNode,\n    'properties': {\n        'editor.snippets.codeActions.enabled': {\n            'description': ( nls.localize(\n                'editor.snippets.codeActions.enabled',\n                'Controls if surround-with-snippets or file template snippets show as Code Actions.'\n            )),\n            'type': 'boolean',\n            'default': true\n        }\n    }\n});\nconst languageScopeSchemaId = 'vscode://schemas/snippets';\nconst snippetSchemaProperties = {\n    prefix: {\n        description: ( nls.localize(\n            'snippetSchema.json.prefix',\n            'The prefix to use when selecting the snippet in intellisense'\n        )),\n        type: ['string', 'array']\n    },\n    isFileTemplate: {\n        description: ( nls.localize(\n            'snippetSchema.json.isFileTemplate',\n            'The snippet is meant to populate or replace a whole file'\n        )),\n        type: 'boolean'\n    },\n    body: {\n        markdownDescription: ( nls.localize(\n            'snippetSchema.json.body',\n            'The snippet content. Use `$1`, `${1:defaultText}` to define cursor positions, use `$0` for the final cursor position. Insert variable values with `${varName}` and `${varName:defaultText}`, e.g. `This is file: $TM_FILENAME`.'\n        )),\n        type: ['string', 'array'],\n        items: {\n            type: 'string'\n        }\n    },\n    description: {\n        description: ( nls.localize('snippetSchema.json.description', 'The snippet description.')),\n        type: ['string', 'array']\n    }\n};\nconst languageScopeSchema = {\n    id: languageScopeSchemaId,\n    allowComments: true,\n    allowTrailingCommas: true,\n    defaultSnippets: [{\n            label: ( nls.localize('snippetSchema.json.default', \"Empty snippet\")),\n            body: { '${1:snippetName}': { 'prefix': '${2:prefix}', 'body': '${3:snippet}', 'description': '${4:description}' } }\n        }],\n    type: 'object',\n    description: ( nls.localize('snippetSchema.json', 'User snippet configuration')),\n    additionalProperties: {\n        type: 'object',\n        required: ['body'],\n        properties: snippetSchemaProperties,\n        additionalProperties: false\n    }\n};\nconst globalSchemaId = 'vscode://schemas/global-snippets';\nconst globalSchema = {\n    id: globalSchemaId,\n    allowComments: true,\n    allowTrailingCommas: true,\n    defaultSnippets: [{\n            label: ( nls.localize('snippetSchema.json.default', \"Empty snippet\")),\n            body: { '${1:snippetName}': { 'scope': '${2:scope}', 'prefix': '${3:prefix}', 'body': '${4:snippet}', 'description': '${5:description}' } }\n        }],\n    type: 'object',\n    description: ( nls.localize('snippetSchema.json', 'User snippet configuration')),\n    additionalProperties: {\n        type: 'object',\n        required: ['body'],\n        properties: {\n            ...snippetSchemaProperties,\n            scope: {\n                description: ( nls.localize(\n                    'snippetSchema.json.scope',\n                    \"A list of language names to which this snippet applies, e.g. 'typescript,javascript'.\"\n                )),\n                type: 'string'\n            }\n        },\n        additionalProperties: false\n    }\n};\nconst reg = ( Registry.as(JSONContributionRegistry.Extensions.JSONContribution));\nreg.registerSchema(languageScopeSchemaId, languageScopeSchema);\nreg.registerSchema(globalSchemaId, globalSchema);\n","import '../missing-services.js';\nimport { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nimport { ISnippetsService } from '../vscode/vs/workbench/contrib/snippets/browser/snippets.js';\nimport { SnippetsService } from '../vscode/vs/workbench/contrib/snippets/browser/snippetsService.js';\nimport { ILifecycleService } from '../vscode/vs/workbench/services/lifecycle/common/lifecycle.js';\nimport getServiceOverride$1 from './files.js';\nimport { registerServiceInitializeParticipant } from '../lifecycle.js';\nimport '../vscode/vs/workbench/contrib/snippets/browser/snippets.contribution.js';\nregisterServiceInitializeParticipant(async (accessor) => {\n    void accessor.get(ILifecycleService).when(2 ).then(() => {\n        StandaloneServices.get(ISnippetsService);\n    });\n});\nfunction getServiceOverride() {\n    return {\n        ...getServiceOverride$1(),\n        [( ISnippetsService.toString())]: new SyncDescriptor(SnippetsService, [], true)\n    };\n}\nexport { getServiceOverride as default };\n"],"names":["defaultOptions","category","value","original","SnippetsAction","constructor","desc","super","SnippetEditorAction","ISnippetPick","is","thing","isUri","filepath","ApplyFileSnippetAction","this","Id","id","title","f1","run","accessor","snippetService","get","quickInputService","editorService","langService","editor","activeTextEditorControl","hasModel","snippets","getSnippets","undefined","fileTemplateSnippets","noRecencySort","includeNoPrefixSnippets","length","selection","_pick","apply","range","getModel","getFullModelRange","template","snippet","body","setLanguage","createById","langId","focus","all","scopes","push","picks","groups","a","b","group","first","item","type","label","getLanguageName","prefix","name","detail","description","pick","placeHolder","matchOnDetail","async","pickSnippet","languageIdOrSnippets","Array","isArray","includeDisabledSnippets","sort","snippetSource","makeSnippetPicks","result","prevSnippet","source","nls","isEnabled","buttons","iconClass","asClassName","eyeClosed","tooltip","eye","picker","createQuickPick","placeholder","ignoreFocusOut","keepScrollPosition","onDidTriggerItemButton","ctx","updateEnablement","items","validationMessage","show","Promise","race","toPromise","onDidAccept","onDidHide","selectedItems","dispose","Args","fromUser","arg","_empty","getSurroundableSnippets","snippetsService","model","position","lineNumber","column","tokenization","tokenizeIfCheap","languageId","getLanguageIdAtPosition","filter","usesSelection","SurroundWithSnippetEditorAction","options","precondition","and","writable","hasNonEmptySelection","runEditorCommand","instaService","clipboardService","getPosition","invokeFunction","clipboardText","needsClipboard","readText","insert","codeSnippet","updateUsageTimestamp","SurroundWithSnippetCodeActionProvider","_MAX_CODE_ACTIONS","_overflowCommandCodeAction","kind","SurroundWith","command","_snippetService","provideCodeActions","isEmpty","isISelection","getStartPosition","actions","edit","asWorkspaceEdit","FileTemplateCodeActionProvider","providedCodeActionKinds","getValueLength","getLanguageId","edits","versionId","getVersionId","resource","uri","textEdit","text","insertAsSnippet","SnippetCodeActions","instantiationService","languageFeaturesService","configService","_store","setting","sessionStore","update","clear","getValue","add","codeActionProvider","register","createInstance","onDidChangeConfiguration","e","affectsConfiguration","args","schema","languageService","resolve","reject","Math","random","isRegisteredLanguageId","then","find","registerCommandAlias","shortTitle","mnemonicTitle","key","comment","menu","MenubarPreferencesMenu","order","GlobalActivity","opener","userDataProfileService","workspaceService","fileService","textFileService","labelService","existing","future","seen","Set","added","Map","file","getSnippetFiles","isGlobalSnippets","load","names","outer","data","scope","size","location","join","getUriLabel","relative","lastItem","set","mode","replace","dir","currentProfile","snippetsHome","getRegisteredLanguageIds","has","hint","a_ext","path","localeCompare","computePicks","globalSnippetPicks","workspaceSnippetPicks","folder","getWorkspace","folders","toResource","unshift","concat","matchOnDescription","indexOf","defaultPath","createSnippetUri","input","filename","createFolder","exists","write","open","createSnippetFile","contents","createLanguageSnippetFile","as","Workbench","registerWorkbenchContribution","Configuration","registerConfiguration","languageScopeSchemaId","snippetSchemaProperties","isFileTemplate","markdownDescription","languageScopeSchema","allowComments","allowTrailingCommas","defaultSnippets","additionalProperties","required","properties","globalSchemaId","globalSchema","reg","JSONContribution","getServiceOverride","toString","registerSchema","when"],"sourceRoot":""}