{"version":3,"file":"798.bundle.js","mappings":"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","sources":["webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/panecomposite.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/views/viewsViewlet.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/views/viewsService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/common/workbenchThemeService.js"],"sourcesContent":["import { __decorate, __param } from '../../../../node_modules/tslib/tslib.es6.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { CompositeRegistry, CompositeDescriptor, Composite } from './composite.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { Separator } from 'monaco-editor/esm/vs/base/common/actions.js';\nimport { SubmenuItemAction } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';\nimport { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { ViewsSubMenu } from './parts/views/viewPaneContainer.js';\nimport { IExtensionService } from '../services/extensions/common/extensions.js';\nimport { VIEWPANE_FILTER_ACTION } from './parts/views/viewPane.js';\nlet PaneComposite = class PaneComposite extends Composite {\n    constructor(id, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService) {\n        super(id, telemetryService, themeService, storageService);\n        this.storageService = storageService;\n        this.instantiationService = instantiationService;\n        this.contextMenuService = contextMenuService;\n        this.extensionService = extensionService;\n        this.contextService = contextService;\n    }\n    create(parent) {\n        this.viewPaneContainer = this._register(this.createViewPaneContainer(parent));\n        this._register(this.viewPaneContainer.onTitleAreaUpdate(() => this.updateTitleArea()));\n        this.viewPaneContainer.create(parent);\n    }\n    setVisible(visible) {\n        super.setVisible(visible);\n        this.viewPaneContainer?.setVisible(visible);\n    }\n    layout(dimension) {\n        this.viewPaneContainer?.layout(dimension);\n    }\n    setBoundarySashes(sashes) {\n        this.viewPaneContainer?.setBoundarySashes(sashes);\n    }\n    getOptimalWidth() {\n        return this.viewPaneContainer?.getOptimalWidth() ?? 0;\n    }\n    openView(id, focus) {\n        return this.viewPaneContainer?.openView(id, focus);\n    }\n    getViewPaneContainer() {\n        return this.viewPaneContainer;\n    }\n    getActionsContext() {\n        return this.getViewPaneContainer()?.getActionsContext();\n    }\n    getContextMenuActions() {\n        return this.viewPaneContainer?.menuActions?.getContextMenuActions() ?? [];\n    }\n    getMenuIds() {\n        const result = [];\n        if (this.viewPaneContainer?.menuActions) {\n            result.push(this.viewPaneContainer.menuActions.menuId);\n            if (this.viewPaneContainer.isViewMergedWithContainer()) {\n                result.push(this.viewPaneContainer.panes[0].menuActions.menuId);\n            }\n        }\n        return result;\n    }\n    getActions() {\n        const result = [];\n        if (this.viewPaneContainer?.menuActions) {\n            result.push(...this.viewPaneContainer.menuActions.getPrimaryActions());\n            if (this.viewPaneContainer.isViewMergedWithContainer()) {\n                const viewPane = this.viewPaneContainer.panes[0];\n                if (viewPane.shouldShowFilterInHeader()) {\n                    result.push(VIEWPANE_FILTER_ACTION);\n                }\n                result.push(...viewPane.menuActions.getPrimaryActions());\n            }\n        }\n        return result;\n    }\n    getSecondaryActions() {\n        if (!this.viewPaneContainer?.menuActions) {\n            return [];\n        }\n        const viewPaneActions = this.viewPaneContainer.isViewMergedWithContainer() ? this.viewPaneContainer.panes[0].menuActions.getSecondaryActions() : [];\n        let menuActions = this.viewPaneContainer.menuActions.getSecondaryActions();\n        const viewsSubmenuActionIndex = menuActions.findIndex(action => action instanceof SubmenuItemAction && action.item.submenu === ViewsSubMenu);\n        if (viewsSubmenuActionIndex !== -1) {\n            const viewsSubmenuAction = menuActions[viewsSubmenuActionIndex];\n            if (( viewsSubmenuAction.actions.some(({ enabled }) => enabled))) {\n                if (menuActions.length === 1 && viewPaneActions.length === 0) {\n                    menuActions = viewsSubmenuAction.actions.slice();\n                }\n                else if (viewsSubmenuActionIndex !== 0) {\n                    menuActions = [viewsSubmenuAction, ...menuActions.slice(0, viewsSubmenuActionIndex), ...menuActions.slice(viewsSubmenuActionIndex + 1)];\n                }\n            }\n            else {\n                menuActions.splice(viewsSubmenuActionIndex, 1);\n            }\n        }\n        if (menuActions.length && viewPaneActions.length) {\n            return [\n                ...menuActions,\n                ( new Separator()),\n                ...viewPaneActions\n            ];\n        }\n        return menuActions.length ? menuActions : viewPaneActions;\n    }\n    getActionViewItem(action) {\n        return this.viewPaneContainer?.getActionViewItem(action);\n    }\n    getTitle() {\n        return this.viewPaneContainer?.getTitle() ?? '';\n    }\n    focus() {\n        this.viewPaneContainer?.focus();\n    }\n};\nPaneComposite = ( __decorate([\n    ( __param(1, ITelemetryService)),\n    ( __param(2, IStorageService)),\n    ( __param(3, IInstantiationService)),\n    ( __param(4, IThemeService)),\n    ( __param(5, IContextMenuService)),\n    ( __param(6, IExtensionService)),\n    ( __param(7, IWorkspaceContextService))\n], PaneComposite));\nclass PaneCompositeDescriptor extends CompositeDescriptor {\n    static create(ctor, id, name, cssClass, order, requestedIndex, iconUrl) {\n        return ( new PaneCompositeDescriptor(ctor, id, name, cssClass, order, requestedIndex, iconUrl));\n    }\n    constructor(ctor, id, name, cssClass, order, requestedIndex, iconUrl) {\n        super(ctor, id, name, cssClass, order, requestedIndex);\n        this.iconUrl = iconUrl;\n    }\n}\nconst Extensions = {\n    Viewlets: 'workbench.contributions.viewlets',\n    Panels: 'workbench.contributions.panels',\n    Auxiliary: 'workbench.contributions.auxiliary',\n};\nclass PaneCompositeRegistry extends CompositeRegistry {\n    registerPaneComposite(descriptor) {\n        super.registerComposite(descriptor);\n    }\n    deregisterPaneComposite(id) {\n        super.deregisterComposite(id);\n    }\n    getPaneComposite(id) {\n        return this.getComposite(id);\n    }\n    getPaneComposites() {\n        return this.getComposites();\n    }\n}\nRegistry.add(Extensions.Viewlets, ( new PaneCompositeRegistry()));\nRegistry.add(Extensions.Panels, ( new PaneCompositeRegistry()));\nRegistry.add(Extensions.Auxiliary, ( new PaneCompositeRegistry()));\nexport { Extensions, PaneComposite, PaneCompositeDescriptor, PaneCompositeRegistry };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { IViewDescriptorService } from '../../../common/views.js';\nimport { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';\nimport { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { ViewPaneContainer } from './viewPaneContainer.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';\nlet FilterViewPaneContainer = class FilterViewPaneContainer extends ViewPaneContainer {\n    constructor(viewletId, onDidChangeFilterValue, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService, viewDescriptorService) {\n        super(viewletId, { mergeViewWithContainerWhenSingleView: false }, instantiationService, configurationService, layoutService, contextMenuService, telemetryService, extensionService, themeService, storageService, contextService, viewDescriptorService);\n        this.constantViewDescriptors = ( new Map());\n        this.allViews = ( new Map());\n        this._register(onDidChangeFilterValue(newFilterValue => {\n            this.filterValue = newFilterValue;\n            this.onFilterChanged(newFilterValue);\n        }));\n        this._register(this.onDidChangeViewVisibility(view => {\n            const descriptorMap = Array.from(this.allViews.entries()).find(entry => ( entry[1].has(view.id)));\n            if (descriptorMap && !this.filterValue?.includes(descriptorMap[0])) {\n                this.setFilter(descriptorMap[1].get(view.id));\n            }\n        }));\n        this._register(this.viewContainerModel.onDidChangeActiveViewDescriptors(() => {\n            this.updateAllViews(this.viewContainerModel.activeViewDescriptors);\n        }));\n    }\n    updateAllViews(viewDescriptors) {\n        viewDescriptors.forEach(descriptor => {\n            const filterOnValue = this.getFilterOn(descriptor);\n            if (!filterOnValue) {\n                return;\n            }\n            if (!( this.allViews.has(filterOnValue))) {\n                this.allViews.set(filterOnValue, ( new Map()));\n            }\n            this.allViews.get(filterOnValue).set(descriptor.id, descriptor);\n            if (this.filterValue && !this.filterValue.includes(filterOnValue) && this.panes.find(pane => pane.id === descriptor.id)) {\n                this.viewContainerModel.setVisible(descriptor.id, false);\n            }\n        });\n    }\n    addConstantViewDescriptors(constantViewDescriptors) {\n        constantViewDescriptors.forEach(viewDescriptor => this.constantViewDescriptors.set(viewDescriptor.id, viewDescriptor));\n    }\n    onFilterChanged(newFilterValue) {\n        if (this.allViews.size === 0) {\n            this.updateAllViews(this.viewContainerModel.activeViewDescriptors);\n        }\n        this.getViewsNotForTarget(newFilterValue).forEach(item => this.viewContainerModel.setVisible(item.id, false));\n        this.getViewsForTarget(newFilterValue).forEach(item => this.viewContainerModel.setVisible(item.id, true));\n    }\n    getViewsForTarget(target) {\n        const views = [];\n        for (let i = 0; i < target.length; i++) {\n            if (( this.allViews.has(target[i]))) {\n                views.push(...Array.from(( this.allViews.get(target[i]).values())));\n            }\n        }\n        return views;\n    }\n    getViewsNotForTarget(target) {\n        const iterable = ( this.allViews.keys());\n        let key = iterable.next();\n        let views = [];\n        while (!key.done) {\n            let isForTarget = false;\n            target.forEach(value => {\n                if (key.value === value) {\n                    isForTarget = true;\n                }\n            });\n            if (!isForTarget) {\n                views = views.concat(this.getViewsForTarget([key.value]));\n            }\n            key = iterable.next();\n        }\n        return views;\n    }\n    onDidAddViewDescriptors(added) {\n        const panes = super.onDidAddViewDescriptors(added);\n        for (let i = 0; i < added.length; i++) {\n            if (( this.constantViewDescriptors.has(added[i].viewDescriptor.id))) {\n                panes[i].setExpanded(false);\n            }\n        }\n        if (this.allViews.size === 0) {\n            this.updateAllViews(this.viewContainerModel.activeViewDescriptors);\n        }\n        return panes;\n    }\n};\nFilterViewPaneContainer = ( __decorate([\n    ( __param(2, IConfigurationService)),\n    ( __param(3, IWorkbenchLayoutService)),\n    ( __param(4, ITelemetryService)),\n    ( __param(5, IStorageService)),\n    ( __param(6, IInstantiationService)),\n    ( __param(7, IThemeService)),\n    ( __param(8, IContextMenuService)),\n    ( __param(9, IExtensionService)),\n    ( __param(10, IWorkspaceContextService)),\n    ( __param(11, IViewDescriptorService))\n], FilterViewPaneContainer));\nexport { FilterViewPaneContainer };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { Disposable, toDisposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { IViewDescriptorService, IViewsService } from '../../../common/views.js';\nimport { FocusedViewContext, getEnabledViewContainerContextKey, getVisbileViewContextKey } from '../../../common/contextkeys.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { RawContextKey, ContextKeyExpr, IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { isString } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { registerAction2, Action2, MenuRegistry, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';\nimport { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { PaneCompositeDescriptor, Extensions, PaneComposite } from '../../panecomposite.js';\nimport { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { Categories } from 'monaco-editor/esm/vs/platform/action/common/actionCommonCategories.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { FilterViewPaneContainer } from './viewsViewlet.js';\nimport { IPaneCompositePartService } from '../../../services/panecomposite/browser/panecomposite.js';\nlet ViewsService = class ViewsService extends Disposable {\n    constructor(viewDescriptorService, paneCompositeService, contextKeyService, layoutService) {\n        super();\n        this.viewDescriptorService = viewDescriptorService;\n        this.paneCompositeService = paneCompositeService;\n        this.contextKeyService = contextKeyService;\n        this.layoutService = layoutService;\n        this._onDidChangeViewVisibility = this._register(( new Emitter()));\n        this.onDidChangeViewVisibility = this._onDidChangeViewVisibility.event;\n        this._onDidChangeViewContainerVisibility = this._register(( new Emitter()));\n        this.onDidChangeViewContainerVisibility = this._onDidChangeViewContainerVisibility.event;\n        this.viewDisposable = ( new Map());\n        this.visibleViewContextKeys = ( new Map());\n        this.viewPaneContainers = ( new Map());\n        this._register(toDisposable(() => {\n            this.viewDisposable.forEach(disposable => disposable.dispose());\n            this.viewDisposable.clear();\n        }));\n        this.viewDescriptorService.viewContainers.forEach(viewContainer => this.onDidRegisterViewContainer(viewContainer, this.viewDescriptorService.getViewContainerLocation(viewContainer)));\n        this._register(this.viewDescriptorService.onDidChangeViewContainers(({ added, removed }) => this.onDidChangeContainers(added, removed)));\n        this._register(this.viewDescriptorService.onDidChangeContainerLocation(({ viewContainer, from, to }) => this.onDidChangeContainerLocation(viewContainer, from, to)));\n        this._register(this.paneCompositeService.onDidPaneCompositeOpen(e => this._onDidChangeViewContainerVisibility.fire({ id: e.composite.getId(), visible: true, location: e.viewContainerLocation })));\n        this._register(this.paneCompositeService.onDidPaneCompositeClose(e => this._onDidChangeViewContainerVisibility.fire({ id: e.composite.getId(), visible: false, location: e.viewContainerLocation })));\n        this.focusedViewContextKey = FocusedViewContext.bindTo(contextKeyService);\n    }\n    onViewsAdded(added) {\n        for (const view of added) {\n            this.onViewsVisibilityChanged(view, view.isBodyVisible());\n        }\n    }\n    onViewsVisibilityChanged(view, visible) {\n        this.getOrCreateActiveViewContextKey(view).set(visible);\n        this._onDidChangeViewVisibility.fire({ id: view.id, visible: visible });\n    }\n    onViewsRemoved(removed) {\n        for (const view of removed) {\n            this.onViewsVisibilityChanged(view, false);\n        }\n    }\n    getOrCreateActiveViewContextKey(view) {\n        const visibleContextKeyId = getVisbileViewContextKey(view.id);\n        let contextKey = this.visibleViewContextKeys.get(visibleContextKeyId);\n        if (!contextKey) {\n            contextKey = ( new RawContextKey(visibleContextKeyId, false)).bindTo(this.contextKeyService);\n            this.visibleViewContextKeys.set(visibleContextKeyId, contextKey);\n        }\n        return contextKey;\n    }\n    onDidChangeContainers(added, removed) {\n        for (const { container, location } of removed) {\n            this.deregisterPaneComposite(container, location);\n        }\n        for (const { container, location } of added) {\n            this.onDidRegisterViewContainer(container, location);\n        }\n    }\n    onDidRegisterViewContainer(viewContainer, viewContainerLocation) {\n        this.registerPaneComposite(viewContainer, viewContainerLocation);\n        const viewContainerModel = this.viewDescriptorService.getViewContainerModel(viewContainer);\n        this.onViewDescriptorsAdded(viewContainerModel.allViewDescriptors, viewContainer);\n        this._register(viewContainerModel.onDidChangeAllViewDescriptors(({ added, removed }) => {\n            this.onViewDescriptorsAdded(added, viewContainer);\n            this.onViewDescriptorsRemoved(removed);\n        }));\n        this._register(this.registerOpenViewContainerAction(viewContainer));\n    }\n    onDidChangeContainerLocation(viewContainer, from, to) {\n        this.deregisterPaneComposite(viewContainer, from);\n        this.registerPaneComposite(viewContainer, to);\n    }\n    onViewDescriptorsAdded(views, container) {\n        const location = this.viewDescriptorService.getViewContainerLocation(container);\n        if (location === null) {\n            return;\n        }\n        const composite = this.getComposite(container.id, location);\n        for (const viewDescriptor of views) {\n            const disposables = ( new DisposableStore());\n            disposables.add(this.registerOpenViewAction(viewDescriptor));\n            disposables.add(this.registerFocusViewAction(viewDescriptor, composite?.name && composite.name !== composite.id ? composite.name : Categories.View));\n            disposables.add(this.registerResetViewLocationAction(viewDescriptor));\n            this.viewDisposable.set(viewDescriptor, disposables);\n        }\n    }\n    onViewDescriptorsRemoved(views) {\n        for (const view of views) {\n            const disposable = this.viewDisposable.get(view);\n            if (disposable) {\n                disposable.dispose();\n                this.viewDisposable.delete(view);\n            }\n        }\n    }\n    async openComposite(compositeId, location, focus) {\n        return this.paneCompositeService.openPaneComposite(compositeId, location, focus);\n    }\n    getComposite(compositeId, location) {\n        return this.paneCompositeService.getPaneComposite(compositeId, location);\n    }\n    isViewContainerVisible(id) {\n        const viewContainer = this.viewDescriptorService.getViewContainerById(id);\n        if (viewContainer) {\n            const viewContainerLocation = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n            if (viewContainerLocation !== null) {\n                return this.paneCompositeService.getActivePaneComposite(viewContainerLocation)?.getId() === id;\n            }\n        }\n        return false;\n    }\n    getVisibleViewContainer(location) {\n        const viewContainerId = this.paneCompositeService.getActivePaneComposite(location)?.getId();\n        return viewContainerId ? this.viewDescriptorService.getViewContainerById(viewContainerId) : null;\n    }\n    getActiveViewPaneContainerWithId(viewContainerId) {\n        const viewContainer = this.viewDescriptorService.getViewContainerById(viewContainerId);\n        return viewContainer ? this.getActiveViewPaneContainer(viewContainer) : null;\n    }\n    async openViewContainer(id, focus) {\n        const viewContainer = this.viewDescriptorService.getViewContainerById(id);\n        if (viewContainer) {\n            const viewContainerLocation = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n            if (viewContainerLocation !== null) {\n                const paneComposite = await this.paneCompositeService.openPaneComposite(id, viewContainerLocation, focus);\n                return paneComposite || null;\n            }\n        }\n        return null;\n    }\n    async closeViewContainer(id) {\n        const viewContainer = this.viewDescriptorService.getViewContainerById(id);\n        if (viewContainer) {\n            const viewContainerLocation = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n            const isActive = viewContainerLocation !== null && this.paneCompositeService.getActivePaneComposite(viewContainerLocation);\n            if (viewContainerLocation !== null) {\n                return isActive ? this.layoutService.setPartHidden(true, getPartByLocation(viewContainerLocation)) : undefined;\n            }\n        }\n    }\n    isViewVisible(id) {\n        const activeView = this.getActiveViewWithId(id);\n        return activeView?.isBodyVisible() || false;\n    }\n    getActiveViewWithId(id) {\n        const viewContainer = this.viewDescriptorService.getViewContainerByViewId(id);\n        if (viewContainer) {\n            const activeViewPaneContainer = this.getActiveViewPaneContainer(viewContainer);\n            if (activeViewPaneContainer) {\n                return activeViewPaneContainer.getView(id);\n            }\n        }\n        return null;\n    }\n    getViewWithId(id) {\n        const viewContainer = this.viewDescriptorService.getViewContainerByViewId(id);\n        if (viewContainer) {\n            const viewPaneContainer = this.viewPaneContainers.get(viewContainer.id);\n            if (viewPaneContainer) {\n                return viewPaneContainer.getView(id);\n            }\n        }\n        return null;\n    }\n    async openView(id, focus) {\n        const viewContainer = this.viewDescriptorService.getViewContainerByViewId(id);\n        if (!viewContainer) {\n            return null;\n        }\n        if (!( this.viewDescriptorService.getViewContainerModel(viewContainer).activeViewDescriptors.some(viewDescriptor => viewDescriptor.id === id))) {\n            return null;\n        }\n        const location = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n        const compositeDescriptor = this.getComposite(viewContainer.id, location);\n        if (compositeDescriptor) {\n            const paneComposite = await this.openComposite(compositeDescriptor.id, location);\n            if (paneComposite && paneComposite.openView) {\n                return paneComposite.openView(id, focus) || null;\n            }\n            else if (focus) {\n                paneComposite?.focus();\n            }\n        }\n        return null;\n    }\n    closeView(id) {\n        const viewContainer = this.viewDescriptorService.getViewContainerByViewId(id);\n        if (viewContainer) {\n            const activeViewPaneContainer = this.getActiveViewPaneContainer(viewContainer);\n            if (activeViewPaneContainer) {\n                const view = activeViewPaneContainer.getView(id);\n                if (view) {\n                    if (activeViewPaneContainer.views.length === 1) {\n                        const location = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n                        if (location === 0 ) {\n                            this.layoutService.setPartHidden(true, \"workbench.parts.sidebar\" );\n                        }\n                        else if (location === 1  || location === 2 ) {\n                            this.paneCompositeService.hideActivePaneComposite(location);\n                        }\n                        if (this.focusedViewContextKey.get() === id) {\n                            this.focusedViewContextKey.reset();\n                        }\n                    }\n                    else {\n                        view.setExpanded(false);\n                    }\n                }\n            }\n        }\n    }\n    getActiveViewPaneContainer(viewContainer) {\n        const location = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n        if (location === null) {\n            return null;\n        }\n        const activePaneComposite = this.paneCompositeService.getActivePaneComposite(location);\n        if (activePaneComposite?.getId() === viewContainer.id) {\n            return activePaneComposite.getViewPaneContainer() || null;\n        }\n        return null;\n    }\n    getViewProgressIndicator(viewId) {\n        const viewContainer = this.viewDescriptorService.getViewContainerByViewId(viewId);\n        if (!viewContainer) {\n            return undefined;\n        }\n        const viewPaneContainer = this.viewPaneContainers.get(viewContainer.id);\n        if (!viewPaneContainer) {\n            return undefined;\n        }\n        const view = viewPaneContainer.getView(viewId);\n        if (!view) {\n            return undefined;\n        }\n        if (viewPaneContainer.isViewMergedWithContainer()) {\n            return this.getViewContainerProgressIndicator(viewContainer);\n        }\n        return view.getProgressIndicator();\n    }\n    getViewContainerProgressIndicator(viewContainer) {\n        const viewContainerLocation = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n        if (viewContainerLocation === null) {\n            return undefined;\n        }\n        return this.paneCompositeService.getProgressIndicator(viewContainer.id, viewContainerLocation);\n    }\n    registerOpenViewContainerAction(viewContainer) {\n        const disposables = ( new DisposableStore());\n        if (viewContainer.openCommandActionDescriptor) {\n            const { id, mnemonicTitle, keybindings, order } = viewContainer.openCommandActionDescriptor ?? { id: viewContainer.id };\n            const title = viewContainer.openCommandActionDescriptor.title ?? viewContainer.title;\n            const that = this;\n            disposables.add(registerAction2(class OpenViewContainerAction extends Action2 {\n                constructor() {\n                    super({\n                        id,\n                        get title() {\n                            const viewContainerLocation = that.viewDescriptorService.getViewContainerLocation(viewContainer);\n                            const localizedTitle = typeof title === 'string' ? title : title.value;\n                            const originalTitle = typeof title === 'string' ? title : title.original;\n                            if (viewContainerLocation === 0 ) {\n                                return { value: ( localize('show view', \"Show {0}\", localizedTitle)), original: `Show ${originalTitle}` };\n                            }\n                            else {\n                                return { value: ( localize('toggle view', \"Toggle {0}\", localizedTitle)), original: `Toggle ${originalTitle}` };\n                            }\n                        },\n                        category: Categories.View,\n                        precondition: ( ContextKeyExpr.has(getEnabledViewContainerContextKey(viewContainer.id))),\n                        keybinding: keybindings ? { ...keybindings, weight: 200  } : undefined,\n                        f1: true\n                    });\n                }\n                async run(serviceAccessor) {\n                    const editorGroupService = serviceAccessor.get(IEditorGroupsService);\n                    const viewDescriptorService = serviceAccessor.get(IViewDescriptorService);\n                    const layoutService = serviceAccessor.get(IWorkbenchLayoutService);\n                    const viewsService = serviceAccessor.get(IViewsService);\n                    const viewContainerLocation = viewDescriptorService.getViewContainerLocation(viewContainer);\n                    switch (viewContainerLocation) {\n                        case 2 :\n                        case 0 : {\n                            const part = viewContainerLocation === 0  ? \"workbench.parts.sidebar\"  : \"workbench.parts.auxiliarybar\" ;\n                            if (!viewsService.isViewContainerVisible(viewContainer.id) || !layoutService.hasFocus(part)) {\n                                await viewsService.openViewContainer(viewContainer.id, true);\n                            }\n                            else {\n                                editorGroupService.activeGroup.focus();\n                            }\n                            break;\n                        }\n                        case 1 :\n                            if (!viewsService.isViewContainerVisible(viewContainer.id) || !layoutService.hasFocus(\"workbench.parts.panel\" )) {\n                                await viewsService.openViewContainer(viewContainer.id, true);\n                            }\n                            else {\n                                viewsService.closeViewContainer(viewContainer.id);\n                            }\n                            break;\n                    }\n                }\n            }));\n            if (mnemonicTitle) {\n                const defaultLocation = this.viewDescriptorService.getDefaultViewContainerLocation(viewContainer);\n                disposables.add(MenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n                    command: {\n                        id,\n                        title: mnemonicTitle,\n                    },\n                    group: defaultLocation === 0  ? '3_views' : '4_panels',\n                    when: ( ContextKeyExpr.has(getEnabledViewContainerContextKey(viewContainer.id))),\n                    order: order ?? Number.MAX_VALUE\n                }));\n            }\n        }\n        return disposables;\n    }\n    registerOpenViewAction(viewDescriptor) {\n        const disposables = ( new DisposableStore());\n        if (viewDescriptor.openCommandActionDescriptor) {\n            const title = viewDescriptor.openCommandActionDescriptor.title ?? viewDescriptor.name;\n            const commandId = viewDescriptor.openCommandActionDescriptor.id;\n            const that = this;\n            disposables.add(registerAction2(class OpenViewAction extends Action2 {\n                constructor() {\n                    super({\n                        id: commandId,\n                        get title() {\n                            const viewContainerLocation = that.viewDescriptorService.getViewLocationById(viewDescriptor.id);\n                            const localizedTitle = typeof title === 'string' ? title : title.value;\n                            const originalTitle = typeof title === 'string' ? title : title.original;\n                            if (viewContainerLocation === 0 ) {\n                                return { value: ( localize('show view', \"Show {0}\", localizedTitle)), original: `Show ${originalTitle}` };\n                            }\n                            else {\n                                return { value: ( localize('toggle view', \"Toggle {0}\", localizedTitle)), original: `Toggle ${originalTitle}` };\n                            }\n                        },\n                        category: Categories.View,\n                        precondition: ( ContextKeyExpr.has(`${viewDescriptor.id}.active`)),\n                        keybinding: viewDescriptor.openCommandActionDescriptor.keybindings ? { ...viewDescriptor.openCommandActionDescriptor.keybindings, weight: 200  } : undefined,\n                        f1: true\n                    });\n                }\n                async run(serviceAccessor) {\n                    const editorGroupService = serviceAccessor.get(IEditorGroupsService);\n                    const viewDescriptorService = serviceAccessor.get(IViewDescriptorService);\n                    const layoutService = serviceAccessor.get(IWorkbenchLayoutService);\n                    const viewsService = serviceAccessor.get(IViewsService);\n                    const contextKeyService = serviceAccessor.get(IContextKeyService);\n                    const focusedViewId = FocusedViewContext.getValue(contextKeyService);\n                    if (focusedViewId === viewDescriptor.id) {\n                        const viewLocation = viewDescriptorService.getViewLocationById(viewDescriptor.id);\n                        if (viewDescriptorService.getViewLocationById(viewDescriptor.id) === 0 ) {\n                            editorGroupService.activeGroup.focus();\n                        }\n                        else if (viewLocation !== null) {\n                            layoutService.setPartHidden(true, getPartByLocation(viewLocation));\n                        }\n                    }\n                    else {\n                        viewsService.openView(viewDescriptor.id, true);\n                    }\n                }\n            }));\n            if (viewDescriptor.openCommandActionDescriptor.mnemonicTitle) {\n                const defaultViewContainer = this.viewDescriptorService.getDefaultContainerById(viewDescriptor.id);\n                if (defaultViewContainer) {\n                    const defaultLocation = this.viewDescriptorService.getDefaultViewContainerLocation(defaultViewContainer);\n                    disposables.add(MenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n                        command: {\n                            id: commandId,\n                            title: viewDescriptor.openCommandActionDescriptor.mnemonicTitle,\n                        },\n                        group: defaultLocation === 0  ? '3_views' : '4_panels',\n                        when: ( ContextKeyExpr.has(`${viewDescriptor.id}.active`)),\n                        order: viewDescriptor.openCommandActionDescriptor.order ?? Number.MAX_VALUE\n                    }));\n                }\n            }\n        }\n        return disposables;\n    }\n    registerFocusViewAction(viewDescriptor, category) {\n        return registerAction2(class FocusViewAction extends Action2 {\n            constructor() {\n                const title = ( localize(\n                    { key: 'focus view', comment: ['{0} indicates the name of the view to be focused.'] },\n                    \"Focus on {0} View\",\n                    viewDescriptor.name\n                ));\n                super({\n                    id: viewDescriptor.focusCommand ? viewDescriptor.focusCommand.id : `${viewDescriptor.id}.focus`,\n                    title: { original: `Focus on ${viewDescriptor.name} View`, value: title },\n                    category,\n                    menu: [{\n                            id: MenuId.CommandPalette,\n                            when: viewDescriptor.when,\n                        }],\n                    keybinding: {\n                        when: ( ContextKeyExpr.has(`${viewDescriptor.id}.active`)),\n                        weight: 200 ,\n                        primary: viewDescriptor.focusCommand?.keybindings?.primary,\n                        secondary: viewDescriptor.focusCommand?.keybindings?.secondary,\n                        linux: viewDescriptor.focusCommand?.keybindings?.linux,\n                        mac: viewDescriptor.focusCommand?.keybindings?.mac,\n                        win: viewDescriptor.focusCommand?.keybindings?.win\n                    },\n                    description: {\n                        description: title,\n                        args: [\n                            {\n                                name: 'focusOptions',\n                                description: 'Focus Options',\n                                schema: {\n                                    type: 'object',\n                                    properties: {\n                                        'preserveFocus': {\n                                            type: 'boolean',\n                                            default: false\n                                        }\n                                    },\n                                }\n                            }\n                        ]\n                    }\n                });\n            }\n            run(accessor, options) {\n                accessor.get(IViewsService).openView(viewDescriptor.id, !options?.preserveFocus);\n            }\n        });\n    }\n    registerResetViewLocationAction(viewDescriptor) {\n        return registerAction2(class ResetViewLocationAction extends Action2 {\n            constructor() {\n                super({\n                    id: `${viewDescriptor.id}.resetViewLocation`,\n                    title: {\n                        original: 'Reset Location',\n                        value: ( localize('resetViewLocation', \"Reset Location\"))\n                    },\n                    menu: [{\n                            id: MenuId.ViewTitleContext,\n                            when: ( ContextKeyExpr.or(( ContextKeyExpr.and(( ContextKeyExpr.equals('view', viewDescriptor.id)), ( ContextKeyExpr.equals(`${viewDescriptor.id}.defaultViewLocation`, false)))))),\n                            group: '1_hide',\n                            order: 2\n                        }],\n                });\n            }\n            run(accessor) {\n                const viewDescriptorService = accessor.get(IViewDescriptorService);\n                const defaultContainer = viewDescriptorService.getDefaultContainerById(viewDescriptor.id);\n                const containerModel = viewDescriptorService.getViewContainerModel(defaultContainer);\n                if (defaultContainer.hideIfEmpty && containerModel.visibleViewDescriptors.length === 0) {\n                    const defaultLocation = viewDescriptorService.getDefaultViewContainerLocation(defaultContainer);\n                    viewDescriptorService.moveViewContainerToLocation(defaultContainer, defaultLocation);\n                }\n                viewDescriptorService.moveViewsToContainer([viewDescriptor], viewDescriptorService.getDefaultContainerById(viewDescriptor.id));\n                accessor.get(IViewsService).openView(viewDescriptor.id, true);\n            }\n        });\n    }\n    registerPaneComposite(viewContainer, viewContainerLocation) {\n        const that = this;\n        let PaneContainer = class PaneContainer extends PaneComposite {\n            constructor(telemetryService, contextService, storageService, instantiationService, themeService, contextMenuService, extensionService) {\n                super(viewContainer.id, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService);\n            }\n            createViewPaneContainer(element) {\n                const viewPaneContainerDisposables = this._register(( new DisposableStore()));\n                const viewPaneContainer = that.createViewPaneContainer(element, viewContainer, viewContainerLocation, viewPaneContainerDisposables, this.instantiationService);\n                if (!(viewPaneContainer instanceof FilterViewPaneContainer)) {\n                    viewPaneContainerDisposables.add(Event.any(viewPaneContainer.onDidAddViews, viewPaneContainer.onDidRemoveViews, viewPaneContainer.onTitleAreaUpdate)(() => {\n                        this.updateTitleArea();\n                    }));\n                }\n                return viewPaneContainer;\n            }\n        };\n        PaneContainer = ( __decorate([\n            ( __param(0, ITelemetryService)),\n            ( __param(1, IWorkspaceContextService)),\n            ( __param(2, IStorageService)),\n            ( __param(3, IInstantiationService)),\n            ( __param(4, IThemeService)),\n            ( __param(5, IContextMenuService)),\n            ( __param(6, IExtensionService))\n        ], PaneContainer));\n        ( Registry.as(getPaneCompositeExtension(viewContainerLocation))).registerPaneComposite(PaneCompositeDescriptor.create(PaneContainer, viewContainer.id, typeof viewContainer.title === 'string' ? viewContainer.title : viewContainer.title.value, isString(viewContainer.icon) ? viewContainer.icon : undefined, viewContainer.order, viewContainer.requestedIndex, viewContainer.icon instanceof URI ? viewContainer.icon : undefined));\n    }\n    deregisterPaneComposite(viewContainer, viewContainerLocation) {\n        ( Registry.as(getPaneCompositeExtension(viewContainerLocation))).deregisterPaneComposite(viewContainer.id);\n    }\n    createViewPaneContainer(element, viewContainer, viewContainerLocation, disposables, instantiationService) {\n        const viewPaneContainer = instantiationService.createInstance(viewContainer.ctorDescriptor.ctor, ...(viewContainer.ctorDescriptor.staticArguments || []));\n        this.viewPaneContainers.set(viewPaneContainer.getId(), viewPaneContainer);\n        disposables.add(toDisposable(() => this.viewPaneContainers.delete(viewPaneContainer.getId())));\n        disposables.add(viewPaneContainer.onDidAddViews(views => this.onViewsAdded(views)));\n        disposables.add(viewPaneContainer.onDidChangeViewVisibility(view => this.onViewsVisibilityChanged(view, view.isBodyVisible())));\n        disposables.add(viewPaneContainer.onDidRemoveViews(views => this.onViewsRemoved(views)));\n        disposables.add(viewPaneContainer.onDidFocusView(view => this.focusedViewContextKey.set(view.id)));\n        disposables.add(viewPaneContainer.onDidBlurView(view => {\n            if (this.focusedViewContextKey.get() === view.id) {\n                this.focusedViewContextKey.reset();\n            }\n        }));\n        return viewPaneContainer;\n    }\n};\nViewsService = ( __decorate([\n    ( __param(0, IViewDescriptorService)),\n    ( __param(1, IPaneCompositePartService)),\n    ( __param(2, IContextKeyService)),\n    ( __param(3, IWorkbenchLayoutService))\n], ViewsService));\nfunction getPaneCompositeExtension(viewContainerLocation) {\n    switch (viewContainerLocation) {\n        case 2 :\n            return Extensions.Auxiliary;\n        case 1 :\n            return Extensions.Panels;\n        case 0 :\n        default:\n            return Extensions.Viewlets;\n    }\n}\nfunction getPartByLocation(viewContainerLocation) {\n    switch (viewContainerLocation) {\n        case 2 :\n            return \"workbench.parts.auxiliarybar\" ;\n        case 1 :\n            return \"workbench.parts.panel\" ;\n        case 0 :\n        default:\n            return \"workbench.parts.sidebar\" ;\n    }\n}\nexport { ViewsService, getPartByLocation };\n","import { refineServiceDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { isString, isBoolean } from 'monaco-editor/esm/vs/base/common/types.js';\nconst IWorkbenchThemeService = refineServiceDecorator(IThemeService);\nconst VS_LIGHT_THEME = 'vs';\nconst VS_DARK_THEME = 'vs-dark';\nconst VS_HC_THEME = 'hc-black';\nconst VS_HC_LIGHT_THEME = 'hc-light';\nconst THEME_SCOPE_OPEN_PAREN = '[';\nconst THEME_SCOPE_CLOSE_PAREN = ']';\nconst THEME_SCOPE_WILDCARD = '*';\nconst themeScopeRegex = /\\[(.+?)\\]/g;\nvar ThemeSettings;\n( (function(ThemeSettings) {\n    ThemeSettings[\"COLOR_THEME\"] = \"workbench.colorTheme\";\n    ThemeSettings[\"FILE_ICON_THEME\"] = \"workbench.iconTheme\";\n    ThemeSettings[\"PRODUCT_ICON_THEME\"] = \"workbench.productIconTheme\";\n    ThemeSettings[\"COLOR_CUSTOMIZATIONS\"] = \"workbench.colorCustomizations\";\n    ThemeSettings[\"TOKEN_COLOR_CUSTOMIZATIONS\"] = \"editor.tokenColorCustomizations\";\n    ThemeSettings[\"SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS\"] = \"editor.semanticTokenColorCustomizations\";\n    ThemeSettings[\"PREFERRED_DARK_THEME\"] = \"workbench.preferredDarkColorTheme\";\n    ThemeSettings[\"PREFERRED_LIGHT_THEME\"] = \"workbench.preferredLightColorTheme\";\n    ThemeSettings[\"PREFERRED_HC_DARK_THEME\"] = \"workbench.preferredHighContrastColorTheme\";\n    ThemeSettings[\"PREFERRED_HC_LIGHT_THEME\"] = \"workbench.preferredHighContrastLightColorTheme\";\n    ThemeSettings[\"DETECT_COLOR_SCHEME\"] = \"window.autoDetectColorScheme\";\n    ThemeSettings[\"DETECT_HC\"] = \"window.autoDetectHighContrast\";\n})(ThemeSettings || (ThemeSettings = {})));\nvar ThemeSettingDefaults;\n( (function(ThemeSettingDefaults) {\n    ThemeSettingDefaults[\"COLOR_THEME_DARK\"] = \"Default Dark Modern\";\n    ThemeSettingDefaults[\"COLOR_THEME_LIGHT\"] = \"Default Light Modern\";\n    ThemeSettingDefaults[\"COLOR_THEME_HC_DARK\"] = \"Default High Contrast\";\n    ThemeSettingDefaults[\"COLOR_THEME_HC_LIGHT\"] = \"Default High Contrast Light\";\n    ThemeSettingDefaults[\"COLOR_THEME_DARK_OLD\"] = \"Default Dark+\";\n    ThemeSettingDefaults[\"COLOR_THEME_LIGHT_OLD\"] = \"Default Light+\";\n    ThemeSettingDefaults[\"FILE_ICON_THEME\"] = \"vs-seti\";\n    ThemeSettingDefaults[\"PRODUCT_ICON_THEME\"] = \"Default\";\n})(ThemeSettingDefaults || (ThemeSettingDefaults = {})));\nconst COLOR_THEME_DARK_INITIAL_COLORS = {\n    'activityBar.background': '#181818',\n    'statusBar.background': '#181818',\n    'statusBar.noFolderBackground': '#1f1f1f',\n};\nconst COLOR_THEME_LIGHT_INITIAL_COLORS = {\n    'activityBar.background': '#f8f8f8',\n    'statusBar.background': '#f8f8f8',\n    'statusBar.noFolderBackground': '#f8f8f8'\n};\nvar ExtensionData;\n( (function(ExtensionData) {\n    function toJSONObject(d) {\n        return d && { _extensionId: d.extensionId, _extensionIsBuiltin: d.extensionIsBuiltin, _extensionName: d.extensionName, _extensionPublisher: d.extensionPublisher };\n    }\n    ExtensionData.toJSONObject = toJSONObject;\n    function fromJSONObject(o) {\n        if (o && isString(o._extensionId) && isBoolean(o._extensionIsBuiltin) && isString(o._extensionName) && isString(o._extensionPublisher)) {\n            return { extensionId: o._extensionId, extensionIsBuiltin: o._extensionIsBuiltin, extensionName: o._extensionName, extensionPublisher: o._extensionPublisher };\n        }\n        return undefined;\n    }\n    ExtensionData.fromJSONObject = fromJSONObject;\n    function fromName(publisher, name, isBuiltin = false) {\n        return { extensionPublisher: publisher, extensionId: `${publisher}.${name}`, extensionName: name, extensionIsBuiltin: isBuiltin };\n    }\n    ExtensionData.fromName = fromName;\n})(ExtensionData || (ExtensionData = {})));\nexport { COLOR_THEME_DARK_INITIAL_COLORS, COLOR_THEME_LIGHT_INITIAL_COLORS, ExtensionData, IWorkbenchThemeService, THEME_SCOPE_CLOSE_PAREN, THEME_SCOPE_OPEN_PAREN, THEME_SCOPE_WILDCARD, ThemeSettingDefaults, ThemeSettings, VS_DARK_THEME, VS_HC_LIGHT_THEME, VS_HC_THEME, VS_LIGHT_THEME, themeScopeRegex };\n"],"names":["PaneComposite","constructor","id","telemetryService","storageService","instantiationService","themeService","contextMenuService","extensionService","contextService","super","this","create","parent","viewPaneContainer","_register","createViewPaneContainer","onTitleAreaUpdate","updateTitleArea","setVisible","visible","layout","dimension","setBoundarySashes","sashes","getOptimalWidth","openView","focus","getViewPaneContainer","getActionsContext","getContextMenuActions","menuActions","getMenuIds","result","push","menuId","isViewMergedWithContainer","panes","getActions","getPrimaryActions","viewPane","shouldShowFilterInHeader","getSecondaryActions","viewPaneActions","viewsSubmenuActionIndex","findIndex","action","item","submenu","viewsSubmenuAction","actions","some","enabled","length","slice","splice","getActionViewItem","getTitle","PaneCompositeDescriptor","ctor","name","cssClass","order","requestedIndex","iconUrl","Extensions","Viewlets","Panels","Auxiliary","PaneCompositeRegistry","registerPaneComposite","descriptor","registerComposite","deregisterPaneComposite","deregisterComposite","getPaneComposite","getComposite","getPaneComposites","getComposites","add","FilterViewPaneContainer","viewletId","onDidChangeFilterValue","configurationService","layoutService","viewDescriptorService","mergeViewWithContainerWhenSingleView","constantViewDescriptors","Map","allViews","newFilterValue","filterValue","onFilterChanged","onDidChangeViewVisibility","view","descriptorMap","Array","from","entries","find","entry","has","includes","setFilter","get","viewContainerModel","onDidChangeActiveViewDescriptors","updateAllViews","activeViewDescriptors","viewDescriptors","forEach","filterOnValue","getFilterOn","set","pane","addConstantViewDescriptors","viewDescriptor","size","getViewsNotForTarget","getViewsForTarget","target","views","i","values","iterable","keys","key","next","done","isForTarget","value","concat","onDidAddViewDescriptors","added","setExpanded","ViewsService","paneCompositeService","contextKeyService","_onDidChangeViewVisibility","event","_onDidChangeViewContainerVisibility","onDidChangeViewContainerVisibility","viewDisposable","visibleViewContextKeys","viewPaneContainers","disposable","dispose","clear","viewContainers","viewContainer","onDidRegisterViewContainer","getViewContainerLocation","onDidChangeViewContainers","removed","onDidChangeContainers","onDidChangeContainerLocation","to","onDidPaneCompositeOpen","e","fire","composite","getId","location","viewContainerLocation","onDidPaneCompositeClose","focusedViewContextKey","bindTo","onViewsAdded","onViewsVisibilityChanged","isBodyVisible","getOrCreateActiveViewContextKey","onViewsRemoved","visibleContextKeyId","contextKey","container","getViewContainerModel","onViewDescriptorsAdded","allViewDescriptors","onDidChangeAllViewDescriptors","onViewDescriptorsRemoved","registerOpenViewContainerAction","disposables","registerOpenViewAction","registerFocusViewAction","View","registerResetViewLocationAction","delete","openComposite","compositeId","openPaneComposite","isViewContainerVisible","getViewContainerById","getActivePaneComposite","getVisibleViewContainer","viewContainerId","getActiveViewPaneContainerWithId","getActiveViewPaneContainer","openViewContainer","closeViewContainer","isActive","setPartHidden","getPartByLocation","undefined","isViewVisible","activeView","getActiveViewWithId","getViewContainerByViewId","activeViewPaneContainer","getView","getViewWithId","compositeDescriptor","paneComposite","closeView","hideActivePaneComposite","reset","activePaneComposite","getViewProgressIndicator","viewId","getViewContainerProgressIndicator","getProgressIndicator","openCommandActionDescriptor","mnemonicTitle","keybindings","title","that","localizedTitle","originalTitle","original","category","precondition","keybinding","weight","f1","run","serviceAccessor","editorGroupService","viewsService","part","hasFocus","activeGroup","defaultLocation","getDefaultViewContainerLocation","appendMenuItem","MenubarViewMenu","command","group","when","Number","MAX_VALUE","commandId","getViewLocationById","getValue","viewLocation","defaultViewContainer","getDefaultContainerById","comment","focusCommand","menu","CommandPalette","primary","secondary","linux","mac","win","description","args","schema","type","properties","default","accessor","options","preserveFocus","ViewTitleContext","or","and","equals","defaultContainer","containerModel","hideIfEmpty","visibleViewDescriptors","moveViewContainerToLocation","moveViewsToContainer","PaneContainer","element","viewPaneContainerDisposables","any","onDidAddViews","onDidRemoveViews","as","getPaneCompositeExtension","icon","createInstance","ctorDescriptor","staticArguments","onDidFocusView","onDidBlurView","IWorkbenchThemeService","VS_LIGHT_THEME","VS_DARK_THEME","VS_HC_THEME","VS_HC_LIGHT_THEME","THEME_SCOPE_OPEN_PAREN","THEME_SCOPE_CLOSE_PAREN","THEME_SCOPE_WILDCARD","themeScopeRegex","ThemeSettings","ThemeSettingDefaults","COLOR_THEME_DARK_INITIAL_COLORS","COLOR_THEME_LIGHT_INITIAL_COLORS","ExtensionData","toJSONObject","d","_extensionId","extensionId","_extensionIsBuiltin","extensionIsBuiltin","_extensionName","extensionName","_extensionPublisher","extensionPublisher","fromJSONObject","o","fromName","publisher","isBuiltin"],"sourceRoot":""}