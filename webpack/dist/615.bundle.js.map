{"version":3,"file":"615.bundle.js","mappings":"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","sources":["webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/preferences/browser/keybindingsEditorModel.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/preferences/browser/keybindingsEditorInput.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/preferences/common/preferencesEditorInput.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/preferences/common/preferencesValidation.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/preferences/common/preferencesModels.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/preferences/browser/preferencesService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/preferencesSearch.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/media/preferences.css.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/media/keybindingsEditor.css.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/media/keybindings.css.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/preferencesIcons.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/preferencesWidgets.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/keybindingWidgets.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput.css.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/keybindingsEditor.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/preferencesActions.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/preferencesRenderers.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/preferencesEditor.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/media/settingsEditor2.css.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/settingsLayout.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/platform/userDataSync/common/settingsMerge.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/settingsTreeModels.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/media/settingsWidgets.css.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/settingsWidgets.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/settingsTree.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/tocTree.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/settingsSearchMenu.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/settingsEditor2.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/common/preferencesContribution.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/preferences/browser/preferences.contribution.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/service-override/preferences.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/base/browser/ui/iconLabel/simpleIconLabel.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/codeeditor.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/style.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/configuration/common/configuration.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/keybinding/browser/unboundCommands.js"],"sourcesContent":["import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { coalesce, distinct } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport * as strings from 'monaco-editor/esm/vs/base/common/strings.js';\nimport { Language } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { or, matchesPrefix, matchesWords, matchesContiguousSubString, matchesCamelCase } from 'monaco-editor/esm/vs/base/common/filters.js';\nimport { UILabelProvider, AriaLabelProvider, UserSettingsLabelProvider } from 'monaco-editor/esm/vs/base/common/keybindingLabels.js';\nimport { MenuRegistry } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { EditorModel } from '../../../common/editor/editorModel.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { ResolvedKeybindingItem } from 'monaco-editor/esm/vs/platform/keybinding/common/resolvedKeybindingItem.js';\nimport { getAllUnboundCommands } from '../../keybinding/browser/unboundCommands.js';\nimport { isString, isEmptyObject } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { ExtensionIdentifier, ExtensionIdentifierMap } from 'monaco-editor/esm/vs/platform/extensions/common/extensions.js';\nconst KEYBINDING_ENTRY_TEMPLATE_ID = 'keybinding.entry.template';\nconst SOURCE_SYSTEM = ( localize('default', \"System\"));\nconst SOURCE_EXTENSION = ( localize('extension', \"Extension\"));\nconst SOURCE_USER = ( localize('user', \"User\"));\nconst wordFilter = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nconst SOURCE_REGEX = /@source:\\s*(user|default|system|extension)/i;\nconst EXTENSION_REGEX = /@ext:\\s*((\".+\")|([^\\s]+))/i;\nlet KeybindingsEditorModel = class KeybindingsEditorModel extends EditorModel {\n    constructor(os, keybindingsService, extensionService) {\n        super();\n        this.keybindingsService = keybindingsService;\n        this.extensionService = extensionService;\n        this._keybindingItems = [];\n        this._keybindingItemsSortedByPrecedence = [];\n        this.modifierLabels = {\n            ui: UILabelProvider.modifierLabels[os],\n            aria: AriaLabelProvider.modifierLabels[os],\n            user: UserSettingsLabelProvider.modifierLabels[os]\n        };\n    }\n    fetch(searchValue, sortByPrecedence = false) {\n        let keybindingItems = sortByPrecedence ? this._keybindingItemsSortedByPrecedence : this._keybindingItems;\n        const commandIdMatches = /@command:\\s*(.+)/i.exec(searchValue);\n        if (commandIdMatches && commandIdMatches[1]) {\n            return ( keybindingItems.filter(k => k.command === commandIdMatches[1])\n                .map(\n                keybindingItem => ({ id: KeybindingsEditorModel.getId(keybindingItem), keybindingItem, templateId: KEYBINDING_ENTRY_TEMPLATE_ID })\n            ));\n        }\n        if (SOURCE_REGEX.test(searchValue)) {\n            keybindingItems = this.filterBySource(keybindingItems, searchValue);\n            searchValue = searchValue.replace(SOURCE_REGEX, '');\n        }\n        else {\n            const extensionMatches = EXTENSION_REGEX.exec(searchValue);\n            if (extensionMatches && (extensionMatches[2] || extensionMatches[3])) {\n                const extensionId = extensionMatches[2] ? extensionMatches[2].substring(1, extensionMatches[2].length - 1) : extensionMatches[3];\n                keybindingItems = this.filterByExtension(keybindingItems, extensionId);\n                searchValue = searchValue.replace(EXTENSION_REGEX, '');\n            }\n            else {\n                const keybindingMatches = /@keybinding:\\s*((\\\".+\\\")|(\\S+))/i.exec(searchValue);\n                if (keybindingMatches && (keybindingMatches[2] || keybindingMatches[3])) {\n                    searchValue = keybindingMatches[2] || `\"${keybindingMatches[3]}\"`;\n                }\n            }\n        }\n        searchValue = searchValue.trim();\n        if (!searchValue) {\n            return ( keybindingItems.map(\n                keybindingItem => ({ id: KeybindingsEditorModel.getId(keybindingItem), keybindingItem, templateId: KEYBINDING_ENTRY_TEMPLATE_ID })\n            ));\n        }\n        return this.filterByText(keybindingItems, searchValue);\n    }\n    filterBySource(keybindingItems, searchValue) {\n        if (/@source:\\s*default/i.test(searchValue) || /@source:\\s*system/i.test(searchValue)) {\n            return keybindingItems.filter(k => k.source === SOURCE_SYSTEM);\n        }\n        if (/@source:\\s*user/i.test(searchValue)) {\n            return keybindingItems.filter(k => k.source === SOURCE_USER);\n        }\n        if (/@source:\\s*extension/i.test(searchValue)) {\n            return keybindingItems.filter(k => !isString(k.source) || k.source === SOURCE_EXTENSION);\n        }\n        return keybindingItems;\n    }\n    filterByExtension(keybindingItems, extension) {\n        extension = extension.toLowerCase().trim();\n        return keybindingItems.filter(k => !isString(k.source) && (ExtensionIdentifier.equals(k.source.identifier, extension) || k.source.displayName?.toLowerCase() === extension.toLowerCase()));\n    }\n    filterByText(keybindingItems, searchValue) {\n        const quoteAtFirstChar = searchValue.charAt(0) === '\"';\n        const quoteAtLastChar = searchValue.charAt(searchValue.length - 1) === '\"';\n        const completeMatch = quoteAtFirstChar && quoteAtLastChar;\n        if (quoteAtFirstChar) {\n            searchValue = searchValue.substring(1);\n        }\n        if (quoteAtLastChar) {\n            searchValue = searchValue.substring(0, searchValue.length - 1);\n        }\n        searchValue = searchValue.trim();\n        const result = [];\n        const words = searchValue.split(' ');\n        const keybindingWords = this.splitKeybindingWords(words);\n        for (const keybindingItem of keybindingItems) {\n            const keybindingMatches = ( new KeybindingItemMatches(\n                this.modifierLabels,\n                keybindingItem,\n                searchValue,\n                words,\n                keybindingWords,\n                completeMatch\n            ));\n            if (keybindingMatches.commandIdMatches\n                || keybindingMatches.commandLabelMatches\n                || keybindingMatches.commandDefaultLabelMatches\n                || keybindingMatches.sourceMatches\n                || keybindingMatches.whenMatches\n                || keybindingMatches.keybindingMatches\n                || keybindingMatches.extensionIdMatches\n                || keybindingMatches.extensionLabelMatches) {\n                result.push({\n                    id: KeybindingsEditorModel.getId(keybindingItem),\n                    templateId: KEYBINDING_ENTRY_TEMPLATE_ID,\n                    commandLabelMatches: keybindingMatches.commandLabelMatches || undefined,\n                    commandDefaultLabelMatches: keybindingMatches.commandDefaultLabelMatches || undefined,\n                    keybindingItem,\n                    keybindingMatches: keybindingMatches.keybindingMatches || undefined,\n                    commandIdMatches: keybindingMatches.commandIdMatches || undefined,\n                    sourceMatches: keybindingMatches.sourceMatches || undefined,\n                    whenMatches: keybindingMatches.whenMatches || undefined,\n                    extensionIdMatches: keybindingMatches.extensionIdMatches || undefined,\n                    extensionLabelMatches: keybindingMatches.extensionLabelMatches || undefined\n                });\n            }\n        }\n        return result;\n    }\n    splitKeybindingWords(wordsSeparatedBySpaces) {\n        const result = [];\n        for (const word of wordsSeparatedBySpaces) {\n            result.push(...coalesce(word.split('+')));\n        }\n        return result;\n    }\n    async resolve(actionLabels = ( new Map())) {\n        const extensions = ( new ExtensionIdentifierMap());\n        for (const extension of this.extensionService.extensions) {\n            extensions.set(extension.identifier, extension);\n        }\n        this._keybindingItemsSortedByPrecedence = [];\n        const boundCommands = ( new Map());\n        for (const keybinding of this.keybindingsService.getKeybindings()) {\n            if (keybinding.command) {\n                this._keybindingItemsSortedByPrecedence.push(KeybindingsEditorModel.toKeybindingEntry(keybinding.command, keybinding, actionLabels, extensions));\n                boundCommands.set(keybinding.command, true);\n            }\n        }\n        const commandsWithDefaultKeybindings = ( this.keybindingsService.getDefaultKeybindings().map(keybinding => keybinding.command));\n        for (const command of getAllUnboundCommands(boundCommands)) {\n            const keybindingItem = ( new ResolvedKeybindingItem(\n                undefined,\n                command,\n                null,\n                undefined,\n                commandsWithDefaultKeybindings.indexOf(command) === -1,\n                null,\n                false\n            ));\n            this._keybindingItemsSortedByPrecedence.push(KeybindingsEditorModel.toKeybindingEntry(command, keybindingItem, actionLabels, extensions));\n        }\n        this._keybindingItemsSortedByPrecedence = distinct(this._keybindingItemsSortedByPrecedence, keybindingItem => KeybindingsEditorModel.getId(keybindingItem));\n        this._keybindingItems = this._keybindingItemsSortedByPrecedence.slice(0).sort((a, b) => KeybindingsEditorModel.compareKeybindingData(a, b));\n        return super.resolve();\n    }\n    static getId(keybindingItem) {\n        return keybindingItem.command + (keybindingItem?.keybinding?.getAriaLabel() ?? '') + keybindingItem.when + (isString(keybindingItem.source) ? keybindingItem.source : keybindingItem.source.identifier.value);\n    }\n    static compareKeybindingData(a, b) {\n        if (a.keybinding && !b.keybinding) {\n            return -1;\n        }\n        if (b.keybinding && !a.keybinding) {\n            return 1;\n        }\n        if (a.commandLabel && !b.commandLabel) {\n            return -1;\n        }\n        if (b.commandLabel && !a.commandLabel) {\n            return 1;\n        }\n        if (a.commandLabel && b.commandLabel) {\n            if (a.commandLabel !== b.commandLabel) {\n                return a.commandLabel.localeCompare(b.commandLabel);\n            }\n        }\n        if (a.command === b.command) {\n            return a.keybindingItem.isDefault ? 1 : -1;\n        }\n        return a.command.localeCompare(b.command);\n    }\n    static toKeybindingEntry(command, keybindingItem, actions, extensions) {\n        const menuCommand = MenuRegistry.getCommand(command);\n        const editorActionLabel = actions.get(command);\n        let source = SOURCE_USER;\n        if (keybindingItem.isDefault) {\n            const extensionId = keybindingItem.extensionId ?? (keybindingItem.resolvedKeybinding ? undefined : menuCommand?.source?.id);\n            source = extensionId ? extensions.get(extensionId) ?? SOURCE_EXTENSION : SOURCE_SYSTEM;\n        }\n        return {\n            keybinding: keybindingItem.resolvedKeybinding,\n            keybindingItem,\n            command,\n            commandLabel: KeybindingsEditorModel.getCommandLabel(menuCommand, editorActionLabel),\n            commandDefaultLabel: KeybindingsEditorModel.getCommandDefaultLabel(menuCommand),\n            when: keybindingItem.when ? keybindingItem.when.serialize() : '',\n            source\n        };\n    }\n    static getCommandDefaultLabel(menuCommand) {\n        if (!Language.isDefaultVariant()) {\n            if (menuCommand && menuCommand.title && menuCommand.title.original) {\n                const category = menuCommand.category ? menuCommand.category.original : undefined;\n                const title = menuCommand.title.original;\n                return category ? ( localize('cat.title', \"{0}: {1}\", category, title)) : title;\n            }\n        }\n        return null;\n    }\n    static getCommandLabel(menuCommand, editorActionLabel) {\n        if (menuCommand) {\n            const category = menuCommand.category ? typeof menuCommand.category === 'string' ? menuCommand.category : menuCommand.category.value : undefined;\n            const title = typeof menuCommand.title === 'string' ? menuCommand.title : menuCommand.title.value;\n            return category ? ( localize('cat.title', \"{0}: {1}\", category, title)) : title;\n        }\n        if (editorActionLabel) {\n            return editorActionLabel;\n        }\n        return '';\n    }\n};\nKeybindingsEditorModel = ( __decorate([\n    ( __param(1, IKeybindingService)),\n    ( __param(2, IExtensionService))\n], KeybindingsEditorModel));\nclass KeybindingItemMatches {\n    constructor(modifierLabels, keybindingItem, searchValue, words, keybindingWords, completeMatch) {\n        this.modifierLabels = modifierLabels;\n        this.commandIdMatches = null;\n        this.commandLabelMatches = null;\n        this.commandDefaultLabelMatches = null;\n        this.sourceMatches = null;\n        this.whenMatches = null;\n        this.keybindingMatches = null;\n        this.extensionIdMatches = null;\n        this.extensionLabelMatches = null;\n        if (!completeMatch) {\n            this.commandIdMatches = this.matches(searchValue, keybindingItem.command, or(matchesWords, matchesCamelCase), words);\n            this.commandLabelMatches = keybindingItem.commandLabel ? this.matches(searchValue, keybindingItem.commandLabel, (word, wordToMatchAgainst) => matchesWords(word, keybindingItem.commandLabel, true), words) : null;\n            this.commandDefaultLabelMatches = keybindingItem.commandDefaultLabel ? this.matches(searchValue, keybindingItem.commandDefaultLabel, (word, wordToMatchAgainst) => matchesWords(word, keybindingItem.commandDefaultLabel, true), words) : null;\n            this.whenMatches = keybindingItem.when ? this.matches(null, keybindingItem.when, or(matchesWords, matchesCamelCase), words) : null;\n            if (isString(keybindingItem.source)) {\n                this.sourceMatches = this.matches(searchValue, keybindingItem.source, (word, wordToMatchAgainst) => matchesWords(word, keybindingItem.source, true), words);\n            }\n            else {\n                this.extensionLabelMatches = keybindingItem.source.displayName ? this.matches(searchValue, keybindingItem.source.displayName, (word, wordToMatchAgainst) => matchesWords(word, keybindingItem.commandLabel, true), words) : null;\n            }\n        }\n        this.keybindingMatches = keybindingItem.keybinding ? this.matchesKeybinding(keybindingItem.keybinding, searchValue, keybindingWords, completeMatch) : null;\n    }\n    matches(searchValue, wordToMatchAgainst, wordMatchesFilter, words) {\n        let matches = searchValue ? wordFilter(searchValue, wordToMatchAgainst) : null;\n        if (!matches) {\n            matches = this.matchesWords(words, wordToMatchAgainst, wordMatchesFilter);\n        }\n        if (matches) {\n            matches = this.filterAndSort(matches);\n        }\n        return matches;\n    }\n    matchesWords(words, wordToMatchAgainst, wordMatchesFilter) {\n        let matches = [];\n        for (const word of words) {\n            const wordMatches = wordMatchesFilter(word, wordToMatchAgainst);\n            if (wordMatches) {\n                matches = [...(matches || []), ...wordMatches];\n            }\n            else {\n                matches = null;\n                break;\n            }\n        }\n        return matches;\n    }\n    filterAndSort(matches) {\n        return distinct(matches, (a => a.start + '.' + a.end)).filter(match => !( matches.some(\n            m => !(m.start === match.start && m.end === match.end) && (m.start <= match.start && m.end >= match.end)\n        ))).sort((a, b) => a.start - b.start);\n    }\n    matchesKeybinding(keybinding, searchValue, words, completeMatch) {\n        const [firstPart, chordPart] = keybinding.getChords();\n        const userSettingsLabel = keybinding.getUserSettingsLabel();\n        const ariaLabel = keybinding.getAriaLabel();\n        const label = keybinding.getLabel();\n        if ((userSettingsLabel && strings.compareIgnoreCase(searchValue, userSettingsLabel) === 0)\n            || (ariaLabel && strings.compareIgnoreCase(searchValue, ariaLabel) === 0)\n            || (label && strings.compareIgnoreCase(searchValue, label) === 0)) {\n            return {\n                firstPart: this.createCompleteMatch(firstPart),\n                chordPart: this.createCompleteMatch(chordPart)\n            };\n        }\n        const firstPartMatch = {};\n        let chordPartMatch = {};\n        const matchedWords = [];\n        const firstPartMatchedWords = [];\n        let chordPartMatchedWords = [];\n        let matchFirstPart = true;\n        for (let index = 0; index < words.length; index++) {\n            const word = words[index];\n            let firstPartMatched = false;\n            let chordPartMatched = false;\n            matchFirstPart = matchFirstPart && !firstPartMatch.keyCode;\n            let matchChordPart = !chordPartMatch.keyCode;\n            if (matchFirstPart) {\n                firstPartMatched = this.matchPart(firstPart, firstPartMatch, word, completeMatch);\n                if (firstPartMatch.keyCode) {\n                    for (const cordPartMatchedWordIndex of chordPartMatchedWords) {\n                        if (firstPartMatchedWords.indexOf(cordPartMatchedWordIndex) === -1) {\n                            matchedWords.splice(matchedWords.indexOf(cordPartMatchedWordIndex), 1);\n                        }\n                    }\n                    chordPartMatch = {};\n                    chordPartMatchedWords = [];\n                    matchChordPart = false;\n                }\n            }\n            if (matchChordPart) {\n                chordPartMatched = this.matchPart(chordPart, chordPartMatch, word, completeMatch);\n            }\n            if (firstPartMatched) {\n                firstPartMatchedWords.push(index);\n            }\n            if (chordPartMatched) {\n                chordPartMatchedWords.push(index);\n            }\n            if (firstPartMatched || chordPartMatched) {\n                matchedWords.push(index);\n            }\n            matchFirstPart = matchFirstPart && this.isModifier(word);\n        }\n        if (matchedWords.length !== words.length) {\n            return null;\n        }\n        if (completeMatch) {\n            if (!this.isCompleteMatch(firstPart, firstPartMatch)) {\n                return null;\n            }\n            if (!isEmptyObject(chordPartMatch) && !this.isCompleteMatch(chordPart, chordPartMatch)) {\n                return null;\n            }\n        }\n        return this.hasAnyMatch(firstPartMatch) || this.hasAnyMatch(chordPartMatch) ? { firstPart: firstPartMatch, chordPart: chordPartMatch } : null;\n    }\n    matchPart(chord, match, word, completeMatch) {\n        let matched = false;\n        if (this.matchesMetaModifier(chord, word)) {\n            matched = true;\n            match.metaKey = true;\n        }\n        if (this.matchesCtrlModifier(chord, word)) {\n            matched = true;\n            match.ctrlKey = true;\n        }\n        if (this.matchesShiftModifier(chord, word)) {\n            matched = true;\n            match.shiftKey = true;\n        }\n        if (this.matchesAltModifier(chord, word)) {\n            matched = true;\n            match.altKey = true;\n        }\n        if (this.matchesKeyCode(chord, word, completeMatch)) {\n            match.keyCode = true;\n            matched = true;\n        }\n        return matched;\n    }\n    matchesKeyCode(chord, word, completeMatch) {\n        if (!chord) {\n            return false;\n        }\n        const ariaLabel = chord.keyAriaLabel || '';\n        if (completeMatch || ariaLabel.length === 1 || word.length === 1) {\n            if (strings.compareIgnoreCase(ariaLabel, word) === 0) {\n                return true;\n            }\n        }\n        else {\n            if (matchesContiguousSubString(word, ariaLabel)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    matchesMetaModifier(chord, word) {\n        if (!chord) {\n            return false;\n        }\n        if (!chord.metaKey) {\n            return false;\n        }\n        return this.wordMatchesMetaModifier(word);\n    }\n    matchesCtrlModifier(chord, word) {\n        if (!chord) {\n            return false;\n        }\n        if (!chord.ctrlKey) {\n            return false;\n        }\n        return this.wordMatchesCtrlModifier(word);\n    }\n    matchesShiftModifier(chord, word) {\n        if (!chord) {\n            return false;\n        }\n        if (!chord.shiftKey) {\n            return false;\n        }\n        return this.wordMatchesShiftModifier(word);\n    }\n    matchesAltModifier(chord, word) {\n        if (!chord) {\n            return false;\n        }\n        if (!chord.altKey) {\n            return false;\n        }\n        return this.wordMatchesAltModifier(word);\n    }\n    hasAnyMatch(keybindingMatch) {\n        return !!keybindingMatch.altKey ||\n            !!keybindingMatch.ctrlKey ||\n            !!keybindingMatch.metaKey ||\n            !!keybindingMatch.shiftKey ||\n            !!keybindingMatch.keyCode;\n    }\n    isCompleteMatch(chord, match) {\n        if (!chord) {\n            return true;\n        }\n        if (!match.keyCode) {\n            return false;\n        }\n        if (chord.metaKey && !match.metaKey) {\n            return false;\n        }\n        if (chord.altKey && !match.altKey) {\n            return false;\n        }\n        if (chord.ctrlKey && !match.ctrlKey) {\n            return false;\n        }\n        if (chord.shiftKey && !match.shiftKey) {\n            return false;\n        }\n        return true;\n    }\n    createCompleteMatch(chord) {\n        const match = {};\n        if (chord) {\n            match.keyCode = true;\n            if (chord.metaKey) {\n                match.metaKey = true;\n            }\n            if (chord.altKey) {\n                match.altKey = true;\n            }\n            if (chord.ctrlKey) {\n                match.ctrlKey = true;\n            }\n            if (chord.shiftKey) {\n                match.shiftKey = true;\n            }\n        }\n        return match;\n    }\n    isModifier(word) {\n        if (this.wordMatchesAltModifier(word)) {\n            return true;\n        }\n        if (this.wordMatchesCtrlModifier(word)) {\n            return true;\n        }\n        if (this.wordMatchesMetaModifier(word)) {\n            return true;\n        }\n        if (this.wordMatchesShiftModifier(word)) {\n            return true;\n        }\n        return false;\n    }\n    wordMatchesAltModifier(word) {\n        if (strings.equalsIgnoreCase(this.modifierLabels.ui.altKey, word)) {\n            return true;\n        }\n        if (strings.equalsIgnoreCase(this.modifierLabels.aria.altKey, word)) {\n            return true;\n        }\n        if (strings.equalsIgnoreCase(this.modifierLabels.user.altKey, word)) {\n            return true;\n        }\n        if (strings.equalsIgnoreCase(( localize('option', \"option\")), word)) {\n            return true;\n        }\n        return false;\n    }\n    wordMatchesCtrlModifier(word) {\n        if (strings.equalsIgnoreCase(this.modifierLabels.ui.ctrlKey, word)) {\n            return true;\n        }\n        if (strings.equalsIgnoreCase(this.modifierLabels.aria.ctrlKey, word)) {\n            return true;\n        }\n        if (strings.equalsIgnoreCase(this.modifierLabels.user.ctrlKey, word)) {\n            return true;\n        }\n        return false;\n    }\n    wordMatchesMetaModifier(word) {\n        if (strings.equalsIgnoreCase(this.modifierLabels.ui.metaKey, word)) {\n            return true;\n        }\n        if (strings.equalsIgnoreCase(this.modifierLabels.aria.metaKey, word)) {\n            return true;\n        }\n        if (strings.equalsIgnoreCase(this.modifierLabels.user.metaKey, word)) {\n            return true;\n        }\n        if (strings.equalsIgnoreCase(( localize('meta', \"meta\")), word)) {\n            return true;\n        }\n        return false;\n    }\n    wordMatchesShiftModifier(word) {\n        if (strings.equalsIgnoreCase(this.modifierLabels.ui.shiftKey, word)) {\n            return true;\n        }\n        if (strings.equalsIgnoreCase(this.modifierLabels.aria.shiftKey, word)) {\n            return true;\n        }\n        if (strings.equalsIgnoreCase(this.modifierLabels.user.shiftKey, word)) {\n            return true;\n        }\n        return false;\n    }\n}\nexport { KEYBINDING_ENTRY_TEMPLATE_ID, KeybindingsEditorModel };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { OS } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { KeybindingsEditorModel } from './keybindingsEditorModel.js';\nlet KeybindingsEditorInput = class KeybindingsEditorInput extends EditorInput {\n    static { this.ID = 'workbench.input.keybindings'; }\n    constructor(instantiationService) {\n        super();\n        this.searchOptions = null;\n        this.resource = undefined;\n        this.keybindingsModel = instantiationService.createInstance(KeybindingsEditorModel, OS);\n    }\n    get typeId() {\n        return KeybindingsEditorInput.ID;\n    }\n    getName() {\n        return ( nls.localize('keybindingsInputName', \"Keyboard Shortcuts\"));\n    }\n    async resolve() {\n        return this.keybindingsModel;\n    }\n    matches(otherInput) {\n        return otherInput instanceof KeybindingsEditorInput;\n    }\n    dispose() {\n        this.keybindingsModel.dispose();\n        super.dispose();\n    }\n};\nKeybindingsEditorInput = ( __decorate([\n    ( __param(0, IInstantiationService))\n], KeybindingsEditorInput));\nexport { KeybindingsEditorInput };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { IPreferencesService } from './preferences.js';\nlet SettingsEditor2Input = class SettingsEditor2Input extends EditorInput {\n    static { this.ID = 'workbench.input.settings2'; }\n    constructor(_preferencesService) {\n        super();\n        this.resource = ( URI.from({\n            scheme: Schemas.vscodeSettings,\n            path: `settingseditor`\n        }));\n        this._settingsModel = _preferencesService.createSettings2EditorModel();\n    }\n    matches(otherInput) {\n        return super.matches(otherInput) || otherInput instanceof SettingsEditor2Input;\n    }\n    get typeId() {\n        return SettingsEditor2Input.ID;\n    }\n    getName() {\n        return ( nls.localize('settingsEditor2InputName', \"Settings\"));\n    }\n    async resolve() {\n        return this._settingsModel;\n    }\n    dispose() {\n        this._settingsModel.dispose();\n        super.dispose();\n    }\n};\nSettingsEditor2Input = ( __decorate([\n    ( __param(0, IPreferencesService))\n], SettingsEditor2Input));\nexport { SettingsEditor2Input };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { Color } from 'monaco-editor/esm/vs/base/common/color.js';\nimport { isStringArray, isString, isUndefinedOrNull, isObject } from 'monaco-editor/esm/vs/base/common/types.js';\nfunction canBeType(propTypes, ...types) {\n    return ( types.some(t => propTypes.includes(t)));\n}\nfunction isNullOrEmpty(value) {\n    return value === '' || isUndefinedOrNull(value);\n}\nfunction createValidator(prop) {\n    const type = Array.isArray(prop.type) ? prop.type : [prop.type];\n    const isNullable = canBeType(type, 'null');\n    const isNumeric = (canBeType(type, 'number') || canBeType(type, 'integer')) && (type.length === 1 || type.length === 2 && isNullable);\n    const numericValidations = getNumericValidators(prop);\n    const stringValidations = getStringValidators(prop);\n    const arrayValidator = getArrayValidator(prop);\n    const objectValidator = getObjectValidator(prop);\n    return value => {\n        if (isNullable && isNullOrEmpty(value)) {\n            return '';\n        }\n        const errors = [];\n        if (arrayValidator) {\n            const err = arrayValidator(value);\n            if (err) {\n                errors.push(err);\n            }\n        }\n        if (objectValidator) {\n            const err = objectValidator(value);\n            if (err) {\n                errors.push(err);\n            }\n        }\n        if (prop.type === 'boolean' && value !== true && value !== false) {\n            errors.push(( nls.localize('validations.booleanIncorrectType', 'Incorrect type. Expected \"boolean\".')));\n        }\n        if (isNumeric) {\n            if (isNullOrEmpty(value) || typeof value === 'boolean' || Array.isArray(value) || isNaN(+value)) {\n                errors.push(( nls.localize('validations.expectedNumeric', \"Value must be a number.\")));\n            }\n            else {\n                errors.push(...( numericValidations.filter(validator => !validator.isValid(+value)).map(validator => validator.message)));\n            }\n        }\n        if (prop.type === 'string') {\n            if (prop.enum && !isStringArray(prop.enum)) {\n                errors.push(( nls.localize(\n                    'validations.stringIncorrectEnumOptions',\n                    'The enum options should be strings, but there is a non-string option. Please file an issue with the extension author.'\n                )));\n            }\n            else if (!isString(value)) {\n                errors.push(( nls.localize('validations.stringIncorrectType', 'Incorrect type. Expected \"string\".')));\n            }\n            else {\n                errors.push(...( stringValidations.filter(validator => !validator.isValid(value)).map(validator => validator.message)));\n            }\n        }\n        if (errors.length) {\n            return prop.errorMessage ? [prop.errorMessage, ...errors].join(' ') : errors.join(' ');\n        }\n        return '';\n    };\n}\nfunction getInvalidTypeError(value, type) {\n    if (typeof type === 'undefined') {\n        return;\n    }\n    const typeArr = Array.isArray(type) ? type : [type];\n    if (!( typeArr.some(_type => valueValidatesAsType(value, _type)))) {\n        return ( nls.localize(\n            'invalidTypeError',\n            \"Setting has an invalid type, expected {0}. Fix in JSON.\",\n            JSON.stringify(type)\n        ));\n    }\n    return;\n}\nfunction valueValidatesAsType(value, type) {\n    const valueType = typeof value;\n    if (type === 'boolean') {\n        return valueType === 'boolean';\n    }\n    else if (type === 'object') {\n        return value && !Array.isArray(value) && valueType === 'object';\n    }\n    else if (type === 'null') {\n        return value === null;\n    }\n    else if (type === 'array') {\n        return Array.isArray(value);\n    }\n    else if (type === 'string') {\n        return valueType === 'string';\n    }\n    else if (type === 'number' || type === 'integer') {\n        return valueType === 'number';\n    }\n    return true;\n}\nfunction getStringValidators(prop) {\n    const uriRegex = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n    let patternRegex;\n    if (typeof prop.pattern === 'string') {\n        patternRegex = ( new RegExp(prop.pattern));\n    }\n    return [\n        {\n            enabled: prop.maxLength !== undefined,\n            isValid: ((value) => value.length <= prop.maxLength),\n            message: ( nls.localize(\n                'validations.maxLength',\n                \"Value must be {0} or fewer characters long.\",\n                prop.maxLength\n            ))\n        },\n        {\n            enabled: prop.minLength !== undefined,\n            isValid: ((value) => value.length >= prop.minLength),\n            message: ( nls.localize(\n                'validations.minLength',\n                \"Value must be {0} or more characters long.\",\n                prop.minLength\n            ))\n        },\n        {\n            enabled: patternRegex !== undefined,\n            isValid: ((value) => patternRegex.test(value)),\n            message: prop.patternErrorMessage || ( nls.localize('validations.regex', \"Value must match regex `{0}`.\", prop.pattern))\n        },\n        {\n            enabled: prop.format === 'color-hex',\n            isValid: ((value) => Color.Format.CSS.parseHex(value)),\n            message: ( nls.localize(\n                'validations.colorFormat',\n                \"Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA.\"\n            ))\n        },\n        {\n            enabled: prop.format === 'uri' || prop.format === 'uri-reference',\n            isValid: ((value) => !!value.length),\n            message: ( nls.localize('validations.uriEmpty', \"URI expected.\"))\n        },\n        {\n            enabled: prop.format === 'uri' || prop.format === 'uri-reference',\n            isValid: ((value) => uriRegex.test(value)),\n            message: ( nls.localize('validations.uriMissing', \"URI is expected.\"))\n        },\n        {\n            enabled: prop.format === 'uri',\n            isValid: ((value) => {\n                const matches = value.match(uriRegex);\n                return !!(matches && matches[2]);\n            }),\n            message: ( nls.localize('validations.uriSchemeMissing', \"URI with a scheme is expected.\"))\n        },\n        {\n            enabled: prop.enum !== undefined,\n            isValid: ((value) => {\n                return prop.enum.includes(value);\n            }),\n            message: ( nls.localize(\n                'validations.invalidStringEnumValue',\n                \"Value is not accepted. Valid values: {0}.\",\n                prop.enum ? ( prop.enum.map(key => `\"${key}\"`)).join(', ') : '[]'\n            ))\n        }\n    ].filter(validation => validation.enabled);\n}\nfunction getNumericValidators(prop) {\n    const type = Array.isArray(prop.type) ? prop.type : [prop.type];\n    const isNullable = canBeType(type, 'null');\n    const isIntegral = (canBeType(type, 'integer')) && (type.length === 1 || type.length === 2 && isNullable);\n    const isNumeric = canBeType(type, 'number', 'integer') && (type.length === 1 || type.length === 2 && isNullable);\n    if (!isNumeric) {\n        return [];\n    }\n    let exclusiveMax;\n    let exclusiveMin;\n    if (typeof prop.exclusiveMaximum === 'boolean') {\n        exclusiveMax = prop.exclusiveMaximum ? prop.maximum : undefined;\n    }\n    else {\n        exclusiveMax = prop.exclusiveMaximum;\n    }\n    if (typeof prop.exclusiveMinimum === 'boolean') {\n        exclusiveMin = prop.exclusiveMinimum ? prop.minimum : undefined;\n    }\n    else {\n        exclusiveMin = prop.exclusiveMinimum;\n    }\n    return [\n        {\n            enabled: exclusiveMax !== undefined && (prop.maximum === undefined || exclusiveMax <= prop.maximum),\n            isValid: ((value) => value < exclusiveMax),\n            message: ( nls.localize(\n                'validations.exclusiveMax',\n                \"Value must be strictly less than {0}.\",\n                exclusiveMax\n            ))\n        },\n        {\n            enabled: exclusiveMin !== undefined && (prop.minimum === undefined || exclusiveMin >= prop.minimum),\n            isValid: ((value) => value > exclusiveMin),\n            message: ( nls.localize(\n                'validations.exclusiveMin',\n                \"Value must be strictly greater than {0}.\",\n                exclusiveMin\n            ))\n        },\n        {\n            enabled: prop.maximum !== undefined && (exclusiveMax === undefined || exclusiveMax > prop.maximum),\n            isValid: ((value) => value <= prop.maximum),\n            message: ( nls.localize(\n                'validations.max',\n                \"Value must be less than or equal to {0}.\",\n                prop.maximum\n            ))\n        },\n        {\n            enabled: prop.minimum !== undefined && (exclusiveMin === undefined || exclusiveMin < prop.minimum),\n            isValid: ((value) => value >= prop.minimum),\n            message: ( nls.localize(\n                'validations.min',\n                \"Value must be greater than or equal to {0}.\",\n                prop.minimum\n            ))\n        },\n        {\n            enabled: prop.multipleOf !== undefined,\n            isValid: ((value) => value % prop.multipleOf === 0),\n            message: ( nls.localize(\n                'validations.multipleOf',\n                \"Value must be a multiple of {0}.\",\n                prop.multipleOf\n            ))\n        },\n        {\n            enabled: isIntegral,\n            isValid: ((value) => value % 1 === 0),\n            message: ( nls.localize('validations.expectedInteger', \"Value must be an integer.\"))\n        },\n    ].filter(validation => validation.enabled);\n}\nfunction getArrayValidator(prop) {\n    if (prop.type === 'array' && prop.items && !Array.isArray(prop.items)) {\n        const propItems = prop.items;\n        if (propItems && !Array.isArray(propItems.type)) {\n            const withQuotes = (s) => `'` + s + `'`;\n            return value => {\n                if (!value) {\n                    return null;\n                }\n                let message = '';\n                if (!Array.isArray(value)) {\n                    message += ( nls.localize('validations.arrayIncorrectType', 'Incorrect type. Expected an array.'));\n                    message += '\\n';\n                    return message;\n                }\n                const arrayValue = value;\n                if (prop.uniqueItems) {\n                    if (( new Set(arrayValue)).size < arrayValue.length) {\n                        message += ( nls.localize('validations.stringArrayUniqueItems', 'Array has duplicate items'));\n                        message += '\\n';\n                    }\n                }\n                if (prop.minItems && arrayValue.length < prop.minItems) {\n                    message += ( nls.localize(\n                        'validations.stringArrayMinItem',\n                        'Array must have at least {0} items',\n                        prop.minItems\n                    ));\n                    message += '\\n';\n                }\n                if (prop.maxItems && arrayValue.length > prop.maxItems) {\n                    message += ( nls.localize(\n                        'validations.stringArrayMaxItem',\n                        'Array must have at most {0} items',\n                        prop.maxItems\n                    ));\n                    message += '\\n';\n                }\n                if (propItems.type === 'string') {\n                    if (!isStringArray(arrayValue)) {\n                        message += ( nls.localize(\n                            'validations.stringArrayIncorrectType',\n                            'Incorrect type. Expected a string array.'\n                        ));\n                        message += '\\n';\n                        return message;\n                    }\n                    if (typeof propItems.pattern === 'string') {\n                        const patternRegex = ( new RegExp(propItems.pattern));\n                        arrayValue.forEach(v => {\n                            if (!patternRegex.test(v)) {\n                                message +=\n                                    propItems.patternErrorMessage ||\n                                        ( nls.localize(\n                                            'validations.stringArrayItemPattern',\n                                            'Value {0} must match regex {1}.',\n                                            withQuotes(v),\n                                            withQuotes(propItems.pattern)\n                                        ));\n                            }\n                        });\n                    }\n                    const propItemsEnum = propItems.enum;\n                    if (propItemsEnum) {\n                        arrayValue.forEach(v => {\n                            if (propItemsEnum.indexOf(v) === -1) {\n                                message += ( nls.localize(\n                                    'validations.stringArrayItemEnum',\n                                    'Value {0} is not one of {1}',\n                                    withQuotes(v),\n                                    '[' + ( propItemsEnum.map(withQuotes)).join(', ') + ']'\n                                ));\n                                message += '\\n';\n                            }\n                        });\n                    }\n                }\n                else if (propItems.type === 'integer' || propItems.type === 'number') {\n                    arrayValue.forEach(v => {\n                        const errorMessage = getErrorsForSchema(propItems, v);\n                        if (errorMessage) {\n                            message += `${v}: ${errorMessage}\\n`;\n                        }\n                    });\n                }\n                return message;\n            };\n        }\n    }\n    return null;\n}\nfunction getObjectValidator(prop) {\n    if (prop.type === 'object') {\n        const { properties, patternProperties, additionalProperties } = prop;\n        return value => {\n            if (!value) {\n                return null;\n            }\n            const errors = [];\n            if (!isObject(value)) {\n                errors.push(( nls.localize('validations.objectIncorrectType', 'Incorrect type. Expected an object.')));\n            }\n            else {\n                ( Object.keys(value)).forEach((key) => {\n                    const data = value[key];\n                    if (properties && key in properties) {\n                        const errorMessage = getErrorsForSchema(properties[key], data);\n                        if (errorMessage) {\n                            errors.push(`${key}: ${errorMessage}\\n`);\n                        }\n                        return;\n                    }\n                    if (patternProperties) {\n                        for (const pattern in patternProperties) {\n                            if (RegExp(pattern).test(key)) {\n                                const errorMessage = getErrorsForSchema(patternProperties[pattern], data);\n                                if (errorMessage) {\n                                    errors.push(`${key}: ${errorMessage}\\n`);\n                                }\n                                return;\n                            }\n                        }\n                    }\n                    if (additionalProperties === false) {\n                        errors.push(( nls.localize('validations.objectPattern', 'Property {0} is not allowed.\\n', key)));\n                    }\n                    else if (typeof additionalProperties === 'object') {\n                        const errorMessage = getErrorsForSchema(additionalProperties, data);\n                        if (errorMessage) {\n                            errors.push(`${key}: ${errorMessage}\\n`);\n                        }\n                    }\n                });\n            }\n            if (errors.length) {\n                return prop.errorMessage ? [prop.errorMessage, ...errors].join(' ') : errors.join(' ');\n            }\n            return '';\n        };\n    }\n    return null;\n}\nfunction getErrorsForSchema(propertySchema, data) {\n    const validator = createValidator(propertySchema);\n    const errorMessage = validator(data);\n    return errorMessage;\n}\nexport { createValidator, getInvalidTypeError };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { tail, flatten, coalesce } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { visit } from 'monaco-editor/esm/vs/base/common/json.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Range } from 'monaco-editor/esm/vs/editor/common/core/range.js';\nimport { Selection } from 'monaco-editor/esm/vs/editor/common/core/selection.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { Extensions, OVERRIDE_PROPERTY_REGEX } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { EditorModel } from '../../../common/editor/editorModel.js';\nimport { SettingMatchType } from './preferences.js';\nimport { withNullAsUndefined } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { FOLDER_SCOPES, WORKSPACE_SCOPES } from '../../configuration/common/configuration.js';\nimport { createValidator } from './preferencesValidation.js';\nconst nullRange = { startLineNumber: -1, startColumn: -1, endLineNumber: -1, endColumn: -1 };\nfunction isNullRange(range) { return range.startLineNumber === -1 && range.startColumn === -1 && range.endLineNumber === -1 && range.endColumn === -1; }\nclass AbstractSettingsModel extends EditorModel {\n    constructor() {\n        super(...arguments);\n        this._currentResultGroups = ( new Map());\n    }\n    updateResultGroup(id, resultGroup) {\n        if (resultGroup) {\n            this._currentResultGroups.set(id, resultGroup);\n        }\n        else {\n            this._currentResultGroups.delete(id);\n        }\n        this.removeDuplicateResults();\n        return this.update();\n    }\n    removeDuplicateResults() {\n        const settingKeys = ( new Set());\n        [...( this._currentResultGroups.keys())]\n            .sort((a, b) => this._currentResultGroups.get(a).order - this._currentResultGroups.get(b).order)\n            .forEach(groupId => {\n            const group = this._currentResultGroups.get(groupId);\n            group.result.filterMatches = group.result.filterMatches.filter(s => !( settingKeys.has(s.setting.key)));\n            group.result.filterMatches.forEach(s => settingKeys.add(s.setting.key));\n        });\n    }\n    compareTwoNullableNumbers(a, b) {\n        const aOrMax = a ?? Number.MAX_SAFE_INTEGER;\n        const bOrMax = b ?? Number.MAX_SAFE_INTEGER;\n        if (aOrMax < bOrMax) {\n            return -1;\n        }\n        else if (aOrMax > bOrMax) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    filterSettings(filter, groupFilter, settingMatcher) {\n        const allGroups = this.filterGroups;\n        const filterMatches = [];\n        for (const group of allGroups) {\n            const groupMatched = groupFilter(group);\n            for (const section of group.sections) {\n                for (const setting of section.settings) {\n                    const settingMatchResult = settingMatcher(setting, group);\n                    if (groupMatched || settingMatchResult) {\n                        filterMatches.push({\n                            setting,\n                            matches: settingMatchResult && settingMatchResult.matches,\n                            matchType: settingMatchResult?.matchType ?? SettingMatchType.None,\n                            score: settingMatchResult?.score ?? 0\n                        });\n                    }\n                }\n            }\n        }\n        filterMatches.sort((a, b) => {\n            if (a.matchType !== b.matchType) {\n                return b.matchType - a.matchType;\n            }\n            else {\n                if (a.setting.extensionInfo && b.setting.extensionInfo\n                    && a.setting.extensionInfo.id === b.setting.extensionInfo.id) {\n                    if (a.setting.categoryLabel !== b.setting.categoryLabel\n                        && (a.setting.categoryOrder !== undefined || b.setting.categoryOrder !== undefined)\n                        && a.setting.categoryOrder !== b.setting.categoryOrder) {\n                        return this.compareTwoNullableNumbers(a.setting.categoryOrder, b.setting.categoryOrder);\n                    }\n                    else if (a.setting.categoryLabel === b.setting.categoryLabel\n                        && (a.setting.order !== undefined || b.setting.order !== undefined)\n                        && a.setting.order !== b.setting.order) {\n                        return this.compareTwoNullableNumbers(a.setting.order, b.setting.order);\n                    }\n                }\n                return b.score - a.score;\n            }\n        });\n        return filterMatches;\n    }\n    getPreference(key) {\n        for (const group of this.settingsGroups) {\n            for (const section of group.sections) {\n                for (const setting of section.settings) {\n                    if (key === setting.key) {\n                        return setting;\n                    }\n                }\n            }\n        }\n        return undefined;\n    }\n    collectMetadata(groups) {\n        const metadata = Object.create(null);\n        let hasMetadata = false;\n        groups.forEach(g => {\n            if (g.result.metadata) {\n                metadata[g.id] = g.result.metadata;\n                hasMetadata = true;\n            }\n        });\n        return hasMetadata ? metadata : null;\n    }\n    get filterGroups() {\n        return this.settingsGroups;\n    }\n}\nclass SettingsEditorModel extends AbstractSettingsModel {\n    constructor(reference, _configurationTarget) {\n        super();\n        this._configurationTarget = _configurationTarget;\n        this._onDidChangeGroups = this._register(( new Emitter()));\n        this.onDidChangeGroups = this._onDidChangeGroups.event;\n        this.settingsModel = reference.object.textEditorModel;\n        this._register(this.onWillDispose(() => reference.dispose()));\n        this._register(this.settingsModel.onDidChangeContent(() => {\n            this._settingsGroups = undefined;\n            this._onDidChangeGroups.fire();\n        }));\n    }\n    get uri() {\n        return this.settingsModel.uri;\n    }\n    get configurationTarget() {\n        return this._configurationTarget;\n    }\n    get settingsGroups() {\n        if (!this._settingsGroups) {\n            this.parse();\n        }\n        return this._settingsGroups;\n    }\n    get content() {\n        return this.settingsModel.getValue();\n    }\n    findValueMatches(filter, setting) {\n        return ( this.settingsModel.findMatches(filter, setting.valueRange, false, false, null, false).map(match => match.range));\n    }\n    isSettingsProperty(property, previousParents) {\n        return previousParents.length === 0;\n    }\n    parse() {\n        this._settingsGroups = parse(this.settingsModel, (property, previousParents) => this.isSettingsProperty(property, previousParents));\n    }\n    update() {\n        const resultGroups = [...( this._currentResultGroups.values())];\n        if (!resultGroups.length) {\n            return undefined;\n        }\n        const filteredSettings = [];\n        const matches = [];\n        resultGroups.forEach(group => {\n            group.result.filterMatches.forEach(filterMatch => {\n                filteredSettings.push(filterMatch.setting);\n                if (filterMatch.matches) {\n                    matches.push(...filterMatch.matches);\n                }\n            });\n        });\n        let filteredGroup;\n        const modelGroup = this.settingsGroups[0];\n        if (modelGroup) {\n            filteredGroup = {\n                id: modelGroup.id,\n                range: modelGroup.range,\n                sections: [{\n                        settings: filteredSettings\n                    }],\n                title: modelGroup.title,\n                titleRange: modelGroup.titleRange,\n                order: modelGroup.order,\n                extensionInfo: modelGroup.extensionInfo\n            };\n        }\n        const metadata = this.collectMetadata(resultGroups);\n        return {\n            allGroups: this.settingsGroups,\n            filteredGroups: filteredGroup ? [filteredGroup] : [],\n            matches,\n            metadata\n        };\n    }\n}\nlet Settings2EditorModel = class Settings2EditorModel extends AbstractSettingsModel {\n    constructor(_defaultSettings, configurationService) {\n        super();\n        this._defaultSettings = _defaultSettings;\n        this._onDidChangeGroups = this._register(( new Emitter()));\n        this.onDidChangeGroups = this._onDidChangeGroups.event;\n        this.dirty = false;\n        this._register(configurationService.onDidChangeConfiguration(e => {\n            if (e.source === 7 ) {\n                this.dirty = true;\n                this._onDidChangeGroups.fire();\n            }\n        }));\n        this._register(( Registry.as(Extensions.Configuration)).onDidSchemaChange(e => {\n            this.dirty = true;\n            this._onDidChangeGroups.fire();\n        }));\n    }\n    get filterGroups() {\n        return this.settingsGroups.slice(1);\n    }\n    get settingsGroups() {\n        const groups = this._defaultSettings.getSettingsGroups(this.dirty);\n        if (this.additionalGroups?.length) {\n            groups.push(...this.additionalGroups);\n        }\n        this.dirty = false;\n        return groups;\n    }\n    setAdditionalGroups(groups) {\n        this.additionalGroups = groups;\n    }\n    findValueMatches(filter, setting) {\n        return [];\n    }\n    update() {\n        throw new Error('Not supported');\n    }\n};\nSettings2EditorModel = ( __decorate([\n    ( __param(1, IConfigurationService))\n], Settings2EditorModel));\nfunction parse(model, isSettingsProperty) {\n    const settings = [];\n    let overrideSetting = null;\n    let currentProperty = null;\n    let currentParent = [];\n    const previousParents = [];\n    let settingsPropertyIndex = -1;\n    const range = {\n        startLineNumber: 0,\n        startColumn: 0,\n        endLineNumber: 0,\n        endColumn: 0\n    };\n    function onValue(value, offset, length) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n        if (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null)) {\n            const setting = previousParents.length === settingsPropertyIndex + 1 ? settings[settings.length - 1] : overrideSetting.overrides[overrideSetting.overrides.length - 1];\n            if (setting) {\n                const valueStartPosition = model.getPositionAt(offset);\n                const valueEndPosition = model.getPositionAt(offset + length);\n                setting.value = value;\n                setting.valueRange = {\n                    startLineNumber: valueStartPosition.lineNumber,\n                    startColumn: valueStartPosition.column,\n                    endLineNumber: valueEndPosition.lineNumber,\n                    endColumn: valueEndPosition.column\n                };\n                setting.range = Object.assign(setting.range, {\n                    endLineNumber: valueEndPosition.lineNumber,\n                    endColumn: valueEndPosition.column\n                });\n            }\n        }\n    }\n    const visitor = {\n        onObjectBegin: (offset, length) => {\n            if (isSettingsProperty(currentProperty, previousParents)) {\n                settingsPropertyIndex = previousParents.length;\n                const position = model.getPositionAt(offset);\n                range.startLineNumber = position.lineNumber;\n                range.startColumn = position.column;\n            }\n            const object = {};\n            onValue(object, offset, length);\n            currentParent = object;\n            currentProperty = null;\n            previousParents.push(currentParent);\n        },\n        onObjectProperty: (name, offset, length) => {\n            currentProperty = name;\n            if (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null)) {\n                const settingStartPosition = model.getPositionAt(offset);\n                const setting = {\n                    description: [],\n                    descriptionIsMarkdown: false,\n                    key: name,\n                    keyRange: {\n                        startLineNumber: settingStartPosition.lineNumber,\n                        startColumn: settingStartPosition.column + 1,\n                        endLineNumber: settingStartPosition.lineNumber,\n                        endColumn: settingStartPosition.column + length\n                    },\n                    range: {\n                        startLineNumber: settingStartPosition.lineNumber,\n                        startColumn: settingStartPosition.column,\n                        endLineNumber: 0,\n                        endColumn: 0\n                    },\n                    value: null,\n                    valueRange: nullRange,\n                    descriptionRanges: [],\n                    overrides: [],\n                    overrideOf: withNullAsUndefined(overrideSetting)\n                };\n                if (previousParents.length === settingsPropertyIndex + 1) {\n                    settings.push(setting);\n                    if (OVERRIDE_PROPERTY_REGEX.test(name)) {\n                        overrideSetting = setting;\n                    }\n                }\n                else {\n                    overrideSetting.overrides.push(setting);\n                }\n            }\n        },\n        onObjectEnd: (offset, length) => {\n            currentParent = previousParents.pop();\n            if (settingsPropertyIndex !== -1 && (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null))) {\n                const setting = previousParents.length === settingsPropertyIndex + 1 ? settings[settings.length - 1] : overrideSetting.overrides[overrideSetting.overrides.length - 1];\n                if (setting) {\n                    const valueEndPosition = model.getPositionAt(offset + length);\n                    setting.valueRange = Object.assign(setting.valueRange, {\n                        endLineNumber: valueEndPosition.lineNumber,\n                        endColumn: valueEndPosition.column\n                    });\n                    setting.range = Object.assign(setting.range, {\n                        endLineNumber: valueEndPosition.lineNumber,\n                        endColumn: valueEndPosition.column\n                    });\n                }\n                if (previousParents.length === settingsPropertyIndex + 1) {\n                    overrideSetting = null;\n                }\n            }\n            if (previousParents.length === settingsPropertyIndex) {\n                const position = model.getPositionAt(offset);\n                range.endLineNumber = position.lineNumber;\n                range.endColumn = position.column;\n                settingsPropertyIndex = -1;\n            }\n        },\n        onArrayBegin: (offset, length) => {\n            const array = [];\n            onValue(array, offset, length);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: (offset, length) => {\n            currentParent = previousParents.pop();\n            if (previousParents.length === settingsPropertyIndex + 1 || (previousParents.length === settingsPropertyIndex + 2 && overrideSetting !== null)) {\n                const setting = previousParents.length === settingsPropertyIndex + 1 ? settings[settings.length - 1] : overrideSetting.overrides[overrideSetting.overrides.length - 1];\n                if (setting) {\n                    const valueEndPosition = model.getPositionAt(offset + length);\n                    setting.valueRange = Object.assign(setting.valueRange, {\n                        endLineNumber: valueEndPosition.lineNumber,\n                        endColumn: valueEndPosition.column\n                    });\n                    setting.range = Object.assign(setting.range, {\n                        endLineNumber: valueEndPosition.lineNumber,\n                        endColumn: valueEndPosition.column\n                    });\n                }\n            }\n        },\n        onLiteralValue: onValue,\n        onError: (error) => {\n            const setting = settings[settings.length - 1];\n            if (setting && (isNullRange(setting.range) || isNullRange(setting.keyRange) || isNullRange(setting.valueRange))) {\n                settings.pop();\n            }\n        }\n    };\n    if (!model.isDisposed()) {\n        visit(model.getValue(), visitor);\n    }\n    return settings.length > 0 ? [{\n            sections: [\n                {\n                    settings\n                }\n            ],\n            title: '',\n            titleRange: nullRange,\n            range\n        }] : [];\n}\nclass WorkspaceConfigurationEditorModel extends SettingsEditorModel {\n    constructor() {\n        super(...arguments);\n        this._configurationGroups = [];\n    }\n    get configurationGroups() {\n        return this._configurationGroups;\n    }\n    parse() {\n        super.parse();\n        this._configurationGroups = parse(this.settingsModel, (property, previousParents) => previousParents.length === 0);\n    }\n    isSettingsProperty(property, previousParents) {\n        return property === 'settings' && previousParents.length === 1;\n    }\n}\nclass DefaultSettings extends Disposable {\n    constructor(_mostCommonlyUsedSettingsKeys, target) {\n        super();\n        this._mostCommonlyUsedSettingsKeys = _mostCommonlyUsedSettingsKeys;\n        this.target = target;\n        this._settingsByName = ( new Map());\n        this._onDidChange = this._register(( new Emitter()));\n        this.onDidChange = this._onDidChange.event;\n    }\n    getContent(forceUpdate = false) {\n        if (!this._content || forceUpdate) {\n            this.initialize();\n        }\n        return this._content;\n    }\n    getContentWithoutMostCommonlyUsed(forceUpdate = false) {\n        if (!this._contentWithoutMostCommonlyUsed || forceUpdate) {\n            this.initialize();\n        }\n        return this._contentWithoutMostCommonlyUsed;\n    }\n    getSettingsGroups(forceUpdate = false) {\n        if (!this._allSettingsGroups || forceUpdate) {\n            this.initialize();\n        }\n        return this._allSettingsGroups;\n    }\n    initialize() {\n        this._allSettingsGroups = this.parse();\n        this._content = this.toContent(this._allSettingsGroups, 0);\n        this._contentWithoutMostCommonlyUsed = this.toContent(this._allSettingsGroups, 1);\n    }\n    parse() {\n        const settingsGroups = this.getRegisteredGroups();\n        this.initAllSettingsMap(settingsGroups);\n        const mostCommonlyUsed = this.getMostCommonlyUsedSettings(settingsGroups);\n        return [mostCommonlyUsed, ...settingsGroups];\n    }\n    getRegisteredGroups() {\n        const configurations = ( Registry.as(Extensions.Configuration)).getConfigurations().slice();\n        const groups = this.removeEmptySettingsGroups(configurations.sort(this.compareConfigurationNodes)\n            .reduce((result, config, index, array) => this.parseConfig(config, result, array), []));\n        return this.sortGroups(groups);\n    }\n    sortGroups(groups) {\n        groups.forEach(group => {\n            group.sections.forEach(section => {\n                section.settings.sort((a, b) => a.key.localeCompare(b.key));\n            });\n        });\n        return groups;\n    }\n    initAllSettingsMap(allSettingsGroups) {\n        this._settingsByName = ( new Map());\n        for (const group of allSettingsGroups) {\n            for (const section of group.sections) {\n                for (const setting of section.settings) {\n                    this._settingsByName.set(setting.key, setting);\n                }\n            }\n        }\n    }\n    getMostCommonlyUsedSettings(allSettingsGroups) {\n        const settings = coalesce(( this._mostCommonlyUsedSettingsKeys.map(key => {\n            const setting = this._settingsByName.get(key);\n            if (setting) {\n                return {\n                    description: setting.description,\n                    key: setting.key,\n                    value: setting.value,\n                    keyRange: nullRange,\n                    range: nullRange,\n                    valueRange: nullRange,\n                    overrides: [],\n                    scope: 4 ,\n                    type: setting.type,\n                    enum: setting.enum,\n                    enumDescriptions: setting.enumDescriptions,\n                    descriptionRanges: []\n                };\n            }\n            return null;\n        })));\n        return {\n            id: 'mostCommonlyUsed',\n            range: nullRange,\n            title: ( nls.localize('commonlyUsed', \"Commonly Used\")),\n            titleRange: nullRange,\n            sections: [\n                {\n                    settings\n                }\n            ]\n        };\n    }\n    parseConfig(config, result, configurations, settingsGroup, seenSettings) {\n        seenSettings = seenSettings ? seenSettings : {};\n        let title = config.title;\n        if (!title) {\n            const configWithTitleAndSameId = configurations.find(c => (c.id === config.id) && c.title);\n            if (configWithTitleAndSameId) {\n                title = configWithTitleAndSameId.title;\n            }\n        }\n        if (title) {\n            if (!settingsGroup) {\n                settingsGroup = result.find(g => g.title === title && g.extensionInfo?.id === config.extensionInfo?.id);\n                if (!settingsGroup) {\n                    settingsGroup = { sections: [{ settings: [] }], id: config.id || '', title: title || '', titleRange: nullRange, order: config.order, range: nullRange, extensionInfo: config.extensionInfo };\n                    result.push(settingsGroup);\n                }\n            }\n            else {\n                settingsGroup.sections[settingsGroup.sections.length - 1].title = title;\n            }\n        }\n        if (config.properties) {\n            if (!settingsGroup) {\n                settingsGroup = { sections: [{ settings: [] }], id: config.id || '', title: config.id || '', titleRange: nullRange, order: config.order, range: nullRange, extensionInfo: config.extensionInfo };\n                result.push(settingsGroup);\n            }\n            const configurationSettings = [];\n            for (const setting of [...settingsGroup.sections[settingsGroup.sections.length - 1].settings, ...this.parseSettings(config)]) {\n                if (!seenSettings[setting.key]) {\n                    configurationSettings.push(setting);\n                    seenSettings[setting.key] = true;\n                }\n            }\n            if (configurationSettings.length) {\n                settingsGroup.sections[settingsGroup.sections.length - 1].settings = configurationSettings;\n            }\n        }\n        config.allOf?.forEach(c => this.parseConfig(c, result, configurations, settingsGroup, seenSettings));\n        return result;\n    }\n    removeEmptySettingsGroups(settingsGroups) {\n        const result = [];\n        for (const settingsGroup of settingsGroups) {\n            settingsGroup.sections = settingsGroup.sections.filter(section => section.settings.length > 0);\n            if (settingsGroup.sections.length) {\n                result.push(settingsGroup);\n            }\n        }\n        return result;\n    }\n    parseSettings(config) {\n        const result = [];\n        const settingsObject = config.properties;\n        const extensionInfo = config.extensionInfo;\n        const categoryLabel = config.extensionInfo?.id === config.id ? config.title : config.id;\n        const categoryOrder = config.order;\n        for (const key in settingsObject) {\n            const prop = settingsObject[key];\n            if (this.matchesScope(prop)) {\n                const value = prop.default;\n                let description = (prop.markdownDescription || prop.description || '');\n                if (typeof description !== 'string') {\n                    description = '';\n                }\n                const descriptionLines = description.split('\\n');\n                const overrides = OVERRIDE_PROPERTY_REGEX.test(key) ? this.parseOverrideSettings(prop.default) : [];\n                let listItemType;\n                if (prop.type === 'array' && prop.items && !Array.isArray(prop.items) && prop.items.type) {\n                    if (prop.items.enum) {\n                        listItemType = 'enum';\n                    }\n                    else if (!Array.isArray(prop.items.type)) {\n                        listItemType = prop.items.type;\n                    }\n                }\n                const objectProperties = prop.type === 'object' ? prop.properties : undefined;\n                const objectPatternProperties = prop.type === 'object' ? prop.patternProperties : undefined;\n                const objectAdditionalProperties = prop.type === 'object' ? prop.additionalProperties : undefined;\n                let enumToUse = prop.enum;\n                let enumDescriptions = prop.markdownEnumDescriptions ?? prop.enumDescriptions;\n                let enumDescriptionsAreMarkdown = !!prop.markdownEnumDescriptions;\n                if (listItemType === 'enum' && !Array.isArray(prop.items)) {\n                    enumToUse = prop.items.enum;\n                    enumDescriptions = prop.items.markdownEnumDescriptions ?? prop.items.enumDescriptions;\n                    enumDescriptionsAreMarkdown = !!prop.items.markdownEnumDescriptions;\n                }\n                let allKeysAreBoolean = false;\n                if (prop.type === 'object' && !prop.additionalProperties && prop.properties && ( Object.keys(prop.properties)).length) {\n                    allKeysAreBoolean = ( Object.keys(prop.properties)).every(key => {\n                        return prop.properties[key].type === 'boolean';\n                    });\n                }\n                let isLanguageTagSetting = false;\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    isLanguageTagSetting = true;\n                }\n                let defaultValueSource;\n                if (!isLanguageTagSetting) {\n                    const registeredConfigurationProp = prop;\n                    if (registeredConfigurationProp && registeredConfigurationProp.defaultValueSource) {\n                        defaultValueSource = registeredConfigurationProp.defaultValueSource;\n                    }\n                }\n                result.push({\n                    key,\n                    value,\n                    description: descriptionLines,\n                    descriptionIsMarkdown: !!prop.markdownDescription,\n                    range: nullRange,\n                    keyRange: nullRange,\n                    valueRange: nullRange,\n                    descriptionRanges: [],\n                    overrides,\n                    scope: prop.scope,\n                    type: prop.type,\n                    arrayItemType: listItemType,\n                    objectProperties,\n                    objectPatternProperties,\n                    objectAdditionalProperties,\n                    enum: enumToUse,\n                    enumDescriptions: enumDescriptions,\n                    enumDescriptionsAreMarkdown: enumDescriptionsAreMarkdown,\n                    uniqueItems: prop.uniqueItems,\n                    tags: prop.tags,\n                    disallowSyncIgnore: prop.disallowSyncIgnore,\n                    restricted: prop.restricted,\n                    extensionInfo: extensionInfo,\n                    deprecationMessage: prop.markdownDeprecationMessage || prop.deprecationMessage,\n                    deprecationMessageIsMarkdown: !!prop.markdownDeprecationMessage,\n                    validator: createValidator(prop),\n                    enumItemLabels: prop.enumItemLabels,\n                    allKeysAreBoolean,\n                    editPresentation: prop.editPresentation,\n                    order: prop.order,\n                    nonLanguageSpecificDefaultValueSource: defaultValueSource,\n                    isLanguageTagSetting,\n                    categoryLabel,\n                    categoryOrder\n                });\n            }\n        }\n        return result;\n    }\n    parseOverrideSettings(overrideSettings) {\n        return ( ( Object.keys(overrideSettings)).map((key) => ({\n            key,\n            value: overrideSettings[key],\n            description: [],\n            descriptionIsMarkdown: false,\n            range: nullRange,\n            keyRange: nullRange,\n            valueRange: nullRange,\n            descriptionRanges: [],\n            overrides: []\n        })));\n    }\n    matchesScope(property) {\n        if (!property.scope) {\n            return true;\n        }\n        if (this.target === 6 ) {\n            return FOLDER_SCOPES.indexOf(property.scope) !== -1;\n        }\n        if (this.target === 5 ) {\n            return WORKSPACE_SCOPES.indexOf(property.scope) !== -1;\n        }\n        return true;\n    }\n    compareConfigurationNodes(c1, c2) {\n        if (typeof c1.order !== 'number') {\n            return 1;\n        }\n        if (typeof c2.order !== 'number') {\n            return -1;\n        }\n        if (c1.order === c2.order) {\n            const title1 = c1.title || '';\n            const title2 = c2.title || '';\n            return title1.localeCompare(title2);\n        }\n        return c1.order - c2.order;\n    }\n    toContent(settingsGroups, startIndex) {\n        const builder = ( new SettingsContentBuilder());\n        for (let i = startIndex; i < settingsGroups.length; i++) {\n            builder.pushGroup(settingsGroups[i], i === startIndex, i === settingsGroups.length - 1);\n        }\n        return builder.getContent();\n    }\n}\nclass DefaultSettingsEditorModel extends AbstractSettingsModel {\n    constructor(_uri, reference, defaultSettings) {\n        super();\n        this._uri = _uri;\n        this.defaultSettings = defaultSettings;\n        this._onDidChangeGroups = this._register(( new Emitter()));\n        this.onDidChangeGroups = this._onDidChangeGroups.event;\n        this._register(defaultSettings.onDidChange(() => this._onDidChangeGroups.fire()));\n        this._model = reference.object.textEditorModel;\n        this._register(this.onWillDispose(() => reference.dispose()));\n    }\n    get uri() {\n        return this._uri;\n    }\n    get target() {\n        return this.defaultSettings.target;\n    }\n    get settingsGroups() {\n        return this.defaultSettings.getSettingsGroups();\n    }\n    get filterGroups() {\n        return this.settingsGroups.slice(1);\n    }\n    update() {\n        if (this._model.isDisposed()) {\n            return undefined;\n        }\n        const resultGroups = [...( this._currentResultGroups.values())]\n            .sort((a, b) => a.order - b.order);\n        const nonEmptyResultGroups = resultGroups.filter(group => group.result.filterMatches.length);\n        const startLine = tail(this.settingsGroups).range.endLineNumber + 2;\n        const { settingsGroups: filteredGroups, matches } = this.writeResultGroups(nonEmptyResultGroups, startLine);\n        const metadata = this.collectMetadata(resultGroups);\n        return resultGroups.length ?\n            {\n                allGroups: this.settingsGroups,\n                filteredGroups,\n                matches,\n                metadata\n            } :\n            undefined;\n    }\n    writeResultGroups(groups, startLine) {\n        const contentBuilderOffset = startLine - 1;\n        const builder = ( new SettingsContentBuilder(contentBuilderOffset));\n        const settingsGroups = [];\n        const matches = [];\n        if (groups.length) {\n            builder.pushLine(',');\n            groups.forEach(resultGroup => {\n                const settingsGroup = this.getGroup(resultGroup);\n                settingsGroups.push(settingsGroup);\n                matches.push(...this.writeSettingsGroupToBuilder(builder, settingsGroup, resultGroup.result.filterMatches));\n            });\n        }\n        const groupContent = builder.getContent() + '\\n';\n        const groupEndLine = this._model.getLineCount();\n        const cursorPosition = ( new Selection(startLine, 1, startLine, 1));\n        const edit = {\n            text: groupContent,\n            forceMoveMarkers: true,\n            range: ( new Range(startLine, 1, groupEndLine, 1))\n        };\n        this._model.pushEditOperations([cursorPosition], [edit], () => [cursorPosition]);\n        const tokenizeTo = Math.min(startLine + 60, this._model.getLineCount());\n        this._model.tokenization.forceTokenization(tokenizeTo);\n        return { matches, settingsGroups };\n    }\n    writeSettingsGroupToBuilder(builder, settingsGroup, filterMatches) {\n        filterMatches = ( filterMatches\n            .map(filteredMatch => {\n            return {\n                setting: filteredMatch.setting,\n                score: filteredMatch.score,\n                matches: filteredMatch.matches && ( filteredMatch.matches.map(match => {\n                    return ( new Range(\n                        match.startLineNumber - filteredMatch.setting.range.startLineNumber,\n                        match.startColumn,\n                        match.endLineNumber - filteredMatch.setting.range.startLineNumber,\n                        match.endColumn\n                    ));\n                }))\n            };\n        }));\n        builder.pushGroup(settingsGroup);\n        const fixedMatches = flatten(( ( filterMatches\n            .map(m => m.matches || []))\n            .map((settingMatches, i) => {\n            const setting = settingsGroup.sections[0].settings[i];\n            return ( settingMatches.map(range => {\n                return ( new Range(\n                    range.startLineNumber + setting.range.startLineNumber,\n                    range.startColumn,\n                    range.endLineNumber + setting.range.startLineNumber,\n                    range.endColumn\n                ));\n            }));\n        })));\n        return fixedMatches;\n    }\n    copySetting(setting) {\n        return {\n            description: setting.description,\n            scope: setting.scope,\n            type: setting.type,\n            enum: setting.enum,\n            enumDescriptions: setting.enumDescriptions,\n            key: setting.key,\n            value: setting.value,\n            range: setting.range,\n            overrides: [],\n            overrideOf: setting.overrideOf,\n            tags: setting.tags,\n            deprecationMessage: setting.deprecationMessage,\n            keyRange: nullRange,\n            valueRange: nullRange,\n            descriptionIsMarkdown: undefined,\n            descriptionRanges: []\n        };\n    }\n    findValueMatches(filter, setting) {\n        return [];\n    }\n    getPreference(key) {\n        for (const group of this.settingsGroups) {\n            for (const section of group.sections) {\n                for (const setting of section.settings) {\n                    if (setting.key === key) {\n                        return setting;\n                    }\n                }\n            }\n        }\n        return undefined;\n    }\n    getGroup(resultGroup) {\n        return {\n            id: resultGroup.id,\n            range: nullRange,\n            title: resultGroup.label,\n            titleRange: nullRange,\n            sections: [\n                {\n                    settings: ( resultGroup.result.filterMatches.map(m => this.copySetting(m.setting)))\n                }\n            ]\n        };\n    }\n}\nclass SettingsContentBuilder {\n    get lineCountWithOffset() {\n        return this._contentByLines.length + this._rangeOffset;\n    }\n    get lastLine() {\n        return this._contentByLines[this._contentByLines.length - 1] || '';\n    }\n    constructor(_rangeOffset = 0) {\n        this._rangeOffset = _rangeOffset;\n        this._contentByLines = [];\n    }\n    pushLine(...lineText) {\n        this._contentByLines.push(...lineText);\n    }\n    pushGroup(settingsGroups, isFirst, isLast) {\n        this._contentByLines.push(isFirst ? '[{' : '{');\n        const lastSetting = this._pushGroup(settingsGroups, '  ');\n        if (lastSetting) {\n            const lineIdx = lastSetting.range.endLineNumber - this._rangeOffset;\n            const content = this._contentByLines[lineIdx - 2];\n            this._contentByLines[lineIdx - 2] = content.substring(0, content.length - 1);\n        }\n        this._contentByLines.push(isLast ? '}]' : '},');\n    }\n    _pushGroup(group, indent) {\n        let lastSetting = null;\n        const groupStart = this.lineCountWithOffset + 1;\n        for (const section of group.sections) {\n            if (section.title) {\n                const sectionTitleStart = this.lineCountWithOffset + 1;\n                this.addDescription([section.title], indent, this._contentByLines);\n                section.titleRange = { startLineNumber: sectionTitleStart, startColumn: 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length };\n            }\n            if (section.settings.length) {\n                for (const setting of section.settings) {\n                    this.pushSetting(setting, indent);\n                    lastSetting = setting;\n                }\n            }\n        }\n        group.range = { startLineNumber: groupStart, startColumn: 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length };\n        return lastSetting;\n    }\n    getContent() {\n        return this._contentByLines.join('\\n');\n    }\n    pushSetting(setting, indent) {\n        const settingStart = this.lineCountWithOffset + 1;\n        this.pushSettingDescription(setting, indent);\n        let preValueContent = indent;\n        const keyString = JSON.stringify(setting.key);\n        preValueContent += keyString;\n        setting.keyRange = { startLineNumber: this.lineCountWithOffset + 1, startColumn: preValueContent.indexOf(setting.key) + 1, endLineNumber: this.lineCountWithOffset + 1, endColumn: setting.key.length };\n        preValueContent += ': ';\n        const valueStart = this.lineCountWithOffset + 1;\n        this.pushValue(setting, preValueContent, indent);\n        setting.valueRange = { startLineNumber: valueStart, startColumn: preValueContent.length + 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length + 1 };\n        this._contentByLines[this._contentByLines.length - 1] += ',';\n        this._contentByLines.push('');\n        setting.range = { startLineNumber: settingStart, startColumn: 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length };\n    }\n    pushSettingDescription(setting, indent) {\n        const fixSettingLink = (line) => line.replace(/`#(.*)#`/g, (match, settingName) => `\\`${settingName}\\``);\n        setting.descriptionRanges = [];\n        const descriptionPreValue = indent + '// ';\n        const deprecationMessageLines = setting.deprecationMessage?.split(/\\n/g) ?? [];\n        for (let line of [...deprecationMessageLines, ...setting.description]) {\n            line = fixSettingLink(line);\n            this._contentByLines.push(descriptionPreValue + line);\n            setting.descriptionRanges.push({ startLineNumber: this.lineCountWithOffset, startColumn: this.lastLine.indexOf(line) + 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length });\n        }\n        if (setting.enumDescriptions && ( setting.enumDescriptions.some(desc => !!desc))) {\n            setting.enumDescriptions.forEach((desc, i) => {\n                const displayEnum = escapeInvisibleChars(String(setting.enum[i]));\n                const line = desc ?\n                    `${displayEnum}: ${fixSettingLink(desc)}` :\n                    displayEnum;\n                const lines = line.split(/\\n/g);\n                lines[0] = ' - ' + lines[0];\n                this._contentByLines.push(...( lines.map(l => `${indent}// ${l}`)));\n                setting.descriptionRanges.push({ startLineNumber: this.lineCountWithOffset, startColumn: this.lastLine.indexOf(line) + 1, endLineNumber: this.lineCountWithOffset, endColumn: this.lastLine.length });\n            });\n        }\n    }\n    pushValue(setting, preValueConent, indent) {\n        const valueString = JSON.stringify(setting.value, null, indent);\n        if (valueString && (typeof setting.value === 'object')) {\n            if (setting.overrides && setting.overrides.length) {\n                this._contentByLines.push(preValueConent + ' {');\n                for (const subSetting of setting.overrides) {\n                    this.pushSetting(subSetting, indent + indent);\n                    this._contentByLines.pop();\n                }\n                const lastSetting = setting.overrides[setting.overrides.length - 1];\n                const content = this._contentByLines[lastSetting.range.endLineNumber - 2];\n                this._contentByLines[lastSetting.range.endLineNumber - 2] = content.substring(0, content.length - 1);\n                this._contentByLines.push(indent + '}');\n            }\n            else {\n                const mulitLineValue = valueString.split('\\n');\n                this._contentByLines.push(preValueConent + mulitLineValue[0]);\n                for (let i = 1; i < mulitLineValue.length; i++) {\n                    this._contentByLines.push(indent + mulitLineValue[i]);\n                }\n            }\n        }\n        else {\n            this._contentByLines.push(preValueConent + valueString);\n        }\n    }\n    addDescription(description, indent, result) {\n        for (const line of description) {\n            result.push(indent + '// ' + line);\n        }\n    }\n}\nclass RawSettingsContentBuilder extends SettingsContentBuilder {\n    constructor(indent = '\\t') {\n        super(0);\n        this.indent = indent;\n    }\n    pushGroup(settingsGroups) {\n        this._pushGroup(settingsGroups, this.indent);\n    }\n}\nclass DefaultRawSettingsEditorModel extends Disposable {\n    constructor(defaultSettings) {\n        super();\n        this.defaultSettings = defaultSettings;\n        this._content = null;\n        this._register(defaultSettings.onDidChange(() => this._content = null));\n    }\n    get content() {\n        if (this._content === null) {\n            const builder = ( new RawSettingsContentBuilder());\n            builder.pushLine('{');\n            for (const settingsGroup of this.defaultSettings.getRegisteredGroups()) {\n                builder.pushGroup(settingsGroup);\n            }\n            builder.pushLine('}');\n            this._content = builder.getContent();\n        }\n        return this._content;\n    }\n}\nfunction escapeInvisibleChars(enumValue) {\n    return enumValue && enumValue\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r');\n}\nfunction defaultKeybindingsContents(keybindingService) {\n    const defaultsHeader = '// ' + ( nls.localize(\n        'defaultKeybindingsHeader',\n        \"Override key bindings by placing them into your key bindings file.\"\n    ));\n    return defaultsHeader + '\\n' + keybindingService.getDefaultKeybindingsContent();\n}\nlet DefaultKeybindingsEditorModel = class DefaultKeybindingsEditorModel {\n    constructor(_uri, keybindingService) {\n        this._uri = _uri;\n        this.keybindingService = keybindingService;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get content() {\n        if (!this._content) {\n            this._content = defaultKeybindingsContents(this.keybindingService);\n        }\n        return this._content;\n    }\n    getPreference() {\n        return null;\n    }\n    dispose() {\n    }\n};\nDefaultKeybindingsEditorModel = ( __decorate([\n    ( __param(1, IKeybindingService))\n], DefaultKeybindingsEditorModel));\nexport { DefaultKeybindingsEditorModel, DefaultRawSettingsEditorModel, DefaultSettings, DefaultSettingsEditorModel, Settings2EditorModel, SettingsEditorModel, WorkspaceConfigurationEditorModel, defaultKeybindingsContents, nullRange };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { getErrorMessage } from 'monaco-editor/esm/vs/base/common/errors.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { parse } from 'monaco-editor/esm/vs/base/common/json.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport * as network from 'monaco-editor/esm/vs/base/common/network.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { CoreEditingCommands } from 'monaco-editor/esm/vs/editor/browser/coreCommands.js';\nimport { getCodeEditor } from 'monaco-editor/esm/vs/editor/browser/editorBrowser.js';\nimport { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport { ITextModelService } from 'monaco-editor/esm/vs/editor/common/services/resolverService.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { Extensions, OVERRIDE_PROPERTY_REGEX, getDefaultValue } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';\nimport { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { DEFAULT_EDITOR_ASSOCIATION } from '../../../common/editor.js';\nimport { SideBySideEditorInput } from '../../../common/editor/sideBySideEditorInput.js';\nimport { TextResourceEditorInput } from '../../../common/editor/textResourceEditorInput.js';\nimport { IJSONEditingService } from '../../configuration/common/jsonEditing.js';\nimport { IEditorGroupsService } from '../../editor/common/editorGroupsService.js';\nimport { SIDE_GROUP, IEditorService } from '../../editor/common/editorService.js';\nimport { KeybindingsEditorInput } from './keybindingsEditorInput.js';\nimport { FOLDER_SETTINGS_PATH, validateSettingsEditorOptions, USE_SPLIT_JSON_SETTING, DEFAULT_SETTINGS_EDITOR_SETTING } from '../common/preferences.js';\nimport { SettingsEditor2Input } from '../common/preferencesEditorInput.js';\nimport { defaultKeybindingsContents, DefaultRawSettingsEditorModel, DefaultKeybindingsEditorModel, Settings2EditorModel, WorkspaceConfigurationEditorModel, SettingsEditorModel, DefaultSettingsEditorModel, DefaultSettings } from '../common/preferencesModels.js';\nimport { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\nimport { ITextEditorService } from '../../textfile/common/textEditorService.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { isObject } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { SuggestController } from 'monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestController.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nconst emptyEditableSettingsContent = '{\\n}';\nlet PreferencesService = class PreferencesService extends Disposable {\n    constructor(editorService, editorGroupService, textFileService, configurationService, notificationService, contextService, instantiationService, userDataProfileService, userDataProfilesService, textModelResolverService, keybindingService, modelService, jsonEditingService, languageService, labelService, remoteAgentService, textEditorService) {\n        super();\n        this.editorService = editorService;\n        this.editorGroupService = editorGroupService;\n        this.textFileService = textFileService;\n        this.configurationService = configurationService;\n        this.notificationService = notificationService;\n        this.contextService = contextService;\n        this.instantiationService = instantiationService;\n        this.userDataProfileService = userDataProfileService;\n        this.userDataProfilesService = userDataProfilesService;\n        this.textModelResolverService = textModelResolverService;\n        this.modelService = modelService;\n        this.jsonEditingService = jsonEditingService;\n        this.languageService = languageService;\n        this.labelService = labelService;\n        this.remoteAgentService = remoteAgentService;\n        this.textEditorService = textEditorService;\n        this._onDispose = this._register(( new Emitter()));\n        this.defaultKeybindingsResource = ( URI.from(\n            { scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/keybindings.json' }\n        ));\n        this.defaultSettingsRawResource = ( URI.from(\n            { scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/defaultSettings.json' }\n        ));\n        this._register(keybindingService.onDidUpdateKeybindings(() => {\n            const model = modelService.getModel(this.defaultKeybindingsResource);\n            if (!model) {\n                return;\n            }\n            modelService.updateModel(model, defaultKeybindingsContents(keybindingService));\n        }));\n    }\n    get userSettingsResource() {\n        return this.userDataProfileService.currentProfile.settingsResource;\n    }\n    get workspaceSettingsResource() {\n        if (this.contextService.getWorkbenchState() === 1 ) {\n            return null;\n        }\n        const workspace = this.contextService.getWorkspace();\n        return workspace.configuration || workspace.folders[0].toResource(FOLDER_SETTINGS_PATH);\n    }\n    get settingsEditor2Input() {\n        return this.instantiationService.createInstance(SettingsEditor2Input);\n    }\n    getFolderSettingsResource(resource) {\n        const folder = this.contextService.getWorkspaceFolder(resource);\n        return folder ? folder.toResource(FOLDER_SETTINGS_PATH) : null;\n    }\n    resolveModel(uri) {\n        if (this.isDefaultSettingsResource(uri)) {\n            const target = this.getConfigurationTargetFromDefaultSettingsResource(uri);\n            const languageSelection = this.languageService.createById('jsonc');\n            const model = this._register(this.modelService.createModel('', languageSelection, uri));\n            let defaultSettings;\n            this.configurationService.onDidChangeConfiguration(e => {\n                if (e.source === 7 ) {\n                    const model = this.modelService.getModel(uri);\n                    if (!model) {\n                        return;\n                    }\n                    defaultSettings = this.getDefaultSettings(target);\n                    this.modelService.updateModel(model, defaultSettings.getContentWithoutMostCommonlyUsed(true));\n                    defaultSettings._onDidChange.fire();\n                }\n            });\n            if (!defaultSettings) {\n                defaultSettings = this.getDefaultSettings(target);\n                this.modelService.updateModel(model, defaultSettings.getContentWithoutMostCommonlyUsed(true));\n            }\n            return model;\n        }\n        if (( this.defaultSettingsRawResource.toString()) === ( uri.toString())) {\n            const defaultRawSettingsEditorModel = this.instantiationService.createInstance(DefaultRawSettingsEditorModel, this.getDefaultSettings(3 ));\n            const languageSelection = this.languageService.createById('jsonc');\n            const model = this._register(this.modelService.createModel(defaultRawSettingsEditorModel.content, languageSelection, uri));\n            return model;\n        }\n        if (( this.defaultKeybindingsResource.toString()) === ( uri.toString())) {\n            const defaultKeybindingsEditorModel = this.instantiationService.createInstance(DefaultKeybindingsEditorModel, uri);\n            const languageSelection = this.languageService.createById('jsonc');\n            const model = this._register(this.modelService.createModel(defaultKeybindingsEditorModel.content, languageSelection, uri));\n            return model;\n        }\n        return null;\n    }\n    async createPreferencesEditorModel(uri) {\n        if (this.isDefaultSettingsResource(uri)) {\n            return this.createDefaultSettingsEditorModel(uri);\n        }\n        if (( this.userSettingsResource.toString()) === ( uri.toString()) || ( this.userDataProfilesService.defaultProfile.settingsResource.toString()) === ( uri.toString())) {\n            return this.createEditableSettingsEditorModel(3 , uri);\n        }\n        const workspaceSettingsUri = await this.getEditableSettingsURI(5 );\n        if (workspaceSettingsUri && ( workspaceSettingsUri.toString()) === ( uri.toString())) {\n            return this.createEditableSettingsEditorModel(5 , workspaceSettingsUri);\n        }\n        if (this.contextService.getWorkbenchState() === 3 ) {\n            const settingsUri = await this.getEditableSettingsURI(6 , uri);\n            if (settingsUri && ( settingsUri.toString()) === ( uri.toString())) {\n                return this.createEditableSettingsEditorModel(6 , uri);\n            }\n        }\n        const remoteEnvironment = await this.remoteAgentService.getEnvironment();\n        const remoteSettingsUri = remoteEnvironment ? remoteEnvironment.settingsPath : null;\n        if (remoteSettingsUri && ( remoteSettingsUri.toString()) === ( uri.toString())) {\n            return this.createEditableSettingsEditorModel(4 , uri);\n        }\n        return null;\n    }\n    openRawDefaultSettings() {\n        return this.editorService.openEditor({ resource: this.defaultSettingsRawResource });\n    }\n    openRawUserSettings() {\n        return this.editorService.openEditor({ resource: this.userSettingsResource });\n    }\n    shouldOpenJsonByDefault() {\n        return this.configurationService.getValue('workbench.settings.editor') === 'json';\n    }\n    openSettings(options = {}) {\n        options = {\n            ...options,\n            target: 3 ,\n        };\n        if (options.query) {\n            options.jsonEditor = false;\n        }\n        return this.open(this.userSettingsResource, options);\n    }\n    openLanguageSpecificSettings(languageId, options = {}) {\n        if (this.shouldOpenJsonByDefault()) {\n            options.query = undefined;\n            options.revealSetting = { key: `[${languageId}]`, edit: true };\n        }\n        else {\n            options.query = `@lang:${languageId}${options.query ? ` ${options.query}` : ''}`;\n        }\n        options.target = options.target ?? 3 ;\n        return this.open(this.userSettingsResource, options);\n    }\n    open(settingsResource, options) {\n        options = {\n            ...options,\n            jsonEditor: options.jsonEditor ?? this.shouldOpenJsonByDefault()\n        };\n        return options.jsonEditor ?\n            this.openSettingsJson(settingsResource, options) :\n            this.openSettings2(options);\n    }\n    async openSettings2(options) {\n        const input = this.settingsEditor2Input;\n        options = {\n            ...options,\n            focusSearch: true\n        };\n        await this.editorService.openEditor(input, validateSettingsEditorOptions(options), options.openToSide ? SIDE_GROUP : undefined);\n        return this.editorGroupService.activeGroup.activeEditorPane;\n    }\n    openApplicationSettings(options = {}) {\n        options = {\n            ...options,\n            target: 3 ,\n        };\n        return this.open(this.userDataProfilesService.defaultProfile.settingsResource, options);\n    }\n    openUserSettings(options = {}) {\n        options = {\n            ...options,\n            target: 3 ,\n        };\n        return this.open(this.userSettingsResource, options);\n    }\n    async openRemoteSettings(options = {}) {\n        const environment = await this.remoteAgentService.getEnvironment();\n        if (environment) {\n            options = {\n                ...options,\n                target: 4 ,\n            };\n            this.open(environment.settingsPath, options);\n        }\n        return undefined;\n    }\n    openWorkspaceSettings(options = {}) {\n        if (!this.workspaceSettingsResource) {\n            this.notificationService.info(( nls.localize(\n                'openFolderFirst',\n                \"Open a folder or workspace first to create workspace or folder settings.\"\n            )));\n            return Promise.reject(null);\n        }\n        options = {\n            ...options,\n            target: 5\n        };\n        return this.open(this.workspaceSettingsResource, options);\n    }\n    async openFolderSettings(options = {}) {\n        options = {\n            ...options,\n            target: 6\n        };\n        if (!options.folderUri) {\n            throw new Error(`Missing folder URI`);\n        }\n        const folderSettingsUri = await this.getEditableSettingsURI(6 , options.folderUri);\n        if (!folderSettingsUri) {\n            throw new Error(`Invalid folder URI - ${options.folderUri.toString()}`);\n        }\n        return this.open(folderSettingsUri, options);\n    }\n    async openGlobalKeybindingSettings(textual, options) {\n        options = { pinned: true, revealIfOpened: true, ...options };\n        if (textual) {\n            const emptyContents = '// ' + ( nls.localize(\n                'emptyKeybindingsHeader',\n                \"Place your key bindings in this file to override the defaults\"\n            )) + '\\n[\\n]';\n            const editableKeybindings = this.userDataProfileService.currentProfile.keybindingsResource;\n            const openDefaultKeybindings = !!this.configurationService.getValue('workbench.settings.openDefaultKeybindings');\n            await this.createIfNotExists(editableKeybindings, emptyContents);\n            if (openDefaultKeybindings) {\n                const activeEditorGroup = this.editorGroupService.activeGroup;\n                const sideEditorGroup = this.editorGroupService.addGroup(activeEditorGroup.id, 3 );\n                await Promise.all([\n                    this.editorService.openEditor({ resource: this.defaultKeybindingsResource, options: { pinned: true, preserveFocus: true, revealIfOpened: true, override: DEFAULT_EDITOR_ASSOCIATION.id }, label: ( nls.localize('defaultKeybindings', \"Default Keybindings\")), description: '' }),\n                    this.editorService.openEditor({ resource: editableKeybindings, options }, sideEditorGroup.id)\n                ]);\n            }\n            else {\n                await this.editorService.openEditor({ resource: editableKeybindings, options });\n            }\n        }\n        else {\n            const editor = (await this.editorService.openEditor(this.instantiationService.createInstance(KeybindingsEditorInput), { ...options }));\n            if (options.query) {\n                editor.search(options.query);\n            }\n        }\n    }\n    openDefaultKeybindingsFile() {\n        return this.editorService.openEditor({ resource: this.defaultKeybindingsResource, label: ( nls.localize('defaultKeybindings', \"Default Keybindings\")) });\n    }\n    async openSettingsJson(resource, options) {\n        const group = options?.openToSide ? SIDE_GROUP : undefined;\n        const editor = await this.doOpenSettingsJson(resource, options, group);\n        if (editor && options?.revealSetting) {\n            await this.revealSetting(options.revealSetting.key, !!options.revealSetting.edit, editor, resource);\n        }\n        return editor;\n    }\n    async doOpenSettingsJson(resource, options, group) {\n        const openSplitJSON = !!this.configurationService.getValue(USE_SPLIT_JSON_SETTING);\n        const openDefaultSettings = !!this.configurationService.getValue(DEFAULT_SETTINGS_EDITOR_SETTING);\n        if (openSplitJSON || openDefaultSettings) {\n            return this.doOpenSplitJSON(resource, options, group);\n        }\n        const configurationTarget = options?.target ?? 2 ;\n        const editableSettingsEditorInput = await this.getOrCreateEditableSettingsEditorInput(configurationTarget, resource);\n        options = { ...options, pinned: true };\n        return await this.editorService.openEditor(editableSettingsEditorInput, validateSettingsEditorOptions(options), group);\n    }\n    async doOpenSplitJSON(resource, options = {}, group) {\n        const configurationTarget = options.target ?? 2 ;\n        await this.createSettingsIfNotExists(configurationTarget, resource);\n        const preferencesEditorInput = this.createSplitJsonEditorInput(configurationTarget, resource);\n        options = { ...options, pinned: true };\n        return this.editorService.openEditor(preferencesEditorInput, validateSettingsEditorOptions(options), group);\n    }\n    createSplitJsonEditorInput(configurationTarget, resource) {\n        const editableSettingsEditorInput = this.textEditorService.createTextEditor({ resource });\n        const defaultPreferencesEditorInput = this.instantiationService.createInstance(TextResourceEditorInput, this.getDefaultSettingsResource(configurationTarget), undefined, undefined, undefined, undefined);\n        return this.instantiationService.createInstance(SideBySideEditorInput, editableSettingsEditorInput.getName(), undefined, defaultPreferencesEditorInput, editableSettingsEditorInput);\n    }\n    createSettings2EditorModel() {\n        return this.instantiationService.createInstance(Settings2EditorModel, this.getDefaultSettings(3 ));\n    }\n    getConfigurationTargetFromDefaultSettingsResource(uri) {\n        return this.isDefaultWorkspaceSettingsResource(uri) ?\n            5  :\n            this.isDefaultFolderSettingsResource(uri) ?\n                6  :\n                3 ;\n    }\n    isDefaultSettingsResource(uri) {\n        return this.isDefaultUserSettingsResource(uri) || this.isDefaultWorkspaceSettingsResource(uri) || this.isDefaultFolderSettingsResource(uri);\n    }\n    isDefaultUserSettingsResource(uri) {\n        return uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?settings\\.json$/);\n    }\n    isDefaultWorkspaceSettingsResource(uri) {\n        return uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?workspaceSettings\\.json$/);\n    }\n    isDefaultFolderSettingsResource(uri) {\n        return uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?resourceSettings\\.json$/);\n    }\n    getDefaultSettingsResource(configurationTarget) {\n        switch (configurationTarget) {\n            case 5 :\n                return ( URI.from(\n                    { scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/workspaceSettings.json` }\n                ));\n            case 6 :\n                return ( URI.from(\n                    { scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/resourceSettings.json` }\n                ));\n        }\n        return ( URI.from(\n            { scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/settings.json` }\n        ));\n    }\n    async getOrCreateEditableSettingsEditorInput(target, resource) {\n        await this.createSettingsIfNotExists(target, resource);\n        return this.textEditorService.createTextEditor({ resource });\n    }\n    async createEditableSettingsEditorModel(configurationTarget, settingsUri) {\n        const workspace = this.contextService.getWorkspace();\n        if (workspace.configuration && ( workspace.configuration.toString()) === ( settingsUri.toString())) {\n            const reference = await this.textModelResolverService.createModelReference(settingsUri);\n            return this.instantiationService.createInstance(WorkspaceConfigurationEditorModel, reference, configurationTarget);\n        }\n        const reference = await this.textModelResolverService.createModelReference(settingsUri);\n        return this.instantiationService.createInstance(SettingsEditorModel, reference, configurationTarget);\n    }\n    async createDefaultSettingsEditorModel(defaultSettingsUri) {\n        const reference = await this.textModelResolverService.createModelReference(defaultSettingsUri);\n        const target = this.getConfigurationTargetFromDefaultSettingsResource(defaultSettingsUri);\n        return this.instantiationService.createInstance(DefaultSettingsEditorModel, defaultSettingsUri, reference, this.getDefaultSettings(target));\n    }\n    getDefaultSettings(target) {\n        if (target === 5 ) {\n            if (!this._defaultWorkspaceSettingsContentModel) {\n                this._defaultWorkspaceSettingsContentModel = ( new DefaultSettings(this.getMostCommonlyUsedSettings(), target));\n            }\n            return this._defaultWorkspaceSettingsContentModel;\n        }\n        if (target === 6 ) {\n            if (!this._defaultFolderSettingsContentModel) {\n                this._defaultFolderSettingsContentModel = ( new DefaultSettings(this.getMostCommonlyUsedSettings(), target));\n            }\n            return this._defaultFolderSettingsContentModel;\n        }\n        if (!this._defaultUserSettingsContentModel) {\n            this._defaultUserSettingsContentModel = ( new DefaultSettings(this.getMostCommonlyUsedSettings(), target));\n        }\n        return this._defaultUserSettingsContentModel;\n    }\n    async getEditableSettingsURI(configurationTarget, resource) {\n        switch (configurationTarget) {\n            case 1 :\n                return this.userDataProfilesService.defaultProfile.settingsResource;\n            case 2 :\n            case 3 :\n                return this.userSettingsResource;\n            case 4 : {\n                const remoteEnvironment = await this.remoteAgentService.getEnvironment();\n                return remoteEnvironment ? remoteEnvironment.settingsPath : null;\n            }\n            case 5 :\n                return this.workspaceSettingsResource;\n            case 6 :\n                if (resource) {\n                    return this.getFolderSettingsResource(resource);\n                }\n        }\n        return null;\n    }\n    async createSettingsIfNotExists(target, resource) {\n        if (this.contextService.getWorkbenchState() === 3  && target === 5 ) {\n            const workspaceConfig = this.contextService.getWorkspace().configuration;\n            if (!workspaceConfig) {\n                return;\n            }\n            const content = await this.textFileService.read(workspaceConfig);\n            if (( Object.keys(parse(content.value))).indexOf('settings') === -1) {\n                await this.jsonEditingService.write(resource, [{ path: ['settings'], value: {} }], true);\n            }\n            return undefined;\n        }\n        await this.createIfNotExists(resource, emptyEditableSettingsContent);\n    }\n    async createIfNotExists(resource, contents) {\n        try {\n            await this.textFileService.read(resource, { acceptTextOnly: true });\n        }\n        catch (error) {\n            if (error.fileOperationResult === 1 ) {\n                try {\n                    await this.textFileService.write(resource, contents);\n                    return;\n                }\n                catch (error2) {\n                    throw new Error(nls.localize('fail.createSettings', \"Unable to create '{0}' ({1}).\", this.labelService.getUriLabel(resource, { relative: true }), getErrorMessage(error2)));\n                }\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    getMostCommonlyUsedSettings() {\n        return [\n            'files.autoSave',\n            'editor.fontSize',\n            'editor.fontFamily',\n            'editor.tabSize',\n            'editor.renderWhitespace',\n            'editor.cursorStyle',\n            'editor.multiCursorModifier',\n            'editor.insertSpaces',\n            'editor.wordWrap',\n            'files.exclude',\n            'files.associations',\n            'workbench.editor.enablePreview'\n        ];\n    }\n    async revealSetting(settingKey, edit, editor, settingsResource) {\n        const codeEditor = editor ? getCodeEditor(editor.getControl()) : null;\n        if (!codeEditor) {\n            return;\n        }\n        const settingsModel = await this.createPreferencesEditorModel(settingsResource);\n        if (!settingsModel) {\n            return;\n        }\n        const position = await this.getPositionToReveal(settingKey, edit, settingsModel, codeEditor);\n        if (position) {\n            codeEditor.setPosition(position);\n            codeEditor.revealPositionNearTop(position);\n            codeEditor.focus();\n            if (edit) {\n                SuggestController.get(codeEditor)?.triggerSuggest();\n            }\n        }\n    }\n    async getPositionToReveal(settingKey, edit, settingsModel, codeEditor) {\n        const model = codeEditor.getModel();\n        if (!model) {\n            return null;\n        }\n        const schema = ( Registry.as(Extensions.Configuration)).getConfigurationProperties()[settingKey];\n        const isOverrideProperty = OVERRIDE_PROPERTY_REGEX.test(settingKey);\n        if (!schema && !isOverrideProperty) {\n            return null;\n        }\n        let position = null;\n        const type = schema?.type ?? 'object' ;\n        let setting = settingsModel.getPreference(settingKey);\n        if (!setting && edit) {\n            let defaultValue = (type === 'object' || type === 'array') ? this.configurationService.inspect(settingKey).defaultValue : getDefaultValue(type);\n            defaultValue = defaultValue === undefined && isOverrideProperty ? {} : defaultValue;\n            if (defaultValue !== undefined) {\n                const key = settingsModel instanceof WorkspaceConfigurationEditorModel ? ['settings', settingKey] : [settingKey];\n                await this.jsonEditingService.write(settingsModel.uri, [{ path: key, value: defaultValue }], false);\n                setting = settingsModel.getPreference(settingKey);\n            }\n        }\n        if (setting) {\n            if (edit) {\n                if (isObject(setting.value) || Array.isArray(setting.value)) {\n                    position = { lineNumber: setting.valueRange.startLineNumber, column: setting.valueRange.startColumn + 1 };\n                    codeEditor.setPosition(position);\n                    await CoreEditingCommands.LineBreakInsert.runEditorCommand(null, codeEditor, null);\n                    position = { lineNumber: position.lineNumber + 1, column: model.getLineMaxColumn(position.lineNumber + 1) };\n                    const firstNonWhiteSpaceColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber);\n                    if (firstNonWhiteSpaceColumn) {\n                        codeEditor.setPosition({ lineNumber: position.lineNumber, column: firstNonWhiteSpaceColumn });\n                        await CoreEditingCommands.LineBreakInsert.runEditorCommand(null, codeEditor, null);\n                        position = { lineNumber: position.lineNumber, column: model.getLineMaxColumn(position.lineNumber) };\n                    }\n                }\n                else {\n                    position = { lineNumber: setting.valueRange.startLineNumber, column: setting.valueRange.endColumn };\n                }\n            }\n            else {\n                position = { lineNumber: setting.keyRange.startLineNumber, column: setting.keyRange.startColumn };\n            }\n        }\n        return position;\n    }\n    dispose() {\n        this._onDispose.fire();\n        super.dispose();\n    }\n};\nPreferencesService = ( __decorate([\n    ( __param(0, IEditorService)),\n    ( __param(1, IEditorGroupsService)),\n    ( __param(2, ITextFileService)),\n    ( __param(3, IConfigurationService)),\n    ( __param(4, INotificationService)),\n    ( __param(5, IWorkspaceContextService)),\n    ( __param(6, IInstantiationService)),\n    ( __param(7, IUserDataProfileService)),\n    ( __param(8, IUserDataProfilesService)),\n    ( __param(9, ITextModelService)),\n    ( __param(10, IKeybindingService)),\n    ( __param(11, IModelService)),\n    ( __param(12, IJSONEditingService)),\n    ( __param(13, ILanguageService)),\n    ( __param(14, ILabelService)),\n    ( __param(15, IRemoteAgentService)),\n    ( __param(16, ITextEditorService))\n], PreferencesService));\nexport { PreferencesService };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { SettingMatchType } from '../../../services/preferences/common/preferences.js';\nimport { distinct } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport * as strings from 'monaco-editor/esm/vs/base/common/strings.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { matchesWords, or, matchesCamelCase, matchesContiguousSubString, matchesPrefix } from 'monaco-editor/esm/vs/base/common/filters.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { IExtensionManagementService } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { IWorkbenchExtensionEnablementService } from '../../../services/extensionManagement/common/extensionManagement.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';\nlet PreferencesSearchService = class PreferencesSearchService extends Disposable {\n    constructor(instantiationService, configurationService, productService, extensionManagementService, extensionEnablementService) {\n        super();\n        this.instantiationService = instantiationService;\n        this.configurationService = configurationService;\n        this.productService = productService;\n        this.extensionManagementService = extensionManagementService;\n        this.extensionEnablementService = extensionEnablementService;\n        this._installedExtensions = this.extensionManagementService.getInstalled(1 ).then(exts => {\n            return exts\n                .filter(ext => this.extensionEnablementService.isEnabled(ext))\n                .filter(ext => ext.manifest && ext.manifest.contributes && ext.manifest.contributes.configuration)\n                .filter(ext => !!ext.identifier.uuid);\n        });\n    }\n    get remoteSearchAllowed() {\n        const workbenchSettings = this.configurationService.getValue().workbench.settings;\n        if (!workbenchSettings.enableNaturalLanguageSearch) {\n            return false;\n        }\n        return !!this._endpoint.urlBase;\n    }\n    get _endpoint() {\n        const workbenchSettings = this.configurationService.getValue().workbench.settings;\n        if (workbenchSettings.naturalLanguageSearchEndpoint) {\n            return {\n                urlBase: workbenchSettings.naturalLanguageSearchEndpoint,\n                key: workbenchSettings.naturalLanguageSearchKey\n            };\n        }\n        else {\n            return {\n                urlBase: this.productService.settingsSearchUrl\n            };\n        }\n    }\n    getRemoteSearchProvider(filter, newExtensionsOnly = false) {\n        return undefined;\n    }\n    getLocalSearchProvider(filter) {\n        return this.instantiationService.createInstance(LocalSearchProvider, filter);\n    }\n};\nPreferencesSearchService = ( __decorate([\n    ( __param(0, IInstantiationService)),\n    ( __param(1, IConfigurationService)),\n    ( __param(2, IProductService)),\n    ( __param(3, IExtensionManagementService)),\n    ( __param(4, IWorkbenchExtensionEnablementService))\n], PreferencesSearchService));\nlet LocalSearchProvider = class LocalSearchProvider {\n    static { this.EXACT_MATCH_SCORE = 10000; }\n    static { this.START_SCORE = 1000; }\n    constructor(_filter, configurationService) {\n        this._filter = _filter;\n        this.configurationService = configurationService;\n        this._filter = this._filter\n            .replace(/[\":]/g, ' ')\n            .replace(/  /g, ' ')\n            .trim();\n    }\n    searchModel(preferencesModel, token) {\n        if (!this._filter) {\n            return Promise.resolve(null);\n        }\n        let orderedScore = LocalSearchProvider.START_SCORE;\n        const settingMatcher = (setting) => {\n            const { matches, matchType } = ( new SettingMatches(\n                this._filter,\n                setting,\n                true,\n                true,\n                (filter, setting) => preferencesModel.findValueMatches(filter, setting),\n                this.configurationService\n            ));\n            const score = this._filter === setting.key ?\n                LocalSearchProvider.EXACT_MATCH_SCORE :\n                orderedScore--;\n            return matches && matches.length ?\n                {\n                    matches,\n                    matchType,\n                    score\n                } :\n                null;\n        };\n        const filterMatches = preferencesModel.filterSettings(this._filter, this.getGroupFilter(this._filter), settingMatcher);\n        if (filterMatches[0] && filterMatches[0].score === LocalSearchProvider.EXACT_MATCH_SCORE) {\n            return Promise.resolve({\n                filterMatches: filterMatches.slice(0, 1),\n                exactMatch: true\n            });\n        }\n        else {\n            return Promise.resolve({\n                filterMatches\n            });\n        }\n    }\n    getGroupFilter(filter) {\n        const regex = strings.createRegExp(filter, false, { global: true });\n        return (group) => {\n            return regex.test(group.title);\n        };\n    }\n};\nLocalSearchProvider = ( __decorate([\n    ( __param(1, IConfigurationService))\n], LocalSearchProvider));\nlet SettingMatches = class SettingMatches {\n    constructor(searchString, setting, requireFullQueryMatch, searchDescription, valuesMatcher, configurationService) {\n        this.requireFullQueryMatch = requireFullQueryMatch;\n        this.searchDescription = searchDescription;\n        this.valuesMatcher = valuesMatcher;\n        this.configurationService = configurationService;\n        this.descriptionMatchingWords = ( new Map());\n        this.keyMatchingWords = ( new Map());\n        this.valueMatchingWords = ( new Map());\n        this.matchType = SettingMatchType.None;\n        this.matches = distinct(this._findMatchesInSetting(searchString, setting), (match) => `${match.startLineNumber}_${match.startColumn}_${match.endLineNumber}_${match.endColumn}_`);\n    }\n    _findMatchesInSetting(searchString, setting) {\n        const result = this._doFindMatchesInSetting(searchString, setting);\n        if (setting.overrides && setting.overrides.length) {\n            for (const subSetting of setting.overrides) {\n                const subSettingMatches = ( new SettingMatches(\n                    searchString,\n                    subSetting,\n                    this.requireFullQueryMatch,\n                    this.searchDescription,\n                    this.valuesMatcher,\n                    this.configurationService\n                ));\n                const words = searchString.split(' ');\n                const descriptionRanges = this.getRangesForWords(words, this.descriptionMatchingWords, [subSettingMatches.descriptionMatchingWords, subSettingMatches.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n                const keyRanges = this.getRangesForWords(words, this.keyMatchingWords, [subSettingMatches.descriptionMatchingWords, subSettingMatches.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n                const subSettingKeyRanges = this.getRangesForWords(words, subSettingMatches.keyMatchingWords, [this.descriptionMatchingWords, this.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n                const subSettingValueRanges = this.getRangesForWords(words, subSettingMatches.valueMatchingWords, [this.descriptionMatchingWords, this.keyMatchingWords, subSettingMatches.keyMatchingWords]);\n                result.push(...descriptionRanges, ...keyRanges, ...subSettingKeyRanges, ...subSettingValueRanges);\n                result.push(...subSettingMatches.matches);\n                this.refreshMatchType(keyRanges.length + subSettingKeyRanges.length);\n                this.matchType |= subSettingMatches.matchType;\n            }\n        }\n        return result;\n    }\n    _doFindMatchesInSetting(searchString, setting) {\n        const registry = ( Registry.as(Extensions.Configuration)).getConfigurationProperties();\n        const schema = registry[setting.key];\n        const words = searchString.split(' ');\n        const settingKeyAsWords = setting.key.split('.').join(' ');\n        const settingValue = this.configurationService.getValue(setting.key);\n        for (const word of words) {\n            if (this.searchDescription) {\n                for (let lineIndex = 0; lineIndex < setting.description.length; lineIndex++) {\n                    const descriptionMatches = matchesWords(word, setting.description[lineIndex], true);\n                    if (descriptionMatches) {\n                        this.descriptionMatchingWords.set(word, ( descriptionMatches.map(match => this.toDescriptionRange(setting, match, lineIndex))));\n                    }\n                    this.checkForWholeWordMatchType(word, setting.description[lineIndex]);\n                }\n            }\n            const keyMatches = or(matchesWords, matchesCamelCase)(word, settingKeyAsWords);\n            if (keyMatches) {\n                this.keyMatchingWords.set(word, ( keyMatches.map(match => this.toKeyRange(setting, match))));\n            }\n            this.checkForWholeWordMatchType(word, settingKeyAsWords);\n            const valueMatches = typeof settingValue === 'string' ? matchesContiguousSubString(word, settingValue) : null;\n            if (valueMatches) {\n                this.valueMatchingWords.set(word, ( valueMatches.map(match => this.toValueRange(setting, match))));\n            }\n            else if (schema && schema.enum && ( schema.enum.some(\n                enumValue => typeof enumValue === 'string' && !!matchesContiguousSubString(word, enumValue)\n            ))) {\n                this.valueMatchingWords.set(word, []);\n            }\n            if (typeof settingValue === 'string') {\n                this.checkForWholeWordMatchType(word, settingValue);\n            }\n        }\n        const descriptionRanges = [];\n        if (this.searchDescription) {\n            for (let lineIndex = 0; lineIndex < setting.description.length; lineIndex++) {\n                const matches = or(matchesContiguousSubString)(searchString, setting.description[lineIndex] || '') || [];\n                descriptionRanges.push(...( matches.map(match => this.toDescriptionRange(setting, match, lineIndex))));\n            }\n            if (descriptionRanges.length === 0) {\n                descriptionRanges.push(...this.getRangesForWords(words, this.descriptionMatchingWords, [this.keyMatchingWords, this.valueMatchingWords]));\n            }\n        }\n        const keyMatches = or(matchesPrefix, matchesContiguousSubString)(searchString, setting.key);\n        const keyRanges = keyMatches ? ( keyMatches.map(match => this.toKeyRange(setting, match))) : this.getRangesForWords(words, this.keyMatchingWords, [this.descriptionMatchingWords, this.valueMatchingWords]);\n        let valueRanges = [];\n        if (typeof settingValue === 'string' && settingValue) {\n            const valueMatches = or(matchesPrefix, matchesContiguousSubString)(searchString, settingValue);\n            valueRanges = valueMatches ? ( valueMatches.map(match => this.toValueRange(setting, match))) : this.getRangesForWords(words, this.valueMatchingWords, [this.keyMatchingWords, this.descriptionMatchingWords]);\n        }\n        else {\n            valueRanges = this.valuesMatcher(searchString, setting);\n        }\n        this.refreshMatchType(keyRanges.length);\n        return [...descriptionRanges, ...keyRanges, ...valueRanges];\n    }\n    checkForWholeWordMatchType(singleWordQuery, lineToSearch) {\n        singleWordQuery = singleWordQuery.toLowerCase().replace(/[\\s-\\._]+$/, '');\n        lineToSearch = lineToSearch.toLowerCase();\n        const singleWordRegex = ( new RegExp(`\\\\b${strings.escapeRegExpCharacters(singleWordQuery)}\\\\b`));\n        if (singleWordRegex.test(lineToSearch)) {\n            this.matchType |= SettingMatchType.WholeWordMatch;\n        }\n    }\n    refreshMatchType(keyRangesLength) {\n        if (keyRangesLength) {\n            this.matchType |= SettingMatchType.KeyMatch;\n        }\n    }\n    getRangesForWords(words, from, others) {\n        const result = [];\n        for (const word of words) {\n            const ranges = from.get(word);\n            if (ranges) {\n                result.push(...ranges);\n            }\n            else if (this.requireFullQueryMatch && others.every(o => !( o.has(word)))) {\n                return [];\n            }\n        }\n        return result;\n    }\n    toKeyRange(setting, match) {\n        return {\n            startLineNumber: setting.keyRange.startLineNumber,\n            startColumn: setting.keyRange.startColumn + match.start,\n            endLineNumber: setting.keyRange.startLineNumber,\n            endColumn: setting.keyRange.startColumn + match.end\n        };\n    }\n    toDescriptionRange(setting, match, lineIndex) {\n        return {\n            startLineNumber: setting.descriptionRanges[lineIndex].startLineNumber,\n            startColumn: setting.descriptionRanges[lineIndex].startColumn + match.start,\n            endLineNumber: setting.descriptionRanges[lineIndex].endLineNumber,\n            endColumn: setting.descriptionRanges[lineIndex].startColumn + match.end\n        };\n    }\n    toValueRange(setting, match) {\n        return {\n            startLineNumber: setting.valueRange.startLineNumber,\n            startColumn: setting.valueRange.startColumn + match.start + 1,\n            endLineNumber: setting.valueRange.startLineNumber,\n            endColumn: setting.valueRange.startColumn + match.end + 1\n        };\n    }\n};\nSettingMatches = ( __decorate([\n    ( __param(5, IConfigurationService))\n], SettingMatches));\nexport { LocalSearchProvider, PreferencesSearchService, SettingMatches };\n","import n from '../../../../../../../node_modules/rollup-plugin-styles/dist/runtime/inject-css.js';\nvar css = \".preferences-editor{display:flex;flex-direction:column}.preferences-editor>.preferences-header{padding:11px 32px 11px 27px}.preferences-editor .deprecation-warning{display:flex;margin-top:4px}.preferences-editor .deprecation-warning .icon{margin-right:3px}.preferences-editor .deprecation-warning .learnMore-button{margin-left:3px;text-decoration:underline}.preferences-editor>.preferences-editors-container.side-by-side-preferences-editor{flex:1}.preferences-editor>.preferences-editors-container.side-by-side-preferences-editor .preferences-header-container{line-height:28px}.settings-tabs-widget>.monaco-action-bar .action-item.disabled{display:none}.settings-tabs-widget>.monaco-action-bar .action-item{max-width:300px;overflow:hidden;text-overflow:ellipsis}.default-preferences-editor-container>.preferences-header-container>.default-preferences-header,.settings-tabs-widget>.monaco-action-bar .action-item .action-label{cursor:pointer;display:flex;font-size:11px;margin-right:5px;overflow:hidden;text-overflow:ellipsis;text-transform:uppercase}.default-preferences-editor-container>.preferences-header-container>.default-preferences-header,.preferences-editor .settings-tabs-widget>.monaco-action-bar .action-item .action-label{margin-left:33px}.settings-tabs-widget>.monaco-action-bar .action-item .action-label{background:none!important;border-radius:initial;display:block;padding:0}.settings-tabs-widget>.monaco-action-bar .action-item .action-label.folder-settings{display:flex}.default-preferences-editor-container>.preferences-header-container>.default-preferences-header,.settings-tabs-widget>.monaco-action-bar .action-item{padding:3px 0}.settings-tabs-widget>.monaco-action-bar .action-item .action-title{overflow:hidden;text-overflow:ellipsis}.settings-tabs-widget>.monaco-action-bar .action-item .action-details{font-size:10px;margin-left:.5em;opacity:.7;text-transform:none}.settings-tabs-widget .monaco-action-bar .action-item .dropdown-icon{font-size:12px;padding-left:.3em;padding-top:8px}.settings-tabs-widget .monaco-action-bar .action-item .dropdown-icon.hide{display:none}.settings-tabs-widget>.monaco-action-bar .action-item .action-label{color:var(--vscode-panelTitle-inactiveForeground)}.settings-tabs-widget>.monaco-action-bar .action-item .action-label.checked,.settings-tabs-widget>.monaco-action-bar .action-item .action-label:hover{border-bottom:1px solid var(--vscode-panelTitle-activeBorder);color:var(--vscode-panelTitle-activeForeground);outline:1px solid var(--vscode-contrastActiveBorder,transparent);outline-offset:-1px}.settings-tabs-widget>.monaco-action-bar .action-item .action-label:focus{border-bottom:1px solid var(--vscode-focusBorder);outline:1px solid transparent;outline-offset:-1px}.settings-tabs-widget>.monaco-action-bar .action-item .action-label:not(.checked):hover{outline-style:dashed}.preferences-header>.settings-header-widget{align-self:stretch;display:flex;flex:1;position:relative}.settings-header-widget>.settings-search-controls>.settings-count-widget{border-radius:2px;float:left;margin:6px 0;padding:0 8px}.settings-header-widget>.settings-search-controls{position:absolute;right:10px}.settings-header-widget>.settings-search-controls>.settings-count-widget.hide{display:none}.settings-header-widget>.settings-search-container{flex:1}.settings-header-widget>.settings-search-container>.settings-search-input{vertical-align:middle}.settings-header-widget>.settings-search-container>.settings-search-input>.monaco-inputbox{height:30px}.monaco-workbench.vs .settings-header-widget>.settings-search-container>.settings-search-input>.monaco-inputbox{border:1px solid #ddd}.settings-header-widget>.settings-search-container>.settings-search-input>.monaco-inputbox .input{font-size:14px;padding-left:10px}.monaco-editor .view-zones>.settings-header-widget{z-index:1}.monaco-editor .settings-header-widget .title-container{display:flex;user-select:none;-webkit-user-select:none}.monaco-editor .settings-header-widget .title-container .title{font-weight:700;text-transform:uppercase;white-space:nowrap}.monaco-editor .settings-header-widget .title-container .message{white-space:nowrap}.monaco-editor .settings-group-title-widget{z-index:1}.monaco-editor .settings-group-title-widget .title-container{cursor:pointer;display:flex;font-weight:700;user-select:none;-webkit-user-select:none;width:100%}.monaco-editor .settings-group-title-widget .title-container .title{overflow:hidden;white-space:nowrap}.monaco-editor.vs .settings-group-title-widget .title-container.focused,.monaco-editor.vs-dark .settings-group-title-widget .title-container.focused{outline:none!important}.monaco-editor .settings-group-title-widget .title-container.focused,.monaco-editor .settings-group-title-widget .title-container:hover{background-color:hsla(0,0%,60%,.2)}.monaco-editor.hc-black .settings-group-title-widget .title-container.focused{outline:1px dotted #f38518}.monaco-editor.hc-light .settings-group-title-widget .title-container.focused{outline:1px dotted #0f4a85}.monaco-editor .settings-group-title-widget .title-container .codicon{align-items:center;display:flex;height:100%;justify-content:center;margin:0 2px;width:16px}.monaco-editor .dim-configuration{color:#b1b1b1}.codicon-settings-edit:hover{cursor:pointer}\";\nn(css,{});\nexport { css, css as default };\n","import n from '../../../../../../../node_modules/rollup-plugin-styles/dist/runtime/inject-css.js';\nvar css = \".keybindings-editor{padding:11px 0 0 27px}.keybindings-overflow-widgets-container{height:0;left:0;overflow:visible;position:absolute;top:0;width:0;z-index:5000}.keybindings-editor>.keybindings-header{padding:0 10px 11px 0}.keybindings-editor>.keybindings-header>.search-container{position:relative}.keybindings-editor>.keybindings-header>.search-container>.keybindings-search-actions-container{display:flex;margin-top:4px;position:absolute;right:10px;top:0}.keybindings-editor>.keybindings-header>.search-container>.keybindings-search-actions-container>.recording-badge{margin-right:8px;padding:4px}.keybindings-editor>.keybindings-header.small>.search-container>.keybindings-search-actions-container>.recording-badge,.keybindings-editor>.keybindings-header>.search-container>.keybindings-search-actions-container>.recording-badge.disabled{display:none}.keybindings-editor>.keybindings-header>.search-container>.keybindings-search-actions-container .monaco-action-bar .action-item>.icon{height:18px;width:16px}.keybindings-editor>.keybindings-header>.search-container>.keybindings-search-actions-container .monaco-action-bar .action-item{margin-right:4px}.keybindings-editor .monaco-action-bar .action-item .monaco-custom-toggle{margin:0;padding:2px}.keybindings-editor .monaco-action-bar .action-item>.codicon{align-items:center;box-sizing:content-box;color:inherit;display:flex;justify-content:center}.keybindings-editor>.keybindings-header .open-keybindings-container{display:flex;margin-top:10px}.keybindings-editor>.keybindings-header .open-keybindings-container>div{opacity:.7}.keybindings-editor>.keybindings-header .open-keybindings-container>.file-name{cursor:pointer;margin-left:4px;text-decoration:underline}.keybindings-editor>.keybindings-header .open-keybindings-container>.file-name:focus{opacity:1}.keybindings-editor>.keybindings-body .keybindings-table-container{border-collapse:separate;border-spacing:0;width:100%}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr{cursor:default}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td{align-items:center;display:flex;overflow:hidden}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .actions .monaco-action-bar{display:none;flex:1}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-list-row.selected .monaco-table-tr .monaco-table-td .actions .monaco-action-bar,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-list-row:hover .monaco-table-tr .monaco-table-td .actions .monaco-action-bar,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table.focused .monaco-list-row.focused .monaco-table-tr .monaco-table-td .actions .monaco-action-bar{display:flex}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .monaco-action-bar .action-item>.icon{cursor:pointer;height:16px;margin-top:3px;width:16px}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .command.vertical-align-column{align-items:flex-start;flex-direction:column;justify-content:center}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .command .command-default-label{margin-top:2px;opacity:.8}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .keybinding .monaco-highlighted-label{padding-left:10px}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .when{width:100%}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .when .empty{padding-left:4px}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .when.input-mode .when-label{display:none}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .when .suggest-input-container{padding-left:10px}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .source a{cursor:pointer}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-list-row:not(.focused):not(.selected) .monaco-table-tr .monaco-table-td .source a{color:var(--vscode-textLink-foreground)}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .source a:hover{text-decoration:underline}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-list-row:not(.focused):not(.selected) .monaco-table-tr .monaco-table-td .source a:active,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-list-row:not(.focused):not(.selected) .monaco-table-tr .monaco-table-td .source a:hover{color:var(--vscode-textLink-activeForeground)}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .command,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .command .monaco-highlighted-label,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .command>.command-default-label,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .command>.command-id-label,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .command>.command-label,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .source .monaco-highlighted-label,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .when .monaco-highlighted-label{overflow:hidden;text-overflow:ellipsis}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .hide{display:none}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .code{display:flex;font-family:var(--monaco-monospace-font);font-size:90%;overflow:hidden}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .code.strong{background-color:hsla(0,0%,50%,.17);border-radius:4px;padding:1px 4px}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-tr .monaco-table-td .highlight{color:var(--vscode-list-highlightForeground);font-weight:700}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table.focused .monaco-list-row.selected .monaco-table-td .highlight,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table.focused .monaco-list-row.selected.focused .monaco-table-td .highlight{color:inherit}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table .monaco-list-row.selected .monaco-table-tr .monaco-table-td .monaco-keybinding-key,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table .monaco-list-row.selected.focused .monaco-table-tr .monaco-table-td .monaco-keybinding-key{color:var(--vscode-list-inactiveSelectionForeground)}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table .monaco-list-row.focused .monaco-table-tr .monaco-table-td .monaco-keybinding-key{color:var(--vscode-list-focusForeground)}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table.focused .monaco-list-row.selected .monaco-table-tr .monaco-table-td .monaco-keybinding-key{color:var(--vscode-list-activeSelectionForeground)}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table .monaco-list-row:hover:not(.selected):not(.focused) .monaco-table-tr .monaco-table-td .monaco-keybinding-key{color:var(--vscode-list-hoverForeground)}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table .monaco-list-row[data-parity=odd]:not(.focused):not(.selected):not(:hover) .monaco-table-tr,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table .monaco-list:not(.focused) .monaco-list-row[data-parity=odd].focused:not(.selected):not(:hover) .monaco-table-tr,.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table .monaco-list:not(:focus) .monaco-list-row[data-parity=odd].focused:not(.selected):not(:hover) .monaco-table-tr{background-color:var(--vscode-keybindingTable-rowsBackground)}.keybindings-editor>.keybindings-body>.keybindings-table-container .monaco-table-th{background-color:var(--vscode-keybindingTable-headerBackground)}.keybindings-editor .monaco-table-td,.keybindings-editor .monaco-table-th{padding-left:10px}.keybindings-editor .monaco-table-td[data-col-index=\\\"0\\\"],.keybindings-editor .monaco-table-th[data-col-index=\\\"0\\\"]{padding-left:20px}\";\nn(css,{});\nexport { css, css as default };\n","import n from '../../../../../../../node_modules/rollup-plugin-styles/dist/runtime/inject-css.js';\nvar css = \".defineKeybindingWidget{padding:10px;position:absolute}.defineKeybindingWidget .message{text-align:center;width:400px}.defineKeybindingWidget .existing,.defineKeybindingWidget .monaco-inputbox,.defineKeybindingWidget .output{display:block;margin-top:10px;text-align:center;width:400px}.defineKeybindingWidget .input{text-align:center}.defineKeybindingWidget .output{display:flex;justify-content:center}.defineKeybindingWidget .existing .existingText{cursor:pointer;text-decoration:underline}.defineKeybindingWidget .output .monaco-keybinding{margin:0 4px}.monaco-editor .keybindingInfo{background-color:rgba(100,100,250,.2);box-shadow:inset 0 0 0 1px #b9b9b9}.monaco-editor .keybindingError{background-color:hsla(0,94%,69%,.2);box-shadow:inset 0 0 0 1px #b9b9b9}\";\nn(css,{});\nexport { css, css as default };\n","import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { registerIcon } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';\nconst settingsScopeDropDownIcon = registerIcon('settings-folder-dropdown', Codicon.triangleDown, ( localize(\n 'settingsScopeDropDownIcon',\n 'Icon for the folder dropdown button in the split JSON Settings editor.'\n)));\nconst settingsMoreActionIcon = registerIcon('settings-more-action', Codicon.gear, ( localize(\n 'settingsMoreActionIcon',\n 'Icon for the \\'more actions\\' action in the Settings UI.'\n)));\nconst keybindingsRecordKeysIcon = registerIcon('keybindings-record-keys', Codicon.recordKeys, ( localize(\n 'keybindingsRecordKeysIcon',\n 'Icon for the \\'record keys\\' action in the keybinding UI.'\n)));\nconst keybindingsSortIcon = registerIcon('keybindings-sort', Codicon.sortPrecedence, ( localize(\n 'keybindingsSortIcon',\n 'Icon for the \\'sort by precedence\\' toggle in the keybinding UI.'\n)));\nconst keybindingsEditIcon = registerIcon('keybindings-edit', Codicon.edit, ( localize('keybindingsEditIcon', 'Icon for the edit action in the keybinding UI.')));\nconst keybindingsAddIcon = registerIcon('keybindings-add', Codicon.add, ( localize('keybindingsAddIcon', 'Icon for the add action in the keybinding UI.')));\nconst settingsEditIcon = registerIcon('settings-edit', Codicon.edit, ( localize('settingsEditIcon', 'Icon for the edit action in the Settings UI.')));\nconst settingsRemoveIcon = registerIcon('settings-remove', Codicon.close, ( localize('settingsRemoveIcon', 'Icon for the remove action in the Settings UI.')));\nconst settingsDiscardIcon = registerIcon('settings-discard', Codicon.discard, ( localize(\n 'preferencesDiscardIcon',\n 'Icon for the discard action in the Settings UI.'\n)));\nconst preferencesClearInputIcon = registerIcon('preferences-clear-input', Codicon.clearAll, ( localize(\n 'preferencesClearInput',\n 'Icon for clear input in the Settings and keybinding UI.'\n)));\nconst preferencesFilterIcon = registerIcon('preferences-filter', Codicon.filter, ( localize(\n 'settingsFilter',\n 'Icon for the button that suggests filters for the Settings UI.'\n)));\nconst preferencesOpenSettingsIcon = registerIcon('preferences-open-settings', Codicon.goToFile, ( localize('preferencesOpenSettings', 'Icon for open settings commands.')));\nexport { keybindingsAddIcon, keybindingsEditIcon, keybindingsRecordKeysIcon, keybindingsSortIcon, preferencesClearInputIcon, preferencesFilterIcon, preferencesOpenSettingsIcon, settingsDiscardIcon, settingsEditIcon, settingsMoreActionIcon, settingsRemoveIcon, settingsScopeDropDownIcon };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { StandardKeyboardEvent } from 'monaco-editor/esm/vs/base/browser/keyboardEvent.js';\nimport { ActionBar } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js';\nimport { BaseActionViewItem } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionViewItems.js';\nimport { Widget } from 'monaco-editor/esm/vs/base/browser/ui/widget.js';\nimport { Action } from 'monaco-editor/esm/vs/base/common/actions.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { MarkdownString } from 'monaco-editor/esm/vs/base/common/htmlContent.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nimport { isEqual } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { ContextScopedHistoryInputBox } from 'monaco-editor/esm/vs/platform/history/browser/contextScopedHistoryWidget.js';\nimport { showHistoryKeybindingHint } from 'monaco-editor/esm/vs/platform/history/browser/historyWidgetKeybindingHint.js';\nimport { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { IContextMenuService, IContextViewService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';\nimport { asCssVariable, badgeBackground, badgeForeground, contrastBorder } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';\nimport { isWorkspaceFolder, IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { settingsScopeDropDownIcon, settingsEditIcon } from './preferencesIcons.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nlet FolderSettingsActionViewItem = class FolderSettingsActionViewItem extends BaseActionViewItem {\n    constructor(action, contextService, contextMenuService) {\n        super(null, action);\n        this.contextService = contextService;\n        this.contextMenuService = contextMenuService;\n        this._folderSettingCounts = ( new Map());\n        const workspace = this.contextService.getWorkspace();\n        this._folder = workspace.folders.length === 1 ? workspace.folders[0] : null;\n        this._register(this.contextService.onDidChangeWorkspaceFolders(() => this.onWorkspaceFoldersChanged()));\n    }\n    get folder() {\n        return this._folder;\n    }\n    set folder(folder) {\n        this._folder = folder;\n        this.update();\n    }\n    setCount(settingsTarget, count) {\n        const workspaceFolder = this.contextService.getWorkspaceFolder(settingsTarget);\n        if (!workspaceFolder) {\n            throw new Error('unknown folder');\n        }\n        const folder = workspaceFolder.uri;\n        this._folderSettingCounts.set(( folder.toString()), count);\n        this.update();\n    }\n    render(container) {\n        this.element = container;\n        this.container = container;\n        this.labelElement = dom.$('.action-title');\n        this.detailsElement = dom.$('.action-details');\n        this.dropDownElement = dom.$('.dropdown-icon.hide' + ThemeIcon.asCSSSelector(settingsScopeDropDownIcon));\n        this.anchorElement = dom.$('a.action-label.folder-settings', {\n            role: 'button',\n            'aria-haspopup': 'true',\n            'tabindex': '0'\n        }, this.labelElement, this.detailsElement, this.dropDownElement);\n        this._register(dom.addDisposableListener(this.anchorElement, dom.EventType.MOUSE_DOWN, e => dom.EventHelper.stop(e)));\n        this._register(dom.addDisposableListener(this.anchorElement, dom.EventType.CLICK, e => this.onClick(e)));\n        this._register(dom.addDisposableListener(this.container, dom.EventType.KEY_UP, e => this.onKeyUp(e)));\n        dom.append(this.container, this.anchorElement);\n        this.update();\n    }\n    onKeyUp(event) {\n        const keyboardEvent = ( new StandardKeyboardEvent(event));\n        switch (keyboardEvent.keyCode) {\n            case 3 :\n            case 10 :\n                this.onClick(event);\n                return;\n        }\n    }\n    onClick(event) {\n        dom.EventHelper.stop(event, true);\n        if (!this.folder || this._action.checked) {\n            this.showMenu();\n        }\n        else {\n            this._action.run(this._folder);\n        }\n    }\n    updateEnabled() {\n        this.update();\n    }\n    updateChecked() {\n        this.update();\n    }\n    onWorkspaceFoldersChanged() {\n        const oldFolder = this._folder;\n        const workspace = this.contextService.getWorkspace();\n        if (oldFolder) {\n            this._folder = workspace.folders.filter(folder => isEqual(folder.uri, oldFolder.uri))[0] || workspace.folders[0];\n        }\n        this._folder = this._folder ? this._folder : workspace.folders.length === 1 ? workspace.folders[0] : null;\n        this.update();\n        if (this._action.checked) {\n            this._action.run(this._folder);\n        }\n    }\n    update() {\n        let total = 0;\n        this._folderSettingCounts.forEach(n => total += n);\n        const workspace = this.contextService.getWorkspace();\n        if (this._folder) {\n            this.labelElement.textContent = this._folder.name;\n            this.anchorElement.title = this._folder.name;\n            const detailsText = this.labelWithCount(this._action.label, total);\n            this.detailsElement.textContent = detailsText;\n            this.dropDownElement.classList.toggle('hide', workspace.folders.length === 1 || !this._action.checked);\n        }\n        else {\n            const labelText = this.labelWithCount(this._action.label, total);\n            this.labelElement.textContent = labelText;\n            this.detailsElement.textContent = '';\n            this.anchorElement.title = this._action.label;\n            this.dropDownElement.classList.remove('hide');\n        }\n        this.anchorElement.classList.toggle('checked', this._action.checked);\n        this.container.classList.toggle('disabled', !this._action.enabled);\n    }\n    showMenu() {\n        this.contextMenuService.showContextMenu({\n            getAnchor: () => this.container,\n            getActions: () => this.getDropdownMenuActions(),\n            getActionViewItem: () => undefined,\n            onHide: () => {\n                this.anchorElement.blur();\n            }\n        });\n    }\n    getDropdownMenuActions() {\n        const actions = [];\n        const workspaceFolders = this.contextService.getWorkspace().folders;\n        if (this.contextService.getWorkbenchState() === 3  && workspaceFolders.length > 0) {\n            actions.push(...( workspaceFolders.map((folder, index) => {\n                const folderCount = this._folderSettingCounts.get(( folder.uri.toString()));\n                return {\n                    id: 'folderSettingsTarget' + index,\n                    label: this.labelWithCount(folder.name, folderCount),\n                    checked: this.folder && isEqual(this.folder.uri, folder.uri),\n                    enabled: true,\n                    run: () => this._action.run(folder)\n                };\n            })));\n        }\n        return actions;\n    }\n    labelWithCount(label, count) {\n        if (count) {\n            label += ` (${count})`;\n        }\n        return label;\n    }\n};\nFolderSettingsActionViewItem = ( __decorate([\n    ( __param(1, IWorkspaceContextService)),\n    ( __param(2, IContextMenuService))\n], FolderSettingsActionViewItem));\nlet SettingsTargetsWidget = class SettingsTargetsWidget extends Widget {\n    constructor(parent, options, contextService, instantiationService, environmentService, labelService, languageService) {\n        super();\n        this.contextService = contextService;\n        this.instantiationService = instantiationService;\n        this.environmentService = environmentService;\n        this.labelService = labelService;\n        this.languageService = languageService;\n        this._settingsTarget = null;\n        this._onDidTargetChange = this._register(( new Emitter()));\n        this.onDidTargetChange = this._onDidTargetChange.event;\n        this.options = options ?? {};\n        this.create(parent);\n        this._register(this.contextService.onDidChangeWorkbenchState(() => this.onWorkbenchStateChanged()));\n        this._register(this.contextService.onDidChangeWorkspaceFolders(() => this.update()));\n    }\n    resetLabels() {\n        const remoteAuthority = this.environmentService.remoteAuthority;\n        const hostLabel = remoteAuthority && this.labelService.getHostLabel(Schemas.vscodeRemote, remoteAuthority);\n        this.userLocalSettings.label = ( localize('userSettings', \"User\"));\n        this.userRemoteSettings.label = ( localize('userSettingsRemote', \"Remote\")) + (hostLabel ? ` [${hostLabel}]` : '');\n        this.workspaceSettings.label = ( localize('workspaceSettings', \"Workspace\"));\n        this.folderSettingsAction.label = ( localize('folderSettings', \"Folder\"));\n    }\n    create(parent) {\n        const settingsTabsWidget = dom.append(parent, dom.$('.settings-tabs-widget'));\n        this.settingsSwitcherBar = this._register(( new ActionBar(settingsTabsWidget, {\n            orientation: 0 ,\n            focusOnlyEnabledItems: true,\n            ariaLabel: ( localize('settingsSwitcherBarAriaLabel', \"Settings Switcher\")),\n            animated: false,\n            actionViewItemProvider: (action) => action.id === 'folderSettings' ? this.folderSettings : undefined\n        })));\n        this.userLocalSettings = ( new Action(\n            'userSettings',\n            '',\n            '.settings-tab',\n            true,\n            () => this.updateTarget(3 )\n        ));\n        this.userLocalSettings.tooltip = ( localize('userSettings', \"User\"));\n        this.userRemoteSettings = ( new Action(\n            'userSettingsRemote',\n            '',\n            '.settings-tab',\n            true,\n            () => this.updateTarget(4 )\n        ));\n        const remoteAuthority = this.environmentService.remoteAuthority;\n        const hostLabel = remoteAuthority && this.labelService.getHostLabel(Schemas.vscodeRemote, remoteAuthority);\n        this.userRemoteSettings.tooltip = ( localize('userSettingsRemote', \"Remote\")) + (hostLabel ? ` [${hostLabel}]` : '');\n        this.workspaceSettings = ( new Action(\n            'workspaceSettings',\n            '',\n            '.settings-tab',\n            false,\n            () => this.updateTarget(5 )\n        ));\n        this.folderSettingsAction = ( new Action('folderSettings', '', '.settings-tab', false, async (folder) => {\n            this.updateTarget(isWorkspaceFolder(folder) ? folder.uri : 3 );\n        }));\n        this.folderSettings = this.instantiationService.createInstance(FolderSettingsActionViewItem, this.folderSettingsAction);\n        this.resetLabels();\n        this.update();\n        this.settingsSwitcherBar.push([this.userLocalSettings, this.userRemoteSettings, this.workspaceSettings, this.folderSettingsAction]);\n    }\n    get settingsTarget() {\n        return this._settingsTarget;\n    }\n    set settingsTarget(settingsTarget) {\n        this._settingsTarget = settingsTarget;\n        this.userLocalSettings.checked = 3  === this.settingsTarget;\n        this.userRemoteSettings.checked = 4  === this.settingsTarget;\n        this.workspaceSettings.checked = 5  === this.settingsTarget;\n        if (this.settingsTarget instanceof URI) {\n            this.folderSettings.action.checked = true;\n            this.folderSettings.folder = this.contextService.getWorkspaceFolder(this.settingsTarget);\n        }\n        else {\n            this.folderSettings.action.checked = false;\n        }\n    }\n    setResultCount(settingsTarget, count) {\n        if (settingsTarget === 5 ) {\n            let label = ( localize('workspaceSettings', \"Workspace\"));\n            if (count) {\n                label += ` (${count})`;\n            }\n            this.workspaceSettings.label = label;\n        }\n        else if (settingsTarget === 3 ) {\n            let label = ( localize('userSettings', \"User\"));\n            if (count) {\n                label += ` (${count})`;\n            }\n            this.userLocalSettings.label = label;\n        }\n        else if (settingsTarget instanceof URI) {\n            this.folderSettings.setCount(settingsTarget, count);\n        }\n    }\n    updateLanguageFilterIndicators(filter) {\n        this.resetLabels();\n        if (filter) {\n            const languageToUse = this.languageService.getLanguageName(filter);\n            if (languageToUse) {\n                const languageSuffix = ` [${languageToUse}]`;\n                this.userLocalSettings.label += languageSuffix;\n                this.userRemoteSettings.label += languageSuffix;\n                this.workspaceSettings.label += languageSuffix;\n                this.folderSettingsAction.label += languageSuffix;\n            }\n        }\n    }\n    onWorkbenchStateChanged() {\n        this.folderSettings.folder = null;\n        this.update();\n        if (this.settingsTarget === 5  && this.contextService.getWorkbenchState() === 3 ) {\n            this.updateTarget(3 );\n        }\n    }\n    updateTarget(settingsTarget) {\n        const isSameTarget = this.settingsTarget === settingsTarget ||\n            settingsTarget instanceof URI &&\n                this.settingsTarget instanceof URI &&\n                isEqual(this.settingsTarget, settingsTarget);\n        if (!isSameTarget) {\n            this.settingsTarget = settingsTarget;\n            this._onDidTargetChange.fire(this.settingsTarget);\n        }\n        return Promise.resolve(undefined);\n    }\n    async update() {\n        this.settingsSwitcherBar.domNode.classList.toggle('empty-workbench', this.contextService.getWorkbenchState() === 1 );\n        this.userRemoteSettings.enabled = !!(this.options.enableRemoteSettings && this.environmentService.remoteAuthority);\n        this.workspaceSettings.enabled = this.contextService.getWorkbenchState() !== 1 ;\n        this.folderSettings.action.enabled = this.contextService.getWorkbenchState() === 3  && this.contextService.getWorkspace().folders.length > 0;\n        this.workspaceSettings.tooltip = ( localize('workspaceSettings', \"Workspace\"));\n    }\n};\nSettingsTargetsWidget = ( __decorate([\n    ( __param(2, IWorkspaceContextService)),\n    ( __param(3, IInstantiationService)),\n    ( __param(4, IWorkbenchEnvironmentService)),\n    ( __param(5, ILabelService)),\n    ( __param(6, ILanguageService))\n], SettingsTargetsWidget));\nlet SearchWidget = class SearchWidget extends Widget {\n    constructor(parent, options, contextViewService, instantiationService, contextKeyService, keybindingService) {\n        super();\n        this.options = options;\n        this.contextViewService = contextViewService;\n        this.instantiationService = instantiationService;\n        this.contextKeyService = contextKeyService;\n        this.keybindingService = keybindingService;\n        this._onDidChange = this._register(( new Emitter()));\n        this.onDidChange = this._onDidChange.event;\n        this._onFocus = this._register(( new Emitter()));\n        this.onFocus = this._onFocus.event;\n        this.create(parent);\n    }\n    create(parent) {\n        this.domNode = dom.append(parent, dom.$('div.settings-header-widget'));\n        this.createSearchContainer(dom.append(this.domNode, dom.$('div.settings-search-container')));\n        this.controlsDiv = dom.append(this.domNode, dom.$('div.settings-search-controls'));\n        if (this.options.showResultCount) {\n            this.countElement = dom.append(this.controlsDiv, dom.$('.settings-count-widget'));\n            this.countElement.style.backgroundColor = asCssVariable(badgeBackground);\n            this.countElement.style.color = asCssVariable(badgeForeground);\n            this.countElement.style.border = `1px solid ${asCssVariable(contrastBorder)}`;\n        }\n        this.inputBox.inputElement.setAttribute('aria-live', this.options.ariaLive || 'off');\n        if (this.options.ariaLabelledBy) {\n            this.inputBox.inputElement.setAttribute('aria-labelledBy', this.options.ariaLabelledBy);\n        }\n        const focusTracker = this._register(dom.trackFocus(this.inputBox.inputElement));\n        this._register(focusTracker.onDidFocus(() => this._onFocus.fire()));\n        const focusKey = this.options.focusKey;\n        if (focusKey) {\n            this._register(focusTracker.onDidFocus(() => focusKey.set(true)));\n            this._register(focusTracker.onDidBlur(() => focusKey.set(false)));\n        }\n    }\n    createSearchContainer(searchContainer) {\n        this.searchContainer = searchContainer;\n        const searchInput = dom.append(this.searchContainer, dom.$('div.settings-search-input'));\n        this.inputBox = this._register(this.createInputBox(searchInput));\n        this._register(this.inputBox.onDidChange(value => this._onDidChange.fire(value)));\n    }\n    createInputBox(parent) {\n        const showHistoryHint = () => showHistoryKeybindingHint(this.keybindingService);\n        const box = this._register(( new ContextScopedHistoryInputBox(\n            parent,\n            this.contextViewService,\n            { ...this.options, showHistoryHint },\n            this.contextKeyService\n        )));\n        return box;\n    }\n    showMessage(message) {\n        if (this.countElement && message !== this.countElement.textContent) {\n            this.countElement.textContent = message;\n            this.inputBox.inputElement.setAttribute('aria-label', message);\n            this.inputBox.inputElement.style.paddingRight = this.getControlsWidth() + 'px';\n        }\n    }\n    layout(dimension) {\n        if (dimension.width < 400) {\n            this.countElement?.classList.add('hide');\n            this.inputBox.inputElement.style.paddingRight = '0px';\n        }\n        else {\n            this.countElement?.classList.remove('hide');\n            this.inputBox.inputElement.style.paddingRight = this.getControlsWidth() + 'px';\n        }\n    }\n    getControlsWidth() {\n        const countWidth = this.countElement ? dom.getTotalWidth(this.countElement) : 0;\n        return countWidth + 20;\n    }\n    focus() {\n        this.inputBox.focus();\n        if (this.getValue()) {\n            this.inputBox.select();\n        }\n    }\n    hasFocus() {\n        return this.inputBox.hasFocus();\n    }\n    clear() {\n        this.inputBox.value = '';\n    }\n    getValue() {\n        return this.inputBox.value;\n    }\n    setValue(value) {\n        return this.inputBox.value = value;\n    }\n    dispose() {\n        this.options.focusKey?.set(false);\n        super.dispose();\n    }\n};\nSearchWidget = ( __decorate([\n    ( __param(2, IContextViewService)),\n    ( __param(3, IInstantiationService)),\n    ( __param(4, IContextKeyService)),\n    ( __param(5, IKeybindingService))\n], SearchWidget));\nclass EditPreferenceWidget extends Disposable {\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this._line = -1;\n        this._preferences = [];\n        this._editPreferenceDecoration = this.editor.createDecorationsCollection();\n        this._onClick = this._register(( new Emitter()));\n        this.onClick = this._onClick.event;\n        this._register(this.editor.onMouseDown((e) => {\n            if (e.target.type !== 2  || e.target.detail.isAfterLines || !this.isVisible()) {\n                return;\n            }\n            this._onClick.fire(e);\n        }));\n    }\n    get preferences() {\n        return this._preferences;\n    }\n    getLine() {\n        return this._line;\n    }\n    show(line, hoverMessage, preferences) {\n        this._preferences = preferences;\n        const newDecoration = [];\n        this._line = line;\n        newDecoration.push({\n            options: {\n                description: 'edit-preference-widget-decoration',\n                glyphMarginClassName: ThemeIcon.asClassName(settingsEditIcon),\n                glyphMarginHoverMessage: ( new MarkdownString()).appendText(hoverMessage),\n                stickiness: 1 ,\n            },\n            range: {\n                startLineNumber: line,\n                startColumn: 1,\n                endLineNumber: line,\n                endColumn: 1\n            }\n        });\n        this._editPreferenceDecoration.set(newDecoration);\n    }\n    hide() {\n        this._editPreferenceDecoration.clear();\n    }\n    isVisible() {\n        return this._editPreferenceDecoration.length > 0;\n    }\n    dispose() {\n        this.hide();\n        super.dispose();\n    }\n}\nexport { EditPreferenceWidget, FolderSettingsActionViewItem, SearchWidget, SettingsTargetsWidget };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport './media/keybindings.css.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { OS } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { Disposable, DisposableStore, toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { KeybindingLabel } from 'monaco-editor/esm/vs/base/browser/ui/keybindingLabel/keybindingLabel.js';\nimport { Widget } from 'monaco-editor/esm/vs/base/browser/ui/widget.js';\nimport * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport * as aria from 'monaco-editor/esm/vs/base/browser/ui/aria/aria.js';\nimport { StandardKeyboardEvent } from 'monaco-editor/esm/vs/base/browser/keyboardEvent.js';\nimport { createFastDomNode } from 'monaco-editor/esm/vs/base/browser/fastDomNode.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { IContextViewService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { asCssVariable, editorWidgetBackground, editorWidgetForeground, widgetShadow } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { SearchWidget } from './preferencesWidgets.js';\nimport { withNullAsUndefined } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { Promises, timeout } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { defaultInputBoxStyles, defaultKeybindingLabelStyles } from 'monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js';\nlet KeybindingsSearchWidget = class KeybindingsSearchWidget extends SearchWidget {\n    constructor(parent, options, contextViewService, instantiationService, contextKeyService, keybindingService) {\n        super(parent, options, contextViewService, instantiationService, contextKeyService, keybindingService);\n        this.recordDisposables = this._register(( new DisposableStore()));\n        this._onKeybinding = this._register(( new Emitter()));\n        this.onKeybinding = this._onKeybinding.event;\n        this._onEnter = this._register(( new Emitter()));\n        this.onEnter = this._onEnter.event;\n        this._onEscape = this._register(( new Emitter()));\n        this.onEscape = this._onEscape.event;\n        this._onBlur = this._register(( new Emitter()));\n        this.onBlur = this._onBlur.event;\n        this._register(toDisposable(() => this.stopRecordingKeys()));\n        this._chords = null;\n        this._inputValue = '';\n    }\n    clear() {\n        this._chords = null;\n        super.clear();\n    }\n    startRecordingKeys() {\n        this.recordDisposables.add(dom.addDisposableListener(this.inputBox.inputElement, dom.EventType.KEY_DOWN, (e) => this._onKeyDown(( new StandardKeyboardEvent(e)))));\n        this.recordDisposables.add(dom.addDisposableListener(this.inputBox.inputElement, dom.EventType.BLUR, () => this._onBlur.fire()));\n        this.recordDisposables.add(dom.addDisposableListener(this.inputBox.inputElement, dom.EventType.INPUT, () => {\n            this.setInputValue(this._inputValue);\n        }));\n    }\n    stopRecordingKeys() {\n        this._chords = null;\n        this.recordDisposables.clear();\n    }\n    setInputValue(value) {\n        this._inputValue = value;\n        this.inputBox.value = this._inputValue;\n    }\n    _onKeyDown(keyboardEvent) {\n        keyboardEvent.preventDefault();\n        keyboardEvent.stopPropagation();\n        const options = this.options;\n        if (!options.recordEnter && keyboardEvent.equals(3 )) {\n            this._onEnter.fire();\n            return;\n        }\n        if (keyboardEvent.equals(9 )) {\n            this._onEscape.fire();\n            return;\n        }\n        this.printKeybinding(keyboardEvent);\n    }\n    printKeybinding(keyboardEvent) {\n        const keybinding = this.keybindingService.resolveKeyboardEvent(keyboardEvent);\n        const info = `code: ${keyboardEvent.browserEvent.code}, keyCode: ${keyboardEvent.browserEvent.keyCode}, key: ${keyboardEvent.browserEvent.key} => UI: ${keybinding.getAriaLabel()}, user settings: ${keybinding.getUserSettingsLabel()}, dispatch: ${keybinding.getDispatchChords()[0]}`;\n        const options = this.options;\n        if (!this._chords) {\n            this._chords = [];\n        }\n        const hasIncompleteChord = this._chords.length > 0 && this._chords[this._chords.length - 1].getDispatchChords()[0] === null;\n        if (hasIncompleteChord) {\n            this._chords[this._chords.length - 1] = keybinding;\n        }\n        else {\n            if (this._chords.length === 2) {\n                this._chords = [];\n            }\n            this._chords.push(keybinding);\n        }\n        const value = ( this._chords.map((keybinding) => keybinding.getUserSettingsLabel() || '')).join(' ');\n        this.setInputValue(options.quoteRecordedKeys ? `\"${value}\"` : value);\n        this.inputBox.inputElement.title = info;\n        this._onKeybinding.fire(this._chords);\n    }\n};\nKeybindingsSearchWidget = ( __decorate([\n    ( __param(2, IContextViewService)),\n    ( __param(3, IInstantiationService)),\n    ( __param(4, IContextKeyService)),\n    ( __param(5, IKeybindingService))\n], KeybindingsSearchWidget));\nlet DefineKeybindingWidget = class DefineKeybindingWidget extends Widget {\n    static { this.WIDTH = 400; }\n    static { this.HEIGHT = 110; }\n    constructor(parent, instantiationService) {\n        super();\n        this.instantiationService = instantiationService;\n        this._chords = null;\n        this._isVisible = false;\n        this._onHide = this._register(( new Emitter()));\n        this._onDidChange = this._register(( new Emitter()));\n        this.onDidChange = this._onDidChange.event;\n        this._onShowExistingKeybindings = this._register(( new Emitter()));\n        this.onShowExistingKeybidings = this._onShowExistingKeybindings.event;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setDisplay('none');\n        this._domNode.setClassName('defineKeybindingWidget');\n        this._domNode.setWidth(DefineKeybindingWidget.WIDTH);\n        this._domNode.setHeight(DefineKeybindingWidget.HEIGHT);\n        const message = ( nls.localize(\n            'defineKeybinding.initial',\n            \"Press desired key combination and then press ENTER.\"\n        ));\n        dom.append(this._domNode.domNode, dom.$('.message', undefined, message));\n        this._domNode.domNode.style.backgroundColor = asCssVariable(editorWidgetBackground);\n        this._domNode.domNode.style.color = asCssVariable(editorWidgetForeground);\n        this._domNode.domNode.style.boxShadow = `0 2px 8px ${asCssVariable(widgetShadow)}`;\n        this._keybindingInputWidget = this._register(this.instantiationService.createInstance(KeybindingsSearchWidget, this._domNode.domNode, { ariaLabel: message, history: [], inputBoxStyles: defaultInputBoxStyles }));\n        this._keybindingInputWidget.startRecordingKeys();\n        this._register(this._keybindingInputWidget.onKeybinding(keybinding => this.onKeybinding(keybinding)));\n        this._register(this._keybindingInputWidget.onEnter(() => this.hide()));\n        this._register(this._keybindingInputWidget.onEscape(() => this.clearOrHide()));\n        this._register(this._keybindingInputWidget.onBlur(() => this.onCancel()));\n        this._outputNode = dom.append(this._domNode.domNode, dom.$('.output'));\n        this._showExistingKeybindingsNode = dom.append(this._domNode.domNode, dom.$('.existing'));\n        if (parent) {\n            dom.append(parent, this._domNode.domNode);\n        }\n    }\n    get domNode() {\n        return this._domNode.domNode;\n    }\n    define() {\n        this._keybindingInputWidget.clear();\n        return Promises.withAsyncBody(async (c) => {\n            if (!this._isVisible) {\n                this._isVisible = true;\n                this._domNode.setDisplay('block');\n                this._chords = null;\n                this._keybindingInputWidget.setInputValue('');\n                dom.clearNode(this._outputNode);\n                dom.clearNode(this._showExistingKeybindingsNode);\n                await timeout(0);\n                this._keybindingInputWidget.focus();\n            }\n            const disposable = this._onHide.event(() => {\n                c(this.getUserSettingsLabel());\n                disposable.dispose();\n            });\n        });\n    }\n    layout(layout) {\n        const top = Math.round((layout.height - DefineKeybindingWidget.HEIGHT) / 2);\n        this._domNode.setTop(top);\n        const left = Math.round((layout.width - DefineKeybindingWidget.WIDTH) / 2);\n        this._domNode.setLeft(left);\n    }\n    printExisting(numberOfExisting) {\n        if (numberOfExisting > 0) {\n            const existingElement = dom.$('span.existingText');\n            const text = numberOfExisting === 1 ? ( nls.localize(\n                'defineKeybinding.oneExists',\n                \"1 existing command has this keybinding\",\n                numberOfExisting\n            )) : ( nls.localize(\n                'defineKeybinding.existing',\n                \"{0} existing commands have this keybinding\",\n                numberOfExisting\n            ));\n            dom.append(existingElement, document.createTextNode(text));\n            aria.alert(text);\n            this._showExistingKeybindingsNode.appendChild(existingElement);\n            existingElement.onmousedown = (e) => { e.preventDefault(); };\n            existingElement.onmouseup = (e) => { e.preventDefault(); };\n            existingElement.onclick = () => { this._onShowExistingKeybindings.fire(this.getUserSettingsLabel()); };\n        }\n    }\n    onKeybinding(keybinding) {\n        this._chords = keybinding;\n        dom.clearNode(this._outputNode);\n        dom.clearNode(this._showExistingKeybindingsNode);\n        const firstLabel = ( new KeybindingLabel(this._outputNode, OS, defaultKeybindingLabelStyles));\n        firstLabel.set(withNullAsUndefined(this._chords?.[0]));\n        if (this._chords) {\n            for (let i = 1; i < this._chords.length; i++) {\n                this._outputNode.appendChild(document.createTextNode(( nls.localize('defineKeybinding.chordsTo', \"chord to\"))));\n                const chordLabel = ( new KeybindingLabel(this._outputNode, OS, defaultKeybindingLabelStyles));\n                chordLabel.set(this._chords[i]);\n            }\n        }\n        const label = this.getUserSettingsLabel();\n        if (label) {\n            this._onDidChange.fire(label);\n        }\n    }\n    getUserSettingsLabel() {\n        let label = null;\n        if (this._chords) {\n            label = ( this._chords.map(keybinding => keybinding.getUserSettingsLabel())).join(' ');\n        }\n        return label;\n    }\n    onCancel() {\n        this._chords = null;\n        this.hide();\n    }\n    clearOrHide() {\n        if (this._chords === null) {\n            this.hide();\n        }\n        else {\n            this._chords = null;\n            this._keybindingInputWidget.clear();\n            dom.clearNode(this._outputNode);\n            dom.clearNode(this._showExistingKeybindingsNode);\n        }\n    }\n    hide() {\n        this._domNode.setDisplay('none');\n        this._isVisible = false;\n        this._onHide.fire();\n    }\n};\nDefineKeybindingWidget = ( __decorate([\n    ( __param(1, IInstantiationService))\n], DefineKeybindingWidget));\n(class DefineKeybindingOverlayWidget extends Disposable {\n    static { this.ID = 'editor.contrib.defineKeybindingWidget'; }\n    constructor(_editor, instantiationService) {\n        super();\n        this._editor = _editor;\n        this._widget = instantiationService.createInstance(DefineKeybindingWidget, null);\n        this._editor.addOverlayWidget(this);\n    }\n    getId() {\n        return DefineKeybindingOverlayWidget.ID;\n    }\n    getDomNode() {\n        return this._widget.domNode;\n    }\n    getPosition() {\n        return {\n            preference: null\n        };\n    }\n    dispose() {\n        this._editor.removeOverlayWidget(this);\n        super.dispose();\n    }\n    start() {\n        if (this._editor.hasModel()) {\n            this._editor.revealPositionInCenterIfOutsideViewport(this._editor.getPosition(), 0 );\n        }\n        const layoutInfo = this._editor.getLayoutInfo();\n        this._widget.layout(new dom.Dimension(layoutInfo.width, layoutInfo.height));\n        return this._widget.define();\n    }\n});\nexport { DefineKeybindingWidget, KeybindingsSearchWidget };\n","import n from '../../../../../../../node_modules/rollup-plugin-styles/dist/runtime/inject-css.js';\nvar css = \".suggest-input-container{border-radius:2px;padding:2px 6px}.suggest-input-container .monaco-editor,.suggest-input-container .monaco-editor-background,.suggest-input-container .mtk1{color:inherit}.suggest-input-container .suggest-input-placeholder{margin-top:1px;overflow:hidden;pointer-events:none;position:absolute;text-overflow:ellipsis;white-space:nowrap;z-index:1}.suggest-input-container .monaco-editor,.suggest-input-container .monaco-editor .lines-content{background:none}\";\nn(css,{});\nexport { css, css as default };\n","import { __decorate, __param } from '../../../../../../../node_modules/tslib/tslib.es6.js';\nimport './suggestEnabledInput.css.js';\nimport { append, $ } from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { Widget } from 'monaco-editor/esm/vs/base/browser/ui/widget.js';\nimport { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { mixin } from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { isMacintosh } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { CodeEditorWidget } from 'monaco-editor/esm/vs/editor/browser/widget/codeEditorWidget.js';\nimport { EditOperation } from 'monaco-editor/esm/vs/editor/common/core/editOperation.js';\nimport { Position } from 'monaco-editor/esm/vs/editor/common/core/position.js';\nimport { Range } from 'monaco-editor/esm/vs/editor/common/core/range.js';\nimport { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';\nimport { ContextMenuController } from 'monaco-editor/esm/vs/editor/contrib/contextmenu/browser/contextmenu.js';\nimport { SnippetController2 } from 'monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetController2.js';\nimport { SuggestController } from 'monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestController.js';\nimport { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { selectionBackground, inputBackground, inputForeground, editorSelectionBackground, asCssVariable, inputPlaceholderForeground, asCssVariableWithDefault, inputBorder } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { MenuPreventer } from '../menuPreventer.js';\nimport { getSimpleEditorOptions } from '../simpleEditorOptions.js';\nimport { SelectionClipboardContributionID } from '../selectionClipboard.js';\nimport { EditorExtensionsRegistry } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';\nimport { DEFAULT_FONT_FAMILY } from '../../../../browser/style.js';\nimport { ServiceCollection } from 'monaco-editor/esm/vs/platform/instantiation/common/serviceCollection.js';\nimport { ILanguageFeaturesService } from 'monaco-editor/esm/vs/editor/common/services/languageFeatures.js';\nimport { ensureValidWordDefinition, getWordAtText } from 'monaco-editor/esm/vs/editor/common/core/wordHelper.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nlet SuggestEnabledInput = class SuggestEnabledInput extends Widget {\n    constructor(id, parent, suggestionProvider, ariaLabel, resourceHandle, options, defaultInstantiationService, modelService, contextKeyService, languageFeaturesService, configurationService) {\n        super();\n        this._onShouldFocusResults = ( (new Emitter()));\n        this.onShouldFocusResults = this._onShouldFocusResults.event;\n        this._onInputDidChange = ( (new Emitter()));\n        this.onInputDidChange = this._onInputDidChange.event;\n        this._onDidFocus = this._register(( (new Emitter())));\n        this.onDidFocus = this._onDidFocus.event;\n        this._onDidBlur = this._register(( (new Emitter())));\n        this.onDidBlur = this._onDidBlur.event;\n        this.stylingContainer = append(parent, $('.suggest-input-container'));\n        this.element = parent;\n        this.placeholderText = append(this.stylingContainer, $('.suggest-input-placeholder', undefined, options.placeholderText || ''));\n        const editorOptions = mixin(getSimpleEditorOptions(configurationService), getSuggestEnabledInputOptions(ariaLabel));\n        editorOptions.overflowWidgetsDomNode = options.overflowWidgetsDomNode;\n        const scopedContextKeyService = this.getScopedContextKeyService(contextKeyService);\n        const instantiationService = scopedContextKeyService\n            ? defaultInstantiationService.createChild(( (new ServiceCollection([IContextKeyService, scopedContextKeyService]))))\n            : defaultInstantiationService;\n        this.inputWidget = this._register(instantiationService.createInstance(CodeEditorWidget, this.stylingContainer, editorOptions, {\n            contributions: EditorExtensionsRegistry.getSomeEditorContributions([\n                SuggestController.ID,\n                SnippetController2.ID,\n                ContextMenuController.ID,\n                MenuPreventer.ID,\n                SelectionClipboardContributionID,\n            ]),\n            isSimpleWidget: true,\n        }));\n        this._register(configurationService.onDidChangeConfiguration((e) => {\n            if (e.affectsConfiguration('editor.accessibilitySupport') ||\n                e.affectsConfiguration('editor.cursorBlinking')) {\n                const accessibilitySupport = configurationService.getValue('editor.accessibilitySupport');\n                const cursorBlinking = configurationService.getValue('editor.cursorBlinking');\n                this.inputWidget.updateOptions({\n                    accessibilitySupport,\n                    cursorBlinking\n                });\n            }\n        }));\n        this._register(this.inputWidget.onDidFocusEditorText(() => this._onDidFocus.fire()));\n        this._register(this.inputWidget.onDidBlurEditorText(() => this._onDidBlur.fire()));\n        const scopeHandle = ( URI.parse(resourceHandle));\n        this.inputModel = modelService.createModel('', null, scopeHandle, true);\n        this._register(this.inputModel);\n        this.inputWidget.setModel(this.inputModel);\n        this._register(this.inputWidget.onDidPaste(() => this.setValue(this.getValue())));\n        this._register((this.inputWidget.onDidFocusEditorText(() => {\n            if (options.focusContextKey) {\n                options.focusContextKey.set(true);\n            }\n            this.stylingContainer.classList.add('synthetic-focus');\n        })));\n        this._register((this.inputWidget.onDidBlurEditorText(() => {\n            if (options.focusContextKey) {\n                options.focusContextKey.set(false);\n            }\n            this.stylingContainer.classList.remove('synthetic-focus');\n        })));\n        const onKeyDownMonaco = Event.chain(this.inputWidget.onKeyDown);\n        this._register(onKeyDownMonaco.filter(e => e.keyCode === 3 ).on(e => { e.preventDefault();  }, this));\n        this._register(onKeyDownMonaco.filter(e => e.keyCode === 18  && (isMacintosh ? e.metaKey : e.ctrlKey)).on(() => this._onShouldFocusResults.fire(), this));\n        let preexistingContent = this.getValue();\n        const inputWidgetModel = this.inputWidget.getModel();\n        if (inputWidgetModel) {\n            this._register(inputWidgetModel.onDidChangeContent(() => {\n                const content = this.getValue();\n                this.placeholderText.style.visibility = content ? 'hidden' : 'visible';\n                if (preexistingContent.trim() === content.trim()) {\n                    return;\n                }\n                this._onInputDidChange.fire(undefined);\n                preexistingContent = content;\n            }));\n        }\n        const validatedSuggestProvider = {\n            provideResults: suggestionProvider.provideResults,\n            sortKey: suggestionProvider.sortKey || (a => a),\n            triggerCharacters: suggestionProvider.triggerCharacters || [],\n            wordDefinition: suggestionProvider.wordDefinition ? ensureValidWordDefinition(suggestionProvider.wordDefinition) : undefined,\n            alwaysShowSuggestions: !!suggestionProvider.alwaysShowSuggestions,\n        };\n        this.setValue(options.value || '');\n        this._register(languageFeaturesService.completionProvider.register({ scheme: scopeHandle.scheme, pattern: '**/' + scopeHandle.path, hasAccessToAllModels: true }, {\n            _debugDisplayName: `suggestEnabledInput/${id}`,\n            triggerCharacters: validatedSuggestProvider.triggerCharacters,\n            provideCompletionItems: (model, position, _context) => {\n                const query = model.getValue();\n                const zeroIndexedColumn = position.column - 1;\n                let alreadyTypedCount = 0, zeroIndexedWordStart = 0;\n                if (validatedSuggestProvider.wordDefinition) {\n                    const wordAtText = getWordAtText(position.column, validatedSuggestProvider.wordDefinition, query, 0);\n                    alreadyTypedCount = wordAtText?.word.length ?? 0;\n                    zeroIndexedWordStart = wordAtText ? wordAtText.startColumn - 1 : 0;\n                }\n                else {\n                    zeroIndexedWordStart = query.lastIndexOf(' ', zeroIndexedColumn - 1) + 1;\n                    alreadyTypedCount = zeroIndexedColumn - zeroIndexedWordStart;\n                }\n                if (!validatedSuggestProvider.alwaysShowSuggestions && alreadyTypedCount > 0 && validatedSuggestProvider.triggerCharacters?.indexOf(query[zeroIndexedWordStart]) === -1) {\n                    return { suggestions: [] };\n                }\n                return {\n                    suggestions: ( (suggestionProvider.provideResults(query).map((result) => {\n                        let label;\n                        let rest;\n                        if (typeof result === 'string') {\n                            label = result;\n                        }\n                        else {\n                            label = result.label;\n                            rest = result;\n                        }\n                        return {\n                            label,\n                            insertText: label,\n                            range: Range.fromPositions(position.delta(0, -alreadyTypedCount), position),\n                            sortText: validatedSuggestProvider.sortKey(label),\n                            kind: 17 ,\n                            ...rest\n                        };\n                    })))\n                };\n            }\n        }));\n        this.style(options.styleOverrides || {});\n    }\n    getScopedContextKeyService(_contextKeyService) {\n        return undefined;\n    }\n    updateAriaLabel(label) {\n        this.inputWidget.updateOptions({ ariaLabel: label });\n    }\n    setValue(val) {\n        val = val.replace(/\\s/g, ' ');\n        const fullRange = this.inputModel.getFullModelRange();\n        this.inputWidget.executeEdits('suggestEnabledInput.setValue', [EditOperation.replace(fullRange, val)]);\n        this.inputWidget.setScrollTop(0);\n        this.inputWidget.setPosition(( (new Position(1, val.length + 1))));\n    }\n    getValue() {\n        return this.inputWidget.getValue();\n    }\n    style(styleOverrides) {\n        this.stylingContainer.style.backgroundColor = asCssVariable(styleOverrides.inputBackground ?? inputBackground);\n        this.stylingContainer.style.color = asCssVariable(styleOverrides.inputForeground ?? inputForeground);\n        this.placeholderText.style.color = asCssVariable(styleOverrides.inputPlaceholderForeground ?? inputPlaceholderForeground);\n        this.stylingContainer.style.borderWidth = '1px';\n        this.stylingContainer.style.borderStyle = 'solid';\n        this.stylingContainer.style.borderColor = asCssVariableWithDefault(styleOverrides.inputBorder ?? inputBorder, 'transparent');\n        const cursor = this.stylingContainer.getElementsByClassName('cursor')[0];\n        if (cursor) {\n            cursor.style.backgroundColor = asCssVariable(styleOverrides.inputForeground ?? inputForeground);\n        }\n    }\n    focus(selectAll) {\n        this.inputWidget.focus();\n        if (selectAll && this.inputWidget.getValue()) {\n            this.selectAll();\n        }\n    }\n    onHide() {\n        this.inputWidget.onHide();\n    }\n    layout(dimension) {\n        this.inputWidget.layout(dimension);\n        this.placeholderText.style.width = `${dimension.width - 2}px`;\n    }\n    selectAll() {\n        this.inputWidget.setSelection(( (new Range(1, 1, 1, this.getValue().length + 1))));\n    }\n};\nSuggestEnabledInput = ( (__decorate([\n    ( (__param(6, IInstantiationService))),\n    ( (__param(7, IModelService))),\n    ( (__param(8, IContextKeyService))),\n    ( (__param(9, ILanguageFeaturesService))),\n    ( (__param(10, IConfigurationService)))\n], SuggestEnabledInput)));\nregisterThemingParticipant((theme, collector) => {\n    const selectionBackgroundColor = theme.getColor(selectionBackground);\n    if (selectionBackgroundColor) {\n        const inputBackgroundColor = theme.getColor(inputBackground);\n        if (inputBackgroundColor) {\n            collector.addRule(`.suggest-input-container .monaco-editor .selected-text { background-color: ${( ( inputBackgroundColor.transparent(0.4)))}; }`);\n        }\n        const inputForegroundColor = theme.getColor(inputForeground);\n        if (inputForegroundColor) {\n            collector.addRule(`.suggest-input-container .monaco-editor .view-line span.inline-selected-text { color: ${inputForegroundColor}; }`);\n        }\n        const backgroundColor = theme.getColor(inputBackground);\n        if (backgroundColor) {\n            collector.addRule(`.suggest-input-container .monaco-editor-background { background-color: ${backgroundColor}; } `);\n        }\n        collector.addRule(`.suggest-input-container .monaco-editor .focused .selected-text { background-color: ${selectionBackgroundColor}; }`);\n    }\n    else {\n        collector.addRule(`.suggest-input-container .monaco-editor .focused .selected-text { background-color: ${theme.getColor(editorSelectionBackground)}; }`);\n    }\n});\nfunction getSuggestEnabledInputOptions(ariaLabel) {\n    return {\n        fontSize: 13,\n        lineHeight: 20,\n        wordWrap: 'off',\n        scrollbar: { vertical: 'hidden', },\n        roundedSelection: false,\n        guides: {\n            indentation: false\n        },\n        cursorWidth: 1,\n        fontFamily: DEFAULT_FONT_FAMILY,\n        ariaLabel: ariaLabel || '',\n        snippetSuggestions: 'none',\n        suggest: { filterGraceful: false, showIcons: false },\n        autoClosingBrackets: 'never'\n    };\n}\nexport { SuggestEnabledInput };\n","import { Color, RGBA } from 'monaco-editor/esm/vs/base/common/color.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { registerColor, transparent, selectBackground, selectForeground, selectBorder, editorWidgetBorder, checkboxBackground, checkboxForeground, checkboxBorder, inputBackground, inputForeground, inputBorder, listHoverBackground, focusBorder } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { PANEL_BORDER } from '../../../common/theme.js';\nconst settingsHeaderForeground = registerColor('settings.headerForeground', { light: '#444444', dark: '#e7e7e7', hcDark: '#ffffff', hcLight: '#292929' }, ( localize(\n    'headerForeground',\n    \"The foreground color for a section header or active title.\"\n)));\nconst settingsHeaderHoverForeground = registerColor('settings.settingsHeaderHoverForeground', { light: ( transparent(settingsHeaderForeground, 0.7)), dark: ( transparent(settingsHeaderForeground, 0.7)), hcDark: ( transparent(settingsHeaderForeground, 0.7)), hcLight: ( transparent(settingsHeaderForeground, 0.7)) }, ( localize(\n    'settingsHeaderHoverForeground',\n    \"The foreground color for a section header or hovered title.\"\n)));\nregisterColor('settings.modifiedItemIndicator', {\n    light: ( new Color(( new RGBA(102, 175, 224)))),\n    dark: ( new Color(( new RGBA(12, 125, 157)))),\n    hcDark: ( new Color(( new RGBA(0, 73, 122)))),\n    hcLight: ( new Color(( new RGBA(102, 175, 224)))),\n}, ( localize('modifiedItemForeground', \"The color of the modified setting indicator.\")));\nconst settingsHeaderBorder = registerColor('settings.headerBorder', { dark: PANEL_BORDER, light: PANEL_BORDER, hcDark: PANEL_BORDER, hcLight: PANEL_BORDER }, ( localize('settingsHeaderBorder', \"The color of the header container border.\")));\nconst settingsSashBorder = registerColor('settings.sashBorder', { dark: PANEL_BORDER, light: PANEL_BORDER, hcDark: PANEL_BORDER, hcLight: PANEL_BORDER }, ( localize(\n    'settingsSashBorder',\n    \"The color of the Settings editor splitview sash border.\"\n)));\nconst settingsSelectBackground = registerColor(`settings.dropdownBackground`, { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, ( localize('settingsDropdownBackground', \"Settings editor dropdown background.\")));\nconst settingsSelectForeground = registerColor('settings.dropdownForeground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, ( localize('settingsDropdownForeground', \"Settings editor dropdown foreground.\")));\nconst settingsSelectBorder = registerColor('settings.dropdownBorder', { dark: selectBorder, light: selectBorder, hcDark: selectBorder, hcLight: selectBorder }, ( localize('settingsDropdownBorder', \"Settings editor dropdown border.\")));\nconst settingsSelectListBorder = registerColor('settings.dropdownListBorder', { dark: editorWidgetBorder, light: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, ( localize(\n    'settingsDropdownListBorder',\n    \"Settings editor dropdown list border. This surrounds the options and separates the options from the description.\"\n)));\nregisterColor('settings.checkboxBackground', { dark: checkboxBackground, light: checkboxBackground, hcDark: checkboxBackground, hcLight: checkboxBackground }, ( localize('settingsCheckboxBackground', \"Settings editor checkbox background.\")));\nregisterColor('settings.checkboxForeground', { dark: checkboxForeground, light: checkboxForeground, hcDark: checkboxForeground, hcLight: checkboxForeground }, ( localize('settingsCheckboxForeground', \"Settings editor checkbox foreground.\")));\nregisterColor('settings.checkboxBorder', { dark: checkboxBorder, light: checkboxBorder, hcDark: checkboxBorder, hcLight: checkboxBorder }, ( localize('settingsCheckboxBorder', \"Settings editor checkbox border.\")));\nconst settingsTextInputBackground = registerColor('settings.textInputBackground', { dark: inputBackground, light: inputBackground, hcDark: inputBackground, hcLight: inputBackground }, ( localize('textInputBoxBackground', \"Settings editor text input box background.\")));\nconst settingsTextInputForeground = registerColor('settings.textInputForeground', { dark: inputForeground, light: inputForeground, hcDark: inputForeground, hcLight: inputForeground }, ( localize('textInputBoxForeground', \"Settings editor text input box foreground.\")));\nconst settingsTextInputBorder = registerColor('settings.textInputBorder', { dark: inputBorder, light: inputBorder, hcDark: inputBorder, hcLight: inputBorder }, ( localize('textInputBoxBorder', \"Settings editor text input box border.\")));\nconst settingsNumberInputBackground = registerColor('settings.numberInputBackground', { dark: inputBackground, light: inputBackground, hcDark: inputBackground, hcLight: inputBackground }, ( localize('numberInputBoxBackground', \"Settings editor number input box background.\")));\nconst settingsNumberInputForeground = registerColor('settings.numberInputForeground', { dark: inputForeground, light: inputForeground, hcDark: inputForeground, hcLight: inputForeground }, ( localize('numberInputBoxForeground', \"Settings editor number input box foreground.\")));\nconst settingsNumberInputBorder = registerColor('settings.numberInputBorder', { dark: inputBorder, light: inputBorder, hcDark: inputBorder, hcLight: inputBorder }, ( localize('numberInputBoxBorder', \"Settings editor number input box border.\")));\nregisterColor('settings.focusedRowBackground', {\n    dark: ( transparent(listHoverBackground, .6)),\n    light: ( transparent(listHoverBackground, .6)),\n    hcDark: null,\n    hcLight: null,\n}, ( localize(\n    'focusedRowBackground',\n    \"The background color of a settings row when focused.\"\n)));\nregisterColor('settings.rowHoverBackground', {\n    dark: ( transparent(listHoverBackground, .3)),\n    light: ( transparent(listHoverBackground, .3)),\n    hcDark: null,\n    hcLight: null\n}, ( localize(\n    'settings.rowHoverBackground',\n    \"The background color of a settings row when hovered.\"\n)));\nregisterColor('settings.focusedRowBorder', {\n    dark: focusBorder,\n    light: focusBorder,\n    hcDark: focusBorder,\n    hcLight: focusBorder\n}, ( localize(\n    'settings.focusedRowBorder',\n    \"The color of the row's top and bottom border when the row is focused.\"\n)));\nexport { settingsHeaderBorder, settingsHeaderForeground, settingsHeaderHoverForeground, settingsNumberInputBackground, settingsNumberInputBorder, settingsNumberInputForeground, settingsSashBorder, settingsSelectBackground, settingsSelectBorder, settingsSelectForeground, settingsSelectListBorder, settingsTextInputBackground, settingsTextInputBorder, settingsTextInputForeground };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport './media/keybindingsEditor.css.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { Delayer } from 'monaco-editor/esm/vs/base/common/async.js';\nimport * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { isIOS, OS } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { DisposableStore, Disposable, toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { ToggleActionViewItem } from 'monaco-editor/esm/vs/base/browser/ui/toggle/toggle.js';\nimport { HighlightedLabel } from 'monaco-editor/esm/vs/base/browser/ui/highlightedlabel/highlightedLabel.js';\nimport { KeybindingLabel } from 'monaco-editor/esm/vs/base/browser/ui/keybindingLabel/keybindingLabel.js';\nimport { Action, Separator } from 'monaco-editor/esm/vs/base/common/actions.js';\nimport { ActionBar } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js';\nimport { EditorPane } from '../../../browser/parts/editor/editorPane.js';\nimport { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';\nimport { IClipboardService } from 'monaco-editor/esm/vs/platform/clipboard/common/clipboardService.js';\nimport { KEYBINDING_ENTRY_TEMPLATE_ID } from '../../../services/preferences/browser/keybindingsEditorModel.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { DefineKeybindingWidget, KeybindingsSearchWidget } from './keybindingWidgets.js';\nimport { CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS, CONTEXT_KEYBINDING_FOCUS, KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS, KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE, KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, KEYBINDINGS_EDITOR_COMMAND_DEFINE, KEYBINDINGS_EDITOR_COMMAND_ADD, KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN, KEYBINDINGS_EDITOR_COMMAND_REMOVE, KEYBINDINGS_EDITOR_COMMAND_RESET, KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR, KEYBINDINGS_EDITOR_COMMAND_COPY, KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND, KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND_TITLE, CONTEXT_WHEN_FOCUS } from '../common/preferences.js';\nimport { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { IKeybindingEditingService } from '../../../services/keybinding/common/keybindingEditing.js';\nimport { registerThemingParticipant, IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';\nimport { RawContextKey, IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { asCssVariable, badgeBackground, badgeForeground, contrastBorder, editorBackground, registerColor, tableOddRowsBackgroundColor, foreground, listActiveSelectionForeground, listActiveSelectionBackground, listInactiveSelectionForeground, listInactiveSelectionBackground, listFocusForeground, listFocusBackground, listHoverForeground, listHoverBackground } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { EditorExtensionsRegistry } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';\nimport { WorkbenchTable } from 'monaco-editor/esm/vs/platform/list/browser/listService.js';\nimport { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { MenuRegistry, MenuId, isIMenuItem } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { WORKBENCH_BACKGROUND } from '../../../common/theme.js';\nimport { keybindingsRecordKeysIcon, keybindingsSortIcon, preferencesClearInputIcon, keybindingsEditIcon, keybindingsAddIcon } from './preferencesIcons.js';\nimport { ToolBar } from 'monaco-editor/esm/vs/base/browser/ui/toolbar/toolbar.js';\nimport { getInputBoxStyle, defaultToggleStyles, defaultKeybindingLabelStyles } from 'monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js';\nimport { IExtensionsWorkbenchService } from '../../extensions/common/extensions.js';\nimport { StandardKeyboardEvent } from 'monaco-editor/esm/vs/base/browser/keyboardEvent.js';\nimport { isString } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { SuggestEnabledInput } from '../../codeEditor/browser/suggestEnabledInput/suggestEnabledInput.js';\nimport { settingsTextInputBorder } from '../common/settingsEditorColorRegistry.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { registerNavigableContainer } from '../../../browser/actions/widgetNavigationCommands.js';\nconst $ = dom.$;\nlet KeybindingsEditor = class KeybindingsEditor extends EditorPane {\n    static { this.ID = 'workbench.editor.keybindings'; }\n    constructor(telemetryService, themeService, keybindingsService, contextMenuService, keybindingEditingService, contextKeyService, notificationService, clipboardService, instantiationService, editorService, storageService, configurationService) {\n        super(KeybindingsEditor.ID, telemetryService, themeService, storageService);\n        this.keybindingsService = keybindingsService;\n        this.contextMenuService = contextMenuService;\n        this.keybindingEditingService = keybindingEditingService;\n        this.contextKeyService = contextKeyService;\n        this.notificationService = notificationService;\n        this.clipboardService = clipboardService;\n        this.instantiationService = instantiationService;\n        this.editorService = editorService;\n        this.configurationService = configurationService;\n        this._onDefineWhenExpression = this._register(( new Emitter()));\n        this.onDefineWhenExpression = this._onDefineWhenExpression.event;\n        this._onRejectWhenExpression = this._register(( new Emitter()));\n        this.onRejectWhenExpression = this._onRejectWhenExpression.event;\n        this._onAcceptWhenExpression = this._register(( new Emitter()));\n        this.onAcceptWhenExpression = this._onAcceptWhenExpression.event;\n        this._onLayout = this._register(( new Emitter()));\n        this.onLayout = this._onLayout.event;\n        this.keybindingsEditorModel = null;\n        this.unAssignedKeybindingItemToRevealAndFocus = null;\n        this.tableEntries = [];\n        this.dimension = null;\n        this.latestEmptyFilters = [];\n        this.delayedFiltering = ( new Delayer(300));\n        this._register(keybindingsService.onDidUpdateKeybindings(() => this.render(!!this.keybindingFocusContextKey.get())));\n        this.keybindingsEditorContextKey = CONTEXT_KEYBINDINGS_EDITOR.bindTo(this.contextKeyService);\n        this.searchFocusContextKey = CONTEXT_KEYBINDINGS_SEARCH_FOCUS.bindTo(this.contextKeyService);\n        this.keybindingFocusContextKey = CONTEXT_KEYBINDING_FOCUS.bindTo(this.contextKeyService);\n        this.searchHistoryDelayer = ( new Delayer(500));\n        this.recordKeysAction = ( new Action(KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS, ( localize('recordKeysLabel', \"Record Keys\")), ThemeIcon.asClassName(keybindingsRecordKeysIcon)));\n        this.recordKeysAction.checked = false;\n        this.sortByPrecedenceAction = ( new Action(KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE, ( localize('sortByPrecedeneLabel', \"Sort by Precedence (Highest first)\")), ThemeIcon.asClassName(keybindingsSortIcon)));\n        this.sortByPrecedenceAction.checked = false;\n        this.overflowWidgetsDomNode = $('.keybindings-overflow-widgets-container.monaco-editor');\n    }\n    create(parent) {\n        super.create(parent);\n        this._register(registerNavigableContainer({\n            focusNotifiers: [this],\n            focusNextWidget: () => {\n                if (this.searchWidget.hasFocus()) {\n                    this.focusKeybindings();\n                }\n            },\n            focusPreviousWidget: () => {\n                if (!this.searchWidget.hasFocus()) {\n                    this.focusSearch();\n                }\n            }\n        }));\n    }\n    createEditor(parent) {\n        const keybindingsEditorElement = dom.append(parent, $('div', { class: 'keybindings-editor' }));\n        this.createAriaLabelElement(keybindingsEditorElement);\n        this.createOverlayContainer(keybindingsEditorElement);\n        this.createHeader(keybindingsEditorElement);\n        this.createBody(keybindingsEditorElement);\n    }\n    setInput(input, options, context, token) {\n        this.keybindingsEditorContextKey.set(true);\n        return super.setInput(input, options, context, token)\n            .then(() => this.render(!!(options && options.preserveFocus)));\n    }\n    clearInput() {\n        super.clearInput();\n        this.keybindingsEditorContextKey.reset();\n        this.keybindingFocusContextKey.reset();\n    }\n    layout(dimension) {\n        this.dimension = dimension;\n        this.layoutSearchWidget(dimension);\n        this.overlayContainer.style.width = dimension.width + 'px';\n        this.overlayContainer.style.height = dimension.height + 'px';\n        this.defineKeybindingWidget.layout(this.dimension);\n        this.layoutKeybindingsTable();\n        this._onLayout.fire();\n    }\n    focus() {\n        const activeKeybindingEntry = this.activeKeybindingEntry;\n        if (activeKeybindingEntry) {\n            this.selectEntry(activeKeybindingEntry);\n        }\n        else if (!isIOS) {\n            this.searchWidget.focus();\n        }\n    }\n    get activeKeybindingEntry() {\n        const focusedElement = this.keybindingsTable.getFocusedElements()[0];\n        return focusedElement && focusedElement.templateId === KEYBINDING_ENTRY_TEMPLATE_ID ? focusedElement : null;\n    }\n    async defineKeybinding(keybindingEntry, add) {\n        this.selectEntry(keybindingEntry);\n        this.showOverlayContainer();\n        try {\n            const key = await this.defineKeybindingWidget.define();\n            if (key) {\n                await this.updateKeybinding(keybindingEntry, key, keybindingEntry.keybindingItem.when, add);\n            }\n        }\n        catch (error) {\n            this.onKeybindingEditingError(error);\n        }\n        finally {\n            this.hideOverlayContainer();\n            this.selectEntry(keybindingEntry);\n        }\n    }\n    defineWhenExpression(keybindingEntry) {\n        if (keybindingEntry.keybindingItem.keybinding) {\n            this.selectEntry(keybindingEntry);\n            this._onDefineWhenExpression.fire(keybindingEntry);\n        }\n    }\n    rejectWhenExpression(keybindingEntry) {\n        this._onRejectWhenExpression.fire(keybindingEntry);\n    }\n    acceptWhenExpression(keybindingEntry) {\n        this._onAcceptWhenExpression.fire(keybindingEntry);\n    }\n    async updateKeybinding(keybindingEntry, key, when, add) {\n        const currentKey = keybindingEntry.keybindingItem.keybinding ? keybindingEntry.keybindingItem.keybinding.getUserSettingsLabel() : '';\n        if (currentKey !== key || keybindingEntry.keybindingItem.when !== when) {\n            if (add) {\n                await this.keybindingEditingService.addKeybinding(keybindingEntry.keybindingItem.keybindingItem, key, when || undefined);\n            }\n            else {\n                await this.keybindingEditingService.editKeybinding(keybindingEntry.keybindingItem.keybindingItem, key, when || undefined);\n            }\n            if (!keybindingEntry.keybindingItem.keybinding) {\n                this.unAssignedKeybindingItemToRevealAndFocus = keybindingEntry;\n            }\n        }\n    }\n    async removeKeybinding(keybindingEntry) {\n        this.selectEntry(keybindingEntry);\n        if (keybindingEntry.keybindingItem.keybinding) {\n            try {\n                await this.keybindingEditingService.removeKeybinding(keybindingEntry.keybindingItem.keybindingItem);\n                this.focus();\n            }\n            catch (error) {\n                this.onKeybindingEditingError(error);\n                this.selectEntry(keybindingEntry);\n            }\n        }\n    }\n    async resetKeybinding(keybindingEntry) {\n        this.selectEntry(keybindingEntry);\n        try {\n            await this.keybindingEditingService.resetKeybinding(keybindingEntry.keybindingItem.keybindingItem);\n            if (!keybindingEntry.keybindingItem.keybinding) {\n                this.unAssignedKeybindingItemToRevealAndFocus = keybindingEntry;\n            }\n            this.selectEntry(keybindingEntry);\n        }\n        catch (error) {\n            this.onKeybindingEditingError(error);\n            this.selectEntry(keybindingEntry);\n        }\n    }\n    async copyKeybinding(keybinding) {\n        this.selectEntry(keybinding);\n        const userFriendlyKeybinding = {\n            key: keybinding.keybindingItem.keybinding ? keybinding.keybindingItem.keybinding.getUserSettingsLabel() || '' : '',\n            command: keybinding.keybindingItem.command\n        };\n        if (keybinding.keybindingItem.when) {\n            userFriendlyKeybinding.when = keybinding.keybindingItem.when;\n        }\n        await this.clipboardService.writeText(JSON.stringify(userFriendlyKeybinding, null, '  '));\n    }\n    async copyKeybindingCommand(keybinding) {\n        this.selectEntry(keybinding);\n        await this.clipboardService.writeText(keybinding.keybindingItem.command);\n    }\n    async copyKeybindingCommandTitle(keybinding) {\n        this.selectEntry(keybinding);\n        await this.clipboardService.writeText(keybinding.keybindingItem.commandLabel);\n    }\n    focusSearch() {\n        this.searchWidget.focus();\n    }\n    search(filter) {\n        this.focusSearch();\n        this.searchWidget.setValue(filter);\n        this.selectEntry(0);\n    }\n    clearSearchResults() {\n        this.searchWidget.clear();\n    }\n    showSimilarKeybindings(keybindingEntry) {\n        const value = `\"${keybindingEntry.keybindingItem.keybinding.getAriaLabel()}\"`;\n        if (value !== this.searchWidget.getValue()) {\n            this.searchWidget.setValue(value);\n        }\n    }\n    createAriaLabelElement(parent) {\n        this.ariaLabelElement = dom.append(parent, dom.$(''));\n        this.ariaLabelElement.setAttribute('id', 'keybindings-editor-aria-label-element');\n        this.ariaLabelElement.setAttribute('aria-live', 'assertive');\n    }\n    createOverlayContainer(parent) {\n        this.overlayContainer = dom.append(parent, $('.overlay-container'));\n        this.overlayContainer.style.position = 'absolute';\n        this.overlayContainer.style.zIndex = '40';\n        this.defineKeybindingWidget = this._register(this.instantiationService.createInstance(DefineKeybindingWidget, this.overlayContainer));\n        this._register(this.defineKeybindingWidget.onDidChange(keybindingStr => this.defineKeybindingWidget.printExisting(this.keybindingsEditorModel.fetch(`\"${keybindingStr}\"`).length)));\n        this._register(this.defineKeybindingWidget.onShowExistingKeybidings(keybindingStr => this.searchWidget.setValue(`\"${keybindingStr}\"`)));\n        this.hideOverlayContainer();\n    }\n    showOverlayContainer() {\n        this.overlayContainer.style.display = 'block';\n    }\n    hideOverlayContainer() {\n        this.overlayContainer.style.display = 'none';\n    }\n    createHeader(parent) {\n        this.headerContainer = dom.append(parent, $('.keybindings-header'));\n        const fullTextSearchPlaceholder = ( localize(\n            'SearchKeybindings.FullTextSearchPlaceholder',\n            \"Type to search in keybindings\"\n        ));\n        const keybindingsSearchPlaceholder = ( localize(\n            'SearchKeybindings.KeybindingsSearchPlaceholder',\n            \"Recording Keys. Press Escape to exit\"\n        ));\n        const clearInputAction = ( new Action(KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, ( localize('clearInput', \"Clear Keybindings Search Input\")), ThemeIcon.asClassName(preferencesClearInputIcon), false, async () => this.clearSearchResults()));\n        const searchContainer = dom.append(this.headerContainer, $('.search-container'));\n        this.searchWidget = this._register(this.instantiationService.createInstance(KeybindingsSearchWidget, searchContainer, {\n            ariaLabel: fullTextSearchPlaceholder,\n            placeholder: fullTextSearchPlaceholder,\n            focusKey: this.searchFocusContextKey,\n            ariaLabelledBy: 'keybindings-editor-aria-label-element',\n            recordEnter: true,\n            quoteRecordedKeys: true,\n            history: this.getMemento(0 , 0 )['searchHistory'] || [],\n            inputBoxStyles: getInputBoxStyle({\n                inputBorder: settingsTextInputBorder\n            })\n        }));\n        this._register(this.searchWidget.onDidChange(searchValue => {\n            clearInputAction.enabled = !!searchValue;\n            this.delayedFiltering.trigger(() => this.filterKeybindings());\n            this.updateSearchOptions();\n        }));\n        this._register(this.searchWidget.onEscape(() => this.recordKeysAction.checked = false));\n        this.actionsContainer = dom.append(searchContainer, dom.$('.keybindings-search-actions-container'));\n        const recordingBadge = this.createRecordingBadge(this.actionsContainer);\n        this._register(this.sortByPrecedenceAction.onDidChange(e => {\n            if (e.checked !== undefined) {\n                this.renderKeybindingsEntries(false);\n            }\n            this.updateSearchOptions();\n        }));\n        this._register(this.recordKeysAction.onDidChange(e => {\n            if (e.checked !== undefined) {\n                recordingBadge.classList.toggle('disabled', !e.checked);\n                if (e.checked) {\n                    this.searchWidget.inputBox.setPlaceHolder(keybindingsSearchPlaceholder);\n                    this.searchWidget.inputBox.setAriaLabel(keybindingsSearchPlaceholder);\n                    this.searchWidget.startRecordingKeys();\n                    this.searchWidget.focus();\n                }\n                else {\n                    this.searchWidget.inputBox.setPlaceHolder(fullTextSearchPlaceholder);\n                    this.searchWidget.inputBox.setAriaLabel(fullTextSearchPlaceholder);\n                    this.searchWidget.stopRecordingKeys();\n                    this.searchWidget.focus();\n                }\n                this.updateSearchOptions();\n            }\n        }));\n        const actions = [this.recordKeysAction, this.sortByPrecedenceAction, clearInputAction];\n        const toolBar = this._register(( new ToolBar(this.actionsContainer, this.contextMenuService, {\n            actionViewItemProvider: (action) => {\n                if (action.id === this.sortByPrecedenceAction.id || action.id === this.recordKeysAction.id) {\n                    return ( new ToggleActionViewItem(\n                        null,\n                        action,\n                        { keybinding: this.keybindingsService.lookupKeybinding(action.id)?.getLabel(), toggleStyles: defaultToggleStyles }\n                    ));\n                }\n                return undefined;\n            },\n            getKeyBinding: action => this.keybindingsService.lookupKeybinding(action.id)\n        })));\n        toolBar.setActions(actions);\n        this._register(this.keybindingsService.onDidUpdateKeybindings(() => toolBar.setActions(actions)));\n    }\n    updateSearchOptions() {\n        const keybindingsEditorInput = this.input;\n        if (keybindingsEditorInput) {\n            keybindingsEditorInput.searchOptions = {\n                searchValue: this.searchWidget.getValue(),\n                recordKeybindings: !!this.recordKeysAction.checked,\n                sortByPrecedence: !!this.sortByPrecedenceAction.checked\n            };\n        }\n    }\n    createRecordingBadge(container) {\n        const recordingBadge = dom.append(container, dom.$('.recording-badge.monaco-count-badge.long.disabled'));\n        recordingBadge.textContent = ( localize('recording', \"Recording Keys\"));\n        recordingBadge.style.backgroundColor = asCssVariable(badgeBackground);\n        recordingBadge.style.color = asCssVariable(badgeForeground);\n        recordingBadge.style.border = `1px solid ${asCssVariable(contrastBorder)}`;\n        return recordingBadge;\n    }\n    layoutSearchWidget(dimension) {\n        this.searchWidget.layout(dimension);\n        this.headerContainer.classList.toggle('small', dimension.width < 400);\n        this.searchWidget.inputBox.inputElement.style.paddingRight = `${dom.getTotalWidth(this.actionsContainer) + 12}px`;\n    }\n    createBody(parent) {\n        const bodyContainer = dom.append(parent, $('.keybindings-body'));\n        this.createTable(bodyContainer);\n    }\n    createTable(parent) {\n        this.keybindingsTableContainer = dom.append(parent, $('.keybindings-table-container'));\n        this.keybindingsTable = this._register(this.instantiationService.createInstance(WorkbenchTable, 'KeybindingsEditor', this.keybindingsTableContainer, ( new Delegate()), [\n            {\n                label: '',\n                tooltip: '',\n                weight: 0,\n                minimumWidth: 40,\n                maximumWidth: 40,\n                templateId: ActionsColumnRenderer.TEMPLATE_ID,\n                project(row) { return row; }\n            },\n            {\n                label: ( localize('command', \"Command\")),\n                tooltip: '',\n                weight: 0.3,\n                templateId: CommandColumnRenderer.TEMPLATE_ID,\n                project(row) { return row; }\n            },\n            {\n                label: ( localize('keybinding', \"Keybinding\")),\n                tooltip: '',\n                weight: 0.2,\n                templateId: KeybindingColumnRenderer.TEMPLATE_ID,\n                project(row) { return row; }\n            },\n            {\n                label: ( localize('when', \"When\")),\n                tooltip: '',\n                weight: 0.35,\n                templateId: WhenColumnRenderer.TEMPLATE_ID,\n                project(row) { return row; }\n            },\n            {\n                label: ( localize('source', \"Source\")),\n                tooltip: '',\n                weight: 0.15,\n                templateId: SourceColumnRenderer.TEMPLATE_ID,\n                project(row) { return row; }\n            },\n        ], [\n            this.instantiationService.createInstance(ActionsColumnRenderer, this),\n            this.instantiationService.createInstance(CommandColumnRenderer),\n            this.instantiationService.createInstance(KeybindingColumnRenderer),\n            this.instantiationService.createInstance(WhenColumnRenderer, this),\n            this.instantiationService.createInstance(SourceColumnRenderer),\n        ], {\n            identityProvider: { getId: (e) => e.id },\n            horizontalScrolling: false,\n            accessibilityProvider: ( new AccessibilityProvider(this.configurationService)),\n            keyboardNavigationLabelProvider: { getKeyboardNavigationLabel: (e) => e.keybindingItem.commandLabel || e.keybindingItem.command },\n            overrideStyles: {\n                listBackground: editorBackground\n            },\n            multipleSelectionSupport: false,\n            setRowLineHeight: false,\n            openOnSingleClick: false,\n            transformOptimization: false\n        }));\n        this._register(this.keybindingsTable.onContextMenu(e => this.onContextMenu(e)));\n        this._register(this.keybindingsTable.onDidChangeFocus(e => this.onFocusChange()));\n        this._register(this.keybindingsTable.onDidFocus(() => {\n            this.keybindingsTable.getHTMLElement().classList.add('focused');\n            this.onFocusChange();\n        }));\n        this._register(this.keybindingsTable.onDidBlur(() => {\n            this.keybindingsTable.getHTMLElement().classList.remove('focused');\n            this.keybindingFocusContextKey.reset();\n        }));\n        this._register(this.keybindingsTable.onDidOpen((e) => {\n            if (e.browserEvent?.defaultPrevented) {\n                return;\n            }\n            const activeKeybindingEntry = this.activeKeybindingEntry;\n            if (activeKeybindingEntry) {\n                this.defineKeybinding(activeKeybindingEntry, false);\n            }\n        }));\n        dom.append(this.keybindingsTableContainer, this.overflowWidgetsDomNode);\n    }\n    async render(preserveFocus) {\n        if (this.input) {\n            const input = this.input;\n            this.keybindingsEditorModel = await input.resolve();\n            await this.keybindingsEditorModel.resolve(this.getActionsLabels());\n            this.renderKeybindingsEntries(false, preserveFocus);\n            if (input.searchOptions) {\n                this.recordKeysAction.checked = input.searchOptions.recordKeybindings;\n                this.sortByPrecedenceAction.checked = input.searchOptions.sortByPrecedence;\n                this.searchWidget.setValue(input.searchOptions.searchValue);\n            }\n            else {\n                this.updateSearchOptions();\n            }\n        }\n    }\n    getActionsLabels() {\n        const actionsLabels = ( new Map());\n        for (const editorAction of EditorExtensionsRegistry.getEditorActions()) {\n            actionsLabels.set(editorAction.id, editorAction.label);\n        }\n        for (const menuItem of MenuRegistry.getMenuItems(MenuId.CommandPalette)) {\n            if (isIMenuItem(menuItem)) {\n                const title = typeof menuItem.command.title === 'string' ? menuItem.command.title : menuItem.command.title.value;\n                const category = menuItem.command.category ? typeof menuItem.command.category === 'string' ? menuItem.command.category : menuItem.command.category.value : undefined;\n                actionsLabels.set(menuItem.command.id, category ? `${category}: ${title}` : title);\n            }\n        }\n        return actionsLabels;\n    }\n    filterKeybindings() {\n        this.renderKeybindingsEntries(this.searchWidget.hasFocus());\n        this.searchHistoryDelayer.trigger(() => {\n            this.searchWidget.inputBox.addToHistory();\n            this.getMemento(0 , 0 )['searchHistory'] = this.searchWidget.inputBox.getHistory();\n            this.saveState();\n        });\n    }\n    clearKeyboardShortcutSearchHistory() {\n        this.searchWidget.inputBox.clearHistory();\n        this.getMemento(0 , 0 )['searchHistory'] = this.searchWidget.inputBox.getHistory();\n        this.saveState();\n    }\n    renderKeybindingsEntries(reset, preserveFocus) {\n        if (this.keybindingsEditorModel) {\n            const filter = this.searchWidget.getValue();\n            const keybindingsEntries = this.keybindingsEditorModel.fetch(filter, this.sortByPrecedenceAction.checked);\n            this.ariaLabelElement.setAttribute('aria-label', this.getAriaLabel(keybindingsEntries));\n            if (keybindingsEntries.length === 0) {\n                this.latestEmptyFilters.push(filter);\n            }\n            const currentSelectedIndex = this.keybindingsTable.getSelection()[0];\n            this.tableEntries = keybindingsEntries;\n            this.keybindingsTable.splice(0, this.keybindingsTable.length, this.tableEntries);\n            this.layoutKeybindingsTable();\n            if (reset) {\n                this.keybindingsTable.setSelection([]);\n                this.keybindingsTable.setFocus([]);\n            }\n            else {\n                if (this.unAssignedKeybindingItemToRevealAndFocus) {\n                    const index = this.getNewIndexOfUnassignedKeybinding(this.unAssignedKeybindingItemToRevealAndFocus);\n                    if (index !== -1) {\n                        this.keybindingsTable.reveal(index, 0.2);\n                        this.selectEntry(index);\n                    }\n                    this.unAssignedKeybindingItemToRevealAndFocus = null;\n                }\n                else if (currentSelectedIndex !== -1 && currentSelectedIndex < this.tableEntries.length) {\n                    this.selectEntry(currentSelectedIndex, preserveFocus);\n                }\n                else if (this.editorService.activeEditorPane === this && !preserveFocus) {\n                    this.focus();\n                }\n            }\n        }\n    }\n    getAriaLabel(keybindingsEntries) {\n        if (this.sortByPrecedenceAction.checked) {\n            return ( localize(\n                'show sorted keybindings',\n                \"Showing {0} Keybindings in precedence order\",\n                keybindingsEntries.length\n            ));\n        }\n        else {\n            return ( localize(\n                'show keybindings',\n                \"Showing {0} Keybindings in alphabetical order\",\n                keybindingsEntries.length\n            ));\n        }\n    }\n    layoutKeybindingsTable() {\n        if (!this.dimension) {\n            return;\n        }\n        const tableHeight = this.dimension.height - ((dom.getDomNodePagePosition(this.headerContainer).height + 12) );\n        this.keybindingsTableContainer.style.height = `${tableHeight}px`;\n        this.keybindingsTable.layout(tableHeight);\n    }\n    getIndexOf(listEntry) {\n        const index = this.tableEntries.indexOf(listEntry);\n        if (index === -1) {\n            for (let i = 0; i < this.tableEntries.length; i++) {\n                if (this.tableEntries[i].id === listEntry.id) {\n                    return i;\n                }\n            }\n        }\n        return index;\n    }\n    getNewIndexOfUnassignedKeybinding(unassignedKeybinding) {\n        for (let index = 0; index < this.tableEntries.length; index++) {\n            const entry = this.tableEntries[index];\n            if (entry.templateId === KEYBINDING_ENTRY_TEMPLATE_ID) {\n                const keybindingItemEntry = entry;\n                if (keybindingItemEntry.keybindingItem.command === unassignedKeybinding.keybindingItem.command) {\n                    return index;\n                }\n            }\n        }\n        return -1;\n    }\n    selectEntry(keybindingItemEntry, focus = true) {\n        const index = typeof keybindingItemEntry === 'number' ? keybindingItemEntry : this.getIndexOf(keybindingItemEntry);\n        if (index !== -1 && index < this.keybindingsTable.length) {\n            if (focus) {\n                this.keybindingsTable.domFocus();\n                this.keybindingsTable.setFocus([index]);\n            }\n            this.keybindingsTable.setSelection([index]);\n        }\n    }\n    focusKeybindings() {\n        this.keybindingsTable.domFocus();\n        const currentFocusIndices = this.keybindingsTable.getFocus();\n        this.keybindingsTable.setFocus([currentFocusIndices.length ? currentFocusIndices[0] : 0]);\n    }\n    selectKeybinding(keybindingItemEntry) {\n        this.selectEntry(keybindingItemEntry);\n    }\n    recordSearchKeys() {\n        this.recordKeysAction.checked = true;\n    }\n    toggleSortByPrecedence() {\n        this.sortByPrecedenceAction.checked = !this.sortByPrecedenceAction.checked;\n    }\n    onContextMenu(e) {\n        if (!e.element) {\n            return;\n        }\n        if (e.element.templateId === KEYBINDING_ENTRY_TEMPLATE_ID) {\n            const keybindingItemEntry = e.element;\n            this.selectEntry(keybindingItemEntry);\n            this.contextMenuService.showContextMenu({\n                getAnchor: () => e.anchor,\n                getActions: () => [\n                    this.createCopyAction(keybindingItemEntry),\n                    this.createCopyCommandAction(keybindingItemEntry),\n                    this.createCopyCommandTitleAction(keybindingItemEntry),\n                    ( new Separator()),\n                    ...(keybindingItemEntry.keybindingItem.keybinding\n                        ? [this.createDefineKeybindingAction(keybindingItemEntry), this.createAddKeybindingAction(keybindingItemEntry)]\n                        : [this.createDefineKeybindingAction(keybindingItemEntry)]),\n                    ( new Separator()),\n                    this.createRemoveAction(keybindingItemEntry),\n                    this.createResetAction(keybindingItemEntry),\n                    ( new Separator()),\n                    this.createDefineWhenExpressionAction(keybindingItemEntry),\n                    ( new Separator()),\n                    this.createShowConflictsAction(keybindingItemEntry)\n                ]\n            });\n        }\n    }\n    onFocusChange() {\n        this.keybindingFocusContextKey.reset();\n        const element = this.keybindingsTable.getFocusedElements()[0];\n        if (!element) {\n            return;\n        }\n        if (element.templateId === KEYBINDING_ENTRY_TEMPLATE_ID) {\n            this.keybindingFocusContextKey.set(true);\n        }\n    }\n    createDefineKeybindingAction(keybindingItemEntry) {\n        return {\n            label: keybindingItemEntry.keybindingItem.keybinding ? ( localize('changeLabel', \"Change Keybinding...\")) : ( localize('addLabel', \"Add Keybinding...\")),\n            enabled: true,\n            id: KEYBINDINGS_EDITOR_COMMAND_DEFINE,\n            run: () => this.defineKeybinding(keybindingItemEntry, false)\n        };\n    }\n    createAddKeybindingAction(keybindingItemEntry) {\n        return {\n            label: ( localize('addLabel', \"Add Keybinding...\")),\n            enabled: true,\n            id: KEYBINDINGS_EDITOR_COMMAND_ADD,\n            run: () => this.defineKeybinding(keybindingItemEntry, true)\n        };\n    }\n    createDefineWhenExpressionAction(keybindingItemEntry) {\n        return {\n            label: ( localize('editWhen', \"Change When Expression\")),\n            enabled: !!keybindingItemEntry.keybindingItem.keybinding,\n            id: KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN,\n            run: () => this.defineWhenExpression(keybindingItemEntry)\n        };\n    }\n    createRemoveAction(keybindingItem) {\n        return {\n            label: ( localize('removeLabel', \"Remove Keybinding\")),\n            enabled: !!keybindingItem.keybindingItem.keybinding,\n            id: KEYBINDINGS_EDITOR_COMMAND_REMOVE,\n            run: () => this.removeKeybinding(keybindingItem)\n        };\n    }\n    createResetAction(keybindingItem) {\n        return {\n            label: ( localize('resetLabel', \"Reset Keybinding\")),\n            enabled: !keybindingItem.keybindingItem.keybindingItem.isDefault,\n            id: KEYBINDINGS_EDITOR_COMMAND_RESET,\n            run: () => this.resetKeybinding(keybindingItem)\n        };\n    }\n    createShowConflictsAction(keybindingItem) {\n        return {\n            label: ( localize('showSameKeybindings', \"Show Same Keybindings\")),\n            enabled: !!keybindingItem.keybindingItem.keybinding,\n            id: KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR,\n            run: () => this.showSimilarKeybindings(keybindingItem)\n        };\n    }\n    createCopyAction(keybindingItem) {\n        return {\n            label: ( localize('copyLabel', \"Copy\")),\n            enabled: true,\n            id: KEYBINDINGS_EDITOR_COMMAND_COPY,\n            run: () => this.copyKeybinding(keybindingItem)\n        };\n    }\n    createCopyCommandAction(keybinding) {\n        return {\n            label: ( localize('copyCommandLabel', \"Copy Command ID\")),\n            enabled: true,\n            id: KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND,\n            run: () => this.copyKeybindingCommand(keybinding)\n        };\n    }\n    createCopyCommandTitleAction(keybinding) {\n        return {\n            label: ( localize('copyCommandTitleLabel', \"Copy Command Title\")),\n            enabled: !!keybinding.keybindingItem.commandLabel,\n            id: KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND_TITLE,\n            run: () => this.copyKeybindingCommandTitle(keybinding)\n        };\n    }\n    onKeybindingEditingError(error) {\n        this.notificationService.error(typeof error === 'string' ? error : ( localize(\n            'error',\n            \"Error '{0}' while editing the keybinding. Please open 'keybindings.json' file and check for errors.\",\n            `${error}`\n        )));\n    }\n};\nKeybindingsEditor = ( __decorate([\n    ( __param(0, ITelemetryService)),\n    ( __param(1, IThemeService)),\n    ( __param(2, IKeybindingService)),\n    ( __param(3, IContextMenuService)),\n    ( __param(4, IKeybindingEditingService)),\n    ( __param(5, IContextKeyService)),\n    ( __param(6, INotificationService)),\n    ( __param(7, IClipboardService)),\n    ( __param(8, IInstantiationService)),\n    ( __param(9, IEditorService)),\n    ( __param(10, IStorageService)),\n    ( __param(11, IConfigurationService))\n], KeybindingsEditor));\nclass Delegate {\n    constructor() {\n        this.headerRowHeight = 30;\n    }\n    getHeight(element) {\n        if (element.templateId === KEYBINDING_ENTRY_TEMPLATE_ID) {\n            const commandIdMatched = element.keybindingItem.commandLabel && element.commandIdMatches;\n            const commandDefaultLabelMatched = !!element.commandDefaultLabelMatches;\n            const extensionIdMatched = !!element.extensionIdMatches;\n            if (commandIdMatched && commandDefaultLabelMatched) {\n                return 60;\n            }\n            if (extensionIdMatched || commandIdMatched || commandDefaultLabelMatched) {\n                return 40;\n            }\n        }\n        return 24;\n    }\n}\nlet ActionsColumnRenderer = class ActionsColumnRenderer {\n    static { this.TEMPLATE_ID = 'actions'; }\n    constructor(keybindingsEditor, keybindingsService) {\n        this.keybindingsEditor = keybindingsEditor;\n        this.keybindingsService = keybindingsService;\n        this.templateId = ActionsColumnRenderer.TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        const element = dom.append(container, $('.actions'));\n        const actionBar = ( new ActionBar(element, { animated: false }));\n        return { actionBar };\n    }\n    renderElement(keybindingItemEntry, index, templateData, height) {\n        templateData.actionBar.clear();\n        const actions = [];\n        if (keybindingItemEntry.keybindingItem.keybinding) {\n            actions.push(this.createEditAction(keybindingItemEntry));\n        }\n        else {\n            actions.push(this.createAddAction(keybindingItemEntry));\n        }\n        templateData.actionBar.push(actions, { icon: true });\n    }\n    createEditAction(keybindingItemEntry) {\n        const keybinding = this.keybindingsService.lookupKeybinding(KEYBINDINGS_EDITOR_COMMAND_DEFINE);\n        return {\n            class: ThemeIcon.asClassName(keybindingsEditIcon),\n            enabled: true,\n            id: 'editKeybinding',\n            tooltip: keybinding ? ( localize(\n                'editKeybindingLabelWithKey',\n                \"Change Keybinding {0}\",\n                `(${keybinding.getLabel()})`\n            )) : ( localize('editKeybindingLabel', \"Change Keybinding\")),\n            run: () => this.keybindingsEditor.defineKeybinding(keybindingItemEntry, false)\n        };\n    }\n    createAddAction(keybindingItemEntry) {\n        const keybinding = this.keybindingsService.lookupKeybinding(KEYBINDINGS_EDITOR_COMMAND_DEFINE);\n        return {\n            class: ThemeIcon.asClassName(keybindingsAddIcon),\n            enabled: true,\n            id: 'addKeybinding',\n            tooltip: keybinding ? ( localize(\n                'addKeybindingLabelWithKey',\n                \"Add Keybinding {0}\",\n                `(${keybinding.getLabel()})`\n            )) : ( localize('addKeybindingLabel', \"Add Keybinding\")),\n            run: () => this.keybindingsEditor.defineKeybinding(keybindingItemEntry, false)\n        };\n    }\n    disposeTemplate(templateData) {\n        templateData.actionBar.dispose();\n    }\n};\nActionsColumnRenderer = ( __decorate([\n    ( __param(1, IKeybindingService))\n], ActionsColumnRenderer));\nclass CommandColumnRenderer {\n    constructor() {\n        this.templateId = CommandColumnRenderer.TEMPLATE_ID;\n    }\n    static { this.TEMPLATE_ID = 'commands'; }\n    renderTemplate(container) {\n        const commandColumn = dom.append(container, $('.command'));\n        const commandLabelContainer = dom.append(commandColumn, $('.command-label'));\n        const commandLabel = ( new HighlightedLabel(commandLabelContainer));\n        const commandDefaultLabelContainer = dom.append(commandColumn, $('.command-default-label'));\n        const commandDefaultLabel = ( new HighlightedLabel(commandDefaultLabelContainer));\n        const commandIdLabelContainer = dom.append(commandColumn, $('.command-id.code'));\n        const commandIdLabel = ( new HighlightedLabel(commandIdLabelContainer));\n        return { commandColumn, commandLabelContainer, commandLabel, commandDefaultLabelContainer, commandDefaultLabel, commandIdLabelContainer, commandIdLabel };\n    }\n    renderElement(keybindingItemEntry, index, templateData, height) {\n        const keybindingItem = keybindingItemEntry.keybindingItem;\n        const commandIdMatched = !!(keybindingItem.commandLabel && keybindingItemEntry.commandIdMatches);\n        const commandDefaultLabelMatched = !!keybindingItemEntry.commandDefaultLabelMatches;\n        templateData.commandColumn.classList.toggle('vertical-align-column', commandIdMatched || commandDefaultLabelMatched);\n        templateData.commandColumn.title = keybindingItem.commandLabel ? ( localize('title', \"{0} ({1})\", keybindingItem.commandLabel, keybindingItem.command)) : keybindingItem.command;\n        if (keybindingItem.commandLabel) {\n            templateData.commandLabelContainer.classList.remove('hide');\n            templateData.commandLabel.set(keybindingItem.commandLabel, keybindingItemEntry.commandLabelMatches);\n        }\n        else {\n            templateData.commandLabelContainer.classList.add('hide');\n            templateData.commandLabel.set(undefined);\n        }\n        if (keybindingItemEntry.commandDefaultLabelMatches) {\n            templateData.commandDefaultLabelContainer.classList.remove('hide');\n            templateData.commandDefaultLabel.set(keybindingItem.commandDefaultLabel, keybindingItemEntry.commandDefaultLabelMatches);\n        }\n        else {\n            templateData.commandDefaultLabelContainer.classList.add('hide');\n            templateData.commandDefaultLabel.set(undefined);\n        }\n        if (keybindingItemEntry.commandIdMatches || !keybindingItem.commandLabel) {\n            templateData.commandIdLabelContainer.classList.remove('hide');\n            templateData.commandIdLabel.set(keybindingItem.command, keybindingItemEntry.commandIdMatches);\n        }\n        else {\n            templateData.commandIdLabelContainer.classList.add('hide');\n            templateData.commandIdLabel.set(undefined);\n        }\n    }\n    disposeTemplate(templateData) { }\n}\nclass KeybindingColumnRenderer {\n    static { this.TEMPLATE_ID = 'keybindings'; }\n    constructor() {\n        this.templateId = KeybindingColumnRenderer.TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        const element = dom.append(container, $('.keybinding'));\n        const keybindingLabel = ( new KeybindingLabel(\n            dom.append(element, $('div.keybinding-label')),\n            OS,\n            defaultKeybindingLabelStyles\n        ));\n        return { keybindingLabel };\n    }\n    renderElement(keybindingItemEntry, index, templateData, height) {\n        if (keybindingItemEntry.keybindingItem.keybinding) {\n            templateData.keybindingLabel.set(keybindingItemEntry.keybindingItem.keybinding, keybindingItemEntry.keybindingMatches);\n        }\n        else {\n            templateData.keybindingLabel.set(undefined, undefined);\n        }\n    }\n    disposeTemplate(templateData) {\n    }\n}\nfunction onClick(element, callback) {\n    const disposables = ( new DisposableStore());\n    disposables.add(dom.addDisposableListener(element, dom.EventType.CLICK, dom.finalHandler(callback)));\n    disposables.add(dom.addDisposableListener(element, dom.EventType.KEY_UP, e => {\n        const keyboardEvent = ( new StandardKeyboardEvent(e));\n        if (keyboardEvent.equals(10 ) || keyboardEvent.equals(3 )) {\n            e.preventDefault();\n            e.stopPropagation();\n            callback();\n        }\n    }));\n    return disposables;\n}\nlet SourceColumnRenderer = class SourceColumnRenderer {\n    static { this.TEMPLATE_ID = 'source'; }\n    constructor(extensionsWorkbenchService) {\n        this.extensionsWorkbenchService = extensionsWorkbenchService;\n        this.templateId = SourceColumnRenderer.TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        const sourceColumn = dom.append(container, $('.source'));\n        const sourceLabel = ( new HighlightedLabel(dom.append(sourceColumn, $('.source-label'))));\n        const extensionContainer = dom.append(sourceColumn, $('.extension-container'));\n        const extensionLabel = dom.append(extensionContainer, $('a.extension-label', { tabindex: 0 }));\n        const extensionId = ( new HighlightedLabel(dom.append(extensionContainer, $('.extension-id-container.code'))));\n        return { sourceColumn, sourceLabel, extensionLabel, extensionContainer, extensionId, disposables: ( new DisposableStore()) };\n    }\n    renderElement(keybindingItemEntry, index, templateData, height) {\n        if (isString(keybindingItemEntry.keybindingItem.source)) {\n            templateData.extensionContainer.classList.add('hide');\n            templateData.sourceLabel.element.classList.remove('hide');\n            templateData.sourceColumn.title = '';\n            templateData.sourceLabel.set(keybindingItemEntry.keybindingItem.source || '-', keybindingItemEntry.sourceMatches);\n        }\n        else {\n            templateData.extensionContainer.classList.remove('hide');\n            templateData.sourceLabel.element.classList.add('hide');\n            const extension = keybindingItemEntry.keybindingItem.source;\n            const extensionLabel = extension.displayName ?? extension.identifier.value;\n            templateData.sourceColumn.title = ( localize('extension label', \"Extension ({0})\", extensionLabel));\n            templateData.extensionLabel.textContent = extensionLabel;\n            templateData.disposables.add(onClick(templateData.extensionLabel, () => {\n                this.extensionsWorkbenchService.open(extension.identifier.value);\n            }));\n            if (keybindingItemEntry.extensionIdMatches) {\n                templateData.extensionId.element.classList.remove('hide');\n                templateData.extensionId.set(extension.identifier.value, keybindingItemEntry.extensionIdMatches);\n            }\n            else {\n                templateData.extensionId.element.classList.add('hide');\n                templateData.extensionId.set(undefined);\n            }\n        }\n    }\n    disposeTemplate(templateData) {\n        templateData.disposables.dispose();\n    }\n};\nSourceColumnRenderer = ( __decorate([\n    ( __param(0, IExtensionsWorkbenchService))\n], SourceColumnRenderer));\nlet WhenInputWidget = class WhenInputWidget extends Disposable {\n    constructor(parent, keybindingsEditor, instantiationService, contextKeyService) {\n        super();\n        this._onDidAccept = this._register(( new Emitter()));\n        this.onDidAccept = this._onDidAccept.event;\n        this._onDidReject = this._register(( new Emitter()));\n        this.onDidReject = this._onDidReject.event;\n        const focusContextKey = CONTEXT_WHEN_FOCUS.bindTo(contextKeyService);\n        this.input = this._register(instantiationService.createInstance(SuggestEnabledInput, 'keyboardshortcutseditor#wheninput', parent, {\n            provideResults: () => {\n                const result = [];\n                for (const contextKey of RawContextKey.all()) {\n                    result.push({ label: contextKey.key, documentation: contextKey.description, detail: contextKey.type, kind: 14  });\n                }\n                return result;\n            },\n            triggerCharacters: ['!', ' '],\n            wordDefinition: /[a-zA-Z.]+/,\n            alwaysShowSuggestions: true,\n        }, '', `keyboardshortcutseditor#wheninput`, { focusContextKey, overflowWidgetsDomNode: keybindingsEditor.overflowWidgetsDomNode }));\n        this._register((dom.addDisposableListener(this.input.element, dom.EventType.DBLCLICK, e => dom.EventHelper.stop(e))));\n        this._register(toDisposable(() => focusContextKey.reset()));\n        this._register(keybindingsEditor.onAcceptWhenExpression(() => this._onDidAccept.fire(this.input.getValue())));\n        this._register(Event.any(keybindingsEditor.onRejectWhenExpression, this.input.onDidBlur)(() => this._onDidReject.fire()));\n    }\n    layout(dimension) {\n        this.input.layout(dimension);\n    }\n    show(value) {\n        this.input.setValue(value);\n        this.input.focus(true);\n    }\n};\nWhenInputWidget = ( __decorate([\n    ( __param(2, IInstantiationService)),\n    ( __param(3, IContextKeyService))\n], WhenInputWidget));\nlet WhenColumnRenderer = class WhenColumnRenderer {\n    static { this.TEMPLATE_ID = 'when'; }\n    constructor(keybindingsEditor, instantiationService) {\n        this.keybindingsEditor = keybindingsEditor;\n        this.instantiationService = instantiationService;\n        this.templateId = WhenColumnRenderer.TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        const element = dom.append(container, $('.when'));\n        const whenLabelContainer = dom.append(element, $('div.when-label'));\n        const whenLabel = ( new HighlightedLabel(whenLabelContainer));\n        const whenInputContainer = dom.append(element, $('div.when-input-container'));\n        return {\n            element,\n            whenLabelContainer,\n            whenLabel,\n            whenInputContainer,\n            disposables: ( new DisposableStore()),\n        };\n    }\n    renderElement(keybindingItemEntry, index, templateData, height) {\n        templateData.disposables.clear();\n        const whenInputDisposables = templateData.disposables.add(( new DisposableStore()));\n        templateData.disposables.add(this.keybindingsEditor.onDefineWhenExpression(e => {\n            if (keybindingItemEntry === e) {\n                templateData.element.classList.add('input-mode');\n                const inputWidget = whenInputDisposables.add(this.instantiationService.createInstance(WhenInputWidget, templateData.whenInputContainer, this.keybindingsEditor));\n                inputWidget.layout(new dom.Dimension(templateData.element.parentElement.clientWidth, 18));\n                inputWidget.show(keybindingItemEntry.keybindingItem.when || '');\n                const hideInputWidget = () => {\n                    whenInputDisposables.clear();\n                    templateData.element.classList.remove('input-mode');\n                    templateData.element.parentElement.style.paddingLeft = '10px';\n                    dom.clearNode(templateData.whenInputContainer);\n                };\n                whenInputDisposables.add(inputWidget.onDidAccept(value => {\n                    hideInputWidget();\n                    this.keybindingsEditor.updateKeybinding(keybindingItemEntry, keybindingItemEntry.keybindingItem.keybinding ? keybindingItemEntry.keybindingItem.keybinding.getUserSettingsLabel() || '' : '', value);\n                    this.keybindingsEditor.selectKeybinding(keybindingItemEntry);\n                }));\n                whenInputDisposables.add(inputWidget.onDidReject(() => {\n                    hideInputWidget();\n                    this.keybindingsEditor.selectKeybinding(keybindingItemEntry);\n                }));\n                templateData.element.parentElement.style.paddingLeft = '0px';\n            }\n        }));\n        templateData.whenLabelContainer.classList.toggle('code', !!keybindingItemEntry.keybindingItem.when);\n        templateData.whenLabelContainer.classList.toggle('empty', !keybindingItemEntry.keybindingItem.when);\n        if (keybindingItemEntry.keybindingItem.when) {\n            templateData.whenLabel.set(keybindingItemEntry.keybindingItem.when, keybindingItemEntry.whenMatches);\n            templateData.whenLabel.element.title = keybindingItemEntry.keybindingItem.when;\n            templateData.element.title = keybindingItemEntry.keybindingItem.when;\n        }\n        else {\n            templateData.whenLabel.set('-');\n            templateData.whenLabel.element.title = '';\n            templateData.element.title = '';\n        }\n    }\n    disposeTemplate(templateData) {\n        templateData.disposables.dispose();\n    }\n};\nWhenColumnRenderer = ( __decorate([\n    ( __param(1, IInstantiationService))\n], WhenColumnRenderer));\nclass AccessibilityProvider {\n    constructor(configurationService) {\n        this.configurationService = configurationService;\n    }\n    getWidgetAriaLabel() {\n        return ( localize('keybindingsLabel', \"Keybindings\"));\n    }\n    getAriaLabel({ keybindingItem }) {\n        const ariaLabel = [\n            keybindingItem.commandLabel ? keybindingItem.commandLabel : keybindingItem.command,\n            keybindingItem.keybinding?.getAriaLabel() || ( localize('noKeybinding', \"No keybinding assigned\")),\n            keybindingItem.when ? keybindingItem.when : ( localize('noWhen', \"No when context\")),\n            isString(keybindingItem.source) ? keybindingItem.source : keybindingItem.source.description ?? keybindingItem.source.identifier.value,\n        ];\n        if (this.configurationService.getValue(\"accessibility.verbosity.keybindingsEditor\" )) {\n            const kbEditorAriaLabel = ( localize(\n                'keyboard shortcuts aria label',\n                \"use space or enter to change the keybinding.\"\n            ));\n            ariaLabel.push(kbEditorAriaLabel);\n        }\n        return ariaLabel.join(', ');\n    }\n}\nregisterColor('keybindingTable.headerBackground', { dark: tableOddRowsBackgroundColor, light: tableOddRowsBackgroundColor, hcDark: tableOddRowsBackgroundColor, hcLight: tableOddRowsBackgroundColor }, 'Background color for the keyboard shortcuts table header.');\nregisterColor('keybindingTable.rowsBackground', { light: tableOddRowsBackgroundColor, dark: tableOddRowsBackgroundColor, hcDark: tableOddRowsBackgroundColor, hcLight: tableOddRowsBackgroundColor }, 'Background color for the keyboard shortcuts table alternating rows.');\nregisterThemingParticipant((theme, collector) => {\n    const foregroundColor = theme.getColor(foreground);\n    if (foregroundColor) {\n        const whenForegroundColor = ( foregroundColor.transparent(.8)).makeOpaque(WORKBENCH_BACKGROUND(theme));\n        collector.addRule(`.keybindings-editor > .keybindings-body > .keybindings-table-container .monaco-table .monaco-table-tr .monaco-table-td .code { color: ${whenForegroundColor}; }`);\n    }\n    const listActiveSelectionForegroundColor = theme.getColor(listActiveSelectionForeground);\n    const listActiveSelectionBackgroundColor = theme.getColor(listActiveSelectionBackground);\n    if (listActiveSelectionForegroundColor && listActiveSelectionBackgroundColor) {\n        const whenForegroundColor = ( listActiveSelectionForegroundColor.transparent(.8)).makeOpaque(listActiveSelectionBackgroundColor);\n        collector.addRule(`.keybindings-editor > .keybindings-body > .keybindings-table-container .monaco-table.focused .monaco-list-row.selected .monaco-table-tr .monaco-table-td .code { color: ${whenForegroundColor}; }`);\n    }\n    const listInactiveSelectionForegroundColor = theme.getColor(listInactiveSelectionForeground);\n    const listInactiveSelectionBackgroundColor = theme.getColor(listInactiveSelectionBackground);\n    if (listInactiveSelectionForegroundColor && listInactiveSelectionBackgroundColor) {\n        const whenForegroundColor = ( listInactiveSelectionForegroundColor.transparent(.8)).makeOpaque(listInactiveSelectionBackgroundColor);\n        collector.addRule(`.keybindings-editor > .keybindings-body > .keybindings-table-container .monaco-table .monaco-list-row.selected .monaco-table-tr .monaco-table-td .code { color: ${whenForegroundColor}; }`);\n    }\n    const listFocusForegroundColor = theme.getColor(listFocusForeground);\n    const listFocusBackgroundColor = theme.getColor(listFocusBackground);\n    if (listFocusForegroundColor && listFocusBackgroundColor) {\n        const whenForegroundColor = ( listFocusForegroundColor.transparent(.8)).makeOpaque(listFocusBackgroundColor);\n        collector.addRule(`.keybindings-editor > .keybindings-body > .keybindings-table-container .monaco-table.focused .monaco-list-row.focused .monaco-table-tr .monaco-table-td .code { color: ${whenForegroundColor}; }`);\n    }\n    const listHoverForegroundColor = theme.getColor(listHoverForeground);\n    const listHoverBackgroundColor = theme.getColor(listHoverBackground);\n    if (listHoverForegroundColor && listHoverBackgroundColor) {\n        const whenForegroundColor = ( listHoverForegroundColor.transparent(.8)).makeOpaque(listHoverBackgroundColor);\n        collector.addRule(`.keybindings-editor > .keybindings-body > .keybindings-table-container .monaco-table.focused .monaco-list-row:hover:not(.focused):not(.selected) .monaco-table-tr .monaco-table-td .code { color: ${whenForegroundColor}; }`);\n    }\n});\nexport { KeybindingsEditor };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { Action } from 'monaco-editor/esm/vs/base/common/actions.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { getIconClasses } from 'monaco-editor/esm/vs/editor/common/services/getIconClasses.js';\nimport { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { CommandsRegistry } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { EditorExtensionsRegistry } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';\nimport { MenuRegistry, MenuId, isIMenuItem } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nlet ConfigureLanguageBasedSettingsAction = class ConfigureLanguageBasedSettingsAction extends Action {\n    static { this.ID = 'workbench.action.configureLanguageBasedSettings'; }\n    static { this.LABEL = { value: ( nls.localize(\n        'configureLanguageBasedSettings',\n        \"Configure Language Specific Settings...\"\n    )), original: 'Configure Language Specific Settings...' }; }\n    constructor(id, label, modelService, languageService, quickInputService, preferencesService) {\n        super(id, label);\n        this.modelService = modelService;\n        this.languageService = languageService;\n        this.quickInputService = quickInputService;\n        this.preferencesService = preferencesService;\n    }\n    async run() {\n        const languages = this.languageService.getSortedRegisteredLanguageNames();\n        const picks = ( languages.map(({ languageName, languageId }) => {\n            const description = ( nls.localize('languageDescriptionConfigured', \"({0})\", languageId));\n            let fakeResource;\n            const extensions = this.languageService.getExtensions(languageId);\n            if (extensions.length) {\n                fakeResource = URI.file(extensions[0]);\n            }\n            else {\n                const filenames = this.languageService.getFilenames(languageId);\n                if (filenames.length) {\n                    fakeResource = URI.file(filenames[0]);\n                }\n            }\n            return {\n                label: languageName,\n                iconClasses: getIconClasses(this.modelService, this.languageService, fakeResource),\n                description\n            };\n        }));\n        await this.quickInputService.pick(picks, { placeHolder: ( nls.localize('pickLanguage', \"Select Language\")) })\n            .then(pick => {\n            if (pick) {\n                const languageId = this.languageService.getLanguageIdByLanguageName(pick.label);\n                if (typeof languageId === 'string') {\n                    return this.preferencesService.openLanguageSpecificSettings(languageId);\n                }\n            }\n            return undefined;\n        });\n    }\n};\nConfigureLanguageBasedSettingsAction = ( __decorate([\n    ( __param(2, IModelService)),\n    ( __param(3, ILanguageService)),\n    ( __param(4, IQuickInputService)),\n    ( __param(5, IPreferencesService))\n], ConfigureLanguageBasedSettingsAction));\nCommandsRegistry.registerCommand({\n    id: '_getAllSettings',\n    handler: () => {\n        const configRegistry = ( Registry.as(Extensions.Configuration));\n        const allSettings = configRegistry.getConfigurationProperties();\n        return allSettings;\n    }\n});\nCommandsRegistry.registerCommand('_getAllCommands', function (accessor) {\n    const keybindingService = accessor.get(IKeybindingService);\n    const actions = [];\n    for (const editorAction of EditorExtensionsRegistry.getEditorActions()) {\n        const keybinding = keybindingService.lookupKeybinding(editorAction.id);\n        actions.push({ command: editorAction.id, label: editorAction.label, precondition: editorAction.precondition?.serialize(), keybinding: keybinding?.getLabel() ?? 'Not set' });\n    }\n    for (const menuItem of MenuRegistry.getMenuItems(MenuId.CommandPalette)) {\n        if (isIMenuItem(menuItem)) {\n            const title = typeof menuItem.command.title === 'string' ? menuItem.command.title : menuItem.command.title.value;\n            const category = menuItem.command.category ? typeof menuItem.command.category === 'string' ? menuItem.command.category : menuItem.command.category.value : undefined;\n            const label = category ? `${category}: ${title}` : title;\n            const keybinding = keybindingService.lookupKeybinding(menuItem.command.id);\n            actions.push({ command: menuItem.command.id, label, precondition: menuItem.when?.serialize(), keybinding: keybinding?.getLabel() ?? 'Not set' });\n        }\n    }\n    return actions;\n});\nexport { ConfigureLanguageBasedSettingsAction };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { EventHelper, getDomNodePagePosition } from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { SubmenuAction } from 'monaco-editor/esm/vs/base/common/actions.js';\nimport { Delayer } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { ResourceMap } from 'monaco-editor/esm/vs/base/common/map.js';\nimport { Position } from 'monaco-editor/esm/vs/editor/common/core/position.js';\nimport { Range } from 'monaco-editor/esm/vs/editor/common/core/range.js';\nimport { ModelDecorationOptions } from 'monaco-editor/esm/vs/editor/common/model/textModel.js';\nimport { CodeActionKind } from 'monaco-editor/esm/vs/editor/contrib/codeAction/common/types.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { overrideIdentifiersFromKey, Extensions, OVERRIDE_PROPERTY_REGEX } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { MarkerSeverity, IMarkerService } from 'monaco-editor/esm/vs/platform/markers/common/markers.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { IWorkspaceTrustManagementService } from 'monaco-editor/esm/vs/platform/workspace/common/workspaceTrust.js';\nimport { RangeHighlightDecorations } from '../../../browser/codeeditor.js';\nimport { settingsEditIcon } from './preferencesIcons.js';\nimport { EditPreferenceWidget } from './preferencesWidgets.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { WorkspaceConfigurationEditorModel, DefaultSettingsEditorModel } from '../../../services/preferences/common/preferencesModels.js';\nimport { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';\nimport { ILanguageFeaturesService } from 'monaco-editor/esm/vs/editor/common/services/languageFeatures.js';\nimport { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';\nimport { isEqual } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nimport { APPLY_ALL_PROFILES_SETTING, IWorkbenchConfigurationService } from '../../../services/configuration/common/configuration.js';\nlet UserSettingsRenderer = class UserSettingsRenderer extends Disposable {\n    constructor(editor, preferencesModel, preferencesService, configurationService, instantiationService) {\n        super();\n        this.editor = editor;\n        this.preferencesModel = preferencesModel;\n        this.preferencesService = preferencesService;\n        this.configurationService = configurationService;\n        this.instantiationService = instantiationService;\n        this.modelChangeDelayer = ( new Delayer(200));\n        this.settingHighlighter = this._register(instantiationService.createInstance(SettingHighlighter, editor));\n        this.editSettingActionRenderer = this._register(this.instantiationService.createInstance(EditSettingRenderer, this.editor, this.preferencesModel, this.settingHighlighter));\n        this._register(this.editSettingActionRenderer.onUpdateSetting(({ key, value, source }) => this.updatePreference(key, value, source)));\n        this._register(this.editor.getModel().onDidChangeContent(() => this.modelChangeDelayer.trigger(() => this.onModelChanged())));\n        this.unsupportedSettingsRenderer = this._register(instantiationService.createInstance(UnsupportedSettingsRenderer, editor, preferencesModel));\n    }\n    render() {\n        this.editSettingActionRenderer.render(this.preferencesModel.settingsGroups, this.associatedPreferencesModel);\n        this.unsupportedSettingsRenderer.render();\n    }\n    updatePreference(key, value, source) {\n        const overrideIdentifiers = source.overrideOf ? overrideIdentifiersFromKey(source.overrideOf.key) : null;\n        const resource = this.preferencesModel.uri;\n        this.configurationService.updateValue(key, value, { overrideIdentifiers, resource }, this.preferencesModel.configurationTarget)\n            .then(() => this.onSettingUpdated(source));\n    }\n    onModelChanged() {\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        this.render();\n    }\n    onSettingUpdated(setting) {\n        this.editor.focus();\n        setting = this.getSetting(setting);\n        if (setting) {\n            this.editor.setSelection(setting.valueRange);\n            this.settingHighlighter.highlight(setting, true);\n        }\n    }\n    getSetting(setting) {\n        const { key, overrideOf } = setting;\n        if (overrideOf) {\n            const setting = this.getSetting(overrideOf);\n            for (const override of setting.overrides) {\n                if (override.key === key) {\n                    return override;\n                }\n            }\n            return undefined;\n        }\n        return this.preferencesModel.getPreference(key);\n    }\n    focusPreference(setting) {\n        const s = this.getSetting(setting);\n        if (s) {\n            this.settingHighlighter.highlight(s, true);\n            this.editor.setPosition({ lineNumber: s.keyRange.startLineNumber, column: s.keyRange.startColumn });\n        }\n        else {\n            this.settingHighlighter.clear(true);\n        }\n    }\n    clearFocus(setting) {\n        this.settingHighlighter.clear(true);\n    }\n    editPreference(setting) {\n        const editableSetting = this.getSetting(setting);\n        return !!(editableSetting && this.editSettingActionRenderer.activateOnSetting(editableSetting));\n    }\n};\nUserSettingsRenderer = ( __decorate([\n    ( __param(2, IPreferencesService)),\n    ( __param(3, IConfigurationService)),\n    ( __param(4, IInstantiationService))\n], UserSettingsRenderer));\nlet WorkspaceSettingsRenderer = class WorkspaceSettingsRenderer extends UserSettingsRenderer {\n    constructor(editor, preferencesModel, preferencesService, configurationService, instantiationService) {\n        super(editor, preferencesModel, preferencesService, configurationService, instantiationService);\n        this.workspaceConfigurationRenderer = this._register(instantiationService.createInstance(WorkspaceConfigurationRenderer, editor, preferencesModel));\n    }\n    render() {\n        super.render();\n        this.workspaceConfigurationRenderer.render();\n    }\n};\nWorkspaceSettingsRenderer = ( __decorate([\n    ( __param(2, IPreferencesService)),\n    ( __param(3, IConfigurationService)),\n    ( __param(4, IInstantiationService))\n], WorkspaceSettingsRenderer));\nlet EditSettingRenderer = class EditSettingRenderer extends Disposable {\n    constructor(editor, primarySettingsModel, settingHighlighter, configurationService, instantiationService, contextMenuService) {\n        super();\n        this.editor = editor;\n        this.primarySettingsModel = primarySettingsModel;\n        this.settingHighlighter = settingHighlighter;\n        this.configurationService = configurationService;\n        this.instantiationService = instantiationService;\n        this.contextMenuService = contextMenuService;\n        this.settingsGroups = [];\n        this._onUpdateSetting = ( new Emitter());\n        this.onUpdateSetting = this._onUpdateSetting.event;\n        this.editPreferenceWidgetForCursorPosition = this._register(this.instantiationService.createInstance(EditPreferenceWidget, editor));\n        this.editPreferenceWidgetForMouseMove = this._register(this.instantiationService.createInstance(EditPreferenceWidget, editor));\n        this.toggleEditPreferencesForMouseMoveDelayer = ( new Delayer(75));\n        this._register(this.editPreferenceWidgetForCursorPosition.onClick(e => this.onEditSettingClicked(this.editPreferenceWidgetForCursorPosition, e)));\n        this._register(this.editPreferenceWidgetForMouseMove.onClick(e => this.onEditSettingClicked(this.editPreferenceWidgetForMouseMove, e)));\n        this._register(this.editor.onDidChangeCursorPosition(positionChangeEvent => this.onPositionChanged(positionChangeEvent)));\n        this._register(this.editor.onMouseMove(mouseMoveEvent => this.onMouseMoved(mouseMoveEvent)));\n        this._register(this.editor.onDidChangeConfiguration(() => this.onConfigurationChanged()));\n    }\n    render(settingsGroups, associatedPreferencesModel) {\n        this.editPreferenceWidgetForCursorPosition.hide();\n        this.editPreferenceWidgetForMouseMove.hide();\n        this.settingsGroups = settingsGroups;\n        this.associatedPreferencesModel = associatedPreferencesModel;\n        const settings = this.getSettings(this.editor.getPosition().lineNumber);\n        if (settings.length) {\n            this.showEditPreferencesWidget(this.editPreferenceWidgetForCursorPosition, settings);\n        }\n    }\n    isDefaultSettings() {\n        return this.primarySettingsModel instanceof DefaultSettingsEditorModel;\n    }\n    onConfigurationChanged() {\n        if (!this.editor.getOption(56 )) {\n            this.editPreferenceWidgetForCursorPosition.hide();\n            this.editPreferenceWidgetForMouseMove.hide();\n        }\n    }\n    onPositionChanged(positionChangeEvent) {\n        this.editPreferenceWidgetForMouseMove.hide();\n        const settings = this.getSettings(positionChangeEvent.position.lineNumber);\n        if (settings.length) {\n            this.showEditPreferencesWidget(this.editPreferenceWidgetForCursorPosition, settings);\n        }\n        else {\n            this.editPreferenceWidgetForCursorPosition.hide();\n        }\n    }\n    onMouseMoved(mouseMoveEvent) {\n        const editPreferenceWidget = this.getEditPreferenceWidgetUnderMouse(mouseMoveEvent);\n        if (editPreferenceWidget) {\n            this.onMouseOver(editPreferenceWidget);\n            return;\n        }\n        this.settingHighlighter.clear();\n        this.toggleEditPreferencesForMouseMoveDelayer.trigger(() => this.toggleEditPreferenceWidgetForMouseMove(mouseMoveEvent));\n    }\n    getEditPreferenceWidgetUnderMouse(mouseMoveEvent) {\n        if (mouseMoveEvent.target.type === 2 ) {\n            const line = mouseMoveEvent.target.position.lineNumber;\n            if (this.editPreferenceWidgetForMouseMove.getLine() === line && this.editPreferenceWidgetForMouseMove.isVisible()) {\n                return this.editPreferenceWidgetForMouseMove;\n            }\n            if (this.editPreferenceWidgetForCursorPosition.getLine() === line && this.editPreferenceWidgetForCursorPosition.isVisible()) {\n                return this.editPreferenceWidgetForCursorPosition;\n            }\n        }\n        return undefined;\n    }\n    toggleEditPreferenceWidgetForMouseMove(mouseMoveEvent) {\n        const settings = mouseMoveEvent.target.position ? this.getSettings(mouseMoveEvent.target.position.lineNumber) : null;\n        if (settings && settings.length) {\n            this.showEditPreferencesWidget(this.editPreferenceWidgetForMouseMove, settings);\n        }\n        else {\n            this.editPreferenceWidgetForMouseMove.hide();\n        }\n    }\n    showEditPreferencesWidget(editPreferencesWidget, settings) {\n        const line = settings[0].valueRange.startLineNumber;\n        if (this.editor.getOption(56 ) && this.marginFreeFromOtherDecorations(line)) {\n            editPreferencesWidget.show(line, ( nls.localize('editTtile', \"Edit\")), settings);\n            const editPreferenceWidgetToHide = editPreferencesWidget === this.editPreferenceWidgetForCursorPosition ? this.editPreferenceWidgetForMouseMove : this.editPreferenceWidgetForCursorPosition;\n            editPreferenceWidgetToHide.hide();\n        }\n    }\n    marginFreeFromOtherDecorations(line) {\n        const decorations = this.editor.getLineDecorations(line);\n        if (decorations) {\n            for (const { options } of decorations) {\n                if (options.glyphMarginClassName && options.glyphMarginClassName.indexOf(ThemeIcon.asClassName(settingsEditIcon)) === -1) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    getSettings(lineNumber) {\n        const configurationMap = this.getConfigurationsMap();\n        return this.getSettingsAtLineNumber(lineNumber).filter(setting => {\n            const configurationNode = configurationMap[setting.key];\n            if (configurationNode) {\n                if (configurationNode.policy && this.configurationService.inspect(setting.key).policyValue !== undefined) {\n                    return false;\n                }\n                if (this.isDefaultSettings()) {\n                    if (setting.key === 'launch') {\n                        return false;\n                    }\n                    return true;\n                }\n                if (configurationNode.type === 'boolean' || configurationNode.enum) {\n                    if (this.primarySettingsModel.configurationTarget !== 6 ) {\n                        return true;\n                    }\n                    if (configurationNode.scope === 4  || configurationNode.scope === 5 ) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        });\n    }\n    getSettingsAtLineNumber(lineNumber) {\n        let index = 0;\n        const settings = [];\n        for (const group of this.settingsGroups) {\n            if (group.range.startLineNumber > lineNumber) {\n                break;\n            }\n            if (lineNumber >= group.range.startLineNumber && lineNumber <= group.range.endLineNumber) {\n                for (const section of group.sections) {\n                    for (const setting of section.settings) {\n                        if (setting.range.startLineNumber > lineNumber) {\n                            break;\n                        }\n                        if (lineNumber >= setting.range.startLineNumber && lineNumber <= setting.range.endLineNumber) {\n                            if (!this.isDefaultSettings() && setting.overrides.length) {\n                                for (const overrideSetting of setting.overrides) {\n                                    if (lineNumber >= overrideSetting.range.startLineNumber && lineNumber <= overrideSetting.range.endLineNumber) {\n                                        settings.push({ ...overrideSetting, index, groupId: group.id });\n                                    }\n                                }\n                            }\n                            else {\n                                settings.push({ ...setting, index, groupId: group.id });\n                            }\n                        }\n                        index++;\n                    }\n                }\n            }\n        }\n        return settings;\n    }\n    onMouseOver(editPreferenceWidget) {\n        this.settingHighlighter.highlight(editPreferenceWidget.preferences[0]);\n    }\n    onEditSettingClicked(editPreferenceWidget, e) {\n        EventHelper.stop(e.event, true);\n        const actions = this.getSettings(editPreferenceWidget.getLine()).length === 1 ? this.getActions(editPreferenceWidget.preferences[0], this.getConfigurationsMap()[editPreferenceWidget.preferences[0].key])\n            : ( editPreferenceWidget.preferences.map(setting => ( new SubmenuAction(\n            `preferences.submenu.${setting.key}`,\n            setting.key,\n            this.getActions(setting, this.getConfigurationsMap()[setting.key])\n        ))));\n        this.contextMenuService.showContextMenu({\n            getAnchor: () => e.event,\n            getActions: () => actions\n        });\n    }\n    activateOnSetting(setting) {\n        const startLine = setting.keyRange.startLineNumber;\n        const settings = this.getSettings(startLine);\n        if (!settings.length) {\n            return false;\n        }\n        this.editPreferenceWidgetForMouseMove.show(startLine, '', settings);\n        const actions = this.getActions(this.editPreferenceWidgetForMouseMove.preferences[0], this.getConfigurationsMap()[this.editPreferenceWidgetForMouseMove.preferences[0].key]);\n        this.contextMenuService.showContextMenu({\n            getAnchor: () => this.toAbsoluteCoords(( new Position(startLine, 1))),\n            getActions: () => actions\n        });\n        return true;\n    }\n    toAbsoluteCoords(position) {\n        const positionCoords = this.editor.getScrolledVisiblePosition(position);\n        const editorCoords = getDomNodePagePosition(this.editor.getDomNode());\n        const x = editorCoords.left + positionCoords.left;\n        const y = editorCoords.top + positionCoords.top + positionCoords.height;\n        return { x, y: y + 10 };\n    }\n    getConfigurationsMap() {\n        return ( Registry.as(Extensions.Configuration)).getConfigurationProperties();\n    }\n    getActions(setting, jsonSchema) {\n        if (jsonSchema.type === 'boolean') {\n            return [{\n                    id: 'truthyValue',\n                    label: 'true',\n                    enabled: true,\n                    run: () => this.updateSetting(setting.key, true, setting)\n                }, {\n                    id: 'falsyValue',\n                    label: 'false',\n                    enabled: true,\n                    run: () => this.updateSetting(setting.key, false, setting)\n                }];\n        }\n        if (jsonSchema.enum) {\n            return ( jsonSchema.enum.map(value => {\n                return {\n                    id: value,\n                    label: JSON.stringify(value),\n                    enabled: true,\n                    run: () => this.updateSetting(setting.key, value, setting)\n                };\n            }));\n        }\n        return this.getDefaultActions(setting);\n    }\n    getDefaultActions(setting) {\n        if (this.isDefaultSettings()) {\n            const settingInOtherModel = this.associatedPreferencesModel.getPreference(setting.key);\n            return [{\n                    id: 'setDefaultValue',\n                    label: settingInOtherModel ? ( nls.localize('replaceDefaultValue', \"Replace in Settings\")) : ( nls.localize('copyDefaultValue', \"Copy to Settings\")),\n                    enabled: true,\n                    run: () => this.updateSetting(setting.key, setting.value, setting)\n                }];\n        }\n        return [];\n    }\n    updateSetting(key, value, source) {\n        this._onUpdateSetting.fire({ key, value, source });\n    }\n};\nEditSettingRenderer = ( __decorate([\n    ( __param(3, IConfigurationService)),\n    ( __param(4, IInstantiationService)),\n    ( __param(5, IContextMenuService))\n], EditSettingRenderer));\nlet SettingHighlighter = class SettingHighlighter extends Disposable {\n    constructor(editor, instantiationService) {\n        super();\n        this.editor = editor;\n        this.fixedHighlighter = this._register(instantiationService.createInstance(RangeHighlightDecorations));\n        this.volatileHighlighter = this._register(instantiationService.createInstance(RangeHighlightDecorations));\n    }\n    highlight(setting, fix = false) {\n        this.volatileHighlighter.removeHighlightRange();\n        this.fixedHighlighter.removeHighlightRange();\n        const highlighter = fix ? this.fixedHighlighter : this.volatileHighlighter;\n        highlighter.highlightRange({\n            range: setting.valueRange,\n            resource: this.editor.getModel().uri\n        }, this.editor);\n        this.editor.revealLineInCenterIfOutsideViewport(setting.valueRange.startLineNumber, 0 );\n    }\n    clear(fix = false) {\n        this.volatileHighlighter.removeHighlightRange();\n        if (fix) {\n            this.fixedHighlighter.removeHighlightRange();\n        }\n    }\n};\nSettingHighlighter = ( __decorate([\n    ( __param(1, IInstantiationService))\n], SettingHighlighter));\nlet UnsupportedSettingsRenderer = class UnsupportedSettingsRenderer extends Disposable {\n    constructor(editor, settingsEditorModel, markerService, environmentService, configurationService, workspaceTrustManagementService, uriIdentityService, languageFeaturesService, userDataProfileService, userDataProfilesService) {\n        super();\n        this.editor = editor;\n        this.settingsEditorModel = settingsEditorModel;\n        this.markerService = markerService;\n        this.environmentService = environmentService;\n        this.configurationService = configurationService;\n        this.workspaceTrustManagementService = workspaceTrustManagementService;\n        this.uriIdentityService = uriIdentityService;\n        this.userDataProfileService = userDataProfileService;\n        this.userDataProfilesService = userDataProfilesService;\n        this.renderingDelayer = ( new Delayer(200));\n        this.codeActions = ( new ResourceMap(uri => this.uriIdentityService.extUri.getComparisonKey(uri)));\n        this._register(this.editor.getModel().onDidChangeContent(() => this.delayedRender()));\n        this._register(Event.filter(this.configurationService.onDidChangeConfiguration, e => e.source === 7 )(() => this.delayedRender()));\n        this._register(languageFeaturesService.codeActionProvider.register({ pattern: settingsEditorModel.uri.path }, this));\n    }\n    delayedRender() {\n        this.renderingDelayer.trigger(() => this.render());\n    }\n    render() {\n        this.codeActions.clear();\n        const markerData = this.generateMarkerData();\n        if (markerData.length) {\n            this.markerService.changeOne('UnsupportedSettingsRenderer', this.settingsEditorModel.uri, markerData);\n        }\n        else {\n            this.markerService.remove('UnsupportedSettingsRenderer', [this.settingsEditorModel.uri]);\n        }\n    }\n    async provideCodeActions(model, range, context, token) {\n        const actions = [];\n        const codeActionsByRange = this.codeActions.get(model.uri);\n        if (codeActionsByRange) {\n            for (const [codeActionsRange, codeActions] of codeActionsByRange) {\n                if (codeActionsRange.containsRange(range)) {\n                    actions.push(...codeActions);\n                }\n            }\n        }\n        return {\n            actions,\n            dispose: () => { }\n        };\n    }\n    generateMarkerData() {\n        const markerData = [];\n        const configurationRegistry = ( Registry.as(Extensions.Configuration)).getConfigurationProperties();\n        for (const settingsGroup of this.settingsEditorModel.settingsGroups) {\n            for (const section of settingsGroup.sections) {\n                for (const setting of section.settings) {\n                    if (OVERRIDE_PROPERTY_REGEX.test(setting.key)) {\n                        if (setting.overrides) {\n                            this.handleOverrides(setting.overrides, configurationRegistry, markerData);\n                        }\n                        continue;\n                    }\n                    const configuration = configurationRegistry[setting.key];\n                    if (configuration) {\n                        if (this.handlePolicyConfiguration(setting, configuration, markerData)) {\n                            continue;\n                        }\n                        switch (this.settingsEditorModel.configurationTarget) {\n                            case 3 :\n                                this.handleLocalUserConfiguration(setting, configuration, markerData);\n                                break;\n                            case 4 :\n                                this.handleRemoteUserConfiguration(setting, configuration, markerData);\n                                break;\n                            case 5 :\n                                this.handleWorkspaceConfiguration(setting, configuration, markerData);\n                                break;\n                            case 6 :\n                                this.handleWorkspaceFolderConfiguration(setting, configuration, markerData);\n                                break;\n                        }\n                    }\n                    else {\n                        markerData.push(this.gemerateUnknownConfigurationMarker(setting));\n                    }\n                }\n            }\n        }\n        return markerData;\n    }\n    handlePolicyConfiguration(setting, configuration, markerData) {\n        if (!configuration.policy) {\n            return false;\n        }\n        if (this.configurationService.inspect(setting.key).policyValue === undefined) {\n            return false;\n        }\n        if (this.settingsEditorModel.configurationTarget === 7 ) {\n            return false;\n        }\n        markerData.push({\n            severity: MarkerSeverity.Hint,\n            tags: [1 ],\n            ...setting.range,\n            message: ( nls.localize(\n                'unsupportedPolicySetting',\n                \"This setting cannot be applied because it is configured in the system policy.\"\n            ))\n        });\n        return true;\n    }\n    handleOverrides(overrides, configurationRegistry, markerData) {\n        for (const setting of overrides || []) {\n            const configuration = configurationRegistry[setting.key];\n            if (configuration) {\n                if (configuration.scope !== 5 ) {\n                    markerData.push({\n                        severity: MarkerSeverity.Hint,\n                        tags: [1 ],\n                        ...setting.range,\n                        message: ( nls.localize(\n                            'unsupportLanguageOverrideSetting',\n                            \"This setting cannot be applied because it is not registered as language override setting.\"\n                        ))\n                    });\n                }\n            }\n            else {\n                markerData.push(this.gemerateUnknownConfigurationMarker(setting));\n            }\n        }\n    }\n    handleLocalUserConfiguration(setting, configuration, markerData) {\n        if (!this.userDataProfileService.currentProfile.isDefault && !this.userDataProfileService.currentProfile.useDefaultFlags?.settings) {\n            if (isEqual(this.userDataProfilesService.defaultProfile.settingsResource, this.settingsEditorModel.uri) && !this.configurationService.isSettingAppliedForAllProfiles(setting.key)) {\n                markerData.push({\n                    severity: MarkerSeverity.Hint,\n                    tags: [1 ],\n                    ...setting.range,\n                    message: ( nls.localize(\n                        'defaultProfileSettingWhileNonDefaultActive',\n                        \"This setting cannot be applied while a non-default profile is active. It will be applied when the default profile is active.\"\n                    ))\n                });\n            }\n            else if (isEqual(this.userDataProfileService.currentProfile.settingsResource, this.settingsEditorModel.uri)) {\n                if (configuration.scope === 1 ) {\n                    markerData.push(this.generateUnsupportedApplicationSettingMarker(setting));\n                }\n                else if (this.configurationService.isSettingAppliedForAllProfiles(setting.key)) {\n                    markerData.push({\n                        severity: MarkerSeverity.Hint,\n                        tags: [1 ],\n                        ...setting.range,\n                        message: ( nls.localize(\n                            'allProfileSettingWhileInNonDefaultProfileSetting',\n                            \"This setting cannot be applied because it is configured to be applied in all profiles using setting {0}. Value from the default profile will be used instead.\",\n                            APPLY_ALL_PROFILES_SETTING\n                        ))\n                    });\n                }\n            }\n        }\n        if (this.environmentService.remoteAuthority && ((configuration.scope === 2  || configuration.scope === 6) )) {\n            markerData.push({\n                severity: MarkerSeverity.Hint,\n                tags: [1 ],\n                ...setting.range,\n                message: ( nls.localize(\n                    'unsupportedRemoteMachineSetting',\n                    \"This setting cannot be applied in this window. It will be applied when you open a local window.\"\n                ))\n            });\n        }\n    }\n    handleRemoteUserConfiguration(setting, configuration, markerData) {\n        if (configuration.scope === 1 ) {\n            markerData.push(this.generateUnsupportedApplicationSettingMarker(setting));\n        }\n    }\n    handleWorkspaceConfiguration(setting, configuration, markerData) {\n        if (configuration.scope === 1 ) {\n            markerData.push(this.generateUnsupportedApplicationSettingMarker(setting));\n        }\n        if (configuration.scope === 2 ) {\n            markerData.push(this.generateUnsupportedMachineSettingMarker(setting));\n        }\n        if (!this.workspaceTrustManagementService.isWorkspaceTrusted() && configuration.restricted) {\n            const marker = this.generateUntrustedSettingMarker(setting);\n            markerData.push(marker);\n            const codeActions = this.generateUntrustedSettingCodeActions([marker]);\n            this.addCodeActions(marker, codeActions);\n        }\n    }\n    handleWorkspaceFolderConfiguration(setting, configuration, markerData) {\n        if (configuration.scope === 1 ) {\n            markerData.push(this.generateUnsupportedApplicationSettingMarker(setting));\n        }\n        if (configuration.scope === 2 ) {\n            markerData.push(this.generateUnsupportedMachineSettingMarker(setting));\n        }\n        if (configuration.scope === 3 ) {\n            markerData.push({\n                severity: MarkerSeverity.Hint,\n                tags: [1 ],\n                ...setting.range,\n                message: ( nls.localize(\n                    'unsupportedWindowSetting',\n                    \"This setting cannot be applied in this workspace. It will be applied when you open the containing workspace folder directly.\"\n                ))\n            });\n        }\n        if (!this.workspaceTrustManagementService.isWorkspaceTrusted() && configuration.restricted) {\n            const marker = this.generateUntrustedSettingMarker(setting);\n            markerData.push(marker);\n            const codeActions = this.generateUntrustedSettingCodeActions([marker]);\n            this.addCodeActions(marker, codeActions);\n        }\n    }\n    generateUnsupportedApplicationSettingMarker(setting) {\n        return {\n            severity: MarkerSeverity.Hint,\n            tags: [1 ],\n            ...setting.range,\n            message: ( nls.localize(\n                'unsupportedApplicationSetting',\n                \"This setting has an application scope and can be set only in the user settings file.\"\n            ))\n        };\n    }\n    generateUnsupportedMachineSettingMarker(setting) {\n        return {\n            severity: MarkerSeverity.Hint,\n            tags: [1 ],\n            ...setting.range,\n            message: ( nls.localize(\n                'unsupportedMachineSetting',\n                \"This setting can only be applied in user settings in local window or in remote settings in remote window.\"\n            ))\n        };\n    }\n    generateUntrustedSettingMarker(setting) {\n        return {\n            severity: MarkerSeverity.Warning,\n            ...setting.range,\n            message: ( nls.localize(\n                'untrustedSetting',\n                \"This setting can only be applied in a trusted workspace.\"\n            ))\n        };\n    }\n    gemerateUnknownConfigurationMarker(setting) {\n        return {\n            severity: MarkerSeverity.Hint,\n            tags: [1 ],\n            ...setting.range,\n            message: ( nls.localize('unknown configuration setting', \"Unknown Configuration Setting\"))\n        };\n    }\n    generateUntrustedSettingCodeActions(diagnostics) {\n        return [{\n                title: ( nls.localize('manage workspace trust', \"Manage Workspace Trust\")),\n                command: {\n                    id: 'workbench.trust.manage',\n                    title: ( nls.localize('manage workspace trust', \"Manage Workspace Trust\"))\n                },\n                diagnostics,\n                kind: CodeActionKind.QuickFix.value\n            }];\n    }\n    addCodeActions(range, codeActions) {\n        let actions = this.codeActions.get(this.settingsEditorModel.uri);\n        if (!actions) {\n            actions = [];\n            this.codeActions.set(this.settingsEditorModel.uri, actions);\n        }\n        actions.push([Range.lift(range), codeActions]);\n    }\n    dispose() {\n        this.markerService.remove('UnsupportedSettingsRenderer', [this.settingsEditorModel.uri]);\n        this.codeActions.clear();\n        super.dispose();\n    }\n};\nUnsupportedSettingsRenderer = ( __decorate([\n    ( __param(2, IMarkerService)),\n    ( __param(3, IWorkbenchEnvironmentService)),\n    ( __param(4, IWorkbenchConfigurationService)),\n    ( __param(5, IWorkspaceTrustManagementService)),\n    ( __param(6, IUriIdentityService)),\n    ( __param(7, ILanguageFeaturesService)),\n    ( __param(8, IUserDataProfileService)),\n    ( __param(9, IUserDataProfilesService))\n], UnsupportedSettingsRenderer));\nlet WorkspaceConfigurationRenderer = class WorkspaceConfigurationRenderer extends Disposable {\n    static { this.supportedKeys = ['folders', 'tasks', 'launch', 'extensions', 'settings', 'remoteAuthority', 'transient']; }\n    constructor(editor, workspaceSettingsEditorModel, workspaceContextService, markerService) {\n        super();\n        this.editor = editor;\n        this.workspaceSettingsEditorModel = workspaceSettingsEditorModel;\n        this.workspaceContextService = workspaceContextService;\n        this.markerService = markerService;\n        this.decorations = this.editor.createDecorationsCollection();\n        this.renderingDelayer = ( new Delayer(200));\n        this._register(this.editor.getModel().onDidChangeContent(() => this.renderingDelayer.trigger(() => this.render())));\n    }\n    render() {\n        const markerData = [];\n        if (this.workspaceContextService.getWorkbenchState() === 3  && this.workspaceSettingsEditorModel instanceof WorkspaceConfigurationEditorModel) {\n            const ranges = [];\n            for (const settingsGroup of this.workspaceSettingsEditorModel.configurationGroups) {\n                for (const section of settingsGroup.sections) {\n                    for (const setting of section.settings) {\n                        if (!WorkspaceConfigurationRenderer.supportedKeys.includes(setting.key)) {\n                            markerData.push({\n                                severity: MarkerSeverity.Hint,\n                                tags: [1 ],\n                                ...setting.range,\n                                message: ( nls.localize('unsupportedProperty', \"Unsupported Property\"))\n                            });\n                        }\n                    }\n                }\n            }\n            this.decorations.set(( ranges.map(range => this.createDecoration(range))));\n        }\n        if (markerData.length) {\n            this.markerService.changeOne('WorkspaceConfigurationRenderer', this.workspaceSettingsEditorModel.uri, markerData);\n        }\n        else {\n            this.markerService.remove('WorkspaceConfigurationRenderer', [this.workspaceSettingsEditorModel.uri]);\n        }\n    }\n    static { this._DIM_CONFIGURATION_ = ModelDecorationOptions.register({\n        description: 'dim-configuration',\n        stickiness: 1 ,\n        inlineClassName: 'dim-configuration'\n    }); }\n    createDecoration(range) {\n        return {\n            range,\n            options: WorkspaceConfigurationRenderer._DIM_CONFIGURATION_\n        };\n    }\n    dispose() {\n        this.markerService.remove('WorkspaceConfigurationRenderer', [this.workspaceSettingsEditorModel.uri]);\n        this.decorations.clear();\n        super.dispose();\n    }\n};\nWorkspaceConfigurationRenderer = ( __decorate([\n    ( __param(2, IWorkspaceContextService)),\n    ( __param(3, IMarkerService))\n], WorkspaceConfigurationRenderer));\nexport { UserSettingsRenderer, WorkspaceSettingsRenderer };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { UserSettingsRenderer, WorkspaceSettingsRenderer } from './preferencesRenderers.js';\nimport { IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { SettingsEditorModel } from '../../../services/preferences/common/preferencesModels.js';\nlet SettingsEditorContribution = class SettingsEditorContribution extends Disposable {\n    static { this.ID = 'editor.contrib.settings'; }\n    constructor(editor, instantiationService, preferencesService, workspaceContextService) {\n        super();\n        this.editor = editor;\n        this.instantiationService = instantiationService;\n        this.preferencesService = preferencesService;\n        this.workspaceContextService = workspaceContextService;\n        this.disposables = this._register(( new DisposableStore()));\n        this._createPreferencesRenderer();\n        this._register(this.editor.onDidChangeModel(e => this._createPreferencesRenderer()));\n        this._register(this.workspaceContextService.onDidChangeWorkbenchState(() => this._createPreferencesRenderer()));\n    }\n    async _createPreferencesRenderer() {\n        this.disposables.clear();\n        this.currentRenderer = undefined;\n        const model = this.editor.getModel();\n        if (model && /\\.(json|code-workspace)$/.test(model.uri.path)) {\n            const settingsModel = await this.preferencesService.createPreferencesEditorModel(model.uri);\n            if (settingsModel instanceof SettingsEditorModel && this.editor.getModel()) {\n                this.disposables.add(settingsModel);\n                switch (settingsModel.configurationTarget) {\n                    case 5 :\n                        this.currentRenderer = this.disposables.add(this.instantiationService.createInstance(WorkspaceSettingsRenderer, this.editor, settingsModel));\n                        break;\n                    default:\n                        this.currentRenderer = this.disposables.add(this.instantiationService.createInstance(UserSettingsRenderer, this.editor, settingsModel));\n                        break;\n                }\n            }\n            this.currentRenderer?.render();\n        }\n    }\n};\nSettingsEditorContribution = ( __decorate([\n    ( __param(1, IInstantiationService)),\n    ( __param(2, IPreferencesService)),\n    ( __param(3, IWorkspaceContextService))\n], SettingsEditorContribution));\nexport { SettingsEditorContribution };\n","import n from '../../../../../../../node_modules/rollup-plugin-styles/dist/runtime/inject-css.js';\nvar css = \".editor-instance#workbench\\\\.editor\\\\.settings2:focus{outline:none}.settings-editor{margin:auto;max-width:1200px;overflow:hidden}.settings-editor:focus{outline:none!important}.settings-editor>.settings-header{box-sizing:border-box;margin:11px auto auto;max-width:1200px;overflow:hidden;padding-left:24px;padding-right:24px;padding-top:3px}.settings-editor>.settings-header>.search-container{position:relative}.monaco-workbench.vs .settings-editor>.settings-header>.search-container>.suggest-input-container{border:1px solid #ddd}.settings-editor>.settings-header>.search-container>.settings-count-widget{margin:4px 0;position:absolute;right:46px;top:0}.settings-editor>.settings-header>.search-container>.settings-count-widget:empty{visibility:hidden}.settings-editor>.settings-header>.search-container>.settings-clear-widget{align-items:center;display:flex;height:100%;position:absolute;right:0;top:0;width:43px}.settings-editor>.settings-header>.search-container>.settings-clear-widget .action-label{padding:2px}.settings-editor>.settings-header>.settings-header-controls{border-bottom:1px solid;display:flex;height:32px;margin-top:10px}.settings-editor>.settings-header>.settings-header-controls .settings-target-container{flex:auto}.settings-editor>.settings-header>.settings-header-controls .settings-tabs-widget .action-label{border-radius:0;color:var(--vscode-foreground);opacity:.9}.settings-editor>.settings-header>.settings-header-controls .last-synced-label{opacity:.9;padding-top:7px}.settings-editor .settings-tabs-widget>.monaco-action-bar .action-item .action-details{opacity:.9}.settings-editor>.settings-header>.settings-header-controls .settings-tabs-widget .action-label:hover{opacity:1}.settings-editor>.settings-header>.settings-header-controls .settings-tabs-widget .action-label.checked{color:var(--vscode-settings-headerForeground);opacity:1}.settings-editor>.settings-header>.settings-header-controls .settings-tabs-widget .action-label.checked:not(:focus){border-bottom-color:var(--vscode-settings-headerForeground)}.settings-editor>.settings-header .settings-tabs-widget>.monaco-action-bar .action-item .action-label{margin-right:0}.settings-editor>.settings-header .settings-tabs-widget .monaco-action-bar .action-item .dropdown-icon{padding-top:3px}.settings-editor>.settings-header>.settings-header-controls .settings-tabs-widget>.monaco-action-bar .action-item{padding:0}.settings-editor>.settings-header>.settings-header-controls .settings-tabs-widget>.monaco-action-bar .action-item .action-label{font-size:13px;padding:7px 8px 6.5px;text-transform:none}.settings-editor>.settings-header>.settings-header-controls .settings-tabs-widget>.monaco-action-bar .action-item .action-label .dropdown-icon{padding-top:2px}.settings-editor>.settings-header>.settings-header-controls .settings-tabs-widget>.monaco-action-bar .action-item .action-label:not(.checked):not(:focus){border-bottom:1px solid transparent}.settings-editor>.settings-body{position:relative}.settings-editor>.settings-body>.no-results-message{box-sizing:border-box;display:none;margin:20px auto auto;max-width:1200px;padding-left:24px;padding-right:24px}.settings-editor>.settings-body>.monaco-split-view2{margin-top:14px}.settings-editor>.settings-body .settings-toc-container,.settings-editor>.settings-body .settings-tree-container{height:100%}.settings-editor>.settings-body .settings-tree-container .setting-item-label,.settings-editor>.settings-body .settings-tree-container .settings-group-title-label{color:var(--vscode-settings-headerForeground)}.settings-editor>.settings-body .settings-tree-container .setting-item-extension-toggle .setting-item-extension-toggle-button{display:block;width:fit-content}.settings-editor.no-results>.settings-body .settings-toc-container,.settings-editor.no-results>.settings-body .settings-tree-container{display:none}.settings-editor.no-results>.settings-body>.no-results-message{display:block}.settings-editor>.settings-body>.no-results-message a.prominent{text-decoration:underline}.settings-editor.narrow-width>.settings-body .settings-tree-container .monaco-list-row .monaco-tl-contents,.settings-editor.no-toc-search>.settings-body .settings-tree-container .monaco-list-row .monaco-tl-contents{padding-left:33px}.settings-editor>.settings-body .settings-tree-container .monaco-list-row{outline:none!important}.settings-editor>.settings-body .settings-tree-container .monaco-list-row .monaco-tl-twistie{display:none!important}.settings-editor>.settings-body .settings-tree-container .monaco-list-row.focused .settings-row-inner-container{background-color:var(--vscode-settings-focusedRowBackground)}.settings-editor>.settings-body .settings-tree-container .monaco-list-row:not(.focused) .settings-row-inner-container:hover{background-color:var(--vscode-settings-rowHoverBackground)}.settings-editor>.settings-body .settings-tree-container .monaco-list:focus-within .monaco-list-row.focused .setting-item-contents,.settings-editor>.settings-body .settings-tree-container .monaco-list:focus-within .monaco-list-row.focused .settings-group-title-label{outline:1px solid var(--vscode-settings-focusedRowBorder)}.settings-editor>.settings-body .settings-tree-container .settings-editor-tree>.monaco-scrollable-element>.shadow.top{z-index:11}.settings-editor>.settings-body .settings-tree-container .setting-toolbar-container{bottom:0;height:22px;left:-22px;position:absolute;top:8px;width:22px}.settings-editor>.settings-body .settings-tree-container .monaco-list-row .mouseover .setting-toolbar-container>.monaco-toolbar .codicon,.settings-editor>.settings-body .settings-tree-container .monaco-list-row .setting-toolbar-container:hover>.monaco-toolbar .codicon,.settings-editor>.settings-body .settings-tree-container .monaco-list-row .setting-toolbar-container>.monaco-toolbar .active .codicon,.settings-editor>.settings-body .settings-tree-container .monaco-list-row.focused .setting-item-contents .setting-toolbar-container>.monaco-toolbar .codicon{opacity:1}.settings-editor>.settings-body .settings-tree-container .setting-toolbar-container>.monaco-toolbar .codicon{align-items:center;display:flex;justify-content:center;opacity:0}.monaco-workbench:not(.reduce-motion) .settings-editor>.settings-body .settings-tree-container .setting-toolbar-container>.monaco-toolbar .codicon{transition:opacity .3s}.settings-editor>.settings-body .settings-toc-container{pointer-events:none;position:absolute;width:100%;z-index:10}.settings-editor>.settings-body .settings-toc-container .monaco-list{pointer-events:auto}.settings-editor.narrow-width>.settings-body .settings-toc-container,.settings-editor.no-toc-search>.settings-body .settings-toc-container{display:none}.settings-editor>.settings-body .settings-toc-container .monaco-list-row:not(.selected){color:var(--vscode-foreground);opacity:.9}.settings-editor>.settings-body .settings-toc-container .monaco-list-row .monaco-tl-contents{display:flex}.settings-editor>.settings-body .settings-toc-container .monaco-list-row .settings-toc-entry{flex-shrink:1;line-height:22px;overflow:hidden;text-overflow:ellipsis}.settings-editor>.settings-body .settings-toc-container .monaco-list-row .settings-toc-count{display:none;line-height:22px;margin-left:3px;opacity:.8}.settings-editor>.settings-body .settings-toc-container .monaco-list-row.selected .settings-toc-entry{font-weight:700}.settings-editor>.settings-body .settings-tree-container{border-collapse:separate;border-spacing:0;position:relative}.settings-editor>.settings-body .settings-toc-container .monaco-scrollable-element,.settings-editor>.settings-body .settings-tree-container .monaco-scrollable-element{padding-top:0}.settings-editor>.settings-body .settings-toc-wrapper{height:100%;margin:auto;max-width:1200px;padding-left:24px}.settings-editor.narrow-width>.settings-body .settings-tree-container,.settings-editor.no-toc-search>.settings-body .settings-tree-container{margin-left:0}.settings-editor>.settings-body .settings-tree-container .monaco-list-row{cursor:default;line-height:1.4em!important;overflow:visible}.settings-editor>.settings-body .settings-tree-container .monaco-list-rows{min-height:100%;overflow:visible!important}.settings-editor>.settings-body .settings-tree-container .monaco-list-row .monaco-tl-contents{box-sizing:border-box;margin:auto;max-width:min(100%,1200px);overflow:visible;padding-left:24px;padding-right:24px}.settings-editor>.settings-body .settings-tree-container .monaco-list-row .monaco-tl-contents.group-title{max-width:min(100%,1200px)}.settings-editor>.settings-body .settings-tree-container .setting-item-contents,.settings-editor>.settings-body .settings-tree-container .settings-group-title-label{outline-offset:-1px}.settings-editor>.settings-body .settings-tree-container .setting-item-contents{padding:12px 14px 18px;position:relative;white-space:normal}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-title{display:inline-block;overflow:hidden;padding-bottom:2px;text-overflow:ellipsis}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-modified-indicator{border-color:var(--vscode-settings-modifiedItemIndicator);display:none}.settings-editor>.settings-body .settings-tree-container .setting-item-contents.is-configured .setting-item-modified-indicator{border-left-style:solid;border-left-width:2px;bottom:18px;content:\\\" \\\";display:block;left:5px;position:absolute;top:15px;width:6px}.settings-editor>.settings-body .settings-tree-container .setting-item-bool .setting-item-contents.is-configured .setting-item-modified-indicator,.settings-editor>.settings-body .settings-tree-container .setting-item-list .setting-item-contents.is-configured .setting-item-modified-indicator{bottom:23px}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-title>.setting-indicators-container{font-style:italic}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-title .setting-item-ignored,.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-title .setting-item-overrides{color:var(--vscode-foreground);opacity:.9}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-title>.setting-indicators-container .setting-indicator{padding-bottom:2px}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-title .codicon{padding-left:1px;vertical-align:middle}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-title .setting-item-label .codicon{vertical-align:middle}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-title .setting-item-overrides a.modified-scope{cursor:pointer;text-decoration:underline}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-label{margin-right:7px}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-cat-label-container{float:left}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-category,.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-label{font-weight:600;user-select:text;-webkit-user-select:text}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-category{opacity:.9}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-deprecation-message{color:var(--vscode-errorForeground);display:none;margin-top:3px;user-select:text;-webkit-user-select:text}.settings-editor>.settings-body .settings-tree-container .setting-item-contents.is-deprecated .setting-item-deprecation-message{display:flex}.settings-editor>.settings-body .settings-tree-container .setting-item-contents.is-deprecated .setting-item-deprecation-message .codicon{color:inherit;margin-right:4px}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-description{color:var(--vscode-foreground);margin-top:-1px;opacity:.9;user-select:text;-webkit-user-select:text}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-validation-message{background-color:var(--vscode-inputValidation-errorBackground);border:1px solid var(--vscode-inputValidation-errorBorder);color:var(--vscode-inputValidation-errorForeground);display:none}.settings-editor>.settings-body .settings-tree-container .setting-item .setting-item-contents.invalid-input .setting-item-validation-message{box-sizing:border-box;display:block;margin-top:-1px;padding:5px;position:absolute;z-index:1}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-item-contents.invalid-input .setting-item-validation-message{margin-top:1rem;position:static}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-text .setting-item-validation-message{width:420px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-number .setting-item-validation-message{width:200px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-number input[type=number]::-webkit-inner-spin-button{-webkit-appearance:none!important}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-number input[type=number]{-moz-appearance:textfield!important;appearance:textfield!important}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown *{margin:0}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown :not(:last-child){margin-bottom:8px}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .edit-in-settings-button{opacity:.9}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .edit-in-settings-button,.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown a,.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown a>code{color:var(--vscode-textLink-foreground)}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .edit-in-settings-button:focus,.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown a:focus{outline:1px solid -webkit-focus-ring-color;outline-color:var(--vscode-focusBorder);outline-offset:-1px;text-decoration:underline}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .edit-in-settings-button:active,.settings-editor>.settings-body .settings-tree-container .setting-item-contents .edit-in-settings-button:hover,.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown a:active,.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown a:active>code,.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown a:hover,.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown a:hover>code{color:var(--vscode-textLink-activeForeground)}.settings-editor>.settings-body .settings-tree-container .edit-in-settings-button:hover,.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown a:hover{cursor:pointer;text-decoration:underline}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown code{color:var(--vscode-textPreformat-foreground);font-family:var(--monaco-monospace-font);line-height:15px}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-markdown .monaco-tokenized-source{font-family:var(--monaco-monospace-font);white-space:pre}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-enumDescription{display:block}.settings-editor>.settings-body .settings-tree-container .setting-item-bool .setting-item-contents,.settings-editor>.settings-body .settings-tree-container .setting-item-list .setting-item-contents{padding-bottom:26px}.settings-editor>.settings-body .settings-tree-container .setting-item-bool .setting-item-value-description{cursor:pointer;display:flex}.settings-editor>.settings-body .settings-tree-container .setting-item-bool .setting-value-checkbox{border:1px solid transparent;border-radius:3px;height:18px;margin-left:0;margin-right:9px;padding:0;width:18px}.settings-editor>.settings-body .settings-tree-container .setting-item-bool .setting-value-checkbox.codicon:not(.checked):before{opacity:0}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .setting-item-value{display:flex;margin-top:9px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-number .setting-item-value>.setting-item-control{min-width:200px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-text .setting-item-control{width:420px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-enum .setting-item-value>.setting-item-control,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-text .setting-item-value>.setting-item-control{min-width:auto}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-enum .setting-item-value>.setting-item-control>select{width:320px}.settings-editor>.settings-body .settings-tree-container .setting-item-contents .monaco-select-box{font:inherit;height:26px;padding:2px 6px;width:auto}.monaco-select-box-dropdown-container>.select-box-details-pane>.select-box-description-markdown code{color:var(--vscode-textPreformat-foreground)}.monaco-select-box-dropdown-container>.select-box-details-pane>.select-box-description-markdown a,.monaco-select-box-dropdown-container>.select-box-details-pane>.select-box-description-markdown a>code{color:var(--vscode-textLink-foreground)}.monaco-select-box-dropdown-container>.select-box-details-pane>.select-box-description-markdown a:active,.monaco-select-box-dropdown-container>.select-box-details-pane>.select-box-description-markdown a:active>code,.monaco-select-box-dropdown-container>.select-box-details-pane>.select-box-description-markdown a:hover,.monaco-select-box-dropdown-container>.select-box-details-pane>.select-box-description-markdown a:hover>code{color:var(--vscode-textLink-activeForeground)}.settings-editor>.settings-body .settings-tree-container .setting-item-new-extensions{display:flex}.settings-editor>.settings-body .settings-tree-container .setting-item-new-extensions .settings-new-extensions-button{margin:auto auto 15px;padding:4px 10px;width:auto}.settings-editor>.settings-body .settings-tree-container .group-title{cursor:default}.settings-editor>.settings-body .settings-tree-container .settings-group-title-label{box-sizing:border-box;display:inline-block;font-weight:600;height:100%;margin:0;overflow:hidden;padding:10px 10px 10px 15px;position:relative;text-overflow:ellipsis;width:100%}.settings-editor>.settings-body .settings-tree-container .settings-group-title-label.settings-group-level-1{font-size:26px}.settings-editor>.settings-body .settings-tree-container .settings-group-title-label.settings-group-level-2{font-size:22px}.settings-editor>.settings-body .settings-tree-container .settings-group-title-label.settings-group-level-3{font-size:18px}.settings-editor.search-mode>.settings-body .settings-toc-container .monaco-list-row .settings-toc-count{display:block}.settings-editor>.settings-body .settings-tree-container .setting-list-widget .setting-list-object-list-row.select-container{width:320px}.settings-editor>.settings-body .settings-tree-container .setting-list-widget .setting-list-object-list-row.select-container>select{width:inherit}.settings-editor>.settings-body .settings-toc-container .monaco-list-row.focused .codicon,.settings-editor>.settings-body .settings-tree-container .monaco-list-row.focused .setting-item-contents .codicon,.settings-editor>.settings-body .settings-tree-container .setting-item-bool .codicon{color:inherit!important}\";\nn(css,{});\nexport { css, css as default };\n","import { isWindows } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { getExperimentalExtensionToggleData } from '../common/preferences.js';\nconst defaultCommonlyUsedSettings = [\n    'files.autoSave',\n    'editor.fontSize',\n    'editor.fontFamily',\n    'editor.tabSize',\n    'editor.renderWhitespace',\n    'editor.cursorStyle',\n    'editor.multiCursorModifier',\n    'editor.insertSpaces',\n    'editor.wordWrap',\n    'files.exclude',\n    'files.associations',\n    'workbench.editor.enablePreview'\n];\nasync function getCommonlyUsedData(workbenchAssignmentService, environmentService, productService) {\n    const toggleData = await getExperimentalExtensionToggleData(workbenchAssignmentService, environmentService, productService);\n    return {\n        id: 'commonlyUsed',\n        label: ( localize('commonlyUsed', \"Commonly Used\")),\n        settings: toggleData ? toggleData.commonlyUsed : defaultCommonlyUsedSettings\n    };\n}\nconst tocData = {\n    id: 'root',\n    label: 'root',\n    children: [\n        {\n            id: 'editor',\n            label: ( localize('textEditor', \"Text Editor\")),\n            settings: ['editor.*'],\n            children: [\n                {\n                    id: 'editor/cursor',\n                    label: ( localize('cursor', \"Cursor\")),\n                    settings: ['editor.cursor*']\n                },\n                {\n                    id: 'editor/find',\n                    label: ( localize('find', \"Find\")),\n                    settings: ['editor.find.*']\n                },\n                {\n                    id: 'editor/font',\n                    label: ( localize('font', \"Font\")),\n                    settings: ['editor.font*']\n                },\n                {\n                    id: 'editor/format',\n                    label: ( localize('formatting', \"Formatting\")),\n                    settings: ['editor.format*']\n                },\n                {\n                    id: 'editor/diffEditor',\n                    label: ( localize('diffEditor', \"Diff Editor\")),\n                    settings: ['diffEditor.*']\n                },\n                {\n                    id: 'editor/minimap',\n                    label: ( localize('minimap', \"Minimap\")),\n                    settings: ['editor.minimap.*']\n                },\n                {\n                    id: 'editor/suggestions',\n                    label: ( localize('suggestions', \"Suggestions\")),\n                    settings: ['editor.*suggest*']\n                },\n                {\n                    id: 'editor/files',\n                    label: ( localize('files', \"Files\")),\n                    settings: ['files.*']\n                }\n            ]\n        },\n        {\n            id: 'workbench',\n            label: ( localize('workbench', \"Workbench\")),\n            settings: ['workbench.*'],\n            children: [\n                {\n                    id: 'workbench/appearance',\n                    label: ( localize('appearance', \"Appearance\")),\n                    settings: ['workbench.activityBar.*', 'workbench.*color*', 'workbench.fontAliasing', 'workbench.iconTheme', 'workbench.sidebar.location', 'workbench.*.visible', 'workbench.tips.enabled', 'workbench.tree.*', 'workbench.view.*']\n                },\n                {\n                    id: 'workbench/breadcrumbs',\n                    label: ( localize('breadcrumbs', \"Breadcrumbs\")),\n                    settings: ['breadcrumbs.*']\n                },\n                {\n                    id: 'workbench/editor',\n                    label: ( localize('editorManagement', \"Editor Management\")),\n                    settings: ['workbench.editor.*']\n                },\n                {\n                    id: 'workbench/settings',\n                    label: ( localize('settings', \"Settings Editor\")),\n                    settings: ['workbench.settings.*']\n                },\n                {\n                    id: 'workbench/zenmode',\n                    label: ( localize('zenMode', \"Zen Mode\")),\n                    settings: ['zenmode.*']\n                },\n                {\n                    id: 'workbench/screencastmode',\n                    label: ( localize('screencastMode', \"Screencast Mode\")),\n                    settings: ['screencastMode.*']\n                }\n            ]\n        },\n        {\n            id: 'window',\n            label: ( localize('window', \"Window\")),\n            settings: ['window.*'],\n            children: [\n                {\n                    id: 'window/newWindow',\n                    label: ( localize('newWindow', \"New Window\")),\n                    settings: ['window.*newwindow*']\n                }\n            ]\n        },\n        {\n            id: 'features',\n            label: ( localize('features', \"Features\")),\n            children: [\n                {\n                    id: 'features/accessibility',\n                    label: ( localize('accessibility', \"Accessibility\")),\n                    settings: ['accessibility.*']\n                },\n                {\n                    id: 'features/explorer',\n                    label: ( localize('fileExplorer', \"Explorer\")),\n                    settings: ['explorer.*', 'outline.*']\n                },\n                {\n                    id: 'features/search',\n                    label: ( localize('search', \"Search\")),\n                    settings: ['search.*']\n                },\n                {\n                    id: 'features/debug',\n                    label: ( localize('debug', \"Debug\")),\n                    settings: ['debug.*', 'launch']\n                },\n                {\n                    id: 'features/testing',\n                    label: ( localize('testing', \"Testing\")),\n                    settings: ['testing.*']\n                },\n                {\n                    id: 'features/scm',\n                    label: ( localize('scm', \"Source Control\")),\n                    settings: ['scm.*']\n                },\n                {\n                    id: 'features/extensions',\n                    label: ( localize('extensions', \"Extensions\")),\n                    settings: ['extensions.*']\n                },\n                {\n                    id: 'features/terminal',\n                    label: ( localize('terminal', \"Terminal\")),\n                    settings: ['terminal.*']\n                },\n                {\n                    id: 'features/task',\n                    label: ( localize('task', \"Task\")),\n                    settings: ['task.*']\n                },\n                {\n                    id: 'features/problems',\n                    label: ( localize('problems', \"Problems\")),\n                    settings: ['problems.*']\n                },\n                {\n                    id: 'features/output',\n                    label: ( localize('output', \"Output\")),\n                    settings: ['output.*']\n                },\n                {\n                    id: 'features/comments',\n                    label: ( localize('comments', \"Comments\")),\n                    settings: ['comments.*']\n                },\n                {\n                    id: 'features/remote',\n                    label: ( localize('remote', \"Remote\")),\n                    settings: ['remote.*']\n                },\n                {\n                    id: 'features/timeline',\n                    label: ( localize('timeline', \"Timeline\")),\n                    settings: ['timeline.*']\n                },\n                {\n                    id: 'features/notebook',\n                    label: ( localize('notebook', 'Notebook')),\n                    settings: ['notebook.*', 'interactiveWindow.*']\n                },\n                {\n                    id: 'features/audioCues',\n                    label: ( localize('audioCues', 'Audio Cues')),\n                    settings: ['audioCues.*']\n                },\n                {\n                    id: 'features/mergeEditor',\n                    label: ( localize('mergeEditor', 'Merge Editor')),\n                    settings: ['mergeEditor.*']\n                },\n                {\n                    id: 'features/chat',\n                    label: ( localize('chat', 'Chat')),\n                    settings: ['chat.*', 'inlineChat.*']\n                }\n            ]\n        },\n        {\n            id: 'application',\n            label: ( localize('application', \"Application\")),\n            children: [\n                {\n                    id: 'application/http',\n                    label: ( localize('proxy', \"Proxy\")),\n                    settings: ['http.*']\n                },\n                {\n                    id: 'application/keyboard',\n                    label: ( localize('keyboard', \"Keyboard\")),\n                    settings: ['keyboard.*']\n                },\n                {\n                    id: 'application/update',\n                    label: ( localize('update', \"Update\")),\n                    settings: ['update.*']\n                },\n                {\n                    id: 'application/telemetry',\n                    label: ( localize('telemetry', \"Telemetry\")),\n                    settings: ['telemetry.*']\n                },\n                {\n                    id: 'application/settingsSync',\n                    label: ( localize('settingsSync', \"Settings Sync\")),\n                    settings: ['settingsSync.*']\n                },\n                {\n                    id: 'application/experimental',\n                    label: ( localize('experimental', \"Experimental\")),\n                    settings: ['application.experimental.*']\n                },\n                {\n                    id: 'application/other',\n                    label: ( localize('other', \"Other\")),\n                    settings: ['application.*']\n                }\n            ]\n        },\n        {\n            id: 'security',\n            label: ( localize('security', \"Security\")),\n            settings: isWindows ? ['security.*'] : undefined,\n            children: [\n                {\n                    id: 'security/workspace',\n                    label: ( localize('workspace', \"Workspace\")),\n                    settings: ['security.workspace.*']\n                }\n            ]\n        }\n    ]\n};\nconst knownAcronyms = ( new Set());\n[\n    'css',\n    'html',\n    'scss',\n    'less',\n    'json',\n    'js',\n    'ts',\n    'ie',\n    'id',\n    'php',\n    'scm',\n].forEach(str => knownAcronyms.add(str));\nconst knownTermMappings = ( new Map());\nknownTermMappings.set('power shell', 'PowerShell');\nknownTermMappings.set('powershell', 'PowerShell');\nknownTermMappings.set('javascript', 'JavaScript');\nknownTermMappings.set('typescript', 'TypeScript');\nexport { getCommonlyUsedData, knownAcronyms, knownTermMappings, tocData };\n","import { distinct } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { parse } from 'monaco-editor/esm/vs/base/common/json.js';\nimport { getDisallowedIgnoredSettings } from './userDataSync.js';\nfunction getIgnoredSettings(defaultIgnoredSettings, configurationService, settingsContent) {\n    let value = [];\n    if (settingsContent) {\n        value = getIgnoredSettingsFromContent(settingsContent);\n    }\n    else {\n        value = getIgnoredSettingsFromConfig(configurationService);\n    }\n    const added = [], removed = [...getDisallowedIgnoredSettings()];\n    if (Array.isArray(value)) {\n        for (const key of value) {\n            if (key.startsWith('-')) {\n                removed.push(key.substring(1));\n            }\n            else {\n                added.push(key);\n            }\n        }\n    }\n    return distinct([...defaultIgnoredSettings, ...added,].filter(setting => !removed.includes(setting)));\n}\nfunction getIgnoredSettingsFromConfig(configurationService) {\n    let userValue = configurationService.inspect('settingsSync.ignoredSettings').userValue;\n    if (userValue !== undefined) {\n        return userValue;\n    }\n    userValue = configurationService.inspect('sync.ignoredSettings').userValue;\n    if (userValue !== undefined) {\n        return userValue;\n    }\n    return configurationService.getValue('settingsSync.ignoredSettings') || [];\n}\nfunction getIgnoredSettingsFromContent(settingsContent) {\n    const parsed = parse(settingsContent);\n    return parsed ? parsed['settingsSync.ignoredSettings'] || parsed['sync.ignoredSettings'] || [] : [];\n}\nexport { getIgnoredSettings };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { StandardKeyboardEvent } from 'monaco-editor/esm/vs/base/browser/keyboardEvent.js';\nimport { SimpleIconLabel } from '../../../../base/browser/ui/iconLabel/simpleIconLabel.js';\nimport { RunOnceScheduler } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nimport { IUserDataSyncEnablementService } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { POLICY_SETTING_TAG } from '../common/preferences.js';\nimport { IWorkbenchConfigurationService } from '../../../services/configuration/common/configuration.js';\nimport { IHoverService } from '../../../services/hover/browser/hover.js';\nconst $ = dom.$;\nlet cachedSyncIgnoredSettingsSet = ( new Set());\nlet cachedSyncIgnoredSettings = [];\nlet SettingsTreeIndicatorsLabel = class SettingsTreeIndicatorsLabel {\n    constructor(container, configurationService, hoverService, userDataSyncEnablementService, languageService, userDataProfilesService, commandService) {\n        this.configurationService = configurationService;\n        this.hoverService = hoverService;\n        this.userDataSyncEnablementService = userDataSyncEnablementService;\n        this.languageService = languageService;\n        this.userDataProfilesService = userDataProfilesService;\n        this.commandService = commandService;\n        this.keybindingListeners = ( new DisposableStore());\n        this.focusedIndex = 0;\n        this.defaultHoverOptions = {\n            hoverPosition: 2 ,\n            showPointer: true,\n            compact: false,\n            trapFocus: true\n        };\n        this.indicatorsContainerElement = dom.append(container, $('.setting-indicators-container'));\n        this.indicatorsContainerElement.style.display = 'inline';\n        this.profilesEnabled = this.userDataProfilesService.isEnabled();\n        this.workspaceTrustIndicator = this.createWorkspaceTrustIndicator();\n        this.scopeOverridesIndicator = this.createScopeOverridesIndicator();\n        this.syncIgnoredIndicator = this.createSyncIgnoredIndicator();\n        this.defaultOverrideIndicator = this.createDefaultOverrideIndicator();\n        this.allIndicators = [this.workspaceTrustIndicator, this.scopeOverridesIndicator, this.syncIgnoredIndicator, this.defaultOverrideIndicator];\n    }\n    addHoverDisposables(disposables, element, showHover) {\n        disposables.clear();\n        const scheduler = disposables.add(( new RunOnceScheduler(() => {\n            const hover = showHover(false);\n            if (hover) {\n                disposables.add(hover);\n            }\n        }, this.configurationService.getValue('workbench.hover.delay'))));\n        disposables.add(dom.addDisposableListener(element, dom.EventType.MOUSE_OVER, () => {\n            if (!scheduler.isScheduled()) {\n                scheduler.schedule();\n            }\n        }));\n        disposables.add(dom.addDisposableListener(element, dom.EventType.MOUSE_LEAVE, () => {\n            scheduler.cancel();\n        }));\n        disposables.add(dom.addDisposableListener(element, dom.EventType.KEY_DOWN, (e) => {\n            const evt = ( new StandardKeyboardEvent(e));\n            if (evt.equals(10 ) || evt.equals(3 )) {\n                const hover = showHover(true);\n                if (hover) {\n                    disposables.add(hover);\n                }\n                e.preventDefault();\n            }\n        }));\n    }\n    createWorkspaceTrustIndicator() {\n        const workspaceTrustElement = $('span.setting-indicator.setting-item-workspace-trust');\n        const workspaceTrustLabel = ( new SimpleIconLabel(workspaceTrustElement));\n        workspaceTrustLabel.text = '$(warning) ' + ( localize('workspaceUntrustedLabel', \"Setting value not applied\"));\n        const content = ( localize(\n            'trustLabel',\n            \"The setting value can only be applied in a trusted workspace.\"\n        ));\n        const disposables = ( new DisposableStore());\n        const showHover = (focus) => {\n            return this.hoverService.showHover({\n                ...this.defaultHoverOptions,\n                content,\n                target: workspaceTrustElement,\n                actions: [{\n                        label: ( localize('manageWorkspaceTrust', \"Manage Workspace Trust\")),\n                        commandId: 'workbench.trust.manage',\n                        run: (target) => {\n                            this.commandService.executeCommand('workbench.trust.manage');\n                        }\n                    }],\n            }, focus);\n        };\n        this.addHoverDisposables(disposables, workspaceTrustElement, showHover);\n        return {\n            element: workspaceTrustElement,\n            label: workspaceTrustLabel,\n            disposables\n        };\n    }\n    createScopeOverridesIndicator() {\n        const otherOverridesElement = $('span.setting-item-overrides');\n        const otherOverridesLabel = ( new SimpleIconLabel(otherOverridesElement));\n        return {\n            element: otherOverridesElement,\n            label: otherOverridesLabel,\n            disposables: ( new DisposableStore())\n        };\n    }\n    createSyncIgnoredIndicator() {\n        const syncIgnoredElement = $('span.setting-indicator.setting-item-ignored');\n        const syncIgnoredLabel = ( new SimpleIconLabel(syncIgnoredElement));\n        syncIgnoredLabel.text = ( localize('extensionSyncIgnoredLabel', 'Not synced'));\n        const syncIgnoredHoverContent = ( localize('syncIgnoredTitle', \"This setting is ignored during sync\"));\n        const disposables = ( new DisposableStore());\n        const showHover = (focus) => {\n            return this.hoverService.showHover({\n                ...this.defaultHoverOptions,\n                content: syncIgnoredHoverContent,\n                target: syncIgnoredElement\n            }, focus);\n        };\n        this.addHoverDisposables(disposables, syncIgnoredElement, showHover);\n        return {\n            element: syncIgnoredElement,\n            label: syncIgnoredLabel,\n            disposables: ( new DisposableStore())\n        };\n    }\n    createDefaultOverrideIndicator() {\n        const defaultOverrideIndicator = $('span.setting-indicator.setting-item-default-overridden');\n        const defaultOverrideLabel = ( new SimpleIconLabel(defaultOverrideIndicator));\n        defaultOverrideLabel.text = ( localize('defaultOverriddenLabel', \"Default value changed\"));\n        return {\n            element: defaultOverrideIndicator,\n            label: defaultOverrideLabel,\n            disposables: ( new DisposableStore())\n        };\n    }\n    render() {\n        const indicatorsToShow = this.allIndicators.filter(indicator => {\n            return indicator.element.style.display !== 'none';\n        });\n        this.indicatorsContainerElement.innerText = '';\n        this.indicatorsContainerElement.style.display = 'none';\n        if (indicatorsToShow.length) {\n            this.indicatorsContainerElement.style.display = 'inline';\n            dom.append(this.indicatorsContainerElement, $('span', undefined, '('));\n            for (let i = 0; i < indicatorsToShow.length - 1; i++) {\n                dom.append(this.indicatorsContainerElement, indicatorsToShow[i].element);\n                dom.append(this.indicatorsContainerElement, $('span.comma', undefined, ' • '));\n            }\n            dom.append(this.indicatorsContainerElement, indicatorsToShow[indicatorsToShow.length - 1].element);\n            dom.append(this.indicatorsContainerElement, $('span', undefined, ')'));\n            this.resetIndicatorNavigationKeyBindings(indicatorsToShow);\n        }\n    }\n    resetIndicatorNavigationKeyBindings(indicators) {\n        this.keybindingListeners.clear();\n        this.indicatorsContainerElement.role = indicators.length >= 1 ? 'toolbar' : 'button';\n        if (!indicators.length) {\n            return;\n        }\n        const firstElement = indicators[0].focusElement ?? indicators[0].element;\n        firstElement.tabIndex = 0;\n        this.keybindingListeners.add(dom.addDisposableListener(this.indicatorsContainerElement, 'keydown', (e) => {\n            const ev = ( new StandardKeyboardEvent(e));\n            let handled = true;\n            if (ev.equals(14 )) {\n                this.focusIndicatorAt(indicators, 0);\n            }\n            else if (ev.equals(13 )) {\n                this.focusIndicatorAt(indicators, indicators.length - 1);\n            }\n            else if (ev.equals(17 )) {\n                const indexToFocus = (this.focusedIndex + 1) % indicators.length;\n                this.focusIndicatorAt(indicators, indexToFocus);\n            }\n            else if (ev.equals(15 )) {\n                const indexToFocus = this.focusedIndex ? this.focusedIndex - 1 : indicators.length - 1;\n                this.focusIndicatorAt(indicators, indexToFocus);\n            }\n            else {\n                handled = false;\n            }\n            if (handled) {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        }));\n    }\n    focusIndicatorAt(indicators, index) {\n        if (index === this.focusedIndex) {\n            return;\n        }\n        const indicator = indicators[index];\n        const elementToFocus = indicator.focusElement ?? indicator.element;\n        elementToFocus.tabIndex = 0;\n        elementToFocus.focus();\n        const currentlyFocusedIndicator = indicators[this.focusedIndex];\n        const previousFocusedElement = currentlyFocusedIndicator.focusElement ?? currentlyFocusedIndicator.element;\n        previousFocusedElement.tabIndex = -1;\n        this.focusedIndex = index;\n    }\n    updateWorkspaceTrust(element) {\n        this.workspaceTrustIndicator.element.style.display = element.isUntrusted ? 'inline' : 'none';\n        this.render();\n    }\n    updateSyncIgnored(element, ignoredSettings) {\n        this.syncIgnoredIndicator.element.style.display = this.userDataSyncEnablementService.isEnabled()\n            && ignoredSettings.includes(element.setting.key) ? 'inline' : 'none';\n        this.render();\n        if (cachedSyncIgnoredSettings !== ignoredSettings) {\n            cachedSyncIgnoredSettings = ignoredSettings;\n            cachedSyncIgnoredSettingsSet = ( new Set(cachedSyncIgnoredSettings));\n        }\n    }\n    getInlineScopeDisplayText(completeScope) {\n        const [scope, language] = completeScope.split(':');\n        const localizedScope = scope === 'user' ?\n            ( localize('user', \"User\")) : scope === 'workspace' ?\n            ( localize('workspace', \"Workspace\")) : ( localize('remote', \"Remote\"));\n        if (language) {\n            return `${this.languageService.getLanguageName(language)} > ${localizedScope}`;\n        }\n        return localizedScope;\n    }\n    dispose() {\n        this.keybindingListeners.dispose();\n        for (const indicator of this.allIndicators) {\n            indicator.disposables.dispose();\n        }\n    }\n    updateScopeOverrides(element, onDidClickOverrideElement, onApplyFilter) {\n        this.scopeOverridesIndicator.element.innerText = '';\n        this.scopeOverridesIndicator.element.style.display = 'none';\n        this.scopeOverridesIndicator.focusElement = this.scopeOverridesIndicator.element;\n        if (element.hasPolicyValue) {\n            this.scopeOverridesIndicator.element.style.display = 'inline';\n            this.scopeOverridesIndicator.element.classList.add('setting-indicator');\n            this.scopeOverridesIndicator.label.text = '$(warning) ' + ( localize('policyLabelText', \"Setting value not applied\"));\n            const content = ( localize(\n                'policyDescription',\n                \"This setting is managed by your organization and its applied value cannot be changed.\"\n            ));\n            const showHover = (focus) => {\n                return this.hoverService.showHover({\n                    ...this.defaultHoverOptions,\n                    content,\n                    actions: [{\n                            label: ( localize('policyFilterLink', \"View policy settings\")),\n                            commandId: '_settings.action.viewPolicySettings',\n                            run: (_) => {\n                                onApplyFilter.fire(`@${POLICY_SETTING_TAG}`);\n                            }\n                        }],\n                    target: this.scopeOverridesIndicator.element\n                }, focus);\n            };\n            this.addHoverDisposables(this.scopeOverridesIndicator.disposables, this.scopeOverridesIndicator.element, showHover);\n        }\n        else if (this.profilesEnabled && element.settingsTarget === 3  && this.configurationService.isSettingAppliedForAllProfiles(element.setting.key)) {\n            this.scopeOverridesIndicator.element.style.display = 'inline';\n            this.scopeOverridesIndicator.element.classList.add('setting-indicator');\n            this.scopeOverridesIndicator.label.text = ( localize('applicationSetting', \"Applies to all profiles\"));\n            const content = ( localize(\n                'applicationSettingDescription',\n                \"The setting is not specific to the current profile, and will retain its value when switching profiles.\"\n            ));\n            const showHover = (focus) => {\n                return this.hoverService.showHover({\n                    ...this.defaultHoverOptions,\n                    content,\n                    target: this.scopeOverridesIndicator.element\n                }, focus);\n            };\n            this.addHoverDisposables(this.scopeOverridesIndicator.disposables, this.scopeOverridesIndicator.element, showHover);\n        }\n        else if (element.overriddenScopeList.length || element.overriddenDefaultsLanguageList.length) {\n            if (element.overriddenScopeList.length === 1 && !element.overriddenDefaultsLanguageList.length) {\n                this.scopeOverridesIndicator.element.style.display = 'inline';\n                this.scopeOverridesIndicator.element.classList.remove('setting-indicator');\n                this.scopeOverridesIndicator.disposables.clear();\n                const prefaceText = element.isConfigured ?\n                    ( localize('alsoConfiguredIn', \"Also modified in\")) :\n                    ( localize('configuredIn', \"Modified in\"));\n                this.scopeOverridesIndicator.label.text = `${prefaceText} `;\n                const overriddenScope = element.overriddenScopeList[0];\n                const view = dom.append(this.scopeOverridesIndicator.element, $('a.modified-scope', undefined, this.getInlineScopeDisplayText(overriddenScope)));\n                view.tabIndex = -1;\n                this.scopeOverridesIndicator.focusElement = view;\n                const onClickOrKeydown = (e) => {\n                    const [scope, language] = overriddenScope.split(':');\n                    onDidClickOverrideElement.fire({\n                        settingKey: element.setting.key,\n                        scope: scope,\n                        language\n                    });\n                    e.preventDefault();\n                    e.stopPropagation();\n                };\n                this.scopeOverridesIndicator.disposables.add(dom.addDisposableListener(view, dom.EventType.CLICK, (e) => {\n                    onClickOrKeydown(e);\n                }));\n                this.scopeOverridesIndicator.disposables.add(dom.addDisposableListener(view, dom.EventType.KEY_DOWN, (e) => {\n                    const ev = ( new StandardKeyboardEvent(e));\n                    if (ev.equals(10 ) || ev.equals(3 )) {\n                        onClickOrKeydown(e);\n                    }\n                }));\n            }\n            else {\n                this.scopeOverridesIndicator.element.style.display = 'inline';\n                this.scopeOverridesIndicator.element.classList.add('setting-indicator');\n                const scopeOverridesLabelText = element.isConfigured ?\n                    ( localize('alsoConfiguredElsewhere', \"Also modified elsewhere\")) :\n                    ( localize('configuredElsewhere', \"Modified elsewhere\"));\n                this.scopeOverridesIndicator.label.text = scopeOverridesLabelText;\n                let contentMarkdownString = '';\n                if (element.overriddenScopeList.length) {\n                    const prefaceText = element.isConfigured ?\n                        ( localize(\n                            'alsoModifiedInScopes',\n                            \"The setting has also been modified in the following scopes:\"\n                        )) :\n                        ( localize(\n                            'modifiedInScopes',\n                            \"The setting has been modified in the following scopes:\"\n                        ));\n                    contentMarkdownString = prefaceText;\n                    for (const scope of element.overriddenScopeList) {\n                        const scopeDisplayText = this.getInlineScopeDisplayText(scope);\n                        contentMarkdownString += `\\n- [${scopeDisplayText}](${encodeURIComponent(scope)} \"${getAccessibleScopeDisplayText(scope, this.languageService)}\")`;\n                    }\n                }\n                if (element.overriddenDefaultsLanguageList.length) {\n                    if (contentMarkdownString) {\n                        contentMarkdownString += `\\n\\n`;\n                    }\n                    const prefaceText = ( localize(\n                        'hasDefaultOverridesForLanguages',\n                        \"The following languages have default overrides:\"\n                    ));\n                    contentMarkdownString += prefaceText;\n                    for (const language of element.overriddenDefaultsLanguageList) {\n                        const scopeDisplayText = this.languageService.getLanguageName(language);\n                        contentMarkdownString += `\\n- [${scopeDisplayText}](${encodeURIComponent(`default:${language}`)} \"${scopeDisplayText}\")`;\n                    }\n                }\n                const content = {\n                    value: contentMarkdownString,\n                    isTrusted: false,\n                    supportHtml: false\n                };\n                const showHover = (focus) => {\n                    return this.hoverService.showHover({\n                        ...this.defaultHoverOptions,\n                        content,\n                        linkHandler: (url) => {\n                            const [scope, language] = decodeURIComponent(url).split(':');\n                            onDidClickOverrideElement.fire({\n                                settingKey: element.setting.key,\n                                scope: scope,\n                                language\n                            });\n                        },\n                        target: this.scopeOverridesIndicator.element\n                    }, focus);\n                };\n                this.addHoverDisposables(this.scopeOverridesIndicator.disposables, this.scopeOverridesIndicator.element, showHover);\n            }\n        }\n        this.render();\n    }\n    updateDefaultOverrideIndicator(element) {\n        this.defaultOverrideIndicator.element.style.display = 'none';\n        const sourceToDisplay = getDefaultValueSourceToDisplay(element);\n        if (sourceToDisplay !== undefined) {\n            this.defaultOverrideIndicator.element.style.display = 'inline';\n            this.defaultOverrideIndicator.disposables.clear();\n            const defaultOverrideHoverContent = ( localize(\n                'defaultOverriddenDetails',\n                \"Default setting value overridden by {0}\",\n                sourceToDisplay\n            ));\n            const showHover = (focus) => {\n                return this.hoverService.showHover({\n                    content: defaultOverrideHoverContent,\n                    target: this.defaultOverrideIndicator.element,\n                    hoverPosition: 2 ,\n                    showPointer: true,\n                    compact: false\n                }, focus);\n            };\n            this.addHoverDisposables(this.defaultOverrideIndicator.disposables, this.defaultOverrideIndicator.element, showHover);\n        }\n        this.render();\n    }\n};\nSettingsTreeIndicatorsLabel = ( __decorate([\n    ( __param(1, IWorkbenchConfigurationService)),\n    ( __param(2, IHoverService)),\n    ( __param(3, IUserDataSyncEnablementService)),\n    ( __param(4, ILanguageService)),\n    ( __param(5, IUserDataProfilesService)),\n    ( __param(6, ICommandService))\n], SettingsTreeIndicatorsLabel));\nfunction getDefaultValueSourceToDisplay(element) {\n    let sourceToDisplay;\n    const defaultValueSource = element.defaultValueSource;\n    if (defaultValueSource) {\n        if (typeof defaultValueSource !== 'string') {\n            sourceToDisplay = defaultValueSource.displayName ?? defaultValueSource.id;\n        }\n        else if (typeof defaultValueSource === 'string') {\n            sourceToDisplay = defaultValueSource;\n        }\n    }\n    return sourceToDisplay;\n}\nfunction getAccessibleScopeDisplayText(completeScope, languageService) {\n    const [scope, language] = completeScope.split(':');\n    const localizedScope = scope === 'user' ?\n        ( localize('user', \"User\")) : scope === 'workspace' ?\n        ( localize('workspace', \"Workspace\")) : ( localize('remote', \"Remote\"));\n    if (language) {\n        return ( localize(\n            'modifiedInScopeForLanguage',\n            \"The {0} scope for {1}\",\n            localizedScope,\n            languageService.getLanguageName(language)\n        ));\n    }\n    return localizedScope;\n}\nfunction getAccessibleScopeDisplayMidSentenceText(completeScope, languageService) {\n    const [scope, language] = completeScope.split(':');\n    const localizedScope = scope === 'user' ?\n        ( localize('user', \"User\")) : scope === 'workspace' ?\n        ( localize('workspace', \"Workspace\")) : ( localize('remote', \"Remote\"));\n    if (language) {\n        return ( localize(\n            'modifiedInScopeForLanguageMidSentence',\n            \"the {0} scope for {1}\",\n            localizedScope.toLowerCase(),\n            languageService.getLanguageName(language)\n        ));\n    }\n    return localizedScope;\n}\nfunction getIndicatorsLabelAriaLabel(element, configurationService, userDataProfilesService, languageService) {\n    const ariaLabelSections = [];\n    if (element.isUntrusted) {\n        ariaLabelSections.push(( localize(\n            'workspaceUntrustedAriaLabel',\n            \"Workspace untrusted; setting value not applied\"\n        )));\n    }\n    if (element.hasPolicyValue) {\n        ariaLabelSections.push(( localize(\n            'policyDescriptionAccessible',\n            \"Managed by organization policy; setting value not applied\"\n        )));\n    }\n    else if (userDataProfilesService.isEnabled() && element.settingsTarget === 3  && configurationService.isSettingAppliedForAllProfiles(element.setting.key)) {\n        ariaLabelSections.push(( localize(\n            'applicationSettingDescriptionAccessible',\n            \"Setting value retained when switching profiles\"\n        )));\n    }\n    else {\n        const otherOverridesStart = element.isConfigured ?\n            ( localize('alsoConfiguredIn', \"Also modified in\")) :\n            ( localize('configuredIn', \"Modified in\"));\n        const otherOverridesList = ( element.overriddenScopeList\n            .map(scope => getAccessibleScopeDisplayMidSentenceText(scope, languageService))).join(', ');\n        if (element.overriddenScopeList.length) {\n            ariaLabelSections.push(`${otherOverridesStart} ${otherOverridesList}`);\n        }\n    }\n    if (( cachedSyncIgnoredSettingsSet.has(element.setting.key))) {\n        ariaLabelSections.push(( localize('syncIgnoredAriaLabel', \"Setting ignored during sync\")));\n    }\n    const sourceToDisplay = getDefaultValueSourceToDisplay(element);\n    if (sourceToDisplay !== undefined) {\n        ariaLabelSections.push(( localize(\n            'defaultOverriddenDetailsAriaLabel',\n            \"{0} overrides the default value\",\n            sourceToDisplay\n        )));\n    }\n    const otherLanguageOverridesList = ( element.overriddenDefaultsLanguageList\n        .map(language => languageService.getLanguageName(language))).join(', ');\n    if (element.overriddenDefaultsLanguageList.length) {\n        const otherLanguageOverridesText = ( localize(\n            'defaultOverriddenLanguagesList',\n            \"Language-specific default values exist for {0}\",\n            otherLanguageOverridesList\n        ));\n        ariaLabelSections.push(otherLanguageOverridesText);\n    }\n    const ariaLabel = ariaLabelSections.join('. ');\n    return ariaLabel;\n}\nexport { SettingsTreeIndicatorsLabel, getIndicatorsLabelAriaLabel };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport * as arrays from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { escapeRegExpCharacters, isFalsyOrWhitespace } from 'monaco-editor/esm/vs/base/common/strings.js';\nimport { isUndefinedOrNull, withUndefinedAsNull } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { knownAcronyms, knownTermMappings, tocData } from './settingsLayout.js';\nimport { MODIFIED_SETTING_TAG, REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG, POLICY_SETTING_TAG } from '../common/preferences.js';\nimport { SettingValueType } from '../../../services/preferences/common/preferences.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { APPLICATION_SCOPES, FOLDER_SCOPES, WORKSPACE_SCOPES, REMOTE_MACHINE_SCOPES, LOCAL_MACHINE_SCOPES, IWorkbenchConfigurationService } from '../../../services/configuration/common/configuration.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Extensions, EditPresentationTypes } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';\nimport { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';\nclass SettingsTreeElement extends Disposable {\n    constructor(_id) {\n        super();\n        this._tabbable = false;\n        this._onDidChangeTabbable = ( new Emitter());\n        this.onDidChangeTabbable = this._onDidChangeTabbable.event;\n        this.id = _id;\n    }\n    get tabbable() {\n        return this._tabbable;\n    }\n    set tabbable(value) {\n        this._tabbable = value;\n        this._onDidChangeTabbable.fire();\n    }\n}\nclass SettingsTreeGroupElement extends SettingsTreeElement {\n    get children() {\n        return this._children;\n    }\n    set children(newChildren) {\n        this._children = newChildren;\n        this._childSettingKeys = ( new Set());\n        this._children.forEach(child => {\n            if (child instanceof SettingsTreeSettingElement) {\n                this._childSettingKeys.add(child.setting.key);\n            }\n        });\n    }\n    constructor(_id, count, label, level, isFirstGroup) {\n        super(_id);\n        this._childSettingKeys = ( new Set());\n        this._children = [];\n        this.count = count;\n        this.label = label;\n        this.level = level;\n        this.isFirstGroup = isFirstGroup;\n    }\n    containsSetting(key) {\n        return ( this._childSettingKeys.has(key));\n    }\n}\nclass SettingsTreeNewExtensionsElement extends SettingsTreeElement {\n    constructor(_id, extensionIds) {\n        super(_id);\n        this.extensionIds = extensionIds;\n    }\n}\nclass SettingsTreeSettingElement extends SettingsTreeElement {\n    static { this.MAX_DESC_LINES = 20; }\n    constructor(setting, parent, inspectResult, isWorkspaceTrusted, settingsTarget, languageService, productService) {\n        super(sanitizeId(parent.id + '_' + setting.key));\n        this.settingsTarget = settingsTarget;\n        this.languageService = languageService;\n        this.productService = productService;\n        this._displayCategory = null;\n        this._displayLabel = null;\n        this.isConfigured = false;\n        this.isUntrusted = false;\n        this.hasPolicyValue = false;\n        this.overriddenScopeList = [];\n        this.overriddenDefaultsLanguageList = [];\n        this.languageOverrideValues = ( new Map());\n        this.setting = setting;\n        this.parent = parent;\n        this.update(inspectResult, isWorkspaceTrusted);\n    }\n    get displayCategory() {\n        if (!this._displayCategory) {\n            this.initLabels();\n        }\n        return this._displayCategory;\n    }\n    get displayLabel() {\n        if (!this._displayLabel) {\n            this.initLabels();\n        }\n        return this._displayLabel;\n    }\n    initLabels() {\n        if (this.setting.title) {\n            this._displayLabel = this.setting.title;\n            this._displayCategory = '';\n            return;\n        }\n        const displayKeyFormat = settingKeyToDisplayFormat(this.setting.key, this.parent.id, this.setting.isLanguageTagSetting);\n        this._displayLabel = displayKeyFormat.label;\n        this._displayCategory = displayKeyFormat.category;\n    }\n    update(inspectResult, isWorkspaceTrusted) {\n        let { isConfigured, inspected, targetSelector, inspectedLanguageOverrides, languageSelector } = inspectResult;\n        switch (targetSelector) {\n            case 'workspaceFolderValue':\n            case 'workspaceValue':\n                this.isUntrusted = !!this.setting.restricted && !isWorkspaceTrusted;\n                break;\n        }\n        let displayValue = isConfigured ? inspected[targetSelector] : inspected.defaultValue;\n        const overriddenScopeList = [];\n        const overriddenDefaultsLanguageList = [];\n        if ((languageSelector || targetSelector !== 'workspaceValue') && typeof inspected.workspaceValue !== 'undefined') {\n            overriddenScopeList.push('workspace:');\n        }\n        if ((languageSelector || targetSelector !== 'userRemoteValue') && typeof inspected.userRemoteValue !== 'undefined') {\n            overriddenScopeList.push('remote:');\n        }\n        if ((languageSelector || targetSelector !== 'userLocalValue') && typeof inspected.userLocalValue !== 'undefined') {\n            overriddenScopeList.push('user:');\n        }\n        if (inspected.overrideIdentifiers) {\n            for (const overrideIdentifier of inspected.overrideIdentifiers) {\n                const inspectedOverride = inspectedLanguageOverrides.get(overrideIdentifier);\n                if (inspectedOverride) {\n                    if (this.languageService.isRegisteredLanguageId(overrideIdentifier)) {\n                        if (languageSelector !== overrideIdentifier && typeof inspectedOverride.default?.override !== 'undefined') {\n                            overriddenDefaultsLanguageList.push(overrideIdentifier);\n                        }\n                        if ((languageSelector !== overrideIdentifier || targetSelector !== 'workspaceValue') && typeof inspectedOverride.workspace?.override !== 'undefined') {\n                            overriddenScopeList.push(`workspace:${overrideIdentifier}`);\n                        }\n                        if ((languageSelector !== overrideIdentifier || targetSelector !== 'userRemoteValue') && typeof inspectedOverride.userRemote?.override !== 'undefined') {\n                            overriddenScopeList.push(`remote:${overrideIdentifier}`);\n                        }\n                        if ((languageSelector !== overrideIdentifier || targetSelector !== 'userLocalValue') && typeof inspectedOverride.userLocal?.override !== 'undefined') {\n                            overriddenScopeList.push(`user:${overrideIdentifier}`);\n                        }\n                    }\n                    this.languageOverrideValues.set(overrideIdentifier, inspectedOverride);\n                }\n            }\n        }\n        this.overriddenScopeList = overriddenScopeList;\n        this.overriddenDefaultsLanguageList = overriddenDefaultsLanguageList;\n        this.defaultValueSource = this.setting.nonLanguageSpecificDefaultValueSource;\n        if (inspected.policyValue) {\n            this.hasPolicyValue = true;\n            isConfigured = false;\n            displayValue = inspected.policyValue;\n            this.scopeValue = inspected.policyValue;\n            this.defaultValue = inspected.defaultValue;\n        }\n        else if (languageSelector && ( this.languageOverrideValues.has(languageSelector))) {\n            const overrideValues = this.languageOverrideValues.get(languageSelector);\n            displayValue = (isConfigured ? overrideValues[targetSelector] : overrideValues.defaultValue) ?? displayValue;\n            this.scopeValue = isConfigured && overrideValues[targetSelector];\n            this.defaultValue = overrideValues.defaultValue ?? inspected.defaultValue;\n            const registryValues = ( Registry.as(Extensions.Configuration)).getConfigurationDefaultsOverrides();\n            const overrideValueSource = registryValues.get(`[${languageSelector}]`)?.valuesSources?.get(this.setting.key);\n            if (overrideValueSource) {\n                this.defaultValueSource = overrideValueSource;\n            }\n        }\n        else {\n            this.scopeValue = isConfigured && inspected[targetSelector];\n            this.defaultValue = inspected.defaultValue;\n        }\n        this.value = displayValue;\n        this.isConfigured = isConfigured;\n        if (isConfigured || this.setting.tags || this.tags || this.setting.restricted || this.hasPolicyValue) {\n            this.tags = ( new Set());\n            if (isConfigured) {\n                this.tags.add(MODIFIED_SETTING_TAG);\n            }\n            this.setting.tags?.forEach(tag => this.tags.add(tag));\n            if (this.setting.restricted) {\n                this.tags.add(REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG);\n            }\n            if (this.hasPolicyValue) {\n                this.tags.add(POLICY_SETTING_TAG);\n            }\n        }\n        if (this.setting.description.length > SettingsTreeSettingElement.MAX_DESC_LINES) {\n            const truncatedDescLines = this.setting.description.slice(0, SettingsTreeSettingElement.MAX_DESC_LINES);\n            truncatedDescLines.push('[...]');\n            this.description = truncatedDescLines.join('\\n');\n        }\n        else {\n            this.description = this.setting.description.join('\\n');\n        }\n        if (isExtensionToggleSetting(this.setting, this.productService)) {\n            this.valueType = SettingValueType.ExtensionToggle;\n        }\n        else if (this.setting.enum && (!this.setting.type || settingTypeEnumRenderable(this.setting.type))) {\n            this.valueType = SettingValueType.Enum;\n        }\n        else if (this.setting.type === 'string') {\n            if (this.setting.editPresentation === EditPresentationTypes.Multiline) {\n                this.valueType = SettingValueType.MultilineString;\n            }\n            else {\n                this.valueType = SettingValueType.String;\n            }\n        }\n        else if (isExcludeSetting(this.setting)) {\n            this.valueType = SettingValueType.Exclude;\n        }\n        else if (isIncludeSetting(this.setting)) {\n            this.valueType = SettingValueType.Include;\n        }\n        else if (this.setting.type === 'integer') {\n            this.valueType = SettingValueType.Integer;\n        }\n        else if (this.setting.type === 'number') {\n            this.valueType = SettingValueType.Number;\n        }\n        else if (this.setting.type === 'boolean') {\n            this.valueType = SettingValueType.Boolean;\n        }\n        else if (this.setting.type === 'array' && this.setting.arrayItemType &&\n            ['string', 'enum', 'number', 'integer'].includes(this.setting.arrayItemType)) {\n            this.valueType = SettingValueType.Array;\n        }\n        else if (Array.isArray(this.setting.type) && this.setting.type.includes(SettingValueType.Null) && this.setting.type.length === 2) {\n            if (this.setting.type.includes(SettingValueType.Integer)) {\n                this.valueType = SettingValueType.NullableInteger;\n            }\n            else if (this.setting.type.includes(SettingValueType.Number)) {\n                this.valueType = SettingValueType.NullableNumber;\n            }\n            else {\n                this.valueType = SettingValueType.Complex;\n            }\n        }\n        else if (isObjectSetting(this.setting)) {\n            if (this.setting.allKeysAreBoolean) {\n                this.valueType = SettingValueType.BooleanObject;\n            }\n            else {\n                this.valueType = SettingValueType.Object;\n            }\n        }\n        else if (this.setting.isLanguageTagSetting) {\n            this.valueType = SettingValueType.LanguageTag;\n        }\n        else {\n            this.valueType = SettingValueType.Complex;\n        }\n    }\n    matchesAllTags(tagFilters) {\n        if (!tagFilters || !tagFilters.size) {\n            return true;\n        }\n        if (this.tags) {\n            let hasFilteredTag = true;\n            tagFilters.forEach(tag => {\n                hasFilteredTag = hasFilteredTag && ( this.tags.has(tag));\n            });\n            return hasFilteredTag;\n        }\n        else {\n            return false;\n        }\n    }\n    matchesScope(scope, isRemote) {\n        const configTarget = URI.isUri(scope) ? 6  : scope;\n        if (!this.setting.scope) {\n            return true;\n        }\n        if (configTarget === 1 ) {\n            return APPLICATION_SCOPES.includes(this.setting.scope);\n        }\n        if (configTarget === 6 ) {\n            return FOLDER_SCOPES.includes(this.setting.scope);\n        }\n        if (configTarget === 5 ) {\n            return WORKSPACE_SCOPES.includes(this.setting.scope);\n        }\n        if (configTarget === 4 ) {\n            return REMOTE_MACHINE_SCOPES.includes(this.setting.scope);\n        }\n        if (configTarget === 3 ) {\n            if (isRemote) {\n                return LOCAL_MACHINE_SCOPES.includes(this.setting.scope);\n            }\n        }\n        return true;\n    }\n    matchesAnyExtension(extensionFilters) {\n        if (!extensionFilters || !extensionFilters.size) {\n            return true;\n        }\n        if (!this.setting.extensionInfo) {\n            return false;\n        }\n        return ( Array.from(extensionFilters).some(\n            extensionId => extensionId.toLowerCase() === this.setting.extensionInfo.id.toLowerCase()\n        ));\n    }\n    matchesAnyFeature(featureFilters) {\n        if (!featureFilters || !featureFilters.size) {\n            return true;\n        }\n        const features = tocData.children.find(child => child.id === 'features');\n        return ( Array.from(featureFilters).some(filter => {\n            if (features && features.children) {\n                const feature = features.children.find(feature => 'features/' + filter === feature.id);\n                if (feature) {\n                    const patterns = feature.settings?.map(setting => createSettingMatchRegExp(setting));\n                    return patterns && !this.setting.extensionInfo && ( patterns.some(pattern => pattern.test(this.setting.key.toLowerCase())));\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        }));\n    }\n    matchesAnyId(idFilters) {\n        if (!idFilters || !idFilters.size) {\n            return true;\n        }\n        return ( idFilters.has(this.setting.key));\n    }\n    matchesAllLanguages(languageFilter) {\n        if (!languageFilter) {\n            return true;\n        }\n        if (!this.languageService.isRegisteredLanguageId(languageFilter)) {\n            return false;\n        }\n        if (this.setting.scope === 5 ) {\n            return true;\n        }\n        return false;\n    }\n}\nfunction createSettingMatchRegExp(pattern) {\n    pattern = escapeRegExpCharacters(pattern)\n        .replace(/\\\\\\*/g, '.*');\n    return ( new RegExp(`^${pattern}$`, 'i'));\n}\nlet SettingsTreeModel = class SettingsTreeModel {\n    constructor(_viewState, _isWorkspaceTrusted, _configurationService, _languageService, _userDataProfileService, _productService) {\n        this._viewState = _viewState;\n        this._isWorkspaceTrusted = _isWorkspaceTrusted;\n        this._configurationService = _configurationService;\n        this._languageService = _languageService;\n        this._userDataProfileService = _userDataProfileService;\n        this._productService = _productService;\n        this._treeElementsBySettingName = ( new Map());\n    }\n    get root() {\n        return this._root;\n    }\n    update(newTocRoot = this._tocRoot) {\n        this._treeElementsBySettingName.clear();\n        const newRoot = this.createSettingsTreeGroupElement(newTocRoot);\n        if (newRoot.children[0] instanceof SettingsTreeGroupElement) {\n            newRoot.children[0].isFirstGroup = true;\n        }\n        if (this._root) {\n            this.disposeChildren(this._root.children);\n            this._root.children = newRoot.children;\n        }\n        else {\n            this._root = newRoot;\n        }\n    }\n    updateWorkspaceTrust(workspaceTrusted) {\n        this._isWorkspaceTrusted = workspaceTrusted;\n        this.updateRequireTrustedTargetElements();\n    }\n    disposeChildren(children) {\n        for (const child of children) {\n            this.recursiveDispose(child);\n        }\n    }\n    recursiveDispose(element) {\n        if (element instanceof SettingsTreeGroupElement) {\n            this.disposeChildren(element.children);\n        }\n        element.dispose();\n    }\n    getElementsByName(name) {\n        return withUndefinedAsNull(this._treeElementsBySettingName.get(name));\n    }\n    updateElementsByName(name) {\n        if (!( this._treeElementsBySettingName.has(name))) {\n            return;\n        }\n        this.updateSettings(this._treeElementsBySettingName.get(name));\n    }\n    updateRequireTrustedTargetElements() {\n        this.updateSettings([...( this._treeElementsBySettingName.values())].flat().filter(s => s.isUntrusted));\n    }\n    getTargetToInspect(setting) {\n        if (!this._userDataProfileService.currentProfile.isDefault) {\n            if (setting.scope === 1 ) {\n                return 1 ;\n            }\n            if (this._configurationService.isSettingAppliedForAllProfiles(setting.key) && this._viewState.settingsTarget === 3 ) {\n                return 1 ;\n            }\n        }\n        return this._viewState.settingsTarget;\n    }\n    updateSettings(settings) {\n        for (const element of settings) {\n            const target = this.getTargetToInspect(element.setting);\n            const inspectResult = inspectSetting(element.setting.key, target, this._viewState.languageFilter, this._configurationService);\n            element.update(inspectResult, this._isWorkspaceTrusted);\n        }\n    }\n    createSettingsTreeGroupElement(tocEntry, parent) {\n        const depth = parent ? this.getDepth(parent) + 1 : 0;\n        const element = ( new SettingsTreeGroupElement(tocEntry.id, undefined, tocEntry.label, depth, false));\n        element.parent = parent;\n        const children = [];\n        if (tocEntry.settings) {\n            const settingChildren = ( tocEntry.settings.map(s => this.createSettingsTreeSettingElement(s, element)))\n                .filter(el => el.setting.deprecationMessage ? el.isConfigured : true);\n            children.push(...settingChildren);\n        }\n        if (tocEntry.children) {\n            const groupChildren = ( tocEntry.children.map(child => this.createSettingsTreeGroupElement(child, element)));\n            children.push(...groupChildren);\n        }\n        element.children = children;\n        return element;\n    }\n    getDepth(element) {\n        if (element.parent) {\n            return 1 + this.getDepth(element.parent);\n        }\n        else {\n            return 0;\n        }\n    }\n    createSettingsTreeSettingElement(setting, parent) {\n        const target = this.getTargetToInspect(setting);\n        const inspectResult = inspectSetting(setting.key, target, this._viewState.languageFilter, this._configurationService);\n        const element = ( new SettingsTreeSettingElement(\n            setting,\n            parent,\n            inspectResult,\n            this._isWorkspaceTrusted,\n            this._viewState.settingsTarget,\n            this._languageService,\n            this._productService\n        ));\n        const nameElements = this._treeElementsBySettingName.get(setting.key) || [];\n        nameElements.push(element);\n        this._treeElementsBySettingName.set(setting.key, nameElements);\n        return element;\n    }\n};\nSettingsTreeModel = ( __decorate([\n    ( __param(2, IWorkbenchConfigurationService)),\n    ( __param(3, ILanguageService)),\n    ( __param(4, IUserDataProfileService)),\n    ( __param(5, IProductService))\n], SettingsTreeModel));\nfunction inspectSetting(key, target, languageFilter, configurationService) {\n    const inspectOverrides = URI.isUri(target) ? { resource: target } : undefined;\n    const inspected = configurationService.inspect(key, inspectOverrides);\n    const targetSelector = target === 1  ? 'applicationValue' :\n        target === 3  ? 'userLocalValue' :\n            target === 4  ? 'userRemoteValue' :\n                target === 5  ? 'workspaceValue' :\n                    'workspaceFolderValue';\n    const targetOverrideSelector = target === 1  ? 'application' :\n        target === 3  ? 'userLocal' :\n            target === 4  ? 'userRemote' :\n                target === 5  ? 'workspace' :\n                    'workspaceFolder';\n    let isConfigured = typeof inspected[targetSelector] !== 'undefined';\n    const overrideIdentifiers = inspected.overrideIdentifiers;\n    const inspectedLanguageOverrides = ( new Map());\n    if (languageFilter) {\n        isConfigured = false;\n    }\n    if (overrideIdentifiers) {\n        for (const overrideIdentifier of overrideIdentifiers) {\n            inspectedLanguageOverrides.set(overrideIdentifier, configurationService.inspect(key, { overrideIdentifier }));\n        }\n        if (languageFilter) {\n            if (( inspectedLanguageOverrides.has(languageFilter))) {\n                const overrideValue = inspectedLanguageOverrides.get(languageFilter)[targetOverrideSelector]?.override;\n                if (typeof overrideValue !== 'undefined') {\n                    isConfigured = true;\n                }\n            }\n        }\n    }\n    return { isConfigured, inspected, targetSelector, inspectedLanguageOverrides, languageSelector: languageFilter };\n}\nfunction sanitizeId(id) {\n    return id.replace(/[\\.\\/]/, '_');\n}\nfunction settingKeyToDisplayFormat(key, groupId = '', isLanguageTagSetting = false) {\n    const lastDotIdx = key.lastIndexOf('.');\n    let category = '';\n    if (lastDotIdx >= 0) {\n        category = key.substring(0, lastDotIdx);\n        key = key.substring(lastDotIdx + 1);\n    }\n    groupId = groupId.replace(/\\//g, '.');\n    category = trimCategoryForGroup(category, groupId);\n    category = wordifyKey(category);\n    if (isLanguageTagSetting) {\n        key = key.replace(/[\\[\\]]/g, '');\n        key = '$(bracket) ' + key;\n    }\n    const label = wordifyKey(key);\n    return { category, label };\n}\nfunction wordifyKey(key) {\n    key = key\n        .replace(/\\.([a-z0-9])/g, (_, p1) => ` \\u203A ${p1.toUpperCase()}`)\n        .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n        .replace(/^[a-z]/g, match => match.toUpperCase())\n        .replace(/\\b\\w+\\b/g, match => {\n        return ( knownAcronyms.has(match.toLowerCase())) ?\n            match.toUpperCase() :\n            match;\n    });\n    for (const [k, v] of knownTermMappings) {\n        key = key.replace(( new RegExp(`\\\\b${k}\\\\b`, 'gi')), v);\n    }\n    return key;\n}\nfunction trimCategoryForGroup(category, groupId) {\n    const doTrim = (forward) => {\n        if (!/insiders$/i.test(category)) {\n            groupId = groupId.replace(/-?insiders$/i, '');\n        }\n        const parts = ( groupId.split('.')\n            .map(part => {\n            if (part.replace(/-/g, '').toLowerCase() === category.toLowerCase()) {\n                return part.replace(/-/g, '');\n            }\n            else {\n                return part;\n            }\n        }));\n        while (parts.length) {\n            const reg = ( new RegExp(`^${parts.join('\\\\.')}(\\\\.|$)`, 'i'));\n            if (reg.test(category)) {\n                return category.replace(reg, '');\n            }\n            if (forward) {\n                parts.pop();\n            }\n            else {\n                parts.shift();\n            }\n        }\n        return null;\n    };\n    let trimmed = doTrim(true);\n    if (trimmed === null) {\n        trimmed = doTrim(false);\n    }\n    if (trimmed === null) {\n        trimmed = category;\n    }\n    return trimmed;\n}\nfunction isExtensionToggleSetting(setting, productService) {\n    return !!productService.extensionRecommendations &&\n        !!setting.displayExtensionId;\n}\nfunction isExcludeSetting(setting) {\n    return setting.key === 'files.exclude' ||\n        setting.key === 'search.exclude' ||\n        setting.key === 'workbench.localHistory.exclude' ||\n        setting.key === 'explorer.autoRevealExclude' ||\n        setting.key === 'files.readonlyExclude' ||\n        setting.key === 'files.watcherExclude';\n}\nfunction isIncludeSetting(setting) {\n    return setting.key === 'files.readonlyInclude';\n}\nfunction isObjectRenderableSchema({ type }) {\n    return type === 'string' || type === 'boolean' || type === 'integer' || type === 'number';\n}\nfunction isObjectSetting({ type, objectProperties, objectPatternProperties, objectAdditionalProperties }) {\n    if (type !== 'object') {\n        return false;\n    }\n    if (isUndefinedOrNull(objectProperties) &&\n        isUndefinedOrNull(objectPatternProperties) &&\n        isUndefinedOrNull(objectAdditionalProperties)) {\n        return false;\n    }\n    if ((objectAdditionalProperties === true || objectAdditionalProperties === undefined)\n        && !( Object.keys(objectPatternProperties ?? {})).includes('.*')) {\n        return false;\n    }\n    const schemas = [...( Object.values(objectProperties ?? {})), ...( Object.values(objectPatternProperties ?? {}))];\n    if (objectAdditionalProperties && typeof objectAdditionalProperties === 'object') {\n        schemas.push(objectAdditionalProperties);\n    }\n    const flatSchemas = arrays.flatten(( schemas.map((schema) => {\n        if (Array.isArray(schema.anyOf)) {\n            return schema.anyOf;\n        }\n        return [schema];\n    })));\n    return flatSchemas.every(isObjectRenderableSchema);\n}\nfunction settingTypeEnumRenderable(_type) {\n    const enumRenderableSettingTypes = ['string', 'boolean', 'null', 'integer', 'number'];\n    const type = Array.isArray(_type) ? _type : [_type];\n    return type.every(type => enumRenderableSettingTypes.includes(type));\n}\nlet SearchResultModel = class SearchResultModel extends SettingsTreeModel {\n    constructor(viewState, isWorkspaceTrusted, configurationService, environmentService, languageService, userDataProfileService, productService) {\n        super(viewState, isWorkspaceTrusted, configurationService, languageService, userDataProfileService, productService);\n        this.environmentService = environmentService;\n        this.rawSearchResults = null;\n        this.cachedUniqueSearchResults = null;\n        this.newExtensionSearchResults = null;\n        this.searchResultCount = null;\n        this.id = 'searchResultModel';\n        this.update({ id: 'searchResultModel', label: '' });\n    }\n    getUniqueResults() {\n        if (this.cachedUniqueSearchResults) {\n            return this.cachedUniqueSearchResults;\n        }\n        if (!this.rawSearchResults) {\n            return [];\n        }\n        const localMatchKeys = ( new Set());\n        const localResult = this.rawSearchResults[0 ];\n        localResult?.filterMatches.forEach(m => localMatchKeys.add(m.setting.key));\n        const remoteResult = this.rawSearchResults[1 ];\n        if (remoteResult) {\n            remoteResult.filterMatches = remoteResult.filterMatches.filter(m => !( localMatchKeys.has(m.setting.key)));\n        }\n        if (remoteResult) {\n            this.newExtensionSearchResults = this.rawSearchResults[2 ];\n        }\n        this.cachedUniqueSearchResults = [localResult, remoteResult];\n        return this.cachedUniqueSearchResults;\n    }\n    getRawResults() {\n        return this.rawSearchResults || [];\n    }\n    setResult(order, result) {\n        this.cachedUniqueSearchResults = null;\n        this.newExtensionSearchResults = null;\n        this.rawSearchResults = this.rawSearchResults || [];\n        if (!result) {\n            delete this.rawSearchResults[order];\n            return;\n        }\n        if (result.exactMatch) {\n            this.rawSearchResults = [];\n        }\n        this.rawSearchResults[order] = result;\n        this.updateChildren();\n    }\n    updateChildren() {\n        this.update({\n            id: 'searchResultModel',\n            label: 'searchResultModel',\n            settings: this.getFlatSettings()\n        });\n        const isRemote = !!this.environmentService.remoteAuthority;\n        this.root.children = this.root.children\n            .filter(child => child instanceof SettingsTreeSettingElement && child.matchesAllTags(this._viewState.tagFilters) && child.matchesScope(this._viewState.settingsTarget, isRemote) && child.matchesAnyExtension(this._viewState.extensionFilters) && child.matchesAnyId(this._viewState.idFilters) && child.matchesAnyFeature(this._viewState.featureFilters) && child.matchesAllLanguages(this._viewState.languageFilter));\n        this.searchResultCount = this.root.children.length;\n        if (this.newExtensionSearchResults?.filterMatches.length) {\n            let resultExtensionIds = ( ( this.newExtensionSearchResults.filterMatches\n                .map(result => result.setting))\n                .filter(setting => setting.extensionName && setting.extensionPublisher)\n                .map(setting => `${setting.extensionPublisher}.${setting.extensionName}`));\n            resultExtensionIds = arrays.distinct(resultExtensionIds);\n            if (resultExtensionIds.length) {\n                const newExtElement = ( new SettingsTreeNewExtensionsElement('newExtensions', resultExtensionIds));\n                newExtElement.parent = this._root;\n                this._root.children.push(newExtElement);\n            }\n        }\n    }\n    getUniqueResultsCount() {\n        return this.searchResultCount ?? 0;\n    }\n    getFlatSettings() {\n        const flatSettings = [];\n        arrays.coalesce(this.getUniqueResults())\n            .forEach(r => {\n            flatSettings.push(...( r.filterMatches.map(m => m.setting)));\n        });\n        return flatSettings;\n    }\n};\nSearchResultModel = ( __decorate([\n    ( __param(2, IWorkbenchConfigurationService)),\n    ( __param(3, IWorkbenchEnvironmentService)),\n    ( __param(4, ILanguageService)),\n    ( __param(5, IUserDataProfileService)),\n    ( __param(6, IProductService))\n], SearchResultModel));\nconst tagRegex = /(^|\\s)@tag:(\"([^\"]*)\"|[^\"]\\S*)/g;\nconst extensionRegex = /(^|\\s)@ext:(\"([^\"]*)\"|[^\"]\\S*)?/g;\nconst featureRegex = /(^|\\s)@feature:(\"([^\"]*)\"|[^\"]\\S*)?/g;\nconst idRegex = /(^|\\s)@id:(\"([^\"]*)\"|[^\"]\\S*)?/g;\nconst languageRegex = /(^|\\s)@lang:(\"([^\"]*)\"|[^\"]\\S*)?/g;\nfunction parseQuery(query) {\n    function getTagsForType(query, filterRegex, parsedParts) {\n        return query.replace(filterRegex, (_, __, quotedParsedElement, unquotedParsedElement) => {\n            const parsedElement = unquotedParsedElement || quotedParsedElement;\n            if (parsedElement) {\n                parsedParts.push(...( parsedElement.split(',').map(s => s.trim())).filter(s => !isFalsyOrWhitespace(s)));\n            }\n            return '';\n        });\n    }\n    const tags = [];\n    query = query.replace(tagRegex, (_, __, quotedTag, tag) => {\n        tags.push(tag || quotedTag);\n        return '';\n    });\n    query = query.replace(`@${MODIFIED_SETTING_TAG}`, () => {\n        tags.push(MODIFIED_SETTING_TAG);\n        return '';\n    });\n    query = query.replace(`@${POLICY_SETTING_TAG}`, () => {\n        tags.push(POLICY_SETTING_TAG);\n        return '';\n    });\n    const extensions = [];\n    const features = [];\n    const ids = [];\n    const langs = [];\n    query = getTagsForType(query, extensionRegex, extensions);\n    query = getTagsForType(query, featureRegex, features);\n    query = getTagsForType(query, idRegex, ids);\n    {\n        query = getTagsForType(query, languageRegex, langs);\n    }\n    query = query.trim();\n    return {\n        tags,\n        extensionFilters: extensions,\n        featureFilters: features,\n        idFilters: ids,\n        languageFilter: langs.length ? langs[0] : undefined,\n        query,\n    };\n}\nexport { SearchResultModel, SettingsTreeElement, SettingsTreeGroupElement, SettingsTreeModel, SettingsTreeNewExtensionsElement, SettingsTreeSettingElement, inspectSetting, parseQuery, settingKeyToDisplayFormat };\n","import n from '../../../../../../../node_modules/rollup-plugin-styles/dist/runtime/inject-css.js';\nvar css = \".settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-item-value>.setting-item-control{width:100%}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-key,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-value{margin-left:2px;margin-right:3px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-key,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-value,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-sibling,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-value{overflow-wrap:normal;white-space:normal}.settings-editor>.settings-body .settings-tree-container .setting-item-bool .setting-value-checkbox{background-color:var(--vscode-settings-checkboxBackground)!important;border-color:var(--vscode-settings-checkboxBorder)!important;color:var(--vscode-settings-checkboxForeground)!important}.settings-editor>.settings-body .settings-tree-container .setting-item-bool .setting-list-object-input-key-checkbox{height:24px;margin-left:4px}.settings-editor>.settings-body .settings-tree-container .setting-item-bool .setting-list-object-input-key-checkbox .setting-value-checkbox{margin-top:3px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-item-bool .setting-list-object-value{cursor:pointer;width:100%}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-key{margin-left:4px;width:40%}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-input-key{margin-left:0;min-width:40%}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-input-value,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-value{width:100%}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-row .setting-list-object-value,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-value{box-sizing:border-box;padding-right:40px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-value{width:60%}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-key,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-value,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-sibling,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-value{display:inline-block;line-height:24px;min-height:24px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-include-exclude-widget .setting-list-sibling,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-include-exclude-widget .setting-list-value{font-family:var(--monaco-monospace-font)}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-sibling{font-size:.9em;margin-left:.5em;opacity:.7;white-space:pre}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row .monaco-action-bar{display:none;position:absolute;right:0;top:0}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row{display:flex}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row:hover{background-color:var(--vscode-list-hoverBackground);color:var(--vscode-list-hoverForeground)}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row.selected:focus{background-color:var(--vscode-list-activeSelectionBackground);color:var(--vscode-list-activeSelectionForeground)}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row.selected:not(:focus){background-color:var(--vscode-list-inactiveSelectionBackground);color:var(--vscode-list-inactiveSelectionForeground)}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row.draggable{cursor:pointer;user-select:none}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row.drag-hover{background-color:var(--vscode-list-dropBackground)}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row.drag-hover *{pointer-events:none}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row-header{max-height:24px;position:relative}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row-header{font-weight:700}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-row,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-row-header{display:flex;padding-right:4px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-edit-row.setting-list-object-row:nth-child(odd):hover,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-row:nth-child(odd):not(:hover):not(:focus):not(.selected),.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-row-header{background-color:hsla(0,0%,51%,.04)}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row.selected .monaco-action-bar,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row:hover .monaco-action-bar{display:block}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row .monaco-action-bar .action-label{align-items:center;color:inherit;display:flex;height:20px;justify-content:center;margin-right:2px;padding:2px;width:16px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row .monaco-action-bar .setting-listAction-edit{margin-right:4px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .monaco-text-button{padding:2px 14px;white-space:nowrap;width:auto}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-item-control.setting-list-hide-add-button .setting-list-new-row{display:none}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .monaco-text-button.setting-list-addButton{display:inline-block;margin-right:4px;margin-top:4px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-edit-row,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-row{display:flex}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-input,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-siblingInput,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-valueInput{height:24px;margin-right:4px;max-width:320px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-input,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-valueInput.no-sibling{max-width:unset}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-valueInput.no-sibling{width:100%}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-value-container .setting-list-object-input{margin-right:0}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-ok-button{margin:0 4px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-include-exclude-widget,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-widget{margin-bottom:1px;padding:1px}.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-input select,.settings-editor>.settings-body .settings-tree-container .setting-item.setting-item-list .setting-list-object-widget .setting-list-object-value-container{height:24px;width:100%}.settings-editor>.settings-body .settings-tree-container .setting-list-widget .setting-list-object-list-row.select-container{width:320px}.settings-editor>.settings-body .settings-tree-container .setting-list-widget .setting-list-object-list-row.select-container>select{width:inherit}\";\nn(css,{});\nexport { css, css as default };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { BrowserFeatures } from 'monaco-editor/esm/vs/base/browser/canIUse.js';\nimport * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { ActionBar } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js';\nimport { Button } from 'monaco-editor/esm/vs/base/browser/ui/button/button.js';\nimport { Toggle, unthemedToggleStyles } from 'monaco-editor/esm/vs/base/browser/ui/toggle/toggle.js';\nimport { InputBox } from 'monaco-editor/esm/vs/base/browser/ui/inputbox/inputBox.js';\nimport { SelectBox } from 'monaco-editor/esm/vs/base/browser/ui/selectBox/selectBox.js';\nimport { disposableTimeout } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { isIOS } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { isUndefinedOrNull, isDefined } from 'monaco-editor/esm/vs/base/common/types.js';\nimport './media/settingsWidgets.css.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { IContextViewService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';\nimport { settingsEditIcon, settingsRemoveIcon, settingsDiscardIcon } from './preferencesIcons.js';\nimport { settingsTextInputBackground, settingsTextInputForeground, settingsTextInputBorder, settingsSelectBackground, settingsSelectForeground, settingsSelectBorder, settingsSelectListBorder } from '../common/settingsEditorColorRegistry.js';\nimport { getInputBoxStyle, defaultButtonStyles, getSelectBoxStyles } from 'monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js';\nconst $ = dom.$;\nclass ListSettingListModel {\n    get items() {\n        const items = ( this._dataItems.map((item, i) => {\n            const editing = typeof this._editKey === 'number' && this._editKey === i;\n            return {\n                ...item,\n                editing,\n                selected: i === this._selectedIdx || editing\n            };\n        }));\n        if (this._editKey === 'create') {\n            items.push({\n                editing: true,\n                selected: true,\n                ...this._newDataItem,\n            });\n        }\n        return items;\n    }\n    constructor(newItem) {\n        this._dataItems = [];\n        this._editKey = null;\n        this._selectedIdx = null;\n        this._newDataItem = newItem;\n    }\n    setEditKey(key) {\n        this._editKey = key;\n    }\n    setValue(listData) {\n        this._dataItems = listData;\n    }\n    select(idx) {\n        this._selectedIdx = idx;\n    }\n    getSelected() {\n        return this._selectedIdx;\n    }\n    selectNext() {\n        if (typeof this._selectedIdx === 'number') {\n            this._selectedIdx = Math.min(this._selectedIdx + 1, this._dataItems.length - 1);\n        }\n        else {\n            this._selectedIdx = 0;\n        }\n    }\n    selectPrevious() {\n        if (typeof this._selectedIdx === 'number') {\n            this._selectedIdx = Math.max(this._selectedIdx - 1, 0);\n        }\n        else {\n            this._selectedIdx = 0;\n        }\n    }\n}\nlet AbstractListSettingWidget = class AbstractListSettingWidget extends Disposable {\n    get domNode() {\n        return this.listElement;\n    }\n    get items() {\n        return this.model.items;\n    }\n    get inReadMode() {\n        return this.model.items.every(item => !item.editing);\n    }\n    constructor(container, themeService, contextViewService) {\n        super();\n        this.container = container;\n        this.themeService = themeService;\n        this.contextViewService = contextViewService;\n        this.rowElements = [];\n        this._onDidChangeList = this._register(( new Emitter()));\n        this.model = ( new ListSettingListModel(this.getEmptyItem()));\n        this.listDisposables = this._register(( new DisposableStore()));\n        this.onDidChangeList = this._onDidChangeList.event;\n        this.listElement = dom.append(container, $('div'));\n        this.listElement.setAttribute('role', 'list');\n        this.getContainerClasses().forEach(c => this.listElement.classList.add(c));\n        dom.append(container, this.renderAddButton());\n        this.renderList();\n        this._register(dom.addDisposableListener(this.listElement, dom.EventType.POINTER_DOWN, e => this.onListClick(e)));\n        this._register(dom.addDisposableListener(this.listElement, dom.EventType.DBLCLICK, e => this.onListDoubleClick(e)));\n        this._register(dom.addStandardDisposableListener(this.listElement, 'keydown', (e) => {\n            if (e.equals(16 )) {\n                this.selectPreviousRow();\n            }\n            else if (e.equals(18 )) {\n                this.selectNextRow();\n            }\n            else {\n                return;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n        }));\n    }\n    setValue(listData) {\n        this.model.setValue(listData);\n        this.renderList();\n    }\n    renderHeader() {\n        return;\n    }\n    isAddButtonVisible() {\n        return true;\n    }\n    renderList() {\n        const focused = dom.isAncestor(document.activeElement, this.listElement);\n        dom.clearNode(this.listElement);\n        this.listDisposables.clear();\n        const newMode = ( this.model.items.some(item => !!(item.editing && this.isItemNew(item))));\n        this.container.classList.toggle('setting-list-hide-add-button', !this.isAddButtonVisible() || newMode);\n        if (this.model.items.length) {\n            this.listElement.tabIndex = 0;\n        }\n        else {\n            this.listElement.removeAttribute('tabIndex');\n        }\n        const header = this.renderHeader();\n        const ITEM_HEIGHT = 24;\n        let listHeight = ITEM_HEIGHT * this.model.items.length;\n        if (header) {\n            listHeight += ITEM_HEIGHT;\n            this.listElement.appendChild(header);\n        }\n        this.rowElements = ( this.model.items.map((item, i) => this.renderDataOrEditItem(item, i, focused)));\n        this.rowElements.forEach(rowElement => this.listElement.appendChild(rowElement));\n        this.listElement.style.height = listHeight + 'px';\n    }\n    createBasicSelectBox(value) {\n        const selectBoxOptions = ( value.options.map(({ value, description }) => ({ text: value, description })));\n        const selected = value.options.findIndex(option => value.data === option.value);\n        const styles = getSelectBoxStyles({\n            selectBackground: settingsSelectBackground,\n            selectForeground: settingsSelectForeground,\n            selectBorder: settingsSelectBorder,\n            selectListBorder: settingsSelectListBorder\n        });\n        const selectBox = ( new SelectBox(selectBoxOptions, selected, this.contextViewService, styles, {\n            useCustomDrawn: !(isIOS && BrowserFeatures.pointerEvents)\n        }));\n        return selectBox;\n    }\n    editSetting(idx) {\n        this.model.setEditKey(idx);\n        this.renderList();\n    }\n    cancelEdit() {\n        this.model.setEditKey('none');\n        this.renderList();\n    }\n    handleItemChange(originalItem, changedItem, idx) {\n        this.model.setEditKey('none');\n        this._onDidChangeList.fire({\n            originalItem,\n            item: changedItem,\n            targetIndex: idx,\n        });\n        this.renderList();\n    }\n    renderDataOrEditItem(item, idx, listFocused) {\n        const rowElement = item.editing ?\n            this.renderEdit(item, idx) :\n            this.renderDataItem(item, idx, listFocused);\n        rowElement.setAttribute('role', 'listitem');\n        return rowElement;\n    }\n    renderDataItem(item, idx, listFocused) {\n        const rowElementGroup = this.renderItem(item, idx);\n        const rowElement = rowElementGroup.rowElement;\n        rowElement.setAttribute('data-index', idx + '');\n        rowElement.setAttribute('tabindex', item.selected ? '0' : '-1');\n        rowElement.classList.toggle('selected', item.selected);\n        const actionBar = ( new ActionBar(rowElement));\n        this.listDisposables.add(actionBar);\n        actionBar.push(this.getActionsForItem(item, idx), { icon: true, label: true });\n        this.addTooltipsToRow(rowElementGroup, item);\n        if (item.selected && listFocused) {\n            this.listDisposables.add(disposableTimeout(() => rowElement.focus()));\n        }\n        this.listDisposables.add(dom.addDisposableListener(rowElement, 'click', (e) => {\n            e.stopPropagation();\n        }));\n        return rowElement;\n    }\n    renderAddButton() {\n        const rowElement = $('.setting-list-new-row');\n        const startAddButton = this._register(( new Button(rowElement, defaultButtonStyles)));\n        startAddButton.label = this.getLocalizedStrings().addButtonLabel;\n        startAddButton.element.classList.add('setting-list-addButton');\n        this._register(startAddButton.onDidClick(() => {\n            this.model.setEditKey('create');\n            this.renderList();\n        }));\n        return rowElement;\n    }\n    onListClick(e) {\n        const targetIdx = this.getClickedItemIndex(e);\n        if (targetIdx < 0) {\n            return;\n        }\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        if (this.model.getSelected() === targetIdx) {\n            return;\n        }\n        this.selectRow(targetIdx);\n    }\n    onListDoubleClick(e) {\n        const targetIdx = this.getClickedItemIndex(e);\n        if (targetIdx < 0) {\n            return;\n        }\n        const item = this.model.items[targetIdx];\n        if (item) {\n            this.editSetting(targetIdx);\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    }\n    getClickedItemIndex(e) {\n        if (!e.target) {\n            return -1;\n        }\n        const actionbar = dom.findParentWithClass(e.target, 'monaco-action-bar');\n        if (actionbar) {\n            return -1;\n        }\n        const element = dom.findParentWithClass(e.target, 'setting-list-row');\n        if (!element) {\n            return -1;\n        }\n        const targetIdxStr = element.getAttribute('data-index');\n        if (!targetIdxStr) {\n            return -1;\n        }\n        const targetIdx = parseInt(targetIdxStr);\n        return targetIdx;\n    }\n    selectRow(idx) {\n        this.model.select(idx);\n        this.rowElements.forEach(row => row.classList.remove('selected'));\n        const selectedRow = this.rowElements[this.model.getSelected()];\n        selectedRow.classList.add('selected');\n        selectedRow.focus();\n    }\n    selectNextRow() {\n        this.model.selectNext();\n        this.selectRow(this.model.getSelected());\n    }\n    selectPreviousRow() {\n        this.model.selectPrevious();\n        this.selectRow(this.model.getSelected());\n    }\n};\nAbstractListSettingWidget = ( __decorate([\n    ( __param(1, IThemeService)),\n    ( __param(2, IContextViewService))\n], AbstractListSettingWidget));\nclass ListSettingWidget extends AbstractListSettingWidget {\n    constructor() {\n        super(...arguments);\n        this.showAddButton = true;\n    }\n    setValue(listData, options) {\n        this.keyValueSuggester = options?.keySuggester;\n        this.showAddButton = options?.showAddButton ?? true;\n        super.setValue(listData);\n    }\n    getEmptyItem() {\n        return {\n            value: {\n                type: 'string',\n                data: ''\n            }\n        };\n    }\n    isAddButtonVisible() {\n        return this.showAddButton;\n    }\n    getContainerClasses() {\n        return ['setting-list-widget'];\n    }\n    getActionsForItem(item, idx) {\n        return [\n            {\n                class: ThemeIcon.asClassName(settingsEditIcon),\n                enabled: true,\n                id: 'workbench.action.editListItem',\n                tooltip: this.getLocalizedStrings().editActionTooltip,\n                run: () => this.editSetting(idx)\n            },\n            {\n                class: ThemeIcon.asClassName(settingsRemoveIcon),\n                enabled: true,\n                id: 'workbench.action.removeListItem',\n                tooltip: this.getLocalizedStrings().deleteActionTooltip,\n                run: () => this._onDidChangeList.fire({ originalItem: item, item: undefined, targetIndex: idx })\n            }\n        ];\n    }\n    getDragImage(item) {\n        const dragImage = $('.monaco-drag-image');\n        dragImage.textContent = item.value.data;\n        return dragImage;\n    }\n    renderItem(item, idx) {\n        const rowElement = $('.setting-list-row');\n        const valueElement = dom.append(rowElement, $('.setting-list-value'));\n        const siblingElement = dom.append(rowElement, $('.setting-list-sibling'));\n        valueElement.textContent = ( item.value.data.toString());\n        siblingElement.textContent = item.sibling ? `when: ${item.sibling}` : null;\n        this.addDragAndDrop(rowElement, item, idx);\n        return { rowElement, keyElement: valueElement, valueElement: siblingElement };\n    }\n    addDragAndDrop(rowElement, item, idx) {\n        if (this.inReadMode) {\n            rowElement.draggable = true;\n            rowElement.classList.add('draggable');\n        }\n        else {\n            rowElement.draggable = false;\n            rowElement.classList.remove('draggable');\n        }\n        this.listDisposables.add(dom.addDisposableListener(rowElement, dom.EventType.DRAG_START, (ev) => {\n            this.dragDetails = {\n                element: rowElement,\n                item,\n                itemIndex: idx\n            };\n            if (ev.dataTransfer) {\n                ev.dataTransfer.dropEffect = 'move';\n                const dragImage = this.getDragImage(item);\n                document.body.appendChild(dragImage);\n                ev.dataTransfer.setDragImage(dragImage, -10, -10);\n                setTimeout(() => document.body.removeChild(dragImage), 0);\n            }\n        }));\n        this.listDisposables.add(dom.addDisposableListener(rowElement, dom.EventType.DRAG_OVER, (ev) => {\n            if (!this.dragDetails) {\n                return false;\n            }\n            ev.preventDefault();\n            if (ev.dataTransfer) {\n                ev.dataTransfer.dropEffect = 'move';\n            }\n            return true;\n        }));\n        let counter = 0;\n        this.listDisposables.add(dom.addDisposableListener(rowElement, dom.EventType.DRAG_ENTER, (ev) => {\n            counter++;\n            rowElement.classList.add('drag-hover');\n        }));\n        this.listDisposables.add(dom.addDisposableListener(rowElement, dom.EventType.DRAG_LEAVE, (ev) => {\n            counter--;\n            if (!counter) {\n                rowElement.classList.remove('drag-hover');\n            }\n        }));\n        this.listDisposables.add(dom.addDisposableListener(rowElement, dom.EventType.DROP, (ev) => {\n            if (!this.dragDetails) {\n                return false;\n            }\n            ev.preventDefault();\n            counter = 0;\n            if (this.dragDetails.element !== rowElement) {\n                this._onDidChangeList.fire({\n                    originalItem: this.dragDetails.item,\n                    sourceIndex: this.dragDetails.itemIndex,\n                    item,\n                    targetIndex: idx\n                });\n            }\n            return true;\n        }));\n        this.listDisposables.add(dom.addDisposableListener(rowElement, dom.EventType.DRAG_END, (ev) => {\n            counter = 0;\n            rowElement.classList.remove('drag-hover');\n            ev.dataTransfer?.clearData();\n            if (this.dragDetails) {\n                this.dragDetails = undefined;\n            }\n        }));\n    }\n    renderEdit(item, idx) {\n        const rowElement = $('.setting-list-edit-row');\n        let valueInput;\n        let currentDisplayValue;\n        let currentEnumOptions;\n        if (this.keyValueSuggester) {\n            const enumData = this.keyValueSuggester(( this.model.items.map(({ value: { data } }) => data)), idx);\n            item = {\n                ...item,\n                value: {\n                    type: 'enum',\n                    data: item.value.data,\n                    options: enumData ? enumData.options : []\n                }\n            };\n        }\n        switch (item.value.type) {\n            case 'string':\n                valueInput = this.renderInputBox(item.value, rowElement);\n                break;\n            case 'enum':\n                valueInput = this.renderDropdown(item.value, rowElement);\n                currentEnumOptions = item.value.options;\n                if (item.value.options.length) {\n                    currentDisplayValue = this.isItemNew(item) ?\n                        currentEnumOptions[0].value : item.value.data;\n                }\n                break;\n        }\n        const updatedInputBoxItem = () => {\n            const inputBox = valueInput;\n            return {\n                value: {\n                    type: 'string',\n                    data: inputBox.value\n                },\n                sibling: siblingInput?.value\n            };\n        };\n        const updatedSelectBoxItem = (selectedValue) => {\n            return {\n                value: {\n                    type: 'enum',\n                    data: selectedValue,\n                    options: currentEnumOptions ?? []\n                }\n            };\n        };\n        const onKeyDown = (e) => {\n            if (e.equals(3 )) {\n                this.handleItemChange(item, updatedInputBoxItem(), idx);\n            }\n            else if (e.equals(9 )) {\n                this.cancelEdit();\n                e.preventDefault();\n            }\n            rowElement?.focus();\n        };\n        if (item.value.type !== 'string') {\n            const selectBox = valueInput;\n            this.listDisposables.add(selectBox.onDidSelect(({ selected }) => {\n                currentDisplayValue = selected;\n            }));\n        }\n        else {\n            const inputBox = valueInput;\n            this.listDisposables.add(dom.addStandardDisposableListener(inputBox.inputElement, dom.EventType.KEY_DOWN, onKeyDown));\n        }\n        let siblingInput;\n        if (!isUndefinedOrNull(item.sibling)) {\n            siblingInput = ( new InputBox(rowElement, this.contextViewService, {\n                placeholder: this.getLocalizedStrings().siblingInputPlaceholder,\n                inputBoxStyles: getInputBoxStyle({\n                    inputBackground: settingsTextInputBackground,\n                    inputForeground: settingsTextInputForeground,\n                    inputBorder: settingsTextInputBorder\n                })\n            }));\n            siblingInput.element.classList.add('setting-list-siblingInput');\n            this.listDisposables.add(siblingInput);\n            siblingInput.value = item.sibling;\n            this.listDisposables.add(dom.addStandardDisposableListener(siblingInput.inputElement, dom.EventType.KEY_DOWN, onKeyDown));\n        }\n        else if (valueInput instanceof InputBox) {\n            valueInput.element.classList.add('no-sibling');\n        }\n        const okButton = this._register(( new Button(rowElement, defaultButtonStyles)));\n        okButton.label = ( localize('okButton', \"OK\"));\n        okButton.element.classList.add('setting-list-ok-button');\n        this.listDisposables.add(okButton.onDidClick(() => {\n            if (item.value.type === 'string') {\n                this.handleItemChange(item, updatedInputBoxItem(), idx);\n            }\n            else {\n                this.handleItemChange(item, updatedSelectBoxItem(currentDisplayValue), idx);\n            }\n        }));\n        const cancelButton = this._register(( new Button(rowElement, { secondary: true, ...defaultButtonStyles })));\n        cancelButton.label = ( localize('cancelButton', \"Cancel\"));\n        cancelButton.element.classList.add('setting-list-cancel-button');\n        this.listDisposables.add(cancelButton.onDidClick(() => this.cancelEdit()));\n        this.listDisposables.add(disposableTimeout(() => {\n            valueInput.focus();\n            if (valueInput instanceof InputBox) {\n                valueInput.select();\n            }\n        }));\n        return rowElement;\n    }\n    isItemNew(item) {\n        return item.value.data === '';\n    }\n    addTooltipsToRow(rowElementGroup, { value, sibling }) {\n        const title = isUndefinedOrNull(sibling)\n            ? ( localize('listValueHintLabel', \"List item `{0}`\", value.data))\n            : ( localize(\n            'listSiblingHintLabel',\n            \"List item `{0}` with sibling `${1}`\",\n            value.data,\n            sibling\n        ));\n        const { rowElement } = rowElementGroup;\n        rowElement.title = title;\n        rowElement.setAttribute('aria-label', rowElement.title);\n    }\n    getLocalizedStrings() {\n        return {\n            deleteActionTooltip: ( localize('removeItem', \"Remove Item\")),\n            editActionTooltip: ( localize('editItem', \"Edit Item\")),\n            addButtonLabel: ( localize('addItem', \"Add Item\")),\n            inputPlaceholder: ( localize('itemInputPlaceholder', \"Item...\")),\n            siblingInputPlaceholder: ( localize('listSiblingInputPlaceholder', \"Sibling...\")),\n        };\n    }\n    renderInputBox(value, rowElement) {\n        const valueInput = ( new InputBox(rowElement, this.contextViewService, {\n            placeholder: this.getLocalizedStrings().inputPlaceholder,\n            inputBoxStyles: getInputBoxStyle({\n                inputBackground: settingsTextInputBackground,\n                inputForeground: settingsTextInputForeground,\n                inputBorder: settingsTextInputBorder\n            })\n        }));\n        valueInput.element.classList.add('setting-list-valueInput');\n        this.listDisposables.add(valueInput);\n        valueInput.value = ( value.data.toString());\n        return valueInput;\n    }\n    renderDropdown(value, rowElement) {\n        if (value.type !== 'enum') {\n            throw new Error('Valuetype must be enum.');\n        }\n        const selectBox = this.createBasicSelectBox(value);\n        const wrapper = $('.setting-list-object-list-row');\n        selectBox.render(wrapper);\n        rowElement.appendChild(wrapper);\n        return selectBox;\n    }\n}\nclass ExcludeSettingWidget extends ListSettingWidget {\n    getContainerClasses() {\n        return ['setting-list-include-exclude-widget'];\n    }\n    addDragAndDrop(rowElement, item, idx) {\n        return;\n    }\n    addTooltipsToRow(rowElementGroup, { value, sibling }) {\n        const title = isUndefinedOrNull(sibling)\n            ? ( localize('excludePatternHintLabel', \"Exclude files matching `{0}`\", value.data))\n            : ( localize(\n            'excludeSiblingHintLabel',\n            \"Exclude files matching `{0}`, only when a file matching `{1}` is present\",\n            value.data,\n            sibling\n        ));\n        const { rowElement } = rowElementGroup;\n        rowElement.title = title;\n        rowElement.setAttribute('aria-label', rowElement.title);\n    }\n    getLocalizedStrings() {\n        return {\n            deleteActionTooltip: ( localize('removeExcludeItem', \"Remove Exclude Item\")),\n            editActionTooltip: ( localize('editExcludeItem', \"Edit Exclude Item\")),\n            addButtonLabel: ( localize('addPattern', \"Add Pattern\")),\n            inputPlaceholder: ( localize('excludePatternInputPlaceholder', \"Exclude Pattern...\")),\n            siblingInputPlaceholder: ( localize('excludeSiblingInputPlaceholder', \"When Pattern Is Present...\")),\n        };\n    }\n}\nclass IncludeSettingWidget extends ListSettingWidget {\n    getContainerClasses() {\n        return ['setting-list-include-exclude-widget'];\n    }\n    addDragAndDrop(rowElement, item, idx) {\n        return;\n    }\n    addTooltipsToRow(rowElementGroup, { value, sibling }) {\n        const title = isUndefinedOrNull(sibling)\n            ? ( localize('includePatternHintLabel', \"Include files matching `{0}`\", value.data))\n            : ( localize(\n            'includeSiblingHintLabel',\n            \"Include files matching `{0}`, only when a file matching `{1}` is present\",\n            value.data,\n            sibling\n        ));\n        const { rowElement } = rowElementGroup;\n        rowElement.title = title;\n        rowElement.setAttribute('aria-label', rowElement.title);\n    }\n    getLocalizedStrings() {\n        return {\n            deleteActionTooltip: ( localize('removeIncludeItem', \"Remove Include Item\")),\n            editActionTooltip: ( localize('editIncludeItem', \"Edit Include Item\")),\n            addButtonLabel: ( localize('addPattern', \"Add Pattern\")),\n            inputPlaceholder: ( localize('includePatternInputPlaceholder', \"Include Pattern...\")),\n            siblingInputPlaceholder: ( localize('includeSiblingInputPlaceholder', \"When Pattern Is Present...\")),\n        };\n    }\n}\nclass ObjectSettingDropdownWidget extends AbstractListSettingWidget {\n    constructor() {\n        super(...arguments);\n        this.currentSettingKey = '';\n        this.showAddButton = true;\n        this.keySuggester = () => undefined;\n        this.valueSuggester = () => undefined;\n    }\n    setValue(listData, options) {\n        this.showAddButton = options?.showAddButton ?? this.showAddButton;\n        this.keySuggester = options?.keySuggester ?? this.keySuggester;\n        this.valueSuggester = options?.valueSuggester ?? this.valueSuggester;\n        if (isDefined(options) && options.settingKey !== this.currentSettingKey) {\n            this.model.setEditKey('none');\n            this.model.select(null);\n            this.currentSettingKey = options.settingKey;\n        }\n        super.setValue(listData);\n    }\n    isItemNew(item) {\n        return item.key.data === '' && item.value.data === '';\n    }\n    isAddButtonVisible() {\n        return this.showAddButton;\n    }\n    getEmptyItem() {\n        return {\n            key: { type: 'string', data: '' },\n            value: { type: 'string', data: '' },\n            removable: true,\n        };\n    }\n    getContainerClasses() {\n        return ['setting-list-object-widget'];\n    }\n    getActionsForItem(item, idx) {\n        const actions = [\n            {\n                class: ThemeIcon.asClassName(settingsEditIcon),\n                enabled: true,\n                id: 'workbench.action.editListItem',\n                tooltip: this.getLocalizedStrings().editActionTooltip,\n                run: () => this.editSetting(idx)\n            },\n        ];\n        if (item.removable) {\n            actions.push({\n                class: ThemeIcon.asClassName(settingsRemoveIcon),\n                enabled: true,\n                id: 'workbench.action.removeListItem',\n                tooltip: this.getLocalizedStrings().deleteActionTooltip,\n                run: () => this._onDidChangeList.fire({ originalItem: item, item: undefined, targetIndex: idx })\n            });\n        }\n        else {\n            actions.push({\n                class: ThemeIcon.asClassName(settingsDiscardIcon),\n                enabled: true,\n                id: 'workbench.action.resetListItem',\n                tooltip: this.getLocalizedStrings().resetActionTooltip,\n                run: () => this._onDidChangeList.fire({ originalItem: item, item: undefined, targetIndex: idx })\n            });\n        }\n        return actions;\n    }\n    renderHeader() {\n        const header = $('.setting-list-row-header');\n        const keyHeader = dom.append(header, $('.setting-list-object-key'));\n        const valueHeader = dom.append(header, $('.setting-list-object-value'));\n        const { keyHeaderText, valueHeaderText } = this.getLocalizedStrings();\n        keyHeader.textContent = keyHeaderText;\n        valueHeader.textContent = valueHeaderText;\n        return header;\n    }\n    renderItem(item, idx) {\n        const rowElement = $('.setting-list-row');\n        rowElement.classList.add('setting-list-object-row');\n        const keyElement = dom.append(rowElement, $('.setting-list-object-key'));\n        const valueElement = dom.append(rowElement, $('.setting-list-object-value'));\n        keyElement.textContent = item.key.data;\n        valueElement.textContent = ( item.value.data.toString());\n        return { rowElement, keyElement, valueElement };\n    }\n    renderEdit(item, idx) {\n        const rowElement = $('.setting-list-edit-row.setting-list-object-row');\n        const changedItem = { ...item };\n        const onKeyChange = (key) => {\n            changedItem.key = key;\n            okButton.enabled = key.data !== '';\n            const suggestedValue = this.valueSuggester(key.data) ?? item.value;\n            if (this.shouldUseSuggestion(item.value, changedItem.value, suggestedValue)) {\n                onValueChange(suggestedValue);\n                renderLatestValue();\n            }\n        };\n        const onValueChange = (value) => {\n            changedItem.value = value;\n        };\n        let keyWidget;\n        let keyElement;\n        if (this.showAddButton) {\n            if (this.isItemNew(item)) {\n                const suggestedKey = this.keySuggester(( this.model.items.map(({ key: { data } }) => data)));\n                if (isDefined(suggestedKey)) {\n                    changedItem.key = suggestedKey;\n                    const suggestedValue = this.valueSuggester(changedItem.key.data);\n                    onValueChange(suggestedValue ?? changedItem.value);\n                }\n            }\n            const { widget, element } = this.renderEditWidget(changedItem.key, {\n                idx,\n                isKey: true,\n                originalItem: item,\n                changedItem,\n                update: onKeyChange,\n            });\n            keyWidget = widget;\n            keyElement = element;\n        }\n        else {\n            keyElement = $('.setting-list-object-key');\n            keyElement.textContent = item.key.data;\n        }\n        let valueWidget;\n        const valueContainer = $('.setting-list-object-value-container');\n        const renderLatestValue = () => {\n            const { widget, element } = this.renderEditWidget(changedItem.value, {\n                idx,\n                isKey: false,\n                originalItem: item,\n                changedItem,\n                update: onValueChange,\n            });\n            valueWidget = widget;\n            dom.clearNode(valueContainer);\n            valueContainer.append(element);\n        };\n        renderLatestValue();\n        rowElement.append(keyElement, valueContainer);\n        const okButton = this._register(( new Button(rowElement, defaultButtonStyles)));\n        okButton.enabled = changedItem.key.data !== '';\n        okButton.label = ( localize('okButton', \"OK\"));\n        okButton.element.classList.add('setting-list-ok-button');\n        this.listDisposables.add(okButton.onDidClick(() => this.handleItemChange(item, changedItem, idx)));\n        const cancelButton = this._register(( new Button(rowElement, { secondary: true, ...defaultButtonStyles })));\n        cancelButton.label = ( localize('cancelButton', \"Cancel\"));\n        cancelButton.element.classList.add('setting-list-cancel-button');\n        this.listDisposables.add(cancelButton.onDidClick(() => this.cancelEdit()));\n        this.listDisposables.add(disposableTimeout(() => {\n            const widget = keyWidget ?? valueWidget;\n            widget.focus();\n            if (widget instanceof InputBox) {\n                widget.select();\n            }\n        }));\n        return rowElement;\n    }\n    renderEditWidget(keyOrValue, options) {\n        switch (keyOrValue.type) {\n            case 'string':\n                return this.renderStringEditWidget(keyOrValue, options);\n            case 'enum':\n                return this.renderEnumEditWidget(keyOrValue, options);\n            case 'boolean':\n                return this.renderEnumEditWidget({\n                    type: 'enum',\n                    data: ( keyOrValue.data.toString()),\n                    options: [{ value: 'true' }, { value: 'false' }],\n                }, options);\n        }\n    }\n    renderStringEditWidget(keyOrValue, { idx, isKey, originalItem, changedItem, update }) {\n        const wrapper = $(isKey ? '.setting-list-object-input-key' : '.setting-list-object-input-value');\n        const inputBox = ( new InputBox(wrapper, this.contextViewService, {\n            placeholder: isKey\n                ? ( localize('objectKeyInputPlaceholder', \"Key\"))\n                : ( localize('objectValueInputPlaceholder', \"Value\")),\n            inputBoxStyles: getInputBoxStyle({\n                inputBackground: settingsTextInputBackground,\n                inputForeground: settingsTextInputForeground,\n                inputBorder: settingsTextInputBorder\n            })\n        }));\n        inputBox.element.classList.add('setting-list-object-input');\n        this.listDisposables.add(inputBox);\n        inputBox.value = keyOrValue.data;\n        this.listDisposables.add(inputBox.onDidChange(value => update({ ...keyOrValue, data: value })));\n        const onKeyDown = (e) => {\n            if (e.equals(3 )) {\n                this.handleItemChange(originalItem, changedItem, idx);\n            }\n            else if (e.equals(9 )) {\n                this.cancelEdit();\n                e.preventDefault();\n            }\n        };\n        this.listDisposables.add(dom.addStandardDisposableListener(inputBox.inputElement, dom.EventType.KEY_DOWN, onKeyDown));\n        return { widget: inputBox, element: wrapper };\n    }\n    renderEnumEditWidget(keyOrValue, { isKey, changedItem, update }) {\n        const selectBox = this.createBasicSelectBox(keyOrValue);\n        const changedKeyOrValue = isKey ? changedItem.key : changedItem.value;\n        this.listDisposables.add(selectBox.onDidSelect(({ selected }) => update(changedKeyOrValue.type === 'boolean'\n            ? { ...changedKeyOrValue, data: selected === 'true' ? true : false }\n            : { ...changedKeyOrValue, data: selected })));\n        const wrapper = $('.setting-list-object-input');\n        wrapper.classList.add(isKey ? 'setting-list-object-input-key' : 'setting-list-object-input-value');\n        selectBox.render(wrapper);\n        const selected = keyOrValue.options.findIndex(option => keyOrValue.data === option.value);\n        if (selected === -1 && keyOrValue.options.length) {\n            update(changedKeyOrValue.type === 'boolean'\n                ? { ...changedKeyOrValue, data: true }\n                : { ...changedKeyOrValue, data: keyOrValue.options[0].value });\n        }\n        else if (changedKeyOrValue.type === 'boolean') {\n            update({ ...changedKeyOrValue, data: keyOrValue.data === 'true' });\n        }\n        return { widget: selectBox, element: wrapper };\n    }\n    shouldUseSuggestion(originalValue, previousValue, newValue) {\n        if (newValue.type !== 'enum' && newValue.type === previousValue.type && newValue.data === previousValue.data) {\n            return false;\n        }\n        if (originalValue.data === '') {\n            return true;\n        }\n        if (previousValue.type === newValue.type && newValue.type !== 'enum') {\n            return false;\n        }\n        if (previousValue.type === 'enum' && newValue.type === 'enum') {\n            const previousEnums = ( new Set(( previousValue.options.map(({ value }) => value))));\n            newValue.options.forEach(({ value }) => previousEnums.delete(value));\n            if (previousEnums.size === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    addTooltipsToRow(rowElementGroup, item) {\n        const { keyElement, valueElement, rowElement } = rowElementGroup;\n        const accessibleDescription = ( localize(\n            'objectPairHintLabel',\n            \"The property `{0}` is set to `{1}`.\",\n            item.key.data,\n            item.value.data\n        ));\n        const keyDescription = this.getEnumDescription(item.key) ?? item.keyDescription ?? accessibleDescription;\n        keyElement.title = keyDescription;\n        const valueDescription = this.getEnumDescription(item.value) ?? accessibleDescription;\n        valueElement.title = valueDescription;\n        rowElement.setAttribute('aria-label', accessibleDescription);\n    }\n    getEnumDescription(keyOrValue) {\n        const enumDescription = keyOrValue.type === 'enum'\n            ? keyOrValue.options.find(({ value }) => keyOrValue.data === value)?.description\n            : undefined;\n        return enumDescription;\n    }\n    getLocalizedStrings() {\n        return {\n            deleteActionTooltip: ( localize('removeItem', \"Remove Item\")),\n            resetActionTooltip: ( localize('resetItem', \"Reset Item\")),\n            editActionTooltip: ( localize('editItem', \"Edit Item\")),\n            addButtonLabel: ( localize('addItem', \"Add Item\")),\n            keyHeaderText: ( localize('objectKeyHeader', \"Item\")),\n            valueHeaderText: ( localize('objectValueHeader', \"Value\")),\n        };\n    }\n}\nclass ObjectSettingCheckboxWidget extends AbstractListSettingWidget {\n    constructor() {\n        super(...arguments);\n        this.currentSettingKey = '';\n    }\n    setValue(listData, options) {\n        if (isDefined(options) && options.settingKey !== this.currentSettingKey) {\n            this.model.setEditKey('none');\n            this.model.select(null);\n            this.currentSettingKey = options.settingKey;\n        }\n        super.setValue(listData);\n    }\n    isItemNew(item) {\n        return !item.key.data && !item.value.data;\n    }\n    getEmptyItem() {\n        return {\n            key: { type: 'string', data: '' },\n            value: { type: 'boolean', data: false },\n            removable: false\n        };\n    }\n    getContainerClasses() {\n        return ['setting-list-object-widget'];\n    }\n    getActionsForItem(item, idx) {\n        return [];\n    }\n    isAddButtonVisible() {\n        return false;\n    }\n    renderHeader() {\n        return undefined;\n    }\n    renderDataOrEditItem(item, idx, listFocused) {\n        const rowElement = this.renderEdit(item, idx);\n        rowElement.setAttribute('role', 'listitem');\n        return rowElement;\n    }\n    renderItem(item, idx) {\n        const rowElement = $('.blank-row');\n        const keyElement = $('.blank-row-key');\n        return { rowElement, keyElement };\n    }\n    renderEdit(item, idx) {\n        const rowElement = $('.setting-list-edit-row.setting-list-object-row.setting-item-bool');\n        const changedItem = { ...item };\n        const onValueChange = (newValue) => {\n            changedItem.value.data = newValue;\n            this.handleItemChange(item, changedItem, idx);\n        };\n        const checkboxDescription = item.keyDescription ? `${item.keyDescription} (${item.key.data})` : item.key.data;\n        const { element, widget: checkbox } = this.renderEditWidget(changedItem.value.data, checkboxDescription, onValueChange);\n        rowElement.appendChild(element);\n        const valueElement = dom.append(rowElement, $('.setting-list-object-value'));\n        valueElement.textContent = checkboxDescription;\n        const rowElementGroup = { rowElement, keyElement: valueElement, valueElement: checkbox.domNode };\n        this.addTooltipsToRow(rowElementGroup, item);\n        this._register(dom.addDisposableListener(valueElement, dom.EventType.MOUSE_DOWN, e => {\n            const targetElement = e.target;\n            if (targetElement.tagName.toLowerCase() !== 'a') {\n                checkbox.checked = !checkbox.checked;\n                onValueChange(checkbox.checked);\n            }\n            dom.EventHelper.stop(e);\n        }));\n        return rowElement;\n    }\n    renderEditWidget(value, checkboxDescription, onValueChange) {\n        const checkbox = ( new Toggle({\n            icon: Codicon.check,\n            actionClassName: 'setting-value-checkbox',\n            isChecked: value,\n            title: checkboxDescription,\n            ...unthemedToggleStyles\n        }));\n        this.listDisposables.add(checkbox);\n        const wrapper = $('.setting-list-object-input');\n        wrapper.classList.add('setting-list-object-input-key-checkbox');\n        checkbox.domNode.classList.add('setting-value-checkbox');\n        wrapper.appendChild(checkbox.domNode);\n        this._register(dom.addDisposableListener(wrapper, dom.EventType.MOUSE_DOWN, e => {\n            checkbox.checked = !checkbox.checked;\n            onValueChange(checkbox.checked);\n            e.stopImmediatePropagation();\n        }));\n        return { widget: checkbox, element: wrapper };\n    }\n    addTooltipsToRow(rowElementGroup, item) {\n        const accessibleDescription = ( localize(\n            'objectPairHintLabel',\n            \"The property `{0}` is set to `{1}`.\",\n            item.key.data,\n            item.value.data\n        ));\n        const title = item.keyDescription ?? accessibleDescription;\n        const { rowElement, keyElement, valueElement } = rowElementGroup;\n        keyElement.title = title;\n        valueElement.setAttribute('aria-label', accessibleDescription);\n        rowElement.setAttribute('aria-label', accessibleDescription);\n    }\n    getLocalizedStrings() {\n        return {\n            deleteActionTooltip: ( localize('removeItem', \"Remove Item\")),\n            resetActionTooltip: ( localize('resetItem', \"Reset Item\")),\n            editActionTooltip: ( localize('editItem', \"Edit Item\")),\n            addButtonLabel: ( localize('addItem', \"Add Item\")),\n            keyHeaderText: ( localize('objectKeyHeader', \"Item\")),\n            valueHeaderText: ( localize('objectValueHeader', \"Value\")),\n        };\n    }\n}\nexport { AbstractListSettingWidget, ExcludeSettingWidget, IncludeSettingWidget, ListSettingListModel, ListSettingWidget, ObjectSettingCheckboxWidget, ObjectSettingDropdownWidget };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { BrowserFeatures } from 'monaco-editor/esm/vs/base/browser/canIUse.js';\nimport * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { StandardKeyboardEvent } from 'monaco-editor/esm/vs/base/browser/keyboardEvent.js';\nimport { renderMarkdownAsPlaintext } from 'monaco-editor/esm/vs/base/browser/markdownRenderer.js';\nimport * as aria from 'monaco-editor/esm/vs/base/browser/ui/aria/aria.js';\nimport { Button } from 'monaco-editor/esm/vs/base/browser/ui/button/button.js';\nimport { SimpleIconLabel } from '../../../../base/browser/ui/iconLabel/simpleIconLabel.js';\nimport { InputBox } from 'monaco-editor/esm/vs/base/browser/ui/inputbox/inputBox.js';\nimport { CachedListVirtualDelegate } from 'monaco-editor/esm/vs/base/browser/ui/list/list.js';\nimport { DefaultStyleController } from 'monaco-editor/esm/vs/base/browser/ui/list/listWidget.js';\nimport { SelectBox } from 'monaco-editor/esm/vs/base/browser/ui/selectBox/selectBox.js';\nimport { Toggle, unthemedToggleStyles } from 'monaco-editor/esm/vs/base/browser/ui/toggle/toggle.js';\nimport { ToolBar } from 'monaco-editor/esm/vs/base/browser/ui/toolbar/toolbar.js';\nimport { RenderIndentGuides } from 'monaco-editor/esm/vs/base/browser/ui/tree/abstractTree.js';\nimport { ObjectTreeModel } from 'monaco-editor/esm/vs/base/browser/ui/tree/objectTreeModel.js';\nimport { Action, Separator } from 'monaco-editor/esm/vs/base/common/actions.js';\nimport { distinct } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';\nimport { onUnexpectedError } from 'monaco-editor/esm/vs/base/common/errors.js';\nimport { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Disposable, DisposableStore, isDisposable, dispose, toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { isIOS } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { escapeRegExpCharacters } from 'monaco-editor/esm/vs/base/common/strings.js';\nimport { isDefined, isUndefinedOrNull } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport { MarkdownRenderer } from 'monaco-editor/esm/vs/editor/contrib/markdownRenderer/browser/markdownRenderer.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { IClipboardService } from 'monaco-editor/esm/vs/platform/clipboard/common/clipboardService.js';\nimport { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { getLanguageTagSettingPlainKey, IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { IContextViewService, IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { WorkbenchObjectTree, IListService } from 'monaco-editor/esm/vs/platform/list/browser/listService.js';\nimport { IOpenerService } from 'monaco-editor/esm/vs/platform/opener/common/opener.js';\nimport { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';\nimport { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';\nimport { getInputBoxStyle, getListStyles, getSelectBoxStyles, defaultButtonStyles } from 'monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js';\nimport { editorBackground, foreground } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nimport { getIgnoredSettings } from '../../../../platform/userDataSync/common/settingsMerge.js';\nimport { getDefaultIgnoredSettings, IUserDataSyncEnablementService } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { IExtensionsWorkbenchService } from '../../extensions/common/extensions.js';\nimport { settingsMoreActionIcon } from './preferencesIcons.js';\nimport { SettingsTreeIndicatorsLabel, getIndicatorsLabelAriaLabel } from './settingsEditorSettingIndicators.js';\nimport { settingKeyToDisplayFormat, inspectSetting, SettingsTreeSettingElement, SettingsTreeGroupElement, SettingsTreeNewExtensionsElement } from './settingsTreeModels.js';\nimport { ListSettingWidget, ObjectSettingDropdownWidget, ObjectSettingCheckboxWidget, ExcludeSettingWidget, IncludeSettingWidget } from './settingsWidgets.js';\nimport { SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU, LANGUAGE_SETTING_TAG } from '../common/preferences.js';\nimport { settingsTextInputBackground, settingsTextInputForeground, settingsTextInputBorder, settingsNumberInputBackground, settingsNumberInputForeground, settingsNumberInputBorder, settingsSelectBackground, settingsSelectForeground, settingsSelectBorder, settingsSelectListBorder } from '../common/settingsEditorColorRegistry.js';\nimport { APPLY_ALL_PROFILES_SETTING, IWorkbenchConfigurationService } from '../../../services/configuration/common/configuration.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { SettingValueType } from '../../../services/preferences/common/preferences.js';\nimport { getInvalidTypeError } from '../../../services/preferences/common/preferencesValidation.js';\nconst $ = dom.$;\nfunction getIncludeExcludeDisplayValue(element) {\n    const data = element.isConfigured ?\n        { ...element.defaultValue, ...element.scopeValue } :\n        element.defaultValue;\n    return ( ( Object.keys(data))\n        .filter(key => !!data[key])\n        .map(key => {\n        const value = data[key];\n        const sibling = typeof value === 'boolean' ? undefined : value.when;\n        return {\n            value: {\n                type: 'string',\n                data: key\n            },\n            sibling,\n            elementType: element.valueType\n        };\n    }));\n}\nfunction areAllPropertiesDefined(properties, itemsToDisplay) {\n    const staticProperties = ( new Set(properties));\n    itemsToDisplay.forEach(({ key }) => staticProperties.delete(key.data));\n    return staticProperties.size === 0;\n}\nfunction getEnumOptionsFromSchema(schema) {\n    if (schema.anyOf) {\n        return ( schema.anyOf.map(getEnumOptionsFromSchema)).flat();\n    }\n    const enumDescriptions = schema.enumDescriptions ?? [];\n    return ( (schema.enum ?? []).map((value, idx) => {\n        const description = idx < enumDescriptions.length\n            ? enumDescriptions[idx]\n            : undefined;\n        return { value, description };\n    }));\n}\nfunction getObjectValueType(schema) {\n    if (schema.anyOf) {\n        const subTypes = ( schema.anyOf.map(getObjectValueType));\n        if (( subTypes.some(type => type === 'enum'))) {\n            return 'enum';\n        }\n        return 'string';\n    }\n    if (schema.type === 'boolean') {\n        return 'boolean';\n    }\n    else if (schema.type === 'string' && isDefined(schema.enum) && schema.enum.length > 0) {\n        return 'enum';\n    }\n    else {\n        return 'string';\n    }\n}\nfunction getObjectDisplayValue(element) {\n    const elementDefaultValue = typeof element.defaultValue === 'object'\n        ? element.defaultValue ?? {}\n        : {};\n    const elementScopeValue = typeof element.scopeValue === 'object'\n        ? element.scopeValue ?? {}\n        : {};\n    const data = element.isConfigured ?\n        { ...elementDefaultValue, ...elementScopeValue } :\n        elementDefaultValue;\n    const { objectProperties, objectPatternProperties, objectAdditionalProperties } = element.setting;\n    const patternsAndSchemas = ( Object\n        .entries(objectPatternProperties ?? {})\n        .map(([pattern, schema]) => ({\n        pattern: ( new RegExp(pattern)),\n        schema\n    })));\n    const wellDefinedKeyEnumOptions = ( Object.entries(objectProperties ?? {}).map(([key, schema]) => ({ value: key, description: schema.description })));\n    return ( ( Object.keys(data)).map(key => {\n        const defaultValue = elementDefaultValue[key];\n        if (isDefined(objectProperties) && key in objectProperties) {\n            if (element.setting.allKeysAreBoolean) {\n                return {\n                    key: {\n                        type: 'string',\n                        data: key\n                    },\n                    value: {\n                        type: 'boolean',\n                        data: data[key]\n                    },\n                    keyDescription: objectProperties[key].description,\n                    removable: false\n                };\n            }\n            const valueEnumOptions = getEnumOptionsFromSchema(objectProperties[key]);\n            return {\n                key: {\n                    type: 'enum',\n                    data: key,\n                    options: wellDefinedKeyEnumOptions,\n                },\n                value: {\n                    type: getObjectValueType(objectProperties[key]),\n                    data: data[key],\n                    options: valueEnumOptions,\n                },\n                keyDescription: objectProperties[key].description,\n                removable: isUndefinedOrNull(defaultValue),\n            };\n        }\n        const removable = !defaultValue;\n        const schema = patternsAndSchemas.find(({ pattern }) => pattern.test(key))?.schema;\n        if (schema) {\n            const valueEnumOptions = getEnumOptionsFromSchema(schema);\n            return {\n                key: { type: 'string', data: key },\n                value: {\n                    type: getObjectValueType(schema),\n                    data: data[key],\n                    options: valueEnumOptions,\n                },\n                keyDescription: schema.description,\n                removable,\n            };\n        }\n        const additionalValueEnums = getEnumOptionsFromSchema(typeof objectAdditionalProperties === 'boolean'\n            ? {}\n            : objectAdditionalProperties ?? {});\n        return {\n            key: { type: 'string', data: key },\n            value: {\n                type: typeof objectAdditionalProperties === 'object' ? getObjectValueType(objectAdditionalProperties) : 'string',\n                data: data[key],\n                options: additionalValueEnums,\n            },\n            keyDescription: typeof objectAdditionalProperties === 'object' ? objectAdditionalProperties.description : undefined,\n            removable,\n        };\n    })).filter(item => !isUndefinedOrNull(item.value.data));\n}\nfunction createArraySuggester(element) {\n    return (keys, idx) => {\n        const enumOptions = [];\n        if (element.setting.enum) {\n            element.setting.enum.forEach((key, i) => {\n                if (!element.setting.uniqueItems || (idx !== undefined && key === keys[idx]) || !keys.includes(key)) {\n                    const description = element.setting.enumDescriptions?.[i];\n                    enumOptions.push({ value: key, description });\n                }\n            });\n        }\n        return enumOptions.length > 0\n            ? { type: 'enum', data: enumOptions[0].value, options: enumOptions }\n            : undefined;\n    };\n}\nfunction createObjectKeySuggester(element) {\n    const { objectProperties } = element.setting;\n    const allStaticKeys = ( Object.keys(objectProperties ?? {}));\n    return keys => {\n        const existingKeys = ( new Set(keys));\n        const enumOptions = [];\n        allStaticKeys.forEach(staticKey => {\n            if (!( existingKeys.has(staticKey))) {\n                enumOptions.push({ value: staticKey, description: objectProperties[staticKey].description });\n            }\n        });\n        return enumOptions.length > 0\n            ? { type: 'enum', data: enumOptions[0].value, options: enumOptions }\n            : undefined;\n    };\n}\nfunction createObjectValueSuggester(element) {\n    const { objectProperties, objectPatternProperties, objectAdditionalProperties } = element.setting;\n    const patternsAndSchemas = ( Object\n        .entries(objectPatternProperties ?? {})\n        .map(([pattern, schema]) => ({\n        pattern: ( new RegExp(pattern)),\n        schema\n    })));\n    return (key) => {\n        let suggestedSchema;\n        if (isDefined(objectProperties) && key in objectProperties) {\n            suggestedSchema = objectProperties[key];\n        }\n        const patternSchema = suggestedSchema ?? patternsAndSchemas.find(({ pattern }) => pattern.test(key))?.schema;\n        if (isDefined(patternSchema)) {\n            suggestedSchema = patternSchema;\n        }\n        else if (isDefined(objectAdditionalProperties) && typeof objectAdditionalProperties === 'object') {\n            suggestedSchema = objectAdditionalProperties;\n        }\n        if (isDefined(suggestedSchema)) {\n            const type = getObjectValueType(suggestedSchema);\n            if (type === 'boolean') {\n                return { type, data: suggestedSchema.default ?? true };\n            }\n            else if (type === 'enum') {\n                const options = getEnumOptionsFromSchema(suggestedSchema);\n                return { type, data: suggestedSchema.default ?? options[0].value, options };\n            }\n            else {\n                return { type, data: suggestedSchema.default ?? '' };\n            }\n        }\n        return;\n    };\n}\nfunction isNonNullableNumericType(type) {\n    return type === 'number' || type === 'integer';\n}\nfunction parseNumericObjectValues(dataElement, v) {\n    const newRecord = {};\n    for (const key in v) {\n        let keyMatchesNumericProperty;\n        const patternProperties = dataElement.setting.objectPatternProperties;\n        const properties = dataElement.setting.objectProperties;\n        const additionalProperties = dataElement.setting.objectAdditionalProperties;\n        if (properties) {\n            for (const propKey in properties) {\n                if (propKey === key) {\n                    keyMatchesNumericProperty = isNonNullableNumericType(properties[propKey].type);\n                    break;\n                }\n            }\n        }\n        if (keyMatchesNumericProperty === undefined && patternProperties) {\n            for (const patternKey in patternProperties) {\n                if (key.match(patternKey)) {\n                    keyMatchesNumericProperty = isNonNullableNumericType(patternProperties[patternKey].type);\n                    break;\n                }\n            }\n        }\n        if (keyMatchesNumericProperty === undefined && additionalProperties && typeof additionalProperties !== 'boolean') {\n            if (isNonNullableNumericType(additionalProperties.type)) {\n                keyMatchesNumericProperty = true;\n            }\n        }\n        newRecord[key] = keyMatchesNumericProperty ? Number(v[key]) : v[key];\n    }\n    return newRecord;\n}\nfunction getListDisplayValue(element) {\n    if (!element.value || !Array.isArray(element.value)) {\n        return [];\n    }\n    if (element.setting.arrayItemType === 'enum') {\n        let enumOptions = [];\n        if (element.setting.enum) {\n            enumOptions = ( element.setting.enum.map((setting, i) => {\n                return {\n                    value: setting,\n                    description: element.setting.enumDescriptions?.[i]\n                };\n            }));\n        }\n        return ( element.value.map((key) => {\n            return {\n                value: {\n                    type: 'enum',\n                    data: key,\n                    options: enumOptions\n                }\n            };\n        }));\n    }\n    else {\n        return ( element.value.map((key) => {\n            return {\n                value: {\n                    type: 'string',\n                    data: key\n                }\n            };\n        }));\n    }\n}\nfunction getShowAddButtonList(dataElement, listDisplayValue) {\n    if (dataElement.setting.enum && dataElement.setting.uniqueItems) {\n        return dataElement.setting.enum.length - listDisplayValue.length > 0;\n    }\n    else {\n        return true;\n    }\n}\nfunction resolveSettingsTree(tocData, coreSettingsGroups, logService) {\n    const allSettings = getFlatSettings(coreSettingsGroups);\n    return {\n        tree: _resolveSettingsTree(tocData, allSettings, logService),\n        leftoverSettings: allSettings\n    };\n}\nfunction resolveConfiguredUntrustedSettings(groups, target, languageFilter, configurationService) {\n    const allSettings = getFlatSettings(groups);\n    return [...allSettings].filter(setting => setting.restricted && inspectSetting(setting.key, target, languageFilter, configurationService).isConfigured);\n}\nfunction compareNullableIntegers(a, b) {\n    const firstElem = a ?? Number.MAX_SAFE_INTEGER;\n    const secondElem = b ?? Number.MAX_SAFE_INTEGER;\n    return firstElem - secondElem;\n}\nasync function createTocTreeForExtensionSettings(extensionService, groups) {\n    const extGroupTree = ( new Map());\n    const addEntryToTree = (extensionId, extensionName, childEntry) => {\n        if (!( extGroupTree.has(extensionId))) {\n            const rootEntry = {\n                id: extensionId,\n                label: extensionName,\n                children: []\n            };\n            extGroupTree.set(extensionId, rootEntry);\n        }\n        extGroupTree.get(extensionId).children.push(childEntry);\n    };\n    const processGroupEntry = async (group) => {\n        const flatSettings = ( group.sections.map(section => section.settings)).flat();\n        const extensionId = group.extensionInfo.id;\n        const extension = await extensionService.getExtension(extensionId);\n        const extensionName = extension?.displayName ?? extension?.name ?? extensionId;\n        const childEntry = {\n            id: group.id || group.title,\n            label: group.title,\n            order: group.order,\n            settings: flatSettings\n        };\n        addEntryToTree(extensionId, extensionName, childEntry);\n    };\n    const processPromises = ( groups.map(g => processGroupEntry(g)));\n    return Promise.all(processPromises).then(() => {\n        const extGroups = [];\n        for (const extensionRootEntry of ( extGroupTree.values())) {\n            for (const child of extensionRootEntry.children) {\n                child.settings?.sort((a, b) => {\n                    return compareNullableIntegers(a.order, b.order);\n                });\n            }\n            if (extensionRootEntry.children.length === 1) {\n                extGroups.push({\n                    id: extensionRootEntry.id,\n                    label: extensionRootEntry.children[0].label,\n                    settings: extensionRootEntry.children[0].settings\n                });\n            }\n            else {\n                extensionRootEntry.children.sort((a, b) => {\n                    return compareNullableIntegers(a.order, b.order);\n                });\n                const ungroupedChild = extensionRootEntry.children.find(child => child.label === extensionRootEntry.label);\n                if (ungroupedChild && !ungroupedChild.children) {\n                    const groupedChildren = extensionRootEntry.children.filter(child => child !== ungroupedChild);\n                    extGroups.push({\n                        id: extensionRootEntry.id,\n                        label: extensionRootEntry.label,\n                        settings: ungroupedChild.settings,\n                        children: groupedChildren\n                    });\n                }\n                else {\n                    extGroups.push(extensionRootEntry);\n                }\n            }\n        }\n        extGroups.sort((a, b) => a.label.localeCompare(b.label));\n        return {\n            id: 'extensions',\n            label: ( localize('extensions', \"Extensions\")),\n            children: extGroups\n        };\n    });\n}\nfunction _resolveSettingsTree(tocData, allSettings, logService) {\n    let children;\n    if (tocData.children) {\n        children = ( tocData.children\n            .map(child => _resolveSettingsTree(child, allSettings, logService)))\n            .filter(child => child.children?.length || child.settings?.length);\n    }\n    let settings;\n    if (tocData.settings) {\n        settings = ( tocData.settings.map(pattern => getMatchingSettings(allSettings, pattern, logService))).flat();\n    }\n    if (!children && !settings) {\n        throw new Error(`TOC node has no child groups or settings: ${tocData.id}`);\n    }\n    return {\n        id: tocData.id,\n        label: tocData.label,\n        children,\n        settings\n    };\n}\nconst knownDynamicSettingGroups = [\n    /^settingsSync\\..*/,\n    /^sync\\..*/,\n    /^workbench.fontAliasing$/,\n];\nfunction getMatchingSettings(allSettings, pattern, logService) {\n    const result = [];\n    allSettings.forEach(s => {\n        if (settingMatches(s, pattern)) {\n            result.push(s);\n            allSettings.delete(s);\n        }\n    });\n    if (!result.length && !( knownDynamicSettingGroups.some(r => r.test(pattern)))) {\n        logService.warn(`Settings pattern \"${pattern}\" doesn't match any settings`);\n    }\n    return result.sort((a, b) => a.key.localeCompare(b.key));\n}\nconst settingPatternCache = ( new Map());\nfunction createSettingMatchRegExp(pattern) {\n    pattern = escapeRegExpCharacters(pattern)\n        .replace(/\\\\\\*/g, '.*');\n    return ( new RegExp(`^${pattern}$`, 'i'));\n}\nfunction settingMatches(s, pattern) {\n    let regExp = settingPatternCache.get(pattern);\n    if (!regExp) {\n        regExp = createSettingMatchRegExp(pattern);\n        settingPatternCache.set(pattern, regExp);\n    }\n    return regExp.test(s.key);\n}\nfunction getFlatSettings(settingsGroups) {\n    const result = ( new Set());\n    for (const group of settingsGroups) {\n        for (const section of group.sections) {\n            for (const s of section.settings) {\n                if (!s.overrides || !s.overrides.length) {\n                    result.add(s);\n                }\n            }\n        }\n    }\n    return result;\n}\nconst SETTINGS_TEXT_TEMPLATE_ID = 'settings.text.template';\nconst SETTINGS_MULTILINE_TEXT_TEMPLATE_ID = 'settings.multilineText.template';\nconst SETTINGS_NUMBER_TEMPLATE_ID = 'settings.number.template';\nconst SETTINGS_ENUM_TEMPLATE_ID = 'settings.enum.template';\nconst SETTINGS_BOOL_TEMPLATE_ID = 'settings.bool.template';\nconst SETTINGS_ARRAY_TEMPLATE_ID = 'settings.array.template';\nconst SETTINGS_EXCLUDE_TEMPLATE_ID = 'settings.exclude.template';\nconst SETTINGS_INCLUDE_TEMPLATE_ID = 'settings.include.template';\nconst SETTINGS_OBJECT_TEMPLATE_ID = 'settings.object.template';\nconst SETTINGS_BOOL_OBJECT_TEMPLATE_ID = 'settings.boolObject.template';\nconst SETTINGS_COMPLEX_TEMPLATE_ID = 'settings.complex.template';\nconst SETTINGS_NEW_EXTENSIONS_TEMPLATE_ID = 'settings.newExtensions.template';\nconst SETTINGS_ELEMENT_TEMPLATE_ID = 'settings.group.template';\nconst SETTINGS_EXTENSION_TOGGLE_TEMPLATE_ID = 'settings.extensionToggle.template';\nfunction removeChildrenFromTabOrder(node) {\n    const focusableElements = node.querySelectorAll(`\n\t\t[tabindex=\"0\"],\n\t\tinput:not([tabindex=\"-1\"]),\n\t\tselect:not([tabindex=\"-1\"]),\n\t\ttextarea:not([tabindex=\"-1\"]),\n\t\ta:not([tabindex=\"-1\"]),\n\t\tbutton:not([tabindex=\"-1\"]),\n\t\tarea:not([tabindex=\"-1\"])\n\t`);\n    focusableElements.forEach(element => {\n        element.setAttribute(AbstractSettingRenderer.ELEMENT_FOCUSABLE_ATTR, 'true');\n        element.setAttribute('tabindex', '-1');\n    });\n}\nfunction addChildrenToTabOrder(node) {\n    const focusableElements = node.querySelectorAll(`[${AbstractSettingRenderer.ELEMENT_FOCUSABLE_ATTR}=\"true\"]`);\n    focusableElements.forEach(element => {\n        element.removeAttribute(AbstractSettingRenderer.ELEMENT_FOCUSABLE_ATTR);\n        element.setAttribute('tabindex', '0');\n    });\n}\nlet AbstractSettingRenderer = class AbstractSettingRenderer extends Disposable {\n    static { this.CONTROL_CLASS = 'setting-control-focus-target'; }\n    static { this.CONTROL_SELECTOR = '.' + AbstractSettingRenderer.CONTROL_CLASS; }\n    static { this.CONTENTS_CLASS = 'setting-item-contents'; }\n    static { this.CONTENTS_SELECTOR = '.' + AbstractSettingRenderer.CONTENTS_CLASS; }\n    static { this.ALL_ROWS_SELECTOR = '.monaco-list-row'; }\n    static { this.SETTING_KEY_ATTR = 'data-key'; }\n    static { this.SETTING_ID_ATTR = 'data-id'; }\n    static { this.ELEMENT_FOCUSABLE_ATTR = 'data-focusable'; }\n    constructor(settingActions, disposableActionFactory, _themeService, _contextViewService, _openerService, _instantiationService, _commandService, _contextMenuService, _keybindingService, _configService, _extensionsService, _extensionsWorkbenchService, _productService, _telemetryService) {\n        super();\n        this.settingActions = settingActions;\n        this.disposableActionFactory = disposableActionFactory;\n        this._themeService = _themeService;\n        this._contextViewService = _contextViewService;\n        this._openerService = _openerService;\n        this._instantiationService = _instantiationService;\n        this._commandService = _commandService;\n        this._contextMenuService = _contextMenuService;\n        this._keybindingService = _keybindingService;\n        this._configService = _configService;\n        this._extensionsService = _extensionsService;\n        this._extensionsWorkbenchService = _extensionsWorkbenchService;\n        this._productService = _productService;\n        this._telemetryService = _telemetryService;\n        this._onDidClickOverrideElement = this._register(( new Emitter()));\n        this.onDidClickOverrideElement = this._onDidClickOverrideElement.event;\n        this._onDidChangeSetting = this._register(( new Emitter()));\n        this.onDidChangeSetting = this._onDidChangeSetting.event;\n        this._onDidOpenSettings = this._register(( new Emitter()));\n        this.onDidOpenSettings = this._onDidOpenSettings.event;\n        this._onDidClickSettingLink = this._register(( new Emitter()));\n        this.onDidClickSettingLink = this._onDidClickSettingLink.event;\n        this._onDidFocusSetting = this._register(( new Emitter()));\n        this.onDidFocusSetting = this._onDidFocusSetting.event;\n        this._onDidChangeIgnoredSettings = this._register(( new Emitter()));\n        this.onDidChangeIgnoredSettings = this._onDidChangeIgnoredSettings.event;\n        this._onDidChangeSettingHeight = this._register(( new Emitter()));\n        this.onDidChangeSettingHeight = this._onDidChangeSettingHeight.event;\n        this._onApplyFilter = this._register(( new Emitter()));\n        this.onApplyFilter = this._onApplyFilter.event;\n        this.markdownRenderer = this._register(_instantiationService.createInstance(MarkdownRenderer, {}));\n        this.ignoredSettings = getIgnoredSettings(getDefaultIgnoredSettings(), this._configService);\n        this._register(this._configService.onDidChangeConfiguration(e => {\n            this.ignoredSettings = getIgnoredSettings(getDefaultIgnoredSettings(), this._configService);\n            this._onDidChangeIgnoredSettings.fire();\n        }));\n    }\n    renderCommonTemplate(tree, _container, typeClass) {\n        _container.classList.add('setting-item');\n        _container.classList.add('setting-item-' + typeClass);\n        const toDispose = ( new DisposableStore());\n        const container = dom.append(_container, $(AbstractSettingRenderer.CONTENTS_SELECTOR));\n        container.classList.add('settings-row-inner-container');\n        const titleElement = dom.append(container, $('.setting-item-title'));\n        const labelCategoryContainer = dom.append(titleElement, $('.setting-item-cat-label-container'));\n        const categoryElement = dom.append(labelCategoryContainer, $('span.setting-item-category'));\n        const labelElementContainer = dom.append(labelCategoryContainer, $('span.setting-item-label'));\n        const labelElement = ( new SimpleIconLabel(labelElementContainer));\n        const indicatorsLabel = this._instantiationService.createInstance(SettingsTreeIndicatorsLabel, titleElement);\n        toDispose.add(indicatorsLabel);\n        const descriptionElement = dom.append(container, $('.setting-item-description'));\n        const modifiedIndicatorElement = dom.append(container, $('.setting-item-modified-indicator'));\n        modifiedIndicatorElement.title = ( localize('modified', \"The setting has been configured in the current scope.\"));\n        const valueElement = dom.append(container, $('.setting-item-value'));\n        const controlElement = dom.append(valueElement, $('div.setting-item-control'));\n        const deprecationWarningElement = dom.append(container, $('.setting-item-deprecation-message'));\n        const toolbarContainer = dom.append(container, $('.setting-toolbar-container'));\n        const toolbar = this.renderSettingToolbar(toolbarContainer);\n        const template = {\n            toDispose,\n            elementDisposables: toDispose.add(( new DisposableStore())),\n            containerElement: container,\n            categoryElement,\n            labelElement,\n            descriptionElement,\n            controlElement,\n            deprecationWarningElement,\n            indicatorsLabel,\n            toolbar\n        };\n        toDispose.add(dom.addDisposableListener(controlElement, dom.EventType.MOUSE_DOWN, e => e.stopPropagation()));\n        toDispose.add(dom.addDisposableListener(titleElement, dom.EventType.MOUSE_ENTER, e => container.classList.add('mouseover')));\n        toDispose.add(dom.addDisposableListener(titleElement, dom.EventType.MOUSE_LEAVE, e => container.classList.remove('mouseover')));\n        return template;\n    }\n    addSettingElementFocusHandler(template) {\n        const focusTracker = dom.trackFocus(template.containerElement);\n        template.toDispose.add(focusTracker);\n        focusTracker.onDidBlur(() => {\n            if (template.containerElement.classList.contains('focused')) {\n                template.containerElement.classList.remove('focused');\n            }\n        });\n        focusTracker.onDidFocus(() => {\n            template.containerElement.classList.add('focused');\n            if (template.context) {\n                this._onDidFocusSetting.fire(template.context);\n            }\n        });\n    }\n    renderSettingToolbar(container) {\n        const toggleMenuKeybinding = this._keybindingService.lookupKeybinding(SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU);\n        let toggleMenuTitle = ( localize('settingsContextMenuTitle', \"More Actions... \"));\n        if (toggleMenuKeybinding) {\n            toggleMenuTitle += ` (${toggleMenuKeybinding && toggleMenuKeybinding.getLabel()})`;\n        }\n        const toolbar = ( new ToolBar(container, this._contextMenuService, {\n            toggleMenuTitle,\n            renderDropdownAsChildElement: !isIOS,\n            moreIcon: settingsMoreActionIcon\n        }));\n        return toolbar;\n    }\n    renderSettingElement(node, index, template) {\n        const element = node.element;\n        template.context = element;\n        template.toolbar.context = element;\n        const actions = this.disposableActionFactory(element.setting, element.settingsTarget);\n        actions.forEach(a => isDisposable(a) && template.elementDisposables.add(a));\n        template.toolbar.setActions([], [...this.settingActions, ...actions]);\n        const setting = element.setting;\n        template.containerElement.classList.toggle('is-configured', element.isConfigured);\n        template.containerElement.setAttribute(AbstractSettingRenderer.SETTING_KEY_ATTR, element.setting.key);\n        template.containerElement.setAttribute(AbstractSettingRenderer.SETTING_ID_ATTR, element.id);\n        const titleTooltip = setting.key + (element.isConfigured ? ' - Modified' : '');\n        template.categoryElement.textContent = element.displayCategory ? (element.displayCategory + ': ') : '';\n        template.categoryElement.title = titleTooltip;\n        template.labelElement.text = element.displayLabel;\n        template.labelElement.title = titleTooltip;\n        template.descriptionElement.innerText = '';\n        if (element.setting.descriptionIsMarkdown) {\n            const renderedDescription = this.renderSettingMarkdown(element, template.containerElement, element.description, template.elementDisposables);\n            template.descriptionElement.appendChild(renderedDescription);\n        }\n        else {\n            template.descriptionElement.innerText = element.description;\n        }\n        template.indicatorsLabel.updateScopeOverrides(element, this._onDidClickOverrideElement, this._onApplyFilter);\n        template.elementDisposables.add(this._configService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(APPLY_ALL_PROFILES_SETTING)) {\n                template.indicatorsLabel.updateScopeOverrides(element, this._onDidClickOverrideElement, this._onApplyFilter);\n            }\n        }));\n        const onChange = (value) => this._onDidChangeSetting.fire({\n            key: element.setting.key,\n            value,\n            type: template.context.valueType,\n            manualReset: false,\n            scope: element.setting.scope\n        });\n        const deprecationText = element.setting.deprecationMessage || '';\n        if (deprecationText && element.setting.deprecationMessageIsMarkdown) {\n            template.deprecationWarningElement.innerText = '';\n            template.deprecationWarningElement.appendChild(this.renderSettingMarkdown(element, template.containerElement, element.setting.deprecationMessage, template.elementDisposables));\n        }\n        else {\n            template.deprecationWarningElement.innerText = deprecationText;\n        }\n        template.deprecationWarningElement.prepend($('.codicon.codicon-error'));\n        template.containerElement.classList.toggle('is-deprecated', !!deprecationText);\n        this.renderValue(element, template, onChange);\n        template.indicatorsLabel.updateWorkspaceTrust(element);\n        template.indicatorsLabel.updateSyncIgnored(element, this.ignoredSettings);\n        template.indicatorsLabel.updateDefaultOverrideIndicator(element);\n        template.elementDisposables.add(this.onDidChangeIgnoredSettings(() => {\n            template.indicatorsLabel.updateSyncIgnored(element, this.ignoredSettings);\n        }));\n        this.updateSettingTabbable(element, template);\n        template.elementDisposables.add(element.onDidChangeTabbable(() => {\n            this.updateSettingTabbable(element, template);\n        }));\n    }\n    updateSettingTabbable(element, template) {\n        if (element.tabbable) {\n            addChildrenToTabOrder(template.containerElement);\n        }\n        else {\n            removeChildrenFromTabOrder(template.containerElement);\n        }\n    }\n    renderSettingMarkdown(element, container, text, disposables) {\n        text = fixSettingLinks(text);\n        const renderedMarkdown = this.markdownRenderer.render({ value: text, isTrusted: true }, {\n            actionHandler: {\n                callback: (content) => {\n                    if (content.startsWith('#')) {\n                        const e = {\n                            source: element,\n                            targetKey: content.substring(1)\n                        };\n                        this._onDidClickSettingLink.fire(e);\n                    }\n                    else {\n                        this._openerService.open(content, { allowCommands: true }).catch(onUnexpectedError);\n                    }\n                },\n                disposables\n            },\n            asyncRenderCallback: () => {\n                const height = container.clientHeight;\n                if (height) {\n                    this._onDidChangeSettingHeight.fire({ element, height });\n                }\n            },\n        });\n        disposables.add(renderedMarkdown);\n        renderedMarkdown.element.classList.add('setting-item-markdown');\n        cleanRenderedMarkdown(renderedMarkdown.element);\n        return renderedMarkdown.element;\n    }\n    disposeTemplate(template) {\n        template.toDispose.dispose();\n    }\n    disposeElement(_element, _index, template, _height) {\n        template.elementDisposables?.clear();\n    }\n};\nAbstractSettingRenderer = ( __decorate([\n    ( __param(2, IThemeService)),\n    ( __param(3, IContextViewService)),\n    ( __param(4, IOpenerService)),\n    ( __param(5, IInstantiationService)),\n    ( __param(6, ICommandService)),\n    ( __param(7, IContextMenuService)),\n    ( __param(8, IKeybindingService)),\n    ( __param(9, IConfigurationService)),\n    ( __param(10, IExtensionService)),\n    ( __param(11, IExtensionsWorkbenchService)),\n    ( __param(12, IProductService)),\n    ( __param(13, ITelemetryService))\n], AbstractSettingRenderer));\nclass SettingGroupRenderer {\n    constructor() {\n        this.templateId = SETTINGS_ELEMENT_TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        container.classList.add('group-title');\n        const template = {\n            parent: container,\n            toDispose: ( new DisposableStore())\n        };\n        return template;\n    }\n    renderElement(element, index, templateData) {\n        templateData.parent.innerText = '';\n        const labelElement = dom.append(templateData.parent, $('div.settings-group-title-label.settings-row-inner-container'));\n        labelElement.classList.add(`settings-group-level-${element.element.level}`);\n        labelElement.textContent = element.element.label;\n        if (element.element.isFirstGroup) {\n            labelElement.classList.add('settings-group-first');\n        }\n    }\n    disposeTemplate(templateData) {\n    }\n}\nlet SettingNewExtensionsRenderer = class SettingNewExtensionsRenderer {\n    constructor(_commandService) {\n        this._commandService = _commandService;\n        this.templateId = SETTINGS_NEW_EXTENSIONS_TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        const toDispose = ( new DisposableStore());\n        container.classList.add('setting-item-new-extensions');\n        const button = ( new Button(container, { title: true, ...defaultButtonStyles }));\n        toDispose.add(button);\n        toDispose.add(button.onDidClick(() => {\n            if (template.context) {\n                this._commandService.executeCommand('workbench.extensions.action.showExtensionsWithIds', template.context.extensionIds);\n            }\n        }));\n        button.label = ( localize('newExtensionsButtonLabel', \"Show matching extensions\"));\n        button.element.classList.add('settings-new-extensions-button');\n        const template = {\n            button,\n            toDispose\n        };\n        return template;\n    }\n    renderElement(element, index, templateData) {\n        templateData.context = element.element;\n    }\n    disposeTemplate(template) {\n        dispose(template.toDispose);\n    }\n};\nSettingNewExtensionsRenderer = ( __decorate([\n    ( __param(0, ICommandService))\n], SettingNewExtensionsRenderer));\nclass SettingComplexRenderer extends AbstractSettingRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_COMPLEX_TEMPLATE_ID;\n    }\n    static { this.EDIT_IN_JSON_LABEL = ( localize('editInSettingsJson', \"Edit in settings.json\")); }\n    renderTemplate(container) {\n        const common = this.renderCommonTemplate(null, container, 'complex');\n        const openSettingsButton = dom.append(common.controlElement, $('a.edit-in-settings-button'));\n        openSettingsButton.classList.add(AbstractSettingRenderer.CONTROL_CLASS);\n        openSettingsButton.role = 'button';\n        const validationErrorMessageElement = $('.setting-item-validation-message');\n        common.containerElement.appendChild(validationErrorMessageElement);\n        const template = {\n            ...common,\n            button: openSettingsButton,\n            validationErrorMessageElement\n        };\n        this.addSettingElementFocusHandler(template);\n        return template;\n    }\n    renderElement(element, index, templateData) {\n        super.renderSettingElement(element, index, templateData);\n    }\n    renderValue(dataElement, template, onChange) {\n        const plainKey = getLanguageTagSettingPlainKey(dataElement.setting.key);\n        const editLanguageSettingLabel = ( localize('editLanguageSettingLabel', \"Edit settings for {0}\", plainKey));\n        const isLanguageTagSetting = dataElement.setting.isLanguageTagSetting;\n        template.button.textContent = isLanguageTagSetting\n            ? editLanguageSettingLabel\n            : SettingComplexRenderer.EDIT_IN_JSON_LABEL;\n        const onClickOrKeydown = (e) => {\n            if (isLanguageTagSetting) {\n                this._onApplyFilter.fire(`@${LANGUAGE_SETTING_TAG}${plainKey}`);\n            }\n            else {\n                this._onDidOpenSettings.fire(dataElement.setting.key);\n            }\n            e.preventDefault();\n            e.stopPropagation();\n        };\n        template.elementDisposables.add(dom.addDisposableListener(template.button, dom.EventType.CLICK, (e) => {\n            onClickOrKeydown(e);\n        }));\n        template.elementDisposables.add(dom.addDisposableListener(template.button, dom.EventType.KEY_DOWN, (e) => {\n            const ev = ( new StandardKeyboardEvent(e));\n            if (ev.equals(10 ) || ev.equals(3 )) {\n                onClickOrKeydown(e);\n            }\n        }));\n        this.renderValidations(dataElement, template);\n        if (isLanguageTagSetting) {\n            template.button.setAttribute('aria-label', editLanguageSettingLabel);\n        }\n        else {\n            template.button.setAttribute('aria-label', `${SettingComplexRenderer.EDIT_IN_JSON_LABEL}: ${dataElement.setting.key}`);\n        }\n    }\n    renderValidations(dataElement, template) {\n        const errMsg = dataElement.isConfigured && getInvalidTypeError(dataElement.value, dataElement.setting.type);\n        if (errMsg) {\n            template.containerElement.classList.add('invalid-input');\n            template.validationErrorMessageElement.innerText = errMsg;\n            return;\n        }\n        template.containerElement.classList.remove('invalid-input');\n    }\n}\nclass SettingArrayRenderer extends AbstractSettingRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_ARRAY_TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        const common = this.renderCommonTemplate(null, container, 'list');\n        const descriptionElement = common.containerElement.querySelector('.setting-item-description');\n        const validationErrorMessageElement = $('.setting-item-validation-message');\n        descriptionElement.after(validationErrorMessageElement);\n        const listWidget = this._instantiationService.createInstance(ListSettingWidget, common.controlElement);\n        listWidget.domNode.classList.add(AbstractSettingRenderer.CONTROL_CLASS);\n        common.toDispose.add(listWidget);\n        const template = {\n            ...common,\n            listWidget,\n            validationErrorMessageElement\n        };\n        this.addSettingElementFocusHandler(template);\n        common.toDispose.add(listWidget.onDidChangeList(e => {\n            const newList = this.computeNewList(template, e);\n            template.onChange?.(newList);\n        }));\n        return template;\n    }\n    computeNewList(template, e) {\n        if (template.context) {\n            let newValue = [];\n            if (Array.isArray(template.context.scopeValue)) {\n                newValue = [...template.context.scopeValue];\n            }\n            else if (Array.isArray(template.context.value)) {\n                newValue = [...template.context.value];\n            }\n            if (e.sourceIndex !== undefined) {\n                const sourceIndex = e.sourceIndex;\n                const targetIndex = e.targetIndex;\n                const splicedElem = newValue.splice(sourceIndex, 1)[0];\n                newValue.splice(targetIndex, 0, splicedElem);\n            }\n            else if (e.targetIndex !== undefined) {\n                const itemValueData = e.item?.value.data.toString() ?? '';\n                if (!e.item?.value.data && e.originalItem.value.data && e.targetIndex > -1) {\n                    newValue.splice(e.targetIndex, 1);\n                }\n                else if (e.item?.value.data && e.originalItem.value.data) {\n                    if (e.targetIndex > -1) {\n                        newValue[e.targetIndex] = itemValueData;\n                    }\n                    else {\n                        newValue.push(itemValueData);\n                    }\n                }\n                else if (e.item?.value.data && !e.originalItem.value.data && e.targetIndex >= newValue.length) {\n                    newValue.push(itemValueData);\n                }\n            }\n            if (template.context.defaultValue &&\n                Array.isArray(template.context.defaultValue) &&\n                template.context.defaultValue.length === newValue.length &&\n                template.context.defaultValue.join() === newValue.join()) {\n                return undefined;\n            }\n            return newValue;\n        }\n        return undefined;\n    }\n    renderElement(element, index, templateData) {\n        super.renderSettingElement(element, index, templateData);\n    }\n    renderValue(dataElement, template, onChange) {\n        const value = getListDisplayValue(dataElement);\n        const keySuggester = dataElement.setting.enum ? createArraySuggester(dataElement) : undefined;\n        template.listWidget.setValue(value, {\n            showAddButton: getShowAddButtonList(dataElement, value),\n            keySuggester\n        });\n        template.context = dataElement;\n        template.elementDisposables.add(toDisposable(() => {\n            template.listWidget.cancelEdit();\n        }));\n        template.onChange = (v) => {\n            if (v && !renderArrayValidations(dataElement, template, v, false)) {\n                const itemType = dataElement.setting.arrayItemType;\n                const arrToSave = isNonNullableNumericType(itemType) ? ( v.map(a => +a)) : v;\n                onChange(arrToSave);\n            }\n            else {\n                onChange(v);\n            }\n        };\n        renderArrayValidations(dataElement, template, ( value.map(v => ( v.value.data.toString()))), true);\n    }\n}\nclass AbstractSettingObjectRenderer extends AbstractSettingRenderer {\n    renderTemplateWithWidget(common, widget) {\n        widget.domNode.classList.add(AbstractSettingRenderer.CONTROL_CLASS);\n        common.toDispose.add(widget);\n        const descriptionElement = common.containerElement.querySelector('.setting-item-description');\n        const validationErrorMessageElement = $('.setting-item-validation-message');\n        descriptionElement.after(validationErrorMessageElement);\n        const template = {\n            ...common,\n            validationErrorMessageElement\n        };\n        if (widget instanceof ObjectSettingCheckboxWidget) {\n            template.objectCheckboxWidget = widget;\n        }\n        else {\n            template.objectDropdownWidget = widget;\n        }\n        this.addSettingElementFocusHandler(template);\n        common.toDispose.add(widget.onDidChangeList(e => {\n            this.onDidChangeObject(template, e);\n        }));\n        return template;\n    }\n    onDidChangeObject(template, e) {\n        const widget = (template.objectCheckboxWidget ?? template.objectDropdownWidget);\n        if (template.context) {\n            const defaultValue = typeof template.context.defaultValue === 'object'\n                ? template.context.defaultValue ?? {}\n                : {};\n            const scopeValue = typeof template.context.scopeValue === 'object'\n                ? template.context.scopeValue ?? {}\n                : {};\n            const newValue = {};\n            const newItems = [];\n            widget.items.forEach((item, idx) => {\n                if (isDefined(e.item) && e.targetIndex === idx) {\n                    newValue[e.item.key.data] = e.item.value.data;\n                    newItems.push(e.item);\n                }\n                else if (isUndefinedOrNull(e.item) || e.item.key.data !== item.key.data) {\n                    newValue[item.key.data] = item.value.data;\n                    newItems.push(item);\n                }\n            });\n            if (isUndefinedOrNull(e.item)) {\n                delete newValue[e.originalItem.key.data];\n                const itemToDelete = newItems.findIndex(item => item.key.data === e.originalItem.key.data);\n                const defaultItemValue = defaultValue[e.originalItem.key.data];\n                if (isUndefinedOrNull(defaultValue[e.originalItem.key.data]) && itemToDelete > -1) {\n                    newItems.splice(itemToDelete, 1);\n                }\n                else if (itemToDelete > -1) {\n                    newItems[itemToDelete].value.data = defaultItemValue;\n                }\n            }\n            else if (widget.isItemNew(e.originalItem) && e.item.key.data !== '') {\n                newValue[e.item.key.data] = e.item.value.data;\n                newItems.push(e.item);\n            }\n            Object.entries(newValue).forEach(([key, value]) => {\n                if (scopeValue[key] !== value && defaultValue[key] === value) {\n                    delete newValue[key];\n                }\n            });\n            const newObject = ( Object.keys(newValue)).length === 0 ? undefined : newValue;\n            if (template.objectCheckboxWidget) {\n                template.objectCheckboxWidget.setValue(newItems);\n            }\n            else {\n                template.objectDropdownWidget.setValue(newItems);\n            }\n            template.onChange?.(newObject);\n        }\n    }\n    renderElement(element, index, templateData) {\n        super.renderSettingElement(element, index, templateData);\n    }\n}\nclass SettingObjectRenderer extends AbstractSettingObjectRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_OBJECT_TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        const common = this.renderCommonTemplate(null, container, 'list');\n        const widget = this._instantiationService.createInstance(ObjectSettingDropdownWidget, common.controlElement);\n        return this.renderTemplateWithWidget(common, widget);\n    }\n    renderValue(dataElement, template, onChange) {\n        const items = getObjectDisplayValue(dataElement);\n        const { key, objectProperties, objectPatternProperties, objectAdditionalProperties } = dataElement.setting;\n        template.objectDropdownWidget.setValue(items, {\n            settingKey: key,\n            showAddButton: objectAdditionalProperties === false\n                ? (!areAllPropertiesDefined(( Object.keys(objectProperties ?? {})), items) ||\n                    isDefined(objectPatternProperties))\n                : true,\n            keySuggester: createObjectKeySuggester(dataElement),\n            valueSuggester: createObjectValueSuggester(dataElement)\n        });\n        template.context = dataElement;\n        template.elementDisposables.add(toDisposable(() => {\n            template.objectDropdownWidget.cancelEdit();\n        }));\n        template.onChange = (v) => {\n            if (v && !renderArrayValidations(dataElement, template, v, false)) {\n                const parsedRecord = parseNumericObjectValues(dataElement, v);\n                onChange(parsedRecord);\n            }\n            else {\n                onChange(v);\n            }\n        };\n        renderArrayValidations(dataElement, template, dataElement.value, true);\n    }\n}\nclass SettingBoolObjectRenderer extends AbstractSettingObjectRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_BOOL_OBJECT_TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        const common = this.renderCommonTemplate(null, container, 'list');\n        const widget = this._instantiationService.createInstance(ObjectSettingCheckboxWidget, common.controlElement);\n        return this.renderTemplateWithWidget(common, widget);\n    }\n    onDidChangeObject(template, e) {\n        if (template.context) {\n            super.onDidChangeObject(template, e);\n            this._onDidFocusSetting.fire(template.context);\n        }\n    }\n    renderValue(dataElement, template, onChange) {\n        const items = getObjectDisplayValue(dataElement);\n        const { key } = dataElement.setting;\n        template.objectCheckboxWidget.setValue(items, {\n            settingKey: key\n        });\n        template.context = dataElement;\n        template.onChange = (v) => {\n            onChange(v);\n        };\n    }\n}\nclass SettingIncludeExcludeRenderer extends AbstractSettingRenderer {\n    renderTemplate(container) {\n        const common = this.renderCommonTemplate(null, container, 'list');\n        const includeExcludeWidget = this._instantiationService.createInstance(this.isExclude() ? ExcludeSettingWidget : IncludeSettingWidget, common.controlElement);\n        includeExcludeWidget.domNode.classList.add(AbstractSettingRenderer.CONTROL_CLASS);\n        common.toDispose.add(includeExcludeWidget);\n        const template = {\n            ...common,\n            includeExcludeWidget\n        };\n        this.addSettingElementFocusHandler(template);\n        common.toDispose.add(includeExcludeWidget.onDidChangeList(e => this.onDidChangeIncludeExclude(template, e)));\n        return template;\n    }\n    onDidChangeIncludeExclude(template, e) {\n        if (template.context) {\n            const newValue = { ...template.context.scopeValue };\n            if (( e.originalItem.value.data.toString()) in template.context.defaultValue) {\n                newValue[( e.originalItem.value.data.toString())] = false;\n            }\n            else {\n                delete newValue[( e.originalItem.value.data.toString())];\n            }\n            if (e.item?.value) {\n                if (( e.item.value.data.toString()) in template.context.defaultValue && !e.item.sibling) {\n                    delete newValue[( e.item.value.data.toString())];\n                }\n                else {\n                    newValue[( e.item.value.data.toString())] = e.item.sibling ? { when: e.item.sibling } : true;\n                }\n            }\n            function sortKeys(obj) {\n                const sortedKeys = ( Object.keys(obj))\n                    .sort((a, b) => a.localeCompare(b));\n                const retVal = {};\n                for (const key of sortedKeys) {\n                    retVal[key] = obj[key];\n                }\n                return retVal;\n            }\n            this._onDidChangeSetting.fire({\n                key: template.context.setting.key,\n                value: ( Object.keys(newValue)).length === 0 ? undefined : sortKeys(newValue),\n                type: template.context.valueType,\n                manualReset: false,\n                scope: template.context.setting.scope\n            });\n        }\n    }\n    renderElement(element, index, templateData) {\n        super.renderSettingElement(element, index, templateData);\n    }\n    renderValue(dataElement, template, onChange) {\n        const value = getIncludeExcludeDisplayValue(dataElement);\n        template.includeExcludeWidget.setValue(value);\n        template.context = dataElement;\n        template.elementDisposables.add(toDisposable(() => {\n            template.includeExcludeWidget.cancelEdit();\n        }));\n    }\n}\nclass SettingExcludeRenderer extends SettingIncludeExcludeRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_EXCLUDE_TEMPLATE_ID;\n    }\n    isExclude() {\n        return true;\n    }\n}\nclass SettingIncludeRenderer extends SettingIncludeExcludeRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_INCLUDE_TEMPLATE_ID;\n    }\n    isExclude() {\n        return false;\n    }\n}\nconst settingsInputBoxStyles = getInputBoxStyle({\n    inputBackground: settingsTextInputBackground,\n    inputForeground: settingsTextInputForeground,\n    inputBorder: settingsTextInputBorder\n});\nclass AbstractSettingTextRenderer extends AbstractSettingRenderer {\n    constructor() {\n        super(...arguments);\n        this.MULTILINE_MAX_HEIGHT = 150;\n    }\n    renderTemplate(_container, useMultiline) {\n        const common = this.renderCommonTemplate(null, _container, 'text');\n        const validationErrorMessageElement = dom.append(common.containerElement, $('.setting-item-validation-message'));\n        const inputBoxOptions = {\n            flexibleHeight: useMultiline,\n            flexibleWidth: false,\n            flexibleMaxHeight: this.MULTILINE_MAX_HEIGHT,\n            inputBoxStyles: settingsInputBoxStyles\n        };\n        const inputBox = ( new InputBox(common.controlElement, this._contextViewService, inputBoxOptions));\n        common.toDispose.add(inputBox);\n        common.toDispose.add(inputBox.onDidChange(e => {\n            template.onChange?.(e);\n        }));\n        common.toDispose.add(inputBox);\n        inputBox.inputElement.classList.add(AbstractSettingRenderer.CONTROL_CLASS);\n        inputBox.inputElement.tabIndex = 0;\n        const template = {\n            ...common,\n            inputBox,\n            validationErrorMessageElement\n        };\n        this.addSettingElementFocusHandler(template);\n        return template;\n    }\n    renderElement(element, index, templateData) {\n        super.renderSettingElement(element, index, templateData);\n    }\n    renderValue(dataElement, template, onChange) {\n        template.onChange = undefined;\n        template.inputBox.value = dataElement.value;\n        template.inputBox.setAriaLabel(dataElement.setting.key);\n        template.onChange = value => {\n            if (!renderValidations(dataElement, template, false)) {\n                onChange(value);\n            }\n        };\n        renderValidations(dataElement, template, true);\n    }\n}\nclass SettingTextRenderer extends AbstractSettingTextRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_TEXT_TEMPLATE_ID;\n    }\n    renderTemplate(_container) {\n        const template = super.renderTemplate(_container, false);\n        template.toDispose.add(dom.addStandardDisposableListener(template.inputBox.inputElement, dom.EventType.KEY_DOWN, e => {\n            if (e.equals(16 ) || e.equals(18 )) {\n                e.preventDefault();\n            }\n        }));\n        return template;\n    }\n}\nclass SettingMultilineTextRenderer extends AbstractSettingTextRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_MULTILINE_TEXT_TEMPLATE_ID;\n    }\n    renderTemplate(_container) {\n        return super.renderTemplate(_container, true);\n    }\n    renderValue(dataElement, template, onChange) {\n        const onChangeOverride = (value) => {\n            dataElement.value = value;\n            onChange(value);\n        };\n        super.renderValue(dataElement, template, onChangeOverride);\n        template.elementDisposables.add(template.inputBox.onDidHeightChange(e => {\n            const height = template.containerElement.clientHeight;\n            if (height) {\n                this._onDidChangeSettingHeight.fire({\n                    element: dataElement,\n                    height: template.containerElement.clientHeight\n                });\n            }\n        }));\n        template.inputBox.layout();\n    }\n}\nclass SettingEnumRenderer extends AbstractSettingRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_ENUM_TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        const common = this.renderCommonTemplate(null, container, 'enum');\n        const styles = getSelectBoxStyles({\n            selectBackground: settingsSelectBackground,\n            selectForeground: settingsSelectForeground,\n            selectBorder: settingsSelectBorder,\n            selectListBorder: settingsSelectListBorder\n        });\n        const selectBox = ( new SelectBox([], 0, this._contextViewService, styles, {\n            useCustomDrawn: !(isIOS && BrowserFeatures.pointerEvents)\n        }));\n        common.toDispose.add(selectBox);\n        selectBox.render(common.controlElement);\n        const selectElement = common.controlElement.querySelector('select');\n        if (selectElement) {\n            selectElement.classList.add(AbstractSettingRenderer.CONTROL_CLASS);\n            selectElement.tabIndex = 0;\n        }\n        common.toDispose.add(selectBox.onDidSelect(e => {\n            template.onChange?.(e.index);\n        }));\n        const enumDescriptionElement = common.containerElement.insertBefore($('.setting-item-enumDescription'), common.descriptionElement.nextSibling);\n        const template = {\n            ...common,\n            selectBox,\n            selectElement,\n            enumDescriptionElement\n        };\n        this.addSettingElementFocusHandler(template);\n        return template;\n    }\n    renderElement(element, index, templateData) {\n        super.renderSettingElement(element, index, templateData);\n    }\n    renderValue(dataElement, template, onChange) {\n        const enumItemLabels = dataElement.setting.enumItemLabels ? [...dataElement.setting.enumItemLabels] : [];\n        const enumDescriptions = dataElement.setting.enumDescriptions ? [...dataElement.setting.enumDescriptions] : [];\n        const settingEnum = [...dataElement.setting.enum];\n        const enumDescriptionsAreMarkdown = dataElement.setting.enumDescriptionsAreMarkdown;\n        const disposables = ( new DisposableStore());\n        template.toDispose.add(disposables);\n        let createdDefault = false;\n        if (!settingEnum.includes(dataElement.defaultValue)) {\n            settingEnum.unshift(dataElement.defaultValue);\n            enumDescriptions.unshift('');\n            enumItemLabels.unshift('');\n            createdDefault = true;\n        }\n        const stringifiedDefaultValue = escapeInvisibleChars(String(dataElement.defaultValue));\n        const displayOptions = ( ( ( settingEnum\n            .map(String))\n            .map(escapeInvisibleChars))\n            .map((data, index) => {\n            const description = (enumDescriptions[index] && (enumDescriptionsAreMarkdown ? fixSettingLinks(enumDescriptions[index], false) : enumDescriptions[index]));\n            return {\n                text: enumItemLabels[index] ? enumItemLabels[index] : data,\n                detail: enumItemLabels[index] ? data : '',\n                description,\n                descriptionIsMarkdown: enumDescriptionsAreMarkdown,\n                descriptionMarkdownActionHandler: {\n                    callback: (content) => {\n                        this._openerService.open(content).catch(onUnexpectedError);\n                    },\n                    disposables: disposables\n                },\n                decoratorRight: (((data === stringifiedDefaultValue) || (createdDefault && index === 0)) ? ( localize('settings.Default', \"default\")) : '')\n            };\n        }));\n        template.selectBox.setOptions(displayOptions);\n        template.selectBox.setAriaLabel(dataElement.setting.key);\n        let idx = settingEnum.indexOf(dataElement.value);\n        if (idx === -1) {\n            idx = 0;\n        }\n        template.onChange = undefined;\n        template.selectBox.select(idx);\n        template.onChange = (idx) => {\n            if (createdDefault && idx === 0) {\n                onChange(dataElement.defaultValue);\n            }\n            else {\n                onChange(settingEnum[idx]);\n            }\n        };\n        template.enumDescriptionElement.innerText = '';\n    }\n}\nconst settingsNumberInputBoxStyles = getInputBoxStyle({\n    inputBackground: settingsNumberInputBackground,\n    inputForeground: settingsNumberInputForeground,\n    inputBorder: settingsNumberInputBorder\n});\nclass SettingNumberRenderer extends AbstractSettingRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_NUMBER_TEMPLATE_ID;\n    }\n    renderTemplate(_container) {\n        const common = super.renderCommonTemplate(null, _container, 'number');\n        const validationErrorMessageElement = dom.append(common.containerElement, $('.setting-item-validation-message'));\n        const inputBox = ( new InputBox(\n            common.controlElement,\n            this._contextViewService,\n            { type: 'number', inputBoxStyles: settingsNumberInputBoxStyles }\n        ));\n        common.toDispose.add(inputBox);\n        common.toDispose.add(inputBox.onDidChange(e => {\n            template.onChange?.(e);\n        }));\n        common.toDispose.add(inputBox);\n        inputBox.inputElement.classList.add(AbstractSettingRenderer.CONTROL_CLASS);\n        inputBox.inputElement.tabIndex = 0;\n        const template = {\n            ...common,\n            inputBox,\n            validationErrorMessageElement\n        };\n        this.addSettingElementFocusHandler(template);\n        return template;\n    }\n    renderElement(element, index, templateData) {\n        super.renderSettingElement(element, index, templateData);\n    }\n    renderValue(dataElement, template, onChange) {\n        const numParseFn = (dataElement.valueType === 'integer' || dataElement.valueType === 'nullable-integer')\n            ? parseInt : parseFloat;\n        const nullNumParseFn = (dataElement.valueType === 'nullable-integer' || dataElement.valueType === 'nullable-number')\n            ? ((v) => v === '' ? null : numParseFn(v)) : numParseFn;\n        template.onChange = undefined;\n        template.inputBox.value = typeof dataElement.value === 'number' ?\n            ( dataElement.value.toString()) : '';\n        template.inputBox.step = dataElement.valueType.includes('integer') ? '1' : 'any';\n        template.inputBox.setAriaLabel(dataElement.setting.key);\n        template.onChange = value => {\n            if (!renderValidations(dataElement, template, false)) {\n                onChange(nullNumParseFn(value));\n            }\n        };\n        renderValidations(dataElement, template, true);\n    }\n}\nclass SettingBoolRenderer extends AbstractSettingRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_BOOL_TEMPLATE_ID;\n    }\n    renderTemplate(_container) {\n        _container.classList.add('setting-item');\n        _container.classList.add('setting-item-bool');\n        const container = dom.append(_container, $(AbstractSettingRenderer.CONTENTS_SELECTOR));\n        container.classList.add('settings-row-inner-container');\n        const titleElement = dom.append(container, $('.setting-item-title'));\n        const categoryElement = dom.append(titleElement, $('span.setting-item-category'));\n        const labelElementContainer = dom.append(titleElement, $('span.setting-item-label'));\n        const labelElement = ( new SimpleIconLabel(labelElementContainer));\n        const indicatorsLabel = this._instantiationService.createInstance(SettingsTreeIndicatorsLabel, titleElement);\n        const descriptionAndValueElement = dom.append(container, $('.setting-item-value-description'));\n        const controlElement = dom.append(descriptionAndValueElement, $('.setting-item-bool-control'));\n        const descriptionElement = dom.append(descriptionAndValueElement, $('.setting-item-description'));\n        const modifiedIndicatorElement = dom.append(container, $('.setting-item-modified-indicator'));\n        modifiedIndicatorElement.title = ( localize('modified', \"The setting has been configured in the current scope.\"));\n        const deprecationWarningElement = dom.append(container, $('.setting-item-deprecation-message'));\n        const toDispose = ( new DisposableStore());\n        const checkbox = ( new Toggle(\n            { icon: Codicon.check, actionClassName: 'setting-value-checkbox', isChecked: true, title: '', ...unthemedToggleStyles }\n        ));\n        controlElement.appendChild(checkbox.domNode);\n        toDispose.add(checkbox);\n        toDispose.add(checkbox.onChange(() => {\n            template.onChange(checkbox.checked);\n        }));\n        toDispose.add(dom.addDisposableListener(descriptionElement, dom.EventType.MOUSE_DOWN, (e) => {\n            const targetElement = e.target;\n            if (targetElement.tagName.toLowerCase() !== 'a') {\n                template.checkbox.checked = !template.checkbox.checked;\n                template.onChange(checkbox.checked);\n            }\n            dom.EventHelper.stop(e);\n        }));\n        checkbox.domNode.classList.add(AbstractSettingRenderer.CONTROL_CLASS);\n        const toolbarContainer = dom.append(container, $('.setting-toolbar-container'));\n        const toolbar = this.renderSettingToolbar(toolbarContainer);\n        toDispose.add(toolbar);\n        const template = {\n            toDispose,\n            elementDisposables: toDispose.add(( new DisposableStore())),\n            containerElement: container,\n            categoryElement,\n            labelElement,\n            controlElement,\n            checkbox,\n            descriptionElement,\n            deprecationWarningElement,\n            indicatorsLabel,\n            toolbar\n        };\n        this.addSettingElementFocusHandler(template);\n        toDispose.add(dom.addDisposableListener(controlElement, 'mousedown', (e) => e.stopPropagation()));\n        toDispose.add(dom.addDisposableListener(titleElement, dom.EventType.MOUSE_ENTER, e => container.classList.add('mouseover')));\n        toDispose.add(dom.addDisposableListener(titleElement, dom.EventType.MOUSE_LEAVE, e => container.classList.remove('mouseover')));\n        return template;\n    }\n    renderElement(element, index, templateData) {\n        super.renderSettingElement(element, index, templateData);\n    }\n    renderValue(dataElement, template, onChange) {\n        template.onChange = undefined;\n        template.checkbox.checked = dataElement.value;\n        template.checkbox.setTitle(dataElement.setting.key);\n        template.onChange = onChange;\n    }\n}\nclass SettingsExtensionToggleRenderer extends AbstractSettingRenderer {\n    constructor() {\n        super(...arguments);\n        this.templateId = SETTINGS_EXTENSION_TOGGLE_TEMPLATE_ID;\n    }\n    renderTemplate(_container) {\n        const common = super.renderCommonTemplate(null, _container, 'extension-toggle');\n        const actionButton = ( new Button(common.containerElement, {\n            title: false,\n            ...defaultButtonStyles\n        }));\n        actionButton.element.classList.add('setting-item-extension-toggle-button');\n        actionButton.label = ( localize('showExtension', \"Show Extension\"));\n        const template = {\n            ...common,\n            actionButton\n        };\n        this.addSettingElementFocusHandler(template);\n        return template;\n    }\n    renderElement(element, index, templateData) {\n        super.renderSettingElement(element, index, templateData);\n    }\n    renderValue(dataElement, template, onChange) {\n        template.elementDisposables.clear();\n        const extensionId = dataElement.setting.displayExtensionId;\n        template.elementDisposables.add(template.actionButton.onDidClick(async () => {\n            this._telemetryService.publicLog2('ManageExtensionClick', { extensionId });\n            this._commandService.executeCommand('extension.open', extensionId);\n        }));\n    }\n}\nlet SettingTreeRenderers = class SettingTreeRenderers {\n    constructor(_instantiationService, _contextMenuService, _contextViewService, _userDataProfilesService, _userDataSyncEnablementService) {\n        this._instantiationService = _instantiationService;\n        this._contextMenuService = _contextMenuService;\n        this._contextViewService = _contextViewService;\n        this._userDataProfilesService = _userDataProfilesService;\n        this._userDataSyncEnablementService = _userDataSyncEnablementService;\n        this._onDidChangeSetting = ( new Emitter());\n        this.settingActions = [\n            ( new Action('settings.resetSetting', ( localize('resetSettingLabel', \"Reset Setting\")), undefined, undefined, async (context) => {\n                if (context instanceof SettingsTreeSettingElement) {\n                    if (!context.isUntrusted) {\n                        this._onDidChangeSetting.fire({\n                            key: context.setting.key,\n                            value: undefined,\n                            type: context.setting.type,\n                            manualReset: true,\n                            scope: context.setting.scope\n                        });\n                    }\n                }\n            })),\n            ( new Separator()),\n            this._instantiationService.createInstance(CopySettingIdAction),\n            this._instantiationService.createInstance(CopySettingAsJSONAction),\n        ];\n        const actionFactory = (setting, settingTarget) => this.getActionsForSetting(setting, settingTarget);\n        const emptyActionFactory = (_) => [];\n        const settingRenderers = [\n            this._instantiationService.createInstance(SettingBoolRenderer, this.settingActions, actionFactory),\n            this._instantiationService.createInstance(SettingNumberRenderer, this.settingActions, actionFactory),\n            this._instantiationService.createInstance(SettingArrayRenderer, this.settingActions, actionFactory),\n            this._instantiationService.createInstance(SettingComplexRenderer, this.settingActions, actionFactory),\n            this._instantiationService.createInstance(SettingTextRenderer, this.settingActions, actionFactory),\n            this._instantiationService.createInstance(SettingMultilineTextRenderer, this.settingActions, actionFactory),\n            this._instantiationService.createInstance(SettingExcludeRenderer, this.settingActions, actionFactory),\n            this._instantiationService.createInstance(SettingIncludeRenderer, this.settingActions, actionFactory),\n            this._instantiationService.createInstance(SettingEnumRenderer, this.settingActions, actionFactory),\n            this._instantiationService.createInstance(SettingObjectRenderer, this.settingActions, actionFactory),\n            this._instantiationService.createInstance(SettingBoolObjectRenderer, this.settingActions, actionFactory),\n            this._instantiationService.createInstance(SettingsExtensionToggleRenderer, [], emptyActionFactory)\n        ];\n        this.onDidClickOverrideElement = Event.any(...( settingRenderers.map(r => r.onDidClickOverrideElement)));\n        this.onDidChangeSetting = Event.any(...( settingRenderers.map(r => r.onDidChangeSetting)), this._onDidChangeSetting.event);\n        this.onDidOpenSettings = Event.any(...( settingRenderers.map(r => r.onDidOpenSettings)));\n        this.onDidClickSettingLink = Event.any(...( settingRenderers.map(r => r.onDidClickSettingLink)));\n        this.onDidFocusSetting = Event.any(...( settingRenderers.map(r => r.onDidFocusSetting)));\n        this.onDidChangeSettingHeight = Event.any(...( settingRenderers.map(r => r.onDidChangeSettingHeight)));\n        this.onApplyFilter = Event.any(...( settingRenderers.map(r => r.onApplyFilter)));\n        this.allRenderers = [\n            ...settingRenderers,\n            this._instantiationService.createInstance(SettingGroupRenderer),\n            this._instantiationService.createInstance(SettingNewExtensionsRenderer),\n        ];\n    }\n    getActionsForSetting(setting, settingTarget) {\n        const actions = [];\n        if (this._userDataProfilesService.isEnabled() && setting.scope !== 1  && settingTarget === 3 ) {\n            actions.push(this._instantiationService.createInstance(ApplySettingToAllProfilesAction, setting));\n        }\n        if (this._userDataSyncEnablementService.isEnabled() && !setting.disallowSyncIgnore) {\n            actions.push(this._instantiationService.createInstance(SyncSettingAction, setting));\n        }\n        if (actions.length) {\n            actions.splice(0, 0, ( new Separator()));\n        }\n        return actions;\n    }\n    cancelSuggesters() {\n        this._contextViewService.hideContextView();\n    }\n    showContextMenu(element, settingDOMElement) {\n        const toolbarElement = settingDOMElement.querySelector('.monaco-toolbar');\n        if (toolbarElement) {\n            this._contextMenuService.showContextMenu({\n                getActions: () => this.settingActions,\n                getAnchor: () => toolbarElement,\n                getActionsContext: () => element\n            });\n        }\n    }\n    getSettingDOMElementForDOMElement(domElement) {\n        const parent = dom.findParentWithClass(domElement, AbstractSettingRenderer.CONTENTS_CLASS);\n        if (parent) {\n            return parent;\n        }\n        return null;\n    }\n    getDOMElementsForSettingKey(treeContainer, key) {\n        return treeContainer.querySelectorAll(`[${AbstractSettingRenderer.SETTING_KEY_ATTR}=\"${key}\"]`);\n    }\n    getKeyForDOMElementInSetting(element) {\n        const settingElement = this.getSettingDOMElementForDOMElement(element);\n        return settingElement && settingElement.getAttribute(AbstractSettingRenderer.SETTING_KEY_ATTR);\n    }\n    getIdForDOMElementInSetting(element) {\n        const settingElement = this.getSettingDOMElementForDOMElement(element);\n        return settingElement && settingElement.getAttribute(AbstractSettingRenderer.SETTING_ID_ATTR);\n    }\n};\nSettingTreeRenderers = ( __decorate([\n    ( __param(0, IInstantiationService)),\n    ( __param(1, IContextMenuService)),\n    ( __param(2, IContextViewService)),\n    ( __param(3, IUserDataProfilesService)),\n    ( __param(4, IUserDataSyncEnablementService))\n], SettingTreeRenderers));\nfunction renderValidations(dataElement, template, calledOnStartup) {\n    if (dataElement.setting.validator) {\n        const errMsg = dataElement.setting.validator(template.inputBox.value);\n        if (errMsg) {\n            template.containerElement.classList.add('invalid-input');\n            template.validationErrorMessageElement.innerText = errMsg;\n            const validationError = ( localize('validationError', \"Validation Error.\"));\n            template.inputBox.inputElement.parentElement.setAttribute('aria-label', [validationError, errMsg].join(' '));\n            if (!calledOnStartup) {\n                aria.status(validationError + ' ' + errMsg);\n            }\n            return true;\n        }\n        else {\n            template.inputBox.inputElement.parentElement.removeAttribute('aria-label');\n        }\n    }\n    template.containerElement.classList.remove('invalid-input');\n    return false;\n}\nfunction renderArrayValidations(dataElement, template, value, calledOnStartup) {\n    template.containerElement.classList.add('invalid-input');\n    if (dataElement.setting.validator) {\n        const errMsg = dataElement.setting.validator(value);\n        if (errMsg && errMsg !== '') {\n            template.containerElement.classList.add('invalid-input');\n            template.validationErrorMessageElement.innerText = errMsg;\n            const validationError = ( localize('validationError', \"Validation Error.\"));\n            template.containerElement.setAttribute('aria-label', [dataElement.setting.key, validationError, errMsg].join(' '));\n            if (!calledOnStartup) {\n                aria.status(validationError + ' ' + errMsg);\n            }\n            return true;\n        }\n        else {\n            template.containerElement.setAttribute('aria-label', dataElement.setting.key);\n            template.containerElement.classList.remove('invalid-input');\n        }\n    }\n    return false;\n}\nfunction cleanRenderedMarkdown(element) {\n    for (let i = 0; i < element.childNodes.length; i++) {\n        const child = element.childNodes.item(i);\n        const tagName = child.tagName && child.tagName.toLowerCase();\n        if (tagName === 'img') {\n            element.removeChild(child);\n        }\n        else {\n            cleanRenderedMarkdown(child);\n        }\n    }\n}\nfunction fixSettingLinks(text, linkify = true) {\n    return text.replace(/`#([^#\\s`]+)#`|'#([^#\\s']+)#'/g, (match, backticksGroup, quotesGroup) => {\n        const settingKey = backticksGroup ?? quotesGroup;\n        const targetDisplayFormat = settingKeyToDisplayFormat(settingKey);\n        const targetName = `${targetDisplayFormat.category}: ${targetDisplayFormat.label}`;\n        return linkify ?\n            `[${targetName}](#${settingKey} \"${settingKey}\")` :\n            `\"${targetName}\"`;\n    });\n}\nfunction escapeInvisibleChars(enumValue) {\n    return enumValue && enumValue\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r');\n}\nlet SettingsTreeFilter = class SettingsTreeFilter {\n    constructor(viewState, environmentService) {\n        this.viewState = viewState;\n        this.environmentService = environmentService;\n    }\n    filter(element, parentVisibility) {\n        if (this.viewState.filterToCategory && element instanceof SettingsTreeSettingElement) {\n            if (!this.settingContainedInGroup(element.setting, this.viewState.filterToCategory)) {\n                return false;\n            }\n        }\n        if (element instanceof SettingsTreeSettingElement && this.viewState.settingsTarget !== 3 ) {\n            const isRemote = !!this.environmentService.remoteAuthority;\n            if (!element.matchesScope(this.viewState.settingsTarget, isRemote)) {\n                return false;\n            }\n        }\n        if (element instanceof SettingsTreeGroupElement) {\n            if (typeof element.count === 'number') {\n                return element.count > 0;\n            }\n            return 2 ;\n        }\n        if (element instanceof SettingsTreeNewExtensionsElement) {\n            if (this.viewState.tagFilters?.size || this.viewState.filterToCategory) {\n                return false;\n            }\n        }\n        return true;\n    }\n    settingContainedInGroup(setting, group) {\n        return ( group.children.some(child => {\n            if (child instanceof SettingsTreeGroupElement) {\n                return this.settingContainedInGroup(setting, child);\n            }\n            else if (child instanceof SettingsTreeSettingElement) {\n                return child.setting.key === setting.key;\n            }\n            else {\n                return false;\n            }\n        }));\n    }\n};\nSettingsTreeFilter = ( __decorate([\n    ( __param(1, IWorkbenchEnvironmentService))\n], SettingsTreeFilter));\nclass SettingsTreeDelegate extends CachedListVirtualDelegate {\n    getTemplateId(element) {\n        if (element instanceof SettingsTreeGroupElement) {\n            return SETTINGS_ELEMENT_TEMPLATE_ID;\n        }\n        if (element instanceof SettingsTreeSettingElement) {\n            if (element.valueType === SettingValueType.ExtensionToggle) {\n                return SETTINGS_EXTENSION_TOGGLE_TEMPLATE_ID;\n            }\n            const invalidTypeError = element.isConfigured && getInvalidTypeError(element.value, element.setting.type);\n            if (invalidTypeError) {\n                return SETTINGS_COMPLEX_TEMPLATE_ID;\n            }\n            if (element.valueType === SettingValueType.Boolean) {\n                return SETTINGS_BOOL_TEMPLATE_ID;\n            }\n            if (element.valueType === SettingValueType.Integer ||\n                element.valueType === SettingValueType.Number ||\n                element.valueType === SettingValueType.NullableInteger ||\n                element.valueType === SettingValueType.NullableNumber) {\n                return SETTINGS_NUMBER_TEMPLATE_ID;\n            }\n            if (element.valueType === SettingValueType.MultilineString) {\n                return SETTINGS_MULTILINE_TEXT_TEMPLATE_ID;\n            }\n            if (element.valueType === SettingValueType.String) {\n                return SETTINGS_TEXT_TEMPLATE_ID;\n            }\n            if (element.valueType === SettingValueType.Enum) {\n                return SETTINGS_ENUM_TEMPLATE_ID;\n            }\n            if (element.valueType === SettingValueType.Array) {\n                return SETTINGS_ARRAY_TEMPLATE_ID;\n            }\n            if (element.valueType === SettingValueType.Exclude) {\n                return SETTINGS_EXCLUDE_TEMPLATE_ID;\n            }\n            if (element.valueType === SettingValueType.Include) {\n                return SETTINGS_INCLUDE_TEMPLATE_ID;\n            }\n            if (element.valueType === SettingValueType.Object) {\n                return SETTINGS_OBJECT_TEMPLATE_ID;\n            }\n            if (element.valueType === SettingValueType.BooleanObject) {\n                return SETTINGS_BOOL_OBJECT_TEMPLATE_ID;\n            }\n            if (element.valueType === SettingValueType.LanguageTag) {\n                return SETTINGS_COMPLEX_TEMPLATE_ID;\n            }\n            return SETTINGS_COMPLEX_TEMPLATE_ID;\n        }\n        if (element instanceof SettingsTreeNewExtensionsElement) {\n            return SETTINGS_NEW_EXTENSIONS_TEMPLATE_ID;\n        }\n        throw new Error('unknown element type: ' + element);\n    }\n    hasDynamicHeight(element) {\n        return !(element instanceof SettingsTreeGroupElement);\n    }\n    estimateHeight(element) {\n        if (element instanceof SettingsTreeGroupElement) {\n            return 42;\n        }\n        return element instanceof SettingsTreeSettingElement && element.valueType === SettingValueType.Boolean ? 78 : 104;\n    }\n}\nclass NonCollapsibleObjectTreeModel extends ObjectTreeModel {\n    isCollapsible(element) {\n        return false;\n    }\n    setCollapsed(element, collapsed, recursive) {\n        return false;\n    }\n}\nclass SettingsTreeAccessibilityProvider {\n    constructor(configurationService, languageService, userDataProfilesService) {\n        this.configurationService = configurationService;\n        this.languageService = languageService;\n        this.userDataProfilesService = userDataProfilesService;\n    }\n    getAriaLabel(element) {\n        if (element instanceof SettingsTreeSettingElement) {\n            const ariaLabelSections = [];\n            ariaLabelSections.push(`${element.displayCategory} ${element.displayLabel}.`);\n            if (element.isConfigured) {\n                const modifiedText = ( localize('settings.Modified', 'Modified.'));\n                ariaLabelSections.push(modifiedText);\n            }\n            const indicatorsLabelAriaLabel = getIndicatorsLabelAriaLabel(element, this.configurationService, this.userDataProfilesService, this.languageService);\n            if (indicatorsLabelAriaLabel.length) {\n                ariaLabelSections.push(`${indicatorsLabelAriaLabel}.`);\n            }\n            const descriptionWithoutSettingLinks = renderMarkdownAsPlaintext({ value: fixSettingLinks(element.description, false) });\n            if (descriptionWithoutSettingLinks.length) {\n                ariaLabelSections.push(descriptionWithoutSettingLinks);\n            }\n            return ariaLabelSections.join(' ');\n        }\n        else if (element instanceof SettingsTreeGroupElement) {\n            return element.label;\n        }\n        else {\n            return element.id;\n        }\n    }\n    getWidgetAriaLabel() {\n        return ( localize('settings', \"Settings\"));\n    }\n}\nlet SettingsTree = class SettingsTree extends WorkbenchObjectTree {\n    constructor(container, viewState, renderers, contextKeyService, listService, configurationService, instantiationService, languageService, userDataProfilesService) {\n        super('SettingsTree', container, ( new SettingsTreeDelegate()), renderers, {\n            horizontalScrolling: false,\n            supportDynamicHeights: true,\n            identityProvider: {\n                getId(e) {\n                    return e.id;\n                }\n            },\n            accessibilityProvider: ( new SettingsTreeAccessibilityProvider(configurationService, languageService, userDataProfilesService)),\n            styleController: id => ( new DefaultStyleController(dom.createStyleSheet(container), id)),\n            filter: instantiationService.createInstance(SettingsTreeFilter, viewState),\n            smoothScrolling: configurationService.getValue('workbench.list.smoothScrolling'),\n            multipleSelectionSupport: false,\n            findWidgetEnabled: false,\n            renderIndentGuides: RenderIndentGuides.None\n        }, instantiationService, contextKeyService, listService, configurationService);\n        this.getHTMLElement().classList.add('settings-editor-tree');\n        this.style(getListStyles({\n            listBackground: editorBackground,\n            listActiveSelectionBackground: editorBackground,\n            listActiveSelectionForeground: foreground,\n            listFocusAndSelectionBackground: editorBackground,\n            listFocusAndSelectionForeground: foreground,\n            listFocusBackground: editorBackground,\n            listFocusForeground: foreground,\n            listHoverForeground: foreground,\n            listHoverBackground: editorBackground,\n            listHoverOutline: editorBackground,\n            listFocusOutline: editorBackground,\n            listInactiveSelectionBackground: editorBackground,\n            listInactiveSelectionForeground: foreground,\n            listInactiveFocusBackground: editorBackground,\n            listInactiveFocusOutline: editorBackground,\n            treeIndentGuidesStroke: undefined,\n            treeInactiveIndentGuidesStroke: undefined,\n        }));\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('workbench.list.smoothScrolling')) {\n                this.updateOptions({\n                    smoothScrolling: configurationService.getValue('workbench.list.smoothScrolling')\n                });\n            }\n        }));\n    }\n    createModel(user, view, options) {\n        return ( new NonCollapsibleObjectTreeModel(user, view, options));\n    }\n};\nSettingsTree = ( __decorate([\n    ( __param(3, IContextKeyService)),\n    ( __param(4, IListService)),\n    ( __param(5, IWorkbenchConfigurationService)),\n    ( __param(6, IInstantiationService)),\n    ( __param(7, ILanguageService)),\n    ( __param(8, IUserDataProfilesService))\n], SettingsTree));\nlet CopySettingIdAction = class CopySettingIdAction extends Action {\n    static { this.ID = 'settings.copySettingId'; }\n    static { this.LABEL = ( localize('copySettingIdLabel', \"Copy Setting ID\")); }\n    constructor(clipboardService) {\n        super(CopySettingIdAction.ID, CopySettingIdAction.LABEL);\n        this.clipboardService = clipboardService;\n    }\n    async run(context) {\n        if (context) {\n            await this.clipboardService.writeText(context.setting.key);\n        }\n        return Promise.resolve(undefined);\n    }\n};\nCopySettingIdAction = ( __decorate([\n    ( __param(0, IClipboardService))\n], CopySettingIdAction));\nlet CopySettingAsJSONAction = class CopySettingAsJSONAction extends Action {\n    static { this.ID = 'settings.copySettingAsJSON'; }\n    static { this.LABEL = ( localize('copySettingAsJSONLabel', \"Copy Setting as JSON\")); }\n    constructor(clipboardService) {\n        super(CopySettingAsJSONAction.ID, CopySettingAsJSONAction.LABEL);\n        this.clipboardService = clipboardService;\n    }\n    async run(context) {\n        if (context) {\n            const jsonResult = `\"${context.setting.key}\": ${JSON.stringify(context.value, undefined, '  ')}`;\n            await this.clipboardService.writeText(jsonResult);\n        }\n        return Promise.resolve(undefined);\n    }\n};\nCopySettingAsJSONAction = ( __decorate([\n    ( __param(0, IClipboardService))\n], CopySettingAsJSONAction));\nlet SyncSettingAction = class SyncSettingAction extends Action {\n    static { this.ID = 'settings.stopSyncingSetting'; }\n    static { this.LABEL = ( localize('stopSyncingSetting', \"Sync This Setting\")); }\n    constructor(setting, configService) {\n        super(SyncSettingAction.ID, SyncSettingAction.LABEL);\n        this.setting = setting;\n        this.configService = configService;\n        this._register(Event.filter(configService.onDidChangeConfiguration, e => e.affectsConfiguration('settingsSync.ignoredSettings'))(() => this.update()));\n        this.update();\n    }\n    async update() {\n        const ignoredSettings = getIgnoredSettings(getDefaultIgnoredSettings(), this.configService);\n        this.checked = !ignoredSettings.includes(this.setting.key);\n    }\n    async run() {\n        let currentValue = [...this.configService.getValue('settingsSync.ignoredSettings')];\n        currentValue = currentValue.filter(v => v !== this.setting.key && v !== `-${this.setting.key}`);\n        const defaultIgnoredSettings = getDefaultIgnoredSettings();\n        const isDefaultIgnored = defaultIgnoredSettings.includes(this.setting.key);\n        const askedToSync = !this.checked;\n        if (askedToSync && isDefaultIgnored) {\n            currentValue.push(`-${this.setting.key}`);\n        }\n        if (!askedToSync && !isDefaultIgnored) {\n            currentValue.push(this.setting.key);\n        }\n        this.configService.updateValue('settingsSync.ignoredSettings', currentValue.length ? currentValue : undefined, 2 );\n        return Promise.resolve(undefined);\n    }\n};\nSyncSettingAction = ( __decorate([\n    ( __param(1, IConfigurationService))\n], SyncSettingAction));\nlet ApplySettingToAllProfilesAction = class ApplySettingToAllProfilesAction extends Action {\n    static { this.ID = 'settings.applyToAllProfiles'; }\n    static { this.LABEL = ( localize('applyToAllProfiles', \"Apply Setting to all Profiles\")); }\n    constructor(setting, configService) {\n        super(ApplySettingToAllProfilesAction.ID, ApplySettingToAllProfilesAction.LABEL);\n        this.setting = setting;\n        this.configService = configService;\n        this._register(Event.filter(configService.onDidChangeConfiguration, e => e.affectsConfiguration(APPLY_ALL_PROFILES_SETTING))(() => this.update()));\n        this.update();\n    }\n    update() {\n        const allProfilesSettings = this.configService.getValue(APPLY_ALL_PROFILES_SETTING);\n        this.checked = allProfilesSettings.includes(this.setting.key);\n    }\n    async run() {\n        const value = this.configService.getValue(APPLY_ALL_PROFILES_SETTING) ?? [];\n        if (this.checked) {\n            value.splice(value.indexOf(this.setting.key), 1);\n        }\n        else {\n            value.push(this.setting.key);\n        }\n        const newValue = distinct(value);\n        if (this.checked) {\n            await this.configService.updateValue(this.setting.key, this.configService.inspect(this.setting.key).application?.value, 3 );\n            await this.configService.updateValue(APPLY_ALL_PROFILES_SETTING, newValue.length ? newValue : undefined, 3 );\n        }\n        else {\n            await this.configService.updateValue(APPLY_ALL_PROFILES_SETTING, newValue.length ? newValue : undefined, 3 );\n            await this.configService.updateValue(this.setting.key, this.configService.inspect(this.setting.key).userLocal?.value, 3 );\n        }\n    }\n};\nApplySettingToAllProfilesAction = ( __decorate([\n    ( __param(1, IWorkbenchConfigurationService))\n], ApplySettingToAllProfilesAction));\nexport { AbstractSettingRenderer, NonCollapsibleObjectTreeModel, SettingBoolRenderer, SettingComplexRenderer, SettingEnumRenderer, SettingExcludeRenderer, SettingGroupRenderer, SettingIncludeRenderer, SettingNewExtensionsRenderer, SettingNumberRenderer, SettingTreeRenderers, SettingsExtensionToggleRenderer, SettingsTree, SettingsTreeFilter, createSettingMatchRegExp, createTocTreeForExtensionSettings, resolveConfiguredUntrustedSettings, resolveSettingsTree };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { DefaultStyleController } from 'monaco-editor/esm/vs/base/browser/ui/list/listWidget.js';\nimport { RenderIndentGuides } from 'monaco-editor/esm/vs/base/browser/ui/tree/abstractTree.js';\nimport { Iterable } from 'monaco-editor/esm/vs/base/common/iterator.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { WorkbenchObjectTree, IListService } from 'monaco-editor/esm/vs/platform/list/browser/listService.js';\nimport { getListStyles } from 'monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js';\nimport { editorBackground, focusBorder } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { SettingsTreeFilter } from './settingsTree.js';\nimport { SettingsTreeGroupElement, SettingsTreeSettingElement } from './settingsTreeModels.js';\nimport { settingsHeaderForeground, settingsHeaderHoverForeground } from '../common/settingsEditorColorRegistry.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nconst $ = dom.$;\nlet TOCTreeModel = class TOCTreeModel {\n    constructor(_viewState, environmentService) {\n        this._viewState = _viewState;\n        this.environmentService = environmentService;\n        this._currentSearchModel = null;\n    }\n    get settingsTreeRoot() {\n        return this._settingsTreeRoot;\n    }\n    set settingsTreeRoot(value) {\n        this._settingsTreeRoot = value;\n        this.update();\n    }\n    get currentSearchModel() {\n        return this._currentSearchModel;\n    }\n    set currentSearchModel(model) {\n        this._currentSearchModel = model;\n        this.update();\n    }\n    get children() {\n        return this._settingsTreeRoot.children;\n    }\n    update() {\n        if (this._settingsTreeRoot) {\n            this.updateGroupCount(this._settingsTreeRoot);\n        }\n    }\n    updateGroupCount(group) {\n        group.children.forEach(child => {\n            if (child instanceof SettingsTreeGroupElement) {\n                this.updateGroupCount(child);\n            }\n        });\n        const childCount = group.children\n            .filter(child => child instanceof SettingsTreeGroupElement)\n            .reduce((acc, cur) => acc + cur.count, 0);\n        group.count = childCount + this.getGroupCount(group);\n    }\n    getGroupCount(group) {\n        return group.children.filter(child => {\n            if (!(child instanceof SettingsTreeSettingElement)) {\n                return false;\n            }\n            if (this._currentSearchModel && !this._currentSearchModel.root.containsSetting(child.setting.key)) {\n                return false;\n            }\n            const isRemote = !!this.environmentService.remoteAuthority;\n            return child.matchesScope(this._viewState.settingsTarget, isRemote) &&\n                child.matchesAllTags(this._viewState.tagFilters) &&\n                child.matchesAnyFeature(this._viewState.featureFilters) &&\n                child.matchesAnyExtension(this._viewState.extensionFilters) &&\n                child.matchesAnyId(this._viewState.idFilters);\n        }).length;\n    }\n};\nTOCTreeModel = ( __decorate([\n    ( __param(1, IWorkbenchEnvironmentService))\n], TOCTreeModel));\nconst TOC_ENTRY_TEMPLATE_ID = 'settings.toc.entry';\nclass TOCRenderer {\n    constructor() {\n        this.templateId = TOC_ENTRY_TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        return {\n            labelElement: dom.append(container, $('.settings-toc-entry')),\n            countElement: dom.append(container, $('.settings-toc-count'))\n        };\n    }\n    renderElement(node, index, template) {\n        const element = node.element;\n        const count = element.count;\n        const label = element.label;\n        template.labelElement.textContent = label;\n        template.labelElement.title = label;\n        if (count) {\n            template.countElement.textContent = ` (${count})`;\n        }\n        else {\n            template.countElement.textContent = '';\n        }\n    }\n    disposeTemplate(templateData) {\n    }\n}\nclass TOCTreeDelegate {\n    getTemplateId(element) {\n        return TOC_ENTRY_TEMPLATE_ID;\n    }\n    getHeight(element) {\n        return 22;\n    }\n}\nfunction createTOCIterator(model, tree) {\n    const groupChildren = model.children.filter(c => c instanceof SettingsTreeGroupElement);\n    return ( Iterable.map(groupChildren, g => {\n        const hasGroupChildren = ( g.children.some(c => c instanceof SettingsTreeGroupElement));\n        return {\n            element: g,\n            collapsed: undefined,\n            collapsible: hasGroupChildren,\n            children: g instanceof SettingsTreeGroupElement ?\n                createTOCIterator(g) :\n                undefined\n        };\n    }));\n}\nclass SettingsAccessibilityProvider {\n    getWidgetAriaLabel() {\n        return ( localize({\n            key: 'settingsTOC',\n            comment: ['A label for the table of contents for the full settings list']\n        }, \"Settings Table of Contents\"));\n    }\n    getAriaLabel(element) {\n        if (!element) {\n            return '';\n        }\n        if (element instanceof SettingsTreeGroupElement) {\n            return ( localize('groupRowAriaLabel', \"{0}, group\", element.label));\n        }\n        return '';\n    }\n    getAriaLevel(element) {\n        let i = 1;\n        while (element instanceof SettingsTreeGroupElement && element.parent) {\n            i++;\n            element = element.parent;\n        }\n        return i;\n    }\n}\nlet TOCTree = class TOCTree extends WorkbenchObjectTree {\n    constructor(container, viewState, contextKeyService, listService, configurationService, instantiationService) {\n        const filter = instantiationService.createInstance(SettingsTreeFilter, viewState);\n        const options = {\n            filter,\n            multipleSelectionSupport: false,\n            identityProvider: {\n                getId(e) {\n                    return e.id;\n                }\n            },\n            styleController: id => ( new DefaultStyleController(dom.createStyleSheet(container), id)),\n            accessibilityProvider: instantiationService.createInstance(SettingsAccessibilityProvider),\n            collapseByDefault: true,\n            horizontalScrolling: false,\n            hideTwistiesOfChildlessElements: true,\n            renderIndentGuides: RenderIndentGuides.None\n        };\n        super('SettingsTOC', container, ( new TOCTreeDelegate()), [( new TOCRenderer())], options, instantiationService, contextKeyService, listService, configurationService);\n        this.style(getListStyles({\n            listBackground: editorBackground,\n            listFocusOutline: focusBorder,\n            listActiveSelectionBackground: editorBackground,\n            listActiveSelectionForeground: settingsHeaderForeground,\n            listFocusAndSelectionBackground: editorBackground,\n            listFocusAndSelectionForeground: settingsHeaderForeground,\n            listFocusBackground: editorBackground,\n            listFocusForeground: settingsHeaderHoverForeground,\n            listHoverForeground: settingsHeaderHoverForeground,\n            listHoverBackground: editorBackground,\n            listInactiveSelectionBackground: editorBackground,\n            listInactiveSelectionForeground: settingsHeaderForeground,\n            listInactiveFocusBackground: editorBackground,\n            listInactiveFocusOutline: editorBackground,\n            treeIndentGuidesStroke: undefined,\n            treeInactiveIndentGuidesStroke: undefined\n        }));\n    }\n};\nTOCTree = ( __decorate([\n    ( __param(2, IContextKeyService)),\n    ( __param(3, IListService)),\n    ( __param(4, IConfigurationService)),\n    ( __param(5, IInstantiationService))\n], TOCTree));\nexport { TOCRenderer, TOCTree, TOCTreeModel, createTOCIterator };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { DropdownMenuActionViewItem } from 'monaco-editor/esm/vs/base/browser/ui/dropdown/dropdownActionViewItem.js';\nimport { SuggestController } from 'monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestController.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { MODIFIED_SETTING_TAG, EXTENSION_SETTING_TAG, FEATURE_SETTING_TAG, GENERAL_TAG_SETTING_TAG, LANGUAGE_SETTING_TAG, POLICY_SETTING_TAG } from '../common/preferences.js';\nlet SettingsSearchFilterDropdownMenuActionViewItem = class SettingsSearchFilterDropdownMenuActionViewItem extends DropdownMenuActionViewItem {\n    constructor(action, actionRunner, searchWidget, contextMenuService) {\n        super(action, { getActions: () => this.getActions() }, contextMenuService, {\n            actionRunner,\n            classNames: action.class,\n            anchorAlignmentProvider: () => 1 ,\n            menuAsChild: true\n        });\n        this.searchWidget = searchWidget;\n        this.suggestController = SuggestController.get(this.searchWidget.inputWidget);\n    }\n    render(container) {\n        super.render(container);\n    }\n    doSearchWidgetAction(queryToAppend, triggerSuggest) {\n        this.searchWidget.setValue(this.searchWidget.getValue().trimEnd() + ' ' + queryToAppend);\n        this.searchWidget.focus();\n        if (triggerSuggest && this.suggestController) {\n            this.suggestController.triggerSuggest();\n        }\n    }\n    createAction(id, label, tooltip, queryToAppend, triggerSuggest) {\n        return {\n            id,\n            label,\n            tooltip,\n            class: undefined,\n            enabled: true,\n            checked: false,\n            run: () => { this.doSearchWidgetAction(queryToAppend, triggerSuggest); }\n        };\n    }\n    createToggleAction(id, label, tooltip, queryToAppend) {\n        const splitCurrentQuery = this.searchWidget.getValue().split(' ');\n        const queryContainsQueryToAppend = splitCurrentQuery.includes(queryToAppend);\n        return {\n            id,\n            label,\n            tooltip,\n            class: undefined,\n            enabled: true,\n            checked: queryContainsQueryToAppend,\n            run: () => {\n                if (!queryContainsQueryToAppend) {\n                    const trimmedCurrentQuery = this.searchWidget.getValue().trimEnd();\n                    const newQuery = trimmedCurrentQuery ? trimmedCurrentQuery + ' ' + queryToAppend : queryToAppend;\n                    this.searchWidget.setValue(newQuery);\n                }\n                else {\n                    const queryWithRemovedTags = this.searchWidget.getValue().split(' ')\n                        .filter(word => word !== queryToAppend).join(' ');\n                    this.searchWidget.setValue(queryWithRemovedTags);\n                }\n                this.searchWidget.focus();\n            }\n        };\n    }\n    getActions() {\n        return [\n            this.createToggleAction('modifiedSettingsSearch', ( localize('modifiedSettingsSearch', \"Modified\")), ( localize('modifiedSettingsSearchTooltip', \"Add or remove modified settings filter\")), `@${MODIFIED_SETTING_TAG}`),\n            this.createAction('extSettingsSearch', ( localize('extSettingsSearch', \"Extension ID...\")), ( localize('extSettingsSearchTooltip', \"Add extension ID filter\")), `@${EXTENSION_SETTING_TAG}`, true),\n            this.createAction('featuresSettingsSearch', ( localize('featureSettingsSearch', \"Feature...\")), ( localize('featureSettingsSearchTooltip', \"Add feature filter\")), `@${FEATURE_SETTING_TAG}`, true),\n            this.createAction('tagSettingsSearch', ( localize('tagSettingsSearch', \"Tag...\")), ( localize('tagSettingsSearchTooltip', \"Add tag filter\")), `@${GENERAL_TAG_SETTING_TAG}`, true),\n            this.createAction('langSettingsSearch', ( localize('langSettingsSearch', \"Language...\")), ( localize('langSettingsSearchTooltip', \"Add language ID filter\")), `@${LANGUAGE_SETTING_TAG}`, true),\n            this.createToggleAction('onlineSettingsSearch', ( localize('onlineSettingsSearch', \"Online services\")), ( localize('onlineSettingsSearchTooltip', \"Show settings for online services\")), '@tag:usesOnlineServices'),\n            this.createToggleAction('policySettingsSearch', ( localize('policySettingsSearch', \"Policy services\")), ( localize('policySettingsSearchTooltip', \"Show settings for policy services\")), `@${POLICY_SETTING_TAG}`)\n        ];\n    }\n};\nSettingsSearchFilterDropdownMenuActionViewItem = ( __decorate([\n    ( __param(3, IContextMenuService))\n], SettingsSearchFilterDropdownMenuActionViewItem));\nexport { SettingsSearchFilterDropdownMenuActionViewItem };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport * as aria from 'monaco-editor/esm/vs/base/browser/ui/aria/aria.js';\nimport { StandardKeyboardEvent } from 'monaco-editor/esm/vs/base/browser/keyboardEvent.js';\nimport { ActionBar } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js';\nimport { Button } from 'monaco-editor/esm/vs/base/browser/ui/button/button.js';\nimport { Action } from 'monaco-editor/esm/vs/base/common/actions.js';\nimport { Delayer, ThrottledDelayer, timeout, IntervalTimer } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from 'monaco-editor/esm/vs/base/common/cancellation.js';\nimport { fromNow } from '../../../../base/common/date.js';\nimport { isCancellationError } from 'monaco-editor/esm/vs/base/common/errors.js';\nimport { Event, Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Iterable } from 'monaco-editor/esm/vs/base/common/iterator.js';\nimport { DisposableStore, dispose, Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport * as platform from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { withUndefinedAsNull, withNullAsUndefined } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport './media/settingsEditor2.css.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';\nimport { asCssVariable, badgeBackground, badgeForeground, contrastBorder, editorForeground } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';\nimport { IUserDataSyncEnablementService, IUserDataSyncService } from '../../../../platform/userDataSync/common/userDataSync.js';\nimport { EditorPane } from '../../../browser/parts/editor/editorPane.js';\nimport { SuggestEnabledInput } from '../../codeEditor/browser/suggestEnabledInput/suggestEnabledInput.js';\nimport { SettingsTargetsWidget } from './preferencesWidgets.js';\nimport { getCommonlyUsedData, tocData } from './settingsLayout.js';\nimport { AbstractSettingRenderer, SettingTreeRenderers, SettingsTree, resolveSettingsTree, createTocTreeForExtensionSettings, resolveConfiguredUntrustedSettings } from './settingsTree.js';\nimport { SettingsTreeSettingElement, parseQuery, SettingsTreeModel, SearchResultModel, SettingsTreeGroupElement } from './settingsTreeModels.js';\nimport { TOCTreeModel, TOCTree, createTOCIterator } from './tocTree.js';\nimport { MODIFIED_SETTING_TAG, REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG, WORKSPACE_TRUST_SETTING_TAG, ID_SETTING_TAG, EXTENSION_SETTING_TAG, FEATURE_SETTING_TAG, POLICY_SETTING_TAG, CONTEXT_SETTINGS_EDITOR, CONTEXT_SETTINGS_SEARCH_FOCUS, CONTEXT_TOC_ROW_FOCUS, CONTEXT_SETTINGS_ROW_FOCUS, LANGUAGE_SETTING_TAG, SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, SETTINGS_EDITOR_COMMAND_SUGGEST_FILTERS, getExperimentalExtensionToggleData, IPreferencesSearchService } from '../common/preferences.js';\nimport { settingsTextInputBorder, settingsHeaderBorder, settingsSashBorder } from '../common/settingsEditorColorRegistry.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { SettingValueType, validateSettingsEditorOptions, SettingMatchType, IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { Settings2EditorModel, nullRange } from '../../../services/preferences/common/preferencesModels.js';\nimport { IUserDataSyncWorkbenchService } from '../../../services/userDataSync/common/userDataSync.js';\nimport { preferencesClearInputIcon, preferencesFilterIcon } from './preferencesIcons.js';\nimport { IWorkspaceTrustManagementService } from 'monaco-editor/esm/vs/platform/workspace/common/workspaceTrust.js';\nimport { IWorkbenchConfigurationService } from '../../../services/configuration/common/configuration.js';\nimport { ITextResourceConfigurationService } from 'monaco-editor/esm/vs/editor/common/services/textResourceConfiguration.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { SplitView, Sizing } from 'monaco-editor/esm/vs/base/browser/ui/splitview/splitview.js';\nimport { Color } from 'monaco-editor/esm/vs/base/common/color.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport { SettingsSearchFilterDropdownMenuActionViewItem } from './settingsSearchMenu.js';\nimport { IExtensionManagementService, IExtensionGalleryService } from '../../../../platform/extensionManagement/common/extensionManagement.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { defaultButtonStyles } from 'monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js';\nimport { IWorkbenchAssignmentService } from '../../../services/assignment/common/assignmentService.js';\nimport { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';\nimport { IEnvironmentService } from 'monaco-editor/esm/vs/platform/environment/common/environment.js';\nfunction createGroupIterator(group) {\n    return ( Iterable.map(group.children, g => {\n        return {\n            element: g,\n            children: g instanceof SettingsTreeGroupElement ?\n                createGroupIterator(g) :\n                undefined\n        };\n    }));\n}\nconst $ = dom.$;\nconst searchBoxLabel = ( localize('SearchSettings.AriaLabel', \"Search settings\"));\nconst SETTINGS_EDITOR_STATE_KEY = 'settingsEditorState';\nlet SettingsEditor2 = class SettingsEditor2 extends EditorPane {\n    static { this.ID = 'workbench.editor.settings2'; }\n    static { this.NUM_INSTANCES = 0; }\n    static { this.SEARCH_DEBOUNCE = 200; }\n    static { this.SETTING_UPDATE_FAST_DEBOUNCE = 200; }\n    static { this.SETTING_UPDATE_SLOW_DEBOUNCE = 1000; }\n    static { this.CONFIG_SCHEMA_UPDATE_DELAYER = 500; }\n    static { this.TOC_MIN_WIDTH = 100; }\n    static { this.TOC_RESET_WIDTH = 200; }\n    static { this.EDITOR_MIN_WIDTH = 500; }\n    static { this.NARROW_TOTAL_WIDTH = SettingsEditor2.TOC_RESET_WIDTH + SettingsEditor2.EDITOR_MIN_WIDTH; }\n    static { this.SUGGESTIONS = [\n        `@${MODIFIED_SETTING_TAG}`,\n        '@tag:notebookLayout',\n        '@tag:notebookOutputLayout',\n        `@tag:${REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG}`,\n        `@tag:${WORKSPACE_TRUST_SETTING_TAG}`,\n        '@tag:sync',\n        '@tag:usesOnlineServices',\n        '@tag:telemetry',\n        '@tag:accessibility',\n        `@${ID_SETTING_TAG}`,\n        `@${EXTENSION_SETTING_TAG}`,\n        `@${FEATURE_SETTING_TAG}scm`,\n        `@${FEATURE_SETTING_TAG}explorer`,\n        `@${FEATURE_SETTING_TAG}search`,\n        `@${FEATURE_SETTING_TAG}debug`,\n        `@${FEATURE_SETTING_TAG}extensions`,\n        `@${FEATURE_SETTING_TAG}terminal`,\n        `@${FEATURE_SETTING_TAG}task`,\n        `@${FEATURE_SETTING_TAG}problems`,\n        `@${FEATURE_SETTING_TAG}output`,\n        `@${FEATURE_SETTING_TAG}comments`,\n        `@${FEATURE_SETTING_TAG}remote`,\n        `@${FEATURE_SETTING_TAG}timeline`,\n        `@${FEATURE_SETTING_TAG}notebook`,\n        `@${POLICY_SETTING_TAG}`\n    ]; }\n    static shouldSettingUpdateFast(type) {\n        if (Array.isArray(type)) {\n            return false;\n        }\n        return type === SettingValueType.Enum ||\n            type === SettingValueType.Array ||\n            type === SettingValueType.BooleanObject ||\n            type === SettingValueType.Object ||\n            type === SettingValueType.Complex ||\n            type === SettingValueType.Boolean ||\n            type === SettingValueType.Exclude ||\n            type === SettingValueType.Include;\n    }\n    constructor(telemetryService, configurationService, textResourceConfigurationService, themeService, preferencesService, instantiationService, preferencesSearchService, logService, contextKeyService, storageService, editorGroupService, userDataSyncWorkbenchService, userDataSyncEnablementService, workspaceTrustManagementService, extensionService, languageService, extensionManagementService, workbenchAssignmentService, productService, environmentService, extensionGalleryService) {\n        super(SettingsEditor2.ID, telemetryService, themeService, storageService);\n        this.configurationService = configurationService;\n        this.preferencesService = preferencesService;\n        this.instantiationService = instantiationService;\n        this.preferencesSearchService = preferencesSearchService;\n        this.logService = logService;\n        this.storageService = storageService;\n        this.editorGroupService = editorGroupService;\n        this.userDataSyncWorkbenchService = userDataSyncWorkbenchService;\n        this.userDataSyncEnablementService = userDataSyncEnablementService;\n        this.workspaceTrustManagementService = workspaceTrustManagementService;\n        this.extensionService = extensionService;\n        this.languageService = languageService;\n        this.workbenchAssignmentService = workbenchAssignmentService;\n        this.productService = productService;\n        this.environmentService = environmentService;\n        this.extensionGalleryService = extensionGalleryService;\n        this.searchInProgress = null;\n        this.pendingSettingUpdate = null;\n        this._searchResultModel = null;\n        this.searchResultLabel = null;\n        this.lastSyncedLabel = null;\n        this._currentFocusContext = 0 ;\n        this.hasWarnedMissingSettings = false;\n        this.tocFocusedElement = null;\n        this.treeFocusedElement = null;\n        this.settingsTreeScrollTop = 0;\n        this.installedExtensionIds = [];\n        this.delayedFilterLogging = ( new Delayer(1000));\n        this.localSearchDelayer = ( new Delayer(300));\n        this.remoteSearchThrottle = ( new ThrottledDelayer(200));\n        this.viewState = { settingsTarget: 3  };\n        this.settingFastUpdateDelayer = ( new Delayer(SettingsEditor2.SETTING_UPDATE_FAST_DEBOUNCE));\n        this.settingSlowUpdateDelayer = ( new Delayer(SettingsEditor2.SETTING_UPDATE_SLOW_DEBOUNCE));\n        this.searchInputDelayer = ( new Delayer(SettingsEditor2.SEARCH_DEBOUNCE));\n        this.updatedConfigSchemaDelayer = ( new Delayer(SettingsEditor2.CONFIG_SCHEMA_UPDATE_DELAYER));\n        this.inSettingsEditorContextKey = CONTEXT_SETTINGS_EDITOR.bindTo(contextKeyService);\n        this.searchFocusContextKey = CONTEXT_SETTINGS_SEARCH_FOCUS.bindTo(contextKeyService);\n        this.tocRowFocused = CONTEXT_TOC_ROW_FOCUS.bindTo(contextKeyService);\n        this.settingRowFocused = CONTEXT_SETTINGS_ROW_FOCUS.bindTo(contextKeyService);\n        this.scheduledRefreshes = ( new Map());\n        this.editorMemento = this.getEditorMemento(editorGroupService, textResourceConfigurationService, SETTINGS_EDITOR_STATE_KEY);\n        this._register(configurationService.onDidChangeConfiguration(e => {\n            if (e.source !== 7 ) {\n                this.onConfigUpdate(e.affectedKeys);\n            }\n        }));\n        this._register(workspaceTrustManagementService.onDidChangeTrust(() => {\n            this.searchResultModel?.updateWorkspaceTrust(workspaceTrustManagementService.isWorkspaceTrusted());\n            if (this.settingsTreeModel) {\n                this.settingsTreeModel.updateWorkspaceTrust(workspaceTrustManagementService.isWorkspaceTrusted());\n                this.renderTree();\n            }\n        }));\n        this._register(configurationService.onDidChangeRestrictedSettings(e => {\n            if (e.default.length && this.currentSettingsModel) {\n                this.updateElementsByKey(( new Set(e.default)));\n            }\n        }));\n        this.modelDisposables = this._register(( new DisposableStore()));\n        if (!SettingsEditor2.SUGGESTIONS.includes(`@${LANGUAGE_SETTING_TAG}`)) {\n            SettingsEditor2.SUGGESTIONS.push(`@${LANGUAGE_SETTING_TAG}`);\n        }\n        extensionManagementService.getInstalled().then(extensions => {\n            this.installedExtensionIds = ( extensions\n                .filter(ext => ext.manifest && ext.manifest.contributes && ext.manifest.contributes.configuration)\n                .map(ext => ext.identifier.id));\n        });\n    }\n    get minimumWidth() { return SettingsEditor2.EDITOR_MIN_WIDTH; }\n    get maximumWidth() { return Number.POSITIVE_INFINITY; }\n    get minimumHeight() { return 180; }\n    set minimumWidth(value) { }\n    set maximumWidth(value) { }\n    get currentSettingsModel() {\n        return this.searchResultModel || this.settingsTreeModel;\n    }\n    get searchResultModel() {\n        return this._searchResultModel;\n    }\n    set searchResultModel(value) {\n        this._searchResultModel = value;\n        this.rootElement.classList.toggle('search-mode', !!this._searchResultModel);\n    }\n    get focusedSettingDOMElement() {\n        const focused = this.settingsTree.getFocus()[0];\n        if (!(focused instanceof SettingsTreeSettingElement)) {\n            return;\n        }\n        return this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), focused.setting.key)[0];\n    }\n    get currentFocusContext() {\n        return this._currentFocusContext;\n    }\n    createEditor(parent) {\n        parent.setAttribute('tabindex', '-1');\n        this.rootElement = dom.append(parent, $('.settings-editor', { tabindex: '-1' }));\n        this.createHeader(this.rootElement);\n        this.createBody(this.rootElement);\n        this.addCtrlAInterceptor(this.rootElement);\n        this.updateStyles();\n    }\n    async setInput(input, options, context, token) {\n        this.inSettingsEditorContextKey.set(true);\n        await super.setInput(input, options, context, token);\n        await timeout(0);\n        if (!this.input) {\n            return;\n        }\n        const model = await this.input.resolve(options);\n        if (token.isCancellationRequested || !(model instanceof Settings2EditorModel)) {\n            return;\n        }\n        this.modelDisposables.clear();\n        this.modelDisposables.add(model.onDidChangeGroups(() => {\n            this.updatedConfigSchemaDelayer.trigger(() => {\n                this.onConfigUpdate(undefined, false, true);\n            });\n        }));\n        this.defaultSettingsEditorModel = model;\n        options = options || validateSettingsEditorOptions({});\n        if (!this.viewState.settingsTarget || !this.settingsTargetsWidget.settingsTarget) {\n            const optionsHasViewStateTarget = options.viewState && options.viewState.settingsTarget;\n            if (!options.target && !optionsHasViewStateTarget) {\n                options.target = 3 ;\n            }\n        }\n        this._setOptions(options);\n        this.onConfigUpdate(undefined, true).then(() => {\n            this._register(input.onWillDispose(() => {\n                this.searchWidget.setValue('');\n            }));\n            this.updateTreeScrollSync();\n        });\n    }\n    restoreCachedState() {\n        const cachedState = this.group && this.input && this.editorMemento.loadEditorState(this.group, this.input);\n        if (cachedState && typeof cachedState.target === 'object') {\n            cachedState.target = URI.revive(cachedState.target);\n        }\n        if (cachedState) {\n            const settingsTarget = cachedState.target;\n            this.settingsTargetsWidget.settingsTarget = settingsTarget;\n            this.viewState.settingsTarget = settingsTarget;\n            this.searchWidget.setValue(cachedState.searchQuery);\n        }\n        if (this.input) {\n            this.editorMemento.clearEditorState(this.input, this.group);\n        }\n        return withUndefinedAsNull(cachedState);\n    }\n    getViewState() {\n        return this.viewState;\n    }\n    setOptions(options) {\n        super.setOptions(options);\n        if (options) {\n            this._setOptions(options);\n        }\n    }\n    _setOptions(options) {\n        if (options.focusSearch && !platform.isIOS) {\n            this.focusSearch();\n        }\n        const recoveredViewState = options.viewState ?\n            options.viewState : undefined;\n        const query = recoveredViewState?.query ?? options.query;\n        if (query !== undefined) {\n            this.searchWidget.setValue(query);\n            this.viewState.query = query;\n        }\n        const target = options.folderUri ?? recoveredViewState?.settingsTarget ?? options.target;\n        if (target) {\n            this.settingsTargetsWidget.settingsTarget = target;\n            this.viewState.settingsTarget = target;\n        }\n    }\n    clearInput() {\n        this.inSettingsEditorContextKey.set(false);\n        super.clearInput();\n    }\n    layout(dimension) {\n        this.dimension = dimension;\n        if (!this.isVisible()) {\n            return;\n        }\n        this.layoutSplitView(dimension);\n        const innerWidth = Math.min(this.headerContainer.clientWidth, dimension.width) - 24 * 2;\n        const monacoWidth = innerWidth - 10 - this.countElement.clientWidth - this.controlsElement.clientWidth - 12;\n        this.searchWidget.layout(new dom.Dimension(monacoWidth, 20));\n        this.rootElement.classList.toggle('narrow-width', dimension.width < SettingsEditor2.NARROW_TOTAL_WIDTH);\n    }\n    focus() {\n        if (this._currentFocusContext === 0 ) {\n            if (!platform.isIOS) {\n                this.focusSearch();\n            }\n        }\n        else if (this._currentFocusContext === 3 ) {\n            const element = this.focusedSettingDOMElement;\n            if (element) {\n                const control = element.querySelector(AbstractSettingRenderer.CONTROL_SELECTOR);\n                if (control) {\n                    control.focus();\n                    return;\n                }\n            }\n        }\n        else if (this._currentFocusContext === 2 ) {\n            this.settingsTree.domFocus();\n        }\n        else if (this._currentFocusContext === 1 ) {\n            this.tocTree.domFocus();\n        }\n    }\n    setEditorVisible(visible, group) {\n        super.setEditorVisible(visible, group);\n        if (!visible) {\n            setTimeout(() => {\n                this.searchWidget.onHide();\n            }, 0);\n        }\n    }\n    focusSettings(focusSettingInput = false) {\n        const focused = this.settingsTree.getFocus();\n        if (!focused.length) {\n            this.settingsTree.focusFirst();\n        }\n        this.settingsTree.domFocus();\n        if (focusSettingInput) {\n            const controlInFocusedRow = this.settingsTree.getHTMLElement().querySelector(`.focused ${AbstractSettingRenderer.CONTROL_SELECTOR}`);\n            if (controlInFocusedRow) {\n                controlInFocusedRow.focus();\n            }\n        }\n    }\n    focusTOC() {\n        this.tocTree.domFocus();\n    }\n    showContextMenu() {\n        const focused = this.settingsTree.getFocus()[0];\n        const rowElement = this.focusedSettingDOMElement;\n        if (rowElement && focused instanceof SettingsTreeSettingElement) {\n            this.settingRenderers.showContextMenu(focused, rowElement);\n        }\n    }\n    focusSearch(filter, selectAll = true) {\n        if (filter && this.searchWidget) {\n            this.searchWidget.setValue(filter);\n        }\n        this.searchWidget.focus(selectAll);\n    }\n    clearSearchResults() {\n        this.searchWidget.setValue('');\n        this.focusSearch();\n    }\n    clearSearchFilters() {\n        const query = this.searchWidget.getValue();\n        const splitQuery = query.split(' ').filter(word => {\n            return word.length && !( SettingsEditor2.SUGGESTIONS.some(suggestion => word.startsWith(suggestion)));\n        });\n        this.searchWidget.setValue(splitQuery.join(' '));\n    }\n    updateInputAriaLabel() {\n        let label = searchBoxLabel;\n        if (this.searchResultLabel) {\n            label += `. ${this.searchResultLabel}`;\n        }\n        if (this.lastSyncedLabel) {\n            label += `. ${this.lastSyncedLabel}`;\n        }\n        this.searchWidget.updateAriaLabel(label);\n    }\n    createHeader(parent) {\n        this.headerContainer = dom.append(parent, $('.settings-header'));\n        const searchContainer = dom.append(this.headerContainer, $('.search-container'));\n        const clearInputAction = ( new Action(SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, ( localize('clearInput', \"Clear Settings Search Input\")), ThemeIcon.asClassName(preferencesClearInputIcon), false, async () => this.clearSearchResults()));\n        const filterAction = ( new Action(SETTINGS_EDITOR_COMMAND_SUGGEST_FILTERS, ( localize('filterInput', \"Filter Settings\")), ThemeIcon.asClassName(preferencesFilterIcon)));\n        this.searchWidget = this._register(this.instantiationService.createInstance(SuggestEnabledInput, `${SettingsEditor2.ID}.searchbox`, searchContainer, {\n            triggerCharacters: ['@', ':'],\n            provideResults: (query) => {\n                const queryParts = query.split(/\\s/g);\n                if (queryParts[queryParts.length - 1].startsWith(`@${LANGUAGE_SETTING_TAG}`)) {\n                    const sortedLanguages = ( this.languageService.getRegisteredLanguageIds().map(languageId => {\n                        return `@${LANGUAGE_SETTING_TAG}${languageId} `;\n                    })).sort();\n                    return sortedLanguages.filter(langFilter => !query.includes(langFilter));\n                }\n                else if (queryParts[queryParts.length - 1].startsWith(`@${EXTENSION_SETTING_TAG}`)) {\n                    const installedExtensionsTags = ( this.installedExtensionIds.map(extensionId => {\n                        return `@${EXTENSION_SETTING_TAG}${extensionId} `;\n                    })).sort();\n                    return installedExtensionsTags.filter(extFilter => !query.includes(extFilter));\n                }\n                else if (queryParts[queryParts.length - 1].startsWith('@')) {\n                    return ( SettingsEditor2.SUGGESTIONS.filter(tag => !query.includes(tag)).map(tag => tag.endsWith(':') ? tag : tag + ' '));\n                }\n                return [];\n            }\n        }, searchBoxLabel, 'settingseditor:searchinput' + SettingsEditor2.NUM_INSTANCES++, {\n            placeholderText: searchBoxLabel,\n            focusContextKey: this.searchFocusContextKey,\n            styleOverrides: {\n                inputBorder: settingsTextInputBorder\n            }\n        }));\n        this._register(this.searchWidget.onDidFocus(() => {\n            this._currentFocusContext = 0 ;\n        }));\n        this.countElement = dom.append(searchContainer, dom.$('.settings-count-widget.monaco-count-badge.long'));\n        this.countElement.style.backgroundColor = asCssVariable(badgeBackground);\n        this.countElement.style.color = asCssVariable(badgeForeground);\n        this.countElement.style.border = `1px solid ${asCssVariable(contrastBorder)}`;\n        this._register(this.searchWidget.onInputDidChange(() => {\n            const searchVal = this.searchWidget.getValue();\n            clearInputAction.enabled = !!searchVal;\n            this.searchInputDelayer.trigger(() => this.onSearchInputChanged());\n        }));\n        const headerControlsContainer = dom.append(this.headerContainer, $('.settings-header-controls'));\n        headerControlsContainer.style.borderColor = asCssVariable(settingsHeaderBorder);\n        const targetWidgetContainer = dom.append(headerControlsContainer, $('.settings-target-container'));\n        this.settingsTargetsWidget = this._register(this.instantiationService.createInstance(SettingsTargetsWidget, targetWidgetContainer, { enableRemoteSettings: true }));\n        this.settingsTargetsWidget.settingsTarget = 3 ;\n        this.settingsTargetsWidget.onDidTargetChange(target => this.onDidSettingsTargetChange(target));\n        this._register(dom.addDisposableListener(targetWidgetContainer, dom.EventType.KEY_DOWN, e => {\n            const event = ( new StandardKeyboardEvent(e));\n            if (event.keyCode === 18 ) {\n                this.focusSettings();\n            }\n        }));\n        if (this.userDataSyncWorkbenchService.enabled && this.userDataSyncEnablementService.canToggleEnablement()) {\n            const syncControls = this._register(this.instantiationService.createInstance(SyncControls, headerControlsContainer));\n            this._register(syncControls.onDidChangeLastSyncedLabel(lastSyncedLabel => {\n                this.lastSyncedLabel = lastSyncedLabel;\n                this.updateInputAriaLabel();\n            }));\n        }\n        this.controlsElement = dom.append(searchContainer, dom.$('.settings-clear-widget'));\n        const actionBar = this._register(( new ActionBar(this.controlsElement, {\n            animated: false,\n            actionViewItemProvider: (action) => {\n                if (action.id === filterAction.id) {\n                    return this.instantiationService.createInstance(SettingsSearchFilterDropdownMenuActionViewItem, action, this.actionRunner, this.searchWidget);\n                }\n                return undefined;\n            }\n        })));\n        actionBar.push([clearInputAction, filterAction], { label: false, icon: true });\n    }\n    onDidSettingsTargetChange(target) {\n        this.viewState.settingsTarget = target;\n        this.onConfigUpdate(undefined, true);\n    }\n    onDidClickSetting(evt, recursed) {\n        const targetElement = this.currentSettingsModel.getElementsByName(evt.targetKey)?.[0];\n        let revealFailed = false;\n        if (targetElement) {\n            let sourceTop = 0.5;\n            try {\n                const _sourceTop = this.settingsTree.getRelativeTop(evt.source);\n                if (_sourceTop !== null) {\n                    sourceTop = _sourceTop;\n                }\n            }\n            catch {\n            }\n            if (this.viewState.filterToCategory && evt.source.displayCategory !== targetElement.displayCategory) {\n                this.tocTree.setFocus([]);\n            }\n            try {\n                this.settingsTree.reveal(targetElement, sourceTop);\n            }\n            catch (_) {\n                revealFailed = true;\n            }\n            if (!revealFailed) {\n                setTimeout(() => {\n                    this.settingsTree.setFocus([targetElement]);\n                }, 50);\n                const domElements = this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), evt.targetKey);\n                if (domElements && domElements[0]) {\n                    const control = domElements[0].querySelector(AbstractSettingRenderer.CONTROL_SELECTOR);\n                    if (control) {\n                        control.focus();\n                    }\n                }\n            }\n        }\n        if (!recursed && (!targetElement || revealFailed)) {\n            const p = this.triggerSearch('');\n            p.then(() => {\n                this.searchWidget.setValue('');\n                this.onDidClickSetting(evt, true);\n            });\n        }\n    }\n    switchToSettingsFile() {\n        const query = parseQuery(this.searchWidget.getValue()).query;\n        return this.openSettingsFile({ query });\n    }\n    async openSettingsFile(options) {\n        const currentSettingsTarget = this.settingsTargetsWidget.settingsTarget;\n        const openOptions = { jsonEditor: true, ...options };\n        if (currentSettingsTarget === 3 ) {\n            if (options?.revealSetting) {\n                const configurationProperties = ( Registry.as(Extensions.Configuration)).getConfigurationProperties();\n                const configurationScope = configurationProperties[options?.revealSetting.key]?.scope;\n                if (configurationScope === 1 ) {\n                    return this.preferencesService.openApplicationSettings(openOptions);\n                }\n            }\n            return this.preferencesService.openUserSettings(openOptions);\n        }\n        else if (currentSettingsTarget === 4 ) {\n            return this.preferencesService.openRemoteSettings(openOptions);\n        }\n        else if (currentSettingsTarget === 5 ) {\n            return this.preferencesService.openWorkspaceSettings(openOptions);\n        }\n        else if (URI.isUri(currentSettingsTarget)) {\n            return this.preferencesService.openFolderSettings({ folderUri: currentSettingsTarget, ...openOptions });\n        }\n        return undefined;\n    }\n    createBody(parent) {\n        this.bodyContainer = dom.append(parent, $('.settings-body'));\n        this.noResultsMessage = dom.append(this.bodyContainer, $('.no-results-message'));\n        this.noResultsMessage.innerText = ( localize('noResults', \"No Settings Found\"));\n        this.clearFilterLinkContainer = $('span.clear-search-filters');\n        this.clearFilterLinkContainer.textContent = ' - ';\n        const clearFilterLink = dom.append(this.clearFilterLinkContainer, $('a.pointer.prominent', { tabindex: 0 }, ( localize('clearSearchFilters', 'Clear Filters'))));\n        this._register(dom.addDisposableListener(clearFilterLink, dom.EventType.CLICK, (e) => {\n            dom.EventHelper.stop(e, false);\n            this.clearSearchFilters();\n        }));\n        dom.append(this.noResultsMessage, this.clearFilterLinkContainer);\n        this.noResultsMessage.style.color = asCssVariable(editorForeground);\n        this.tocTreeContainer = $('.settings-toc-container');\n        this.settingsTreeContainer = $('.settings-tree-container');\n        this.createTOC(this.tocTreeContainer);\n        this.createSettingsTree(this.settingsTreeContainer);\n        this.splitView = ( new SplitView(this.bodyContainer, {\n            orientation: 1 ,\n            proportionalLayout: true\n        }));\n        const startingWidth = this.storageService.getNumber('settingsEditor2.splitViewWidth', 0 , SettingsEditor2.TOC_RESET_WIDTH);\n        this.splitView.addView({\n            onDidChange: Event.None,\n            element: this.tocTreeContainer,\n            minimumSize: SettingsEditor2.TOC_MIN_WIDTH,\n            maximumSize: Number.POSITIVE_INFINITY,\n            layout: (width, _, height) => {\n                this.tocTreeContainer.style.width = `${width}px`;\n                this.tocTree.layout(height, width);\n            }\n        }, startingWidth, undefined, true);\n        this.splitView.addView({\n            onDidChange: Event.None,\n            element: this.settingsTreeContainer,\n            minimumSize: SettingsEditor2.EDITOR_MIN_WIDTH,\n            maximumSize: Number.POSITIVE_INFINITY,\n            layout: (width, _, height) => {\n                this.settingsTreeContainer.style.width = `${width}px`;\n                this.settingsTree.layout(height, width);\n            }\n        }, Sizing.Distribute, undefined, true);\n        this._register(this.splitView.onDidSashReset(() => {\n            const totalSize = this.splitView.getViewSize(0) + this.splitView.getViewSize(1);\n            this.splitView.resizeView(0, SettingsEditor2.TOC_RESET_WIDTH);\n            this.splitView.resizeView(1, totalSize - SettingsEditor2.TOC_RESET_WIDTH);\n        }));\n        this._register(this.splitView.onDidSashChange(() => {\n            const width = this.splitView.getViewSize(0);\n            this.storageService.store('settingsEditor2.splitViewWidth', width, 0 , 0 );\n        }));\n        const borderColor = this.theme.getColor(settingsSashBorder);\n        this.splitView.style({ separatorBorder: borderColor });\n    }\n    addCtrlAInterceptor(container) {\n        this._register(dom.addStandardDisposableListener(container, dom.EventType.KEY_DOWN, (e) => {\n            if (e.keyCode === 31  &&\n                (platform.isMacintosh ? e.metaKey : e.ctrlKey) &&\n                e.target.tagName !== 'TEXTAREA' &&\n                e.target.tagName !== 'INPUT') {\n                e.browserEvent.stopPropagation();\n                e.browserEvent.preventDefault();\n            }\n        }));\n    }\n    createTOC(container) {\n        this.tocTreeModel = this.instantiationService.createInstance(TOCTreeModel, this.viewState);\n        this.tocTree = this._register(this.instantiationService.createInstance(TOCTree, dom.append(container, $('.settings-toc-wrapper', {\n            'role': 'navigation',\n            'aria-label': ( localize('settings', \"Settings\")),\n        })), this.viewState));\n        this._register(this.tocTree.onDidFocus(() => {\n            this._currentFocusContext = 1 ;\n        }));\n        this._register(this.tocTree.onDidChangeFocus(e => {\n            const element = withUndefinedAsNull(e.elements?.[0]);\n            if (this.tocFocusedElement === element) {\n                return;\n            }\n            this.tocFocusedElement = element;\n            this.tocTree.setSelection(element ? [element] : []);\n            if (this.searchResultModel) {\n                if (this.viewState.filterToCategory !== element) {\n                    this.viewState.filterToCategory = withNullAsUndefined(element);\n                    this.renderTree(undefined, true);\n                    this.settingsTree.scrollTop = 0;\n                }\n            }\n            else if (element && (!e.browserEvent || !e.browserEvent.fromScroll)) {\n                this.settingsTree.reveal(element, 0);\n                this.settingsTree.setFocus([element]);\n            }\n        }));\n        this._register(this.tocTree.onDidFocus(() => {\n            this.tocRowFocused.set(true);\n        }));\n        this._register(this.tocTree.onDidBlur(() => {\n            this.tocRowFocused.set(false);\n        }));\n    }\n    applyFilter(filter) {\n        if (this.searchWidget && !this.searchWidget.getValue().includes(filter)) {\n            const newQuery = `${filter} ${this.searchWidget.getValue().trimStart()}`;\n            this.focusSearch(newQuery, false);\n        }\n    }\n    removeLanguageFilters() {\n        if (this.searchWidget && this.searchWidget.getValue().includes(`@${LANGUAGE_SETTING_TAG}`)) {\n            const query = this.searchWidget.getValue().split(' ');\n            const newQuery = query.filter(word => !word.startsWith(`@${LANGUAGE_SETTING_TAG}`)).join(' ');\n            this.focusSearch(newQuery, false);\n        }\n    }\n    createSettingsTree(container) {\n        this.settingRenderers = this.instantiationService.createInstance(SettingTreeRenderers);\n        this._register(this.settingRenderers.onDidChangeSetting(e => this.onDidChangeSetting(e.key, e.value, e.type, e.manualReset, e.scope)));\n        this._register(this.settingRenderers.onDidOpenSettings(settingKey => {\n            this.openSettingsFile({ revealSetting: { key: settingKey, edit: true } });\n        }));\n        this._register(this.settingRenderers.onDidClickSettingLink(settingName => this.onDidClickSetting(settingName)));\n        this._register(this.settingRenderers.onDidFocusSetting(element => {\n            this.settingsTree.setFocus([element]);\n            this._currentFocusContext = 3 ;\n            this.settingRowFocused.set(false);\n        }));\n        this._register(this.settingRenderers.onDidChangeSettingHeight((params) => {\n            const { element, height } = params;\n            try {\n                this.settingsTree.updateElementHeight(element, height);\n            }\n            catch (e) {\n            }\n        }));\n        this._register(this.settingRenderers.onApplyFilter((filter) => this.applyFilter(filter)));\n        this._register(this.settingRenderers.onDidClickOverrideElement((element) => {\n            this.removeLanguageFilters();\n            if (element.language) {\n                this.applyFilter(`@${LANGUAGE_SETTING_TAG}${element.language}`);\n            }\n            if (element.scope === 'workspace') {\n                this.settingsTargetsWidget.updateTarget(5 );\n            }\n            else if (element.scope === 'user') {\n                this.settingsTargetsWidget.updateTarget(3 );\n            }\n            else if (element.scope === 'remote') {\n                this.settingsTargetsWidget.updateTarget(4 );\n            }\n            this.applyFilter(`@${ID_SETTING_TAG}${element.settingKey}`);\n        }));\n        this.settingsTree = this._register(this.instantiationService.createInstance(SettingsTree, container, this.viewState, this.settingRenderers.allRenderers));\n        this._register(this.settingsTree.onDidScroll(() => {\n            if (this.settingsTree.scrollTop === this.settingsTreeScrollTop) {\n                return;\n            }\n            this.settingsTreeScrollTop = this.settingsTree.scrollTop;\n            setTimeout(() => {\n                this.updateTreeScrollSync();\n            }, 0);\n        }));\n        this._register(this.settingsTree.onDidFocus(() => {\n            const classList = document.activeElement?.classList;\n            if (classList && classList.contains('monaco-list') && classList.contains('settings-editor-tree')) {\n                this._currentFocusContext = 2 ;\n                this.settingRowFocused.set(true);\n                this.treeFocusedElement ??= withUndefinedAsNull(this.settingsTree.firstVisibleElement);\n                if (this.treeFocusedElement) {\n                    this.treeFocusedElement.tabbable = true;\n                }\n            }\n        }));\n        this._register(this.settingsTree.onDidBlur(() => {\n            this.settingRowFocused.set(false);\n            this.treeFocusedElement = null;\n        }));\n        this._register(this.settingsTree.onDidChangeFocus(e => {\n            const element = e.elements[0];\n            if (this.treeFocusedElement === element) {\n                return;\n            }\n            if (this.treeFocusedElement) {\n                this.treeFocusedElement.tabbable = false;\n            }\n            this.treeFocusedElement = element;\n            if (this.treeFocusedElement) {\n                this.treeFocusedElement.tabbable = true;\n            }\n            this.settingsTree.setSelection(element ? [element] : []);\n        }));\n    }\n    onDidChangeSetting(key, value, type, manualReset, scope) {\n        const parsedQuery = parseQuery(this.searchWidget.getValue());\n        const languageFilter = parsedQuery.languageFilter;\n        if (manualReset || (this.pendingSettingUpdate && this.pendingSettingUpdate.key !== key)) {\n            this.updateChangedSetting(key, value, manualReset, languageFilter, scope);\n        }\n        this.pendingSettingUpdate = { key, value, languageFilter };\n        if (SettingsEditor2.shouldSettingUpdateFast(type)) {\n            this.settingFastUpdateDelayer.trigger(() => this.updateChangedSetting(key, value, manualReset, languageFilter, scope));\n        }\n        else {\n            this.settingSlowUpdateDelayer.trigger(() => this.updateChangedSetting(key, value, manualReset, languageFilter, scope));\n        }\n    }\n    updateTreeScrollSync() {\n        this.settingRenderers.cancelSuggesters();\n        if (this.searchResultModel) {\n            return;\n        }\n        if (!this.tocTreeModel) {\n            return;\n        }\n        const elementToSync = this.settingsTree.firstVisibleElement;\n        const element = elementToSync instanceof SettingsTreeSettingElement ? elementToSync.parent :\n            elementToSync instanceof SettingsTreeGroupElement ? elementToSync :\n                null;\n        let nodeExists = true;\n        try {\n            this.tocTree.getNode(element);\n        }\n        catch (e) {\n            nodeExists = false;\n        }\n        if (!nodeExists) {\n            return;\n        }\n        if (element && this.tocTree.getSelection()[0] !== element) {\n            const ancestors = this.getAncestors(element);\n            ancestors.forEach(e => this.tocTree.expand(e));\n            this.tocTree.reveal(element);\n            const elementTop = this.tocTree.getRelativeTop(element);\n            if (typeof elementTop !== 'number') {\n                return;\n            }\n            this.tocTree.collapseAll();\n            ancestors.forEach(e => this.tocTree.expand(e));\n            if (elementTop < 0 || elementTop > 1) {\n                this.tocTree.reveal(element);\n            }\n            else {\n                this.tocTree.reveal(element, elementTop);\n            }\n            this.tocTree.expand(element);\n            this.tocTree.setSelection([element]);\n            const fakeKeyboardEvent = ( new KeyboardEvent('keydown'));\n            fakeKeyboardEvent.fromScroll = true;\n            this.tocTree.setFocus([element], fakeKeyboardEvent);\n        }\n    }\n    getAncestors(element) {\n        const ancestors = [];\n        while (element.parent) {\n            if (element.parent.id !== 'root') {\n                ancestors.push(element.parent);\n            }\n            element = element.parent;\n        }\n        return ancestors.reverse();\n    }\n    updateChangedSetting(key, value, manualReset, languageFilter, scope) {\n        const settingsTarget = this.settingsTargetsWidget.settingsTarget;\n        const resource = URI.isUri(settingsTarget) ? settingsTarget : undefined;\n        const configurationTarget = (resource ? 6  : settingsTarget) ?? 3 ;\n        const overrides = { resource, overrideIdentifiers: languageFilter ? [languageFilter] : undefined };\n        const configurationTargetIsWorkspace = configurationTarget === 5  || configurationTarget === 6 ;\n        const userPassedInManualReset = configurationTargetIsWorkspace || !!languageFilter;\n        const isManualReset = userPassedInManualReset ? manualReset : value === undefined;\n        const inspected = this.configurationService.inspect(key, overrides);\n        if (!userPassedInManualReset && inspected.defaultValue === value) {\n            value = undefined;\n        }\n        return this.configurationService.updateValue(key, value, overrides, configurationTarget, { handleDirtyFile: 'save' })\n            .then(() => {\n            const query = this.searchWidget.getValue();\n            if (query.includes(`@${MODIFIED_SETTING_TAG}`)) {\n                this.refreshTOCTree();\n            }\n            this.renderTree(key, isManualReset);\n            const reportModifiedProps = {\n                key,\n                query,\n                searchResults: this.searchResultModel && this.searchResultModel.getUniqueResults(),\n                rawResults: this.searchResultModel && this.searchResultModel.getRawResults(),\n                showConfiguredOnly: !!this.viewState.tagFilters && ( this.viewState.tagFilters.has(MODIFIED_SETTING_TAG)),\n                isReset: typeof value === 'undefined',\n                settingsTarget: this.settingsTargetsWidget.settingsTarget\n            };\n            return this.reportModifiedSetting(reportModifiedProps);\n        });\n    }\n    reportModifiedSetting(props) {\n        this.pendingSettingUpdate = null;\n        let groupId = undefined;\n        let nlpIndex = undefined;\n        let displayIndex = undefined;\n        if (props.searchResults) {\n            const remoteResult = props.searchResults[1 ];\n            const localResult = props.searchResults[0 ];\n            const localIndex = localResult.filterMatches.findIndex(m => m.setting.key === props.key);\n            groupId = localIndex >= 0 ?\n                'local' :\n                'remote';\n            displayIndex = localIndex >= 0 ?\n                localIndex :\n                remoteResult && (remoteResult.filterMatches.findIndex(m => m.setting.key === props.key) + localResult.filterMatches.length);\n            if (this.searchResultModel) {\n                const rawResults = this.searchResultModel.getRawResults();\n                if (rawResults[1 ]) {\n                    const _nlpIndex = rawResults[1 ].filterMatches.findIndex(m => m.setting.key === props.key);\n                    nlpIndex = _nlpIndex >= 0 ? _nlpIndex : undefined;\n                }\n            }\n        }\n        const reportedTarget = props.settingsTarget === 3  ? 'user' :\n            props.settingsTarget === 4  ? 'user_remote' :\n                props.settingsTarget === 5  ? 'workspace' :\n                    'folder';\n        const data = {\n            key: props.key,\n            groupId,\n            nlpIndex,\n            displayIndex,\n            showConfiguredOnly: props.showConfiguredOnly,\n            isReset: props.isReset,\n            target: reportedTarget\n        };\n        this.telemetryService.publicLog2('settingsEditor.settingModified', data);\n    }\n    onSearchModeToggled() {\n        this.rootElement.classList.remove('no-toc-search');\n        if (this.configurationService.getValue('workbench.settings.settingsSearchTocBehavior') === 'hide') {\n            this.rootElement.classList.toggle('no-toc-search', !!this.searchResultModel);\n        }\n    }\n    scheduleRefresh(element, key = '') {\n        if (key && ( this.scheduledRefreshes.has(key))) {\n            return;\n        }\n        if (!key) {\n            dispose(( this.scheduledRefreshes.values()));\n            this.scheduledRefreshes.clear();\n        }\n        const scheduledRefreshTracker = dom.trackFocus(element);\n        this.scheduledRefreshes.set(key, scheduledRefreshTracker);\n        scheduledRefreshTracker.onDidBlur(() => {\n            scheduledRefreshTracker.dispose();\n            this.scheduledRefreshes.delete(key);\n            this.onConfigUpdate(( new Set([key])));\n        });\n    }\n    addOrRemoveManageExtensionSetting(setting, extension, groups) {\n        const matchingGroups = groups.filter(g => {\n            const lowerCaseId = g.extensionInfo?.id.toLowerCase();\n            return (lowerCaseId === setting.stableExtensionId.toLowerCase() ||\n                lowerCaseId === setting.prereleaseExtensionId.toLowerCase());\n        });\n        const extensionId = setting.displayExtensionId;\n        if (!matchingGroups.length) {\n            const newGroup = {\n                sections: [{\n                        settings: [setting],\n                    }],\n                id: extensionId,\n                title: setting.extensionGroupTitle,\n                titleRange: nullRange,\n                range: nullRange,\n                extensionInfo: {\n                    id: extensionId,\n                    displayName: extension?.displayName,\n                }\n            };\n            groups.push(newGroup);\n            return newGroup;\n        }\n        else if (matchingGroups.length >= 2) {\n            const matchingGroupIndex = matchingGroups.findIndex(group => group.sections.length === 1 && group.sections[0].settings.length === 1 && group.sections[0].settings[0].displayExtensionId);\n            if (matchingGroupIndex !== -1) {\n                groups.splice(matchingGroupIndex, 1);\n            }\n        }\n        return undefined;\n    }\n    async onConfigUpdate(keys, forceRefresh = false, schemaChange = false) {\n        if (keys && this.settingsTreeModel) {\n            return this.updateElementsByKey(keys);\n        }\n        if (!this.defaultSettingsEditorModel) {\n            return;\n        }\n        const groups = this.defaultSettingsEditorModel.settingsGroups.slice(1);\n        const coreSettings = groups.filter(g => !g.extensionInfo);\n        const settingsResult = resolveSettingsTree(tocData, coreSettings, this.logService);\n        const resolvedSettingsRoot = settingsResult.tree;\n        if (settingsResult.leftoverSettings.size && !this.hasWarnedMissingSettings) {\n            const settingKeyList = [];\n            settingsResult.leftoverSettings.forEach(s => {\n                settingKeyList.push(s.key);\n            });\n            this.logService.warn(`SettingsEditor2: Settings not included in settingsLayout.ts: ${settingKeyList.join(', ')}`);\n            this.hasWarnedMissingSettings = true;\n        }\n        const additionalGroups = [];\n        const toggleData = await getExperimentalExtensionToggleData(this.workbenchAssignmentService, this.environmentService, this.productService);\n        if (toggleData && groups.filter(g => g.extensionInfo).length) {\n            for (const key in toggleData.settingsEditorRecommendedExtensions) {\n                const prerelease = toggleData.settingsEditorRecommendedExtensions[key].onSettingsEditorOpen.prerelease;\n                const extensionId = (typeof prerelease === 'string' && this.productService.quality !== 'stable') ? prerelease : key;\n                const [extension] = await this.extensionGalleryService.getExtensions([{ id: extensionId }], CancellationToken.None);\n                if (!extension) {\n                    continue;\n                }\n                let groupTitle;\n                const manifest = await this.extensionGalleryService.getManifest(extension, CancellationToken.None);\n                const contributesConfiguration = manifest?.contributes?.configuration;\n                if (!Array.isArray(contributesConfiguration)) {\n                    groupTitle = contributesConfiguration?.title;\n                }\n                else if (contributesConfiguration.length === 1) {\n                    groupTitle = contributesConfiguration[0].title;\n                }\n                const extensionName = extension?.displayName ?? extension?.name ?? extensionId;\n                const settingKey = `${key}.manageExtension`;\n                const setting = {\n                    range: nullRange,\n                    key: settingKey,\n                    keyRange: nullRange,\n                    value: null,\n                    valueRange: nullRange,\n                    description: [extension?.description || ''],\n                    descriptionIsMarkdown: false,\n                    descriptionRanges: [],\n                    title: extensionName,\n                    scope: 3 ,\n                    type: 'null',\n                    displayExtensionId: extensionId,\n                    stableExtensionId: key,\n                    prereleaseExtensionId: typeof prerelease === 'string' ? prerelease : key,\n                    extensionGroupTitle: groupTitle ?? extensionName\n                };\n                const additionalGroup = this.addOrRemoveManageExtensionSetting(setting, extension, groups);\n                if (additionalGroup) {\n                    additionalGroups.push(additionalGroup);\n                }\n            }\n        }\n        resolvedSettingsRoot.children.push(await createTocTreeForExtensionSettings(this.extensionService, groups.filter(g => g.extensionInfo)));\n        const commonlyUsedDataToUse = await getCommonlyUsedData(this.workbenchAssignmentService, this.environmentService, this.productService);\n        const commonlyUsed = resolveSettingsTree(commonlyUsedDataToUse, groups, this.logService);\n        resolvedSettingsRoot.children.unshift(commonlyUsed.tree);\n        if (toggleData) {\n            this.defaultSettingsEditorModel.setAdditionalGroups(additionalGroups);\n        }\n        if (!this.workspaceTrustManagementService.isWorkspaceTrusted() && ((this.viewState.settingsTarget instanceof URI || this.viewState.settingsTarget === 5) )) {\n            const configuredUntrustedWorkspaceSettings = resolveConfiguredUntrustedSettings(groups, this.viewState.settingsTarget, this.viewState.languageFilter, this.configurationService);\n            if (configuredUntrustedWorkspaceSettings.length) {\n                resolvedSettingsRoot.children.unshift({\n                    id: 'workspaceTrust',\n                    label: ( localize('settings require trust', \"Workspace Trust\")),\n                    settings: configuredUntrustedWorkspaceSettings\n                });\n            }\n        }\n        this.searchResultModel?.updateChildren();\n        if (this.settingsTreeModel) {\n            this.settingsTreeModel.update(resolvedSettingsRoot);\n            if (schemaChange && !!this.searchResultModel) {\n                return await this.onSearchInputChanged();\n            }\n            this.refreshTOCTree();\n            this.renderTree(undefined, forceRefresh);\n        }\n        else {\n            this.settingsTreeModel = this.instantiationService.createInstance(SettingsTreeModel, this.viewState, this.workspaceTrustManagementService.isWorkspaceTrusted());\n            this.settingsTreeModel.update(resolvedSettingsRoot);\n            this.tocTreeModel.settingsTreeRoot = this.settingsTreeModel.root;\n            const cachedState = !this.viewState.query ? this.restoreCachedState() : undefined;\n            if (cachedState?.searchQuery || this.searchWidget.getValue()) {\n                await this.onSearchInputChanged();\n            }\n            else {\n                this.refreshTOCTree();\n                this.refreshTree();\n                this.tocTree.collapseAll();\n            }\n        }\n    }\n    updateElementsByKey(keys) {\n        if (keys.size) {\n            if (this.searchResultModel) {\n                keys.forEach(key => this.searchResultModel.updateElementsByName(key));\n            }\n            if (this.settingsTreeModel) {\n                keys.forEach(key => this.settingsTreeModel.updateElementsByName(key));\n            }\n            this.renderTree();\n        }\n        else {\n            this.renderTree();\n        }\n    }\n    getActiveControlInSettingsTree() {\n        return (document.activeElement && dom.isAncestor(document.activeElement, this.settingsTree.getHTMLElement())) ?\n            document.activeElement :\n            null;\n    }\n    renderTree(key, force = false) {\n        if (!force && key && ( this.scheduledRefreshes.has(key))) {\n            this.updateModifiedLabelForKey(key);\n            return;\n        }\n        if (this.contextViewFocused()) {\n            const element = document.querySelector('.context-view');\n            if (element) {\n                this.scheduleRefresh(element, key);\n            }\n            return;\n        }\n        const activeElement = this.getActiveControlInSettingsTree();\n        const focusedSetting = activeElement && this.settingRenderers.getSettingDOMElementForDOMElement(activeElement);\n        if (focusedSetting && !force) {\n            if (key) {\n                const focusedKey = focusedSetting.getAttribute(AbstractSettingRenderer.SETTING_KEY_ATTR);\n                if (focusedKey === key &&\n                    (focusedSetting.parentElement && !focusedSetting.parentElement.classList.contains('setting-item-list'))) {\n                    this.updateModifiedLabelForKey(key);\n                    this.scheduleRefresh(focusedSetting, key);\n                    return;\n                }\n            }\n            else {\n                this.scheduleRefresh(focusedSetting);\n                return;\n            }\n        }\n        this.renderResultCountMessages();\n        if (key) {\n            const elements = this.currentSettingsModel.getElementsByName(key);\n            if (elements && elements.length) {\n                this.refreshTree();\n            }\n            else {\n                return;\n            }\n        }\n        else {\n            this.refreshTree();\n        }\n        return;\n    }\n    contextViewFocused() {\n        return !!dom.findParentWithClass(document.activeElement, 'context-view');\n    }\n    refreshTree() {\n        if (this.isVisible()) {\n            this.settingsTree.setChildren(null, createGroupIterator(this.currentSettingsModel.root));\n        }\n    }\n    refreshTOCTree() {\n        if (this.isVisible()) {\n            this.tocTreeModel.update();\n            this.tocTree.setChildren(null, createTOCIterator(this.tocTreeModel));\n        }\n    }\n    updateModifiedLabelForKey(key) {\n        const dataElements = this.currentSettingsModel.getElementsByName(key);\n        const isModified = dataElements && dataElements[0] && dataElements[0].isConfigured;\n        const elements = this.settingRenderers.getDOMElementsForSettingKey(this.settingsTree.getHTMLElement(), key);\n        if (elements && elements[0]) {\n            elements[0].classList.toggle('is-configured', !!isModified);\n        }\n    }\n    async onSearchInputChanged() {\n        if (!this.currentSettingsModel) {\n            return;\n        }\n        const query = this.searchWidget.getValue().trim();\n        this.viewState.query = query;\n        this.delayedFilterLogging.cancel();\n        await this.triggerSearch(query.replace(/\\u203A/g, ' '));\n        if (query && this.searchResultModel) {\n            this.delayedFilterLogging.trigger(() => this.reportFilteringUsed(this.searchResultModel.getUniqueResults()));\n        }\n    }\n    parseSettingFromJSON(query) {\n        const match = query.match(/\"([a-zA-Z.]+)\": /);\n        return match && match[1];\n    }\n    triggerSearch(query) {\n        this.viewState.tagFilters = ( new Set());\n        this.viewState.extensionFilters = ( new Set());\n        this.viewState.featureFilters = ( new Set());\n        this.viewState.idFilters = ( new Set());\n        this.viewState.languageFilter = undefined;\n        if (query) {\n            const parsedQuery = parseQuery(query);\n            query = parsedQuery.query;\n            parsedQuery.tags.forEach(tag => this.viewState.tagFilters.add(tag));\n            parsedQuery.extensionFilters.forEach(extensionId => this.viewState.extensionFilters.add(extensionId));\n            parsedQuery.featureFilters.forEach(feature => this.viewState.featureFilters.add(feature));\n            parsedQuery.idFilters.forEach(id => this.viewState.idFilters.add(id));\n            this.viewState.languageFilter = parsedQuery.languageFilter;\n        }\n        this.settingsTargetsWidget.updateLanguageFilterIndicators(this.viewState.languageFilter);\n        if (query && query !== '@') {\n            query = this.parseSettingFromJSON(query) || query;\n            return this.triggerFilterPreferences(query);\n        }\n        else {\n            if (this.viewState.tagFilters.size || this.viewState.extensionFilters.size || this.viewState.featureFilters.size || this.viewState.idFilters.size || this.viewState.languageFilter) {\n                this.searchResultModel = this.createFilterModel();\n            }\n            else {\n                this.searchResultModel = null;\n            }\n            this.localSearchDelayer.cancel();\n            this.remoteSearchThrottle.cancel();\n            if (this.searchInProgress) {\n                this.searchInProgress.cancel();\n                this.searchInProgress.dispose();\n                this.searchInProgress = null;\n            }\n            this.tocTree.setFocus([]);\n            this.viewState.filterToCategory = undefined;\n            this.tocTreeModel.currentSearchModel = this.searchResultModel;\n            this.onSearchModeToggled();\n            if (this.searchResultModel) {\n                this.tocTree.setSelection([]);\n                this.tocTree.expandAll();\n                this.refreshTOCTree();\n                this.renderResultCountMessages();\n                this.refreshTree();\n            }\n            else {\n                this.tocTree.collapseAll();\n                this.refreshTOCTree();\n                this.renderResultCountMessages();\n                this.refreshTree();\n            }\n        }\n        return Promise.resolve();\n    }\n    createFilterModel() {\n        const filterModel = this.instantiationService.createInstance(SearchResultModel, this.viewState, this.workspaceTrustManagementService.isWorkspaceTrusted());\n        const fullResult = {\n            filterMatches: []\n        };\n        for (const g of this.defaultSettingsEditorModel.settingsGroups.slice(1)) {\n            for (const sect of g.sections) {\n                for (const setting of sect.settings) {\n                    fullResult.filterMatches.push({ setting, matches: [], matchType: SettingMatchType.None, score: 0 });\n                }\n            }\n        }\n        filterModel.setResult(0, fullResult);\n        return filterModel;\n    }\n    reportFilteringUsed(results) {\n        const nlpResult = results[1 ];\n        const nlpMetadata = nlpResult?.metadata;\n        const duration = {\n            nlpResult: nlpMetadata?.duration\n        };\n        const counts = {};\n        const filterResult = results[0 ];\n        if (filterResult) {\n            counts['filterResult'] = filterResult.filterMatches.length;\n        }\n        if (nlpResult) {\n            counts['nlpResult'] = nlpResult.filterMatches.length;\n        }\n        const requestCount = nlpMetadata?.requestCount;\n        const data = {\n            'durations.nlpResult': duration.nlpResult,\n            'counts.nlpResult': counts['nlpResult'],\n            'counts.filterResult': counts['filterResult'],\n            requestCount\n        };\n        this.telemetryService.publicLog2('settingsEditor.filter', data);\n    }\n    triggerFilterPreferences(query) {\n        if (this.searchInProgress) {\n            this.searchInProgress.cancel();\n            this.searchInProgress = null;\n        }\n        const searchInProgress = this.searchInProgress = ( new CancellationTokenSource());\n        return this.localSearchDelayer.trigger(() => {\n            if (searchInProgress && !searchInProgress.token.isCancellationRequested) {\n                return this.localFilterPreferences(query).then(result => {\n                    if (result && !result.exactMatch) {\n                        this.remoteSearchThrottle.trigger(() => {\n                            return searchInProgress && !searchInProgress.token.isCancellationRequested ?\n                                this.remoteSearchPreferences(query, this.searchInProgress.token) :\n                                Promise.resolve();\n                        });\n                    }\n                });\n            }\n            else {\n                return Promise.resolve();\n            }\n        });\n    }\n    localFilterPreferences(query, token) {\n        const localSearchProvider = this.preferencesSearchService.getLocalSearchProvider(query);\n        return this.filterOrSearchPreferences(query, 0 , localSearchProvider, token);\n    }\n    remoteSearchPreferences(query, token) {\n        const remoteSearchProvider = this.preferencesSearchService.getRemoteSearchProvider(query);\n        const newExtSearchProvider = this.preferencesSearchService.getRemoteSearchProvider(query, true);\n        return Promise.all([\n            this.filterOrSearchPreferences(query, 1 , remoteSearchProvider, token),\n            this.filterOrSearchPreferences(query, 2 , newExtSearchProvider, token)\n        ]).then(() => { });\n    }\n    filterOrSearchPreferences(query, type, searchProvider, token) {\n        return this._filterOrSearchPreferencesModel(query, this.defaultSettingsEditorModel, searchProvider, token).then(result => {\n            if (token && token.isCancellationRequested) {\n                return null;\n            }\n            if (!this.searchResultModel) {\n                this.searchResultModel = this.instantiationService.createInstance(SearchResultModel, this.viewState, this.workspaceTrustManagementService.isWorkspaceTrusted());\n                this.searchResultModel.setResult(type, result);\n                this.tocTreeModel.currentSearchModel = this.searchResultModel;\n                this.onSearchModeToggled();\n            }\n            else {\n                this.searchResultModel.setResult(type, result);\n                this.tocTreeModel.update();\n            }\n            if (type === 0 ) {\n                this.tocTree.setFocus([]);\n                this.viewState.filterToCategory = undefined;\n                this.tocTree.expandAll();\n            }\n            this.settingsTree.scrollTop = 0;\n            this.refreshTOCTree();\n            this.renderTree(undefined, true);\n            return result;\n        });\n    }\n    renderResultCountMessages() {\n        if (!this.currentSettingsModel) {\n            return;\n        }\n        this.clearFilterLinkContainer.style.display = this.viewState.tagFilters && this.viewState.tagFilters.size > 0\n            ? 'initial'\n            : 'none';\n        if (!this.searchResultModel) {\n            if (this.countElement.style.display !== 'none') {\n                this.searchResultLabel = null;\n                this.updateInputAriaLabel();\n                this.countElement.style.display = 'none';\n                this.layout(this.dimension);\n            }\n            this.rootElement.classList.remove('no-results');\n            this.splitView.el.style.visibility = 'visible';\n            return;\n        }\n        else {\n            const count = this.searchResultModel.getUniqueResultsCount();\n            let resultString;\n            switch (count) {\n                case 0:\n                    resultString = ( localize('noResults', \"No Settings Found\"));\n                    break;\n                case 1:\n                    resultString = ( localize('oneResult', \"1 Setting Found\"));\n                    break;\n                default: resultString = ( localize('moreThanOneResult', \"{0} Settings Found\", count));\n            }\n            this.searchResultLabel = resultString;\n            this.updateInputAriaLabel();\n            this.countElement.innerText = resultString;\n            aria.status(resultString);\n            if (this.countElement.style.display !== 'block') {\n                this.countElement.style.display = 'block';\n                this.layout(this.dimension);\n            }\n            this.rootElement.classList.toggle('no-results', count === 0);\n            this.splitView.el.style.visibility = count === 0 ? 'hidden' : 'visible';\n        }\n    }\n    _filterOrSearchPreferencesModel(filter, model, provider, token) {\n        const searchP = provider ? provider.searchModel(model, token) : Promise.resolve(null);\n        return searchP\n            .then(undefined, err => {\n            if (isCancellationError(err)) {\n                return Promise.reject(err);\n            }\n            else {\n                return null;\n            }\n        });\n    }\n    layoutSplitView(dimension) {\n        const listHeight = dimension.height - ((72 + 11 + 14) );\n        this.splitView.el.style.height = `${listHeight}px`;\n        this.splitView.layout(this.bodyContainer.clientWidth, listHeight);\n        const firstViewWasVisible = this.splitView.isViewVisible(0);\n        const firstViewVisible = this.bodyContainer.clientWidth >= SettingsEditor2.NARROW_TOTAL_WIDTH;\n        this.splitView.setViewVisible(0, firstViewVisible);\n        if (!firstViewWasVisible && firstViewVisible && this.bodyContainer.clientWidth >= SettingsEditor2.EDITOR_MIN_WIDTH + SettingsEditor2.TOC_RESET_WIDTH) {\n            this.splitView.resizeView(0, SettingsEditor2.TOC_RESET_WIDTH);\n        }\n        this.splitView.style({\n            separatorBorder: firstViewVisible ? this.theme.getColor(settingsSashBorder) : Color.transparent\n        });\n    }\n    saveState() {\n        if (this.isVisible()) {\n            const searchQuery = this.searchWidget.getValue().trim();\n            const target = this.settingsTargetsWidget.settingsTarget;\n            if (this.group && this.input) {\n                this.editorMemento.saveEditorState(this.group, this.input, { searchQuery, target });\n            }\n        }\n        else if (this.group && this.input) {\n            this.editorMemento.clearEditorState(this.input, this.group);\n        }\n        super.saveState();\n    }\n};\nSettingsEditor2 = ( __decorate([\n    ( __param(0, ITelemetryService)),\n    ( __param(1, IWorkbenchConfigurationService)),\n    ( __param(2, ITextResourceConfigurationService)),\n    ( __param(3, IThemeService)),\n    ( __param(4, IPreferencesService)),\n    ( __param(5, IInstantiationService)),\n    ( __param(6, IPreferencesSearchService)),\n    ( __param(7, ILogService)),\n    ( __param(8, IContextKeyService)),\n    ( __param(9, IStorageService)),\n    ( __param(10, IEditorGroupsService)),\n    ( __param(11, IUserDataSyncWorkbenchService)),\n    ( __param(12, IUserDataSyncEnablementService)),\n    ( __param(13, IWorkspaceTrustManagementService)),\n    ( __param(14, IExtensionService)),\n    ( __param(15, ILanguageService)),\n    ( __param(16, IExtensionManagementService)),\n    ( __param(17, IWorkbenchAssignmentService)),\n    ( __param(18, IProductService)),\n    ( __param(19, IEnvironmentService)),\n    ( __param(20, IExtensionGalleryService))\n], SettingsEditor2));\nlet SyncControls = class SyncControls extends Disposable {\n    constructor(container, commandService, userDataSyncService, userDataSyncEnablementService) {\n        super();\n        this.commandService = commandService;\n        this.userDataSyncService = userDataSyncService;\n        this.userDataSyncEnablementService = userDataSyncEnablementService;\n        this._onDidChangeLastSyncedLabel = this._register(( new Emitter()));\n        this.onDidChangeLastSyncedLabel = this._onDidChangeLastSyncedLabel.event;\n        const headerRightControlsContainer = dom.append(container, $('.settings-right-controls'));\n        const turnOnSyncButtonContainer = dom.append(headerRightControlsContainer, $('.turn-on-sync'));\n        this.turnOnSyncButton = this._register(( new Button(turnOnSyncButtonContainer, { title: true, ...defaultButtonStyles })));\n        this.lastSyncedLabel = dom.append(headerRightControlsContainer, $('.last-synced-label'));\n        dom.hide(this.lastSyncedLabel);\n        this.turnOnSyncButton.enabled = true;\n        this.turnOnSyncButton.label = ( localize('turnOnSyncButton', \"Turn on Settings Sync\"));\n        dom.hide(this.turnOnSyncButton.element);\n        this._register(this.turnOnSyncButton.onDidClick(async () => {\n            await this.commandService.executeCommand('workbench.userDataSync.actions.turnOn');\n        }));\n        this.updateLastSyncedTime();\n        this._register(this.userDataSyncService.onDidChangeLastSyncTime(() => {\n            this.updateLastSyncedTime();\n        }));\n        const updateLastSyncedTimer = this._register(( new IntervalTimer()));\n        updateLastSyncedTimer.cancelAndSet(() => this.updateLastSyncedTime(), 60 * 1000);\n        this.update();\n        this._register(this.userDataSyncService.onDidChangeStatus(() => {\n            this.update();\n        }));\n        this._register(this.userDataSyncEnablementService.onDidChangeEnablement(() => {\n            this.update();\n        }));\n    }\n    updateLastSyncedTime() {\n        const last = this.userDataSyncService.lastSyncTime;\n        let label;\n        if (typeof last === 'number') {\n            const d = fromNow(last, true, undefined, true);\n            label = ( localize('lastSyncedLabel', \"Last synced: {0}\", d));\n        }\n        else {\n            label = '';\n        }\n        this.lastSyncedLabel.textContent = label;\n        this._onDidChangeLastSyncedLabel.fire(label);\n    }\n    update() {\n        if (this.userDataSyncService.status === \"uninitialized\" ) {\n            return;\n        }\n        if (this.userDataSyncEnablementService.isEnabled() || this.userDataSyncService.status !== \"idle\" ) {\n            dom.show(this.lastSyncedLabel);\n            dom.hide(this.turnOnSyncButton.element);\n        }\n        else {\n            dom.hide(this.lastSyncedLabel);\n            dom.show(this.turnOnSyncButton.element);\n        }\n    }\n};\nSyncControls = ( __decorate([\n    ( __param(1, ICommandService)),\n    ( __param(2, IUserDataSyncService)),\n    ( __param(3, IUserDataSyncEnablementService))\n], SyncControls));\nexport { SettingsEditor2, createGroupIterator };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { dispose, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { isEqual } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport { ITextModelService } from 'monaco-editor/esm/vs/editor/common/services/resolverService.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport * as JSONContributionRegistry from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { workbenchConfigurationNodeBase } from '../../../common/configuration.js';\nimport { SideBySideEditorInput } from '../../../common/editor/sideBySideEditorInput.js';\nimport { RegisteredEditorPriority, IEditorResolverService } from '../../../services/editor/common/editorResolverService.js';\nimport { ITextEditorService } from '../../../services/textfile/common/textEditorService.js';\nimport { USE_SPLIT_JSON_SETTING, DEFAULT_SETTINGS_EDITOR_SETTING, FOLDER_SETTINGS_PATH, IPreferencesService } from '../../../services/preferences/common/preferences.js';\nimport { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';\nconst schemaRegistry = ( Registry.as(JSONContributionRegistry.Extensions.JSONContribution));\nlet PreferencesContribution = class PreferencesContribution {\n    constructor(modelService, textModelResolverService, preferencesService, languageService, userDataProfileService, workspaceService, configurationService, editorResolverService, textEditorService) {\n        this.modelService = modelService;\n        this.textModelResolverService = textModelResolverService;\n        this.preferencesService = preferencesService;\n        this.languageService = languageService;\n        this.userDataProfileService = userDataProfileService;\n        this.workspaceService = workspaceService;\n        this.configurationService = configurationService;\n        this.editorResolverService = editorResolverService;\n        this.textEditorService = textEditorService;\n        this.settingsListener = this.configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(USE_SPLIT_JSON_SETTING) || e.affectsConfiguration(DEFAULT_SETTINGS_EDITOR_SETTING)) {\n                this.handleSettingsEditorRegistration();\n            }\n        });\n        this.handleSettingsEditorRegistration();\n        this.start();\n    }\n    handleSettingsEditorRegistration() {\n        dispose(this.editorOpeningListener);\n        if (!!this.configurationService.getValue(USE_SPLIT_JSON_SETTING) || !!this.configurationService.getValue(DEFAULT_SETTINGS_EDITOR_SETTING)) {\n            this.editorOpeningListener = this.editorResolverService.registerEditor('**/settings.json', {\n                id: SideBySideEditorInput.ID,\n                label: ( nls.localize('splitSettingsEditorLabel', \"Split Settings Editor\")),\n                priority: RegisteredEditorPriority.builtin,\n            }, {}, {\n                createEditorInput: ({ resource, options }) => {\n                    if (isEqual(resource, this.userDataProfileService.currentProfile.settingsResource)) {\n                        return { editor: this.preferencesService.createSplitJsonEditorInput(3 , resource), options };\n                    }\n                    const state = this.workspaceService.getWorkbenchState();\n                    if (state === 2 ) {\n                        const folders = this.workspaceService.getWorkspace().folders;\n                        if (isEqual(resource, folders[0].toResource(FOLDER_SETTINGS_PATH))) {\n                            return { editor: this.preferencesService.createSplitJsonEditorInput(5 , resource), options };\n                        }\n                    }\n                    else if (state === 3 ) {\n                        const folders = this.workspaceService.getWorkspace().folders;\n                        for (const folder of folders) {\n                            if (isEqual(resource, folder.toResource(FOLDER_SETTINGS_PATH))) {\n                                return { editor: this.preferencesService.createSplitJsonEditorInput(6 , resource), options };\n                            }\n                        }\n                    }\n                    return { editor: this.textEditorService.createTextEditor({ resource }), options };\n                }\n            });\n        }\n    }\n    start() {\n        this.textModelResolverService.registerTextModelContentProvider('vscode', {\n            provideTextContent: async (uri) => {\n                if (uri.scheme !== 'vscode') {\n                    return null;\n                }\n                if (uri.authority === 'schemas') {\n                    return this.getSchemaModel(uri);\n                }\n                return this.preferencesService.resolveModel(uri);\n            }\n        });\n    }\n    getSchemaModel(uri) {\n        let schema = schemaRegistry.getSchemaContributions().schemas[( uri.toString())] ?? {} ;\n        const modelContent = JSON.stringify(schema);\n        const languageSelection = this.languageService.createById('jsonc');\n        const model = this.modelService.createModel(modelContent, languageSelection, uri);\n        const disposables = ( new DisposableStore());\n        disposables.add(schemaRegistry.onDidChangeSchema(schemaUri => {\n            if (schemaUri === ( uri.toString())) {\n                schema = schemaRegistry.getSchemaContributions().schemas[( uri.toString())];\n                model.setValue(JSON.stringify(schema));\n            }\n        }));\n        disposables.add(model.onWillDispose(() => disposables.dispose()));\n        return model;\n    }\n    dispose() {\n        dispose(this.editorOpeningListener);\n        dispose(this.settingsListener);\n    }\n};\nPreferencesContribution = ( __decorate([\n    ( __param(0, IModelService)),\n    ( __param(1, ITextModelService)),\n    ( __param(2, IPreferencesService)),\n    ( __param(3, ILanguageService)),\n    ( __param(4, IUserDataProfileService)),\n    ( __param(5, IWorkspaceContextService)),\n    ( __param(6, IConfigurationService)),\n    ( __param(7, IEditorResolverService)),\n    ( __param(8, ITextEditorService))\n], PreferencesContribution));\nconst registry = ( Registry.as(Extensions.Configuration));\nregistry.registerConfiguration({\n    ...workbenchConfigurationNodeBase,\n    'properties': {\n        'workbench.settings.enableNaturalLanguageSearch': {\n            'type': 'boolean',\n            'description': ( nls.localize(\n                'enableNaturalLanguageSettingsSearch',\n                \"Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.\"\n            )),\n            'default': true,\n            'scope': 3 ,\n            'tags': ['usesOnlineServices']\n        },\n        'workbench.settings.settingsSearchTocBehavior': {\n            'type': 'string',\n            'enum': ['hide', 'filter'],\n            'enumDescriptions': [\n                ( nls.localize(\n                    'settingsSearchTocBehavior.hide',\n                    \"Hide the Table of Contents while searching.\"\n                )),\n                ( nls.localize(\n                    'settingsSearchTocBehavior.filter',\n                    \"Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.\"\n                )),\n            ],\n            'description': ( nls.localize(\n                'settingsSearchTocBehavior',\n                \"Controls the behavior of the settings editor Table of Contents while searching.\"\n            )),\n            'default': 'filter',\n            'scope': 3\n        },\n    }\n});\nexport { PreferencesContribution };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { KeyChord } from 'monaco-editor/esm/vs/base/common/keyCodes.js';\nimport { Disposable, MutableDisposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nimport { isObject, isString, isBoolean } from 'monaco-editor/esm/vs/base/common/types.js';\nimport './media/preferences.css.js';\nimport { registerEditorContribution } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';\nimport { Context } from 'monaco-editor/esm/vs/editor/contrib/suggest/browser/suggest.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { registerAction2, Action2, MenuId, MenuRegistry } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { ICommandService, CommandsRegistry } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { InputFocusedContext } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkeys.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { KeybindingsRegistry } from 'monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js';\nimport { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { PICK_WORKSPACE_FOLDER_COMMAND_ID } from '../../../browser/actions/workspaceCommands.js';\nimport { EditorPaneDescriptor } from '../../../browser/editor.js';\nimport { Extensions } from '../../../common/contributions.js';\nimport { EditorExtensions } from '../../../common/editor.js';\nimport { ResourceContextKey, WorkbenchStateContext } from '../../../common/contextkeys.js';\nimport { ExplorerRootContext, ExplorerFolderContext } from '../../files/common/files.js';\nimport { KeybindingsEditor } from './keybindingsEditor.js';\nimport { ConfigureLanguageBasedSettingsAction } from './preferencesActions.js';\nimport { SettingsEditorContribution } from './preferencesEditor.js';\nimport { preferencesOpenSettingsIcon } from './preferencesIcons.js';\nimport { SettingsEditor2 } from './settingsEditor2.js';\nimport { CONTEXT_SETTINGS_EDITOR, SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, CONTEXT_SETTINGS_SEARCH_FOCUS, CONTEXT_TOC_ROW_FOCUS, CONTEXT_SETTINGS_ROW_FOCUS, SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU, CONTEXT_SETTINGS_JSON_EDITOR, CONTEXT_KEYBINDINGS_EDITOR, KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS, KEYBINDINGS_EDITOR_SHOW_EXTENSION_KEYBINDINGS, KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS, KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, CONTEXT_KEYBINDINGS_SEARCH_FOCUS, KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_HISTORY, KEYBINDINGS_EDITOR_COMMAND_DEFINE, CONTEXT_KEYBINDING_FOCUS, CONTEXT_WHEN_FOCUS, KEYBINDINGS_EDITOR_COMMAND_ADD, KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN, KEYBINDINGS_EDITOR_COMMAND_REMOVE, KEYBINDINGS_EDITOR_COMMAND_RESET, KEYBINDINGS_EDITOR_COMMAND_SEARCH, KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS, KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE, KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR, KEYBINDINGS_EDITOR_COMMAND_COPY, KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND, KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND_TITLE, KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS, KEYBINDINGS_EDITOR_COMMAND_REJECT_WHEN, KEYBINDINGS_EDITOR_COMMAND_ACCEPT_WHEN } from '../common/preferences.js';\nimport { PreferencesContribution } from '../common/preferencesContribution.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { IExtensionService } from '../../../services/extensions/common/extensions.js';\nimport { KeybindingsEditorInput } from '../../../services/preferences/browser/keybindingsEditorInput.js';\nimport { IPreferencesService, DEFINE_KEYBINDING_EDITOR_CONTRIB_ID } from '../../../services/preferences/common/preferences.js';\nimport { SettingsEditor2Input } from '../../../services/preferences/common/preferencesEditorInput.js';\nimport { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nimport { isCodeEditor } from 'monaco-editor/esm/vs/editor/browser/editorBrowser.js';\nconst SETTINGS_EDITOR_COMMAND_SEARCH = 'settings.action.search';\nconst SETTINGS_EDITOR_COMMAND_FOCUS_FILE = 'settings.action.focusSettingsFile';\nconst SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_FROM_SEARCH = 'settings.action.focusSettingsFromSearch';\nconst SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_LIST = 'settings.action.focusSettingsList';\nconst SETTINGS_EDITOR_COMMAND_FOCUS_TOC = 'settings.action.focusTOC';\nconst SETTINGS_EDITOR_COMMAND_FOCUS_CONTROL = 'settings.action.focusSettingControl';\nconst SETTINGS_EDITOR_COMMAND_FOCUS_UP = 'settings.action.focusLevelUp';\nconst SETTINGS_EDITOR_COMMAND_SWITCH_TO_JSON = 'settings.switchToJSON';\nconst SETTINGS_EDITOR_COMMAND_FILTER_ONLINE = 'settings.filterByOnline';\nconst SETTINGS_COMMAND_OPEN_SETTINGS = 'workbench.action.openSettings';\nconst SETTINGS_COMMAND_FILTER_TELEMETRY = 'settings.filterByTelemetry';\n( (Registry.as(EditorExtensions.EditorPane))).registerEditorPane(EditorPaneDescriptor.create(SettingsEditor2, SettingsEditor2.ID, ( (nls.localize('settingsEditor2', \"Settings Editor 2\")))), [\n    ( (new SyncDescriptor(SettingsEditor2Input)))\n]);\n( (Registry.as(EditorExtensions.EditorPane))).registerEditorPane(EditorPaneDescriptor.create(KeybindingsEditor, KeybindingsEditor.ID, ( (nls.localize('keybindingsEditor', \"Keybindings Editor\")))), [\n    ( (new SyncDescriptor(KeybindingsEditorInput)))\n]);\nconst OPEN_USER_SETTINGS_UI_TITLE = { value: ( (nls.localize('openSettings2', \"Open Settings (UI)\"))), original: 'Open Settings (UI)' };\nconst OPEN_USER_SETTINGS_JSON_TITLE = { value: ( (nls.localize('openUserSettingsJson', \"Open User Settings (JSON)\"))), original: 'Open User Settings (JSON)' };\nconst category = { value: ( (nls.localize('preferences', \"Preferences\"))), original: 'Preferences' };\nfunction sanitizeBoolean(arg) {\n    return isBoolean(arg) ? arg : undefined;\n}\nfunction sanitizeString(arg) {\n    return isString(arg) ? arg : undefined;\n}\nfunction sanitizeOpenSettingsArgs(args) {\n    if (!isObject(args)) {\n        args = {};\n    }\n    let sanitizedObject = {\n        focusSearch: sanitizeBoolean(args?.focusSearch),\n        openToSide: sanitizeBoolean(args?.openToSide),\n        query: sanitizeString(args?.query)\n    };\n    if (isString(args?.revealSetting?.key)) {\n        sanitizedObject = {\n            ...sanitizedObject,\n            revealSetting: {\n                key: args.revealSetting.key,\n                edit: sanitizeBoolean(args.revealSetting?.edit)\n            }\n        };\n    }\n    return sanitizedObject;\n}\nlet PreferencesActionsContribution = class PreferencesActionsContribution extends Disposable {\n    constructor(environmentService, userDataProfileService, preferencesService, workspaceContextService, labelService, extensionService, userDataProfilesService) {\n        super();\n        this.environmentService = environmentService;\n        this.userDataProfileService = userDataProfileService;\n        this.preferencesService = preferencesService;\n        this.workspaceContextService = workspaceContextService;\n        this.labelService = labelService;\n        this.extensionService = extensionService;\n        this.userDataProfilesService = userDataProfilesService;\n        this.registerSettingsActions();\n        this.registerKeybindingsActions();\n        this.updatePreferencesEditorMenuItem();\n        this._register(workspaceContextService.onDidChangeWorkbenchState(() => this.updatePreferencesEditorMenuItem()));\n        this._register(workspaceContextService.onDidChangeWorkspaceFolders(() => this.updatePreferencesEditorMenuItemForWorkspaceFolders()));\n    }\n    registerSettingsActions() {\n        this._register(registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_COMMAND_OPEN_SETTINGS,\n                    title: {\n                        value: ( (nls.localize('settings', \"Settings\"))),\n                        mnemonicTitle: ( (nls.localize(\n                            { key: 'miOpenSettings', comment: ['&& denotes a mnemonic'] },\n                            \"&&Settings\"\n                        ))),\n                        original: 'Settings'\n                    },\n                    keybinding: {\n                        weight: 200 ,\n                        when: null,\n                        primary: 2048  | 87 ,\n                    },\n                    menu: [{\n                            id: MenuId.GlobalActivity,\n                            group: '2_configuration',\n                            order: 1\n                        }, {\n                            id: MenuId.MenubarPreferencesMenu,\n                            group: '2_configuration',\n                            order: 1\n                        }],\n                });\n            }\n            run(accessor, args) {\n                const opts = typeof args === 'string' ? { query: args } : sanitizeOpenSettingsArgs(args);\n                return accessor.get(IPreferencesService).openSettings(opts);\n            }\n        }));\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: 'workbench.action.openSettings2',\n                    title: { value: ( (nls.localize('openSettings2', \"Open Settings (UI)\"))), original: 'Open Settings (UI)' },\n                    category,\n                    f1: true,\n                });\n            }\n            run(accessor, args) {\n                args = sanitizeOpenSettingsArgs(args);\n                return accessor.get(IPreferencesService).openSettings({ jsonEditor: false, ...args });\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: 'workbench.action.openSettingsJson',\n                    title: OPEN_USER_SETTINGS_JSON_TITLE,\n                    category,\n                    f1: true,\n                });\n            }\n            run(accessor, args) {\n                args = sanitizeOpenSettingsArgs(args);\n                return accessor.get(IPreferencesService).openSettings({ jsonEditor: true, ...args });\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: 'workbench.action.openGlobalSettings',\n                    title: { value: ( (nls.localize('openGlobalSettings', \"Open User Settings\"))), original: 'Open User Settings' },\n                    category,\n                    f1: true,\n                });\n            }\n            run(accessor, args) {\n                args = sanitizeOpenSettingsArgs(args);\n                return accessor.get(IPreferencesService).openUserSettings(args);\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: 'workbench.action.openRawDefaultSettings',\n                    title: { value: ( (nls.localize('openRawDefaultSettings', \"Open Default Settings (JSON)\"))), original: 'Open Default Settings (JSON)' },\n                    category,\n                    f1: true,\n                });\n            }\n            run(accessor) {\n                return accessor.get(IPreferencesService).openRawDefaultSettings();\n            }\n        });\n        const registerOpenUserSettingsEditorFromJsonActionDisposables = this._register(( (new MutableDisposable())));\n        const openUserSettingsEditorWhen = ( (ContextKeyExpr.and(\n             (ContextKeyExpr.or( (ResourceContextKey.Resource.isEqualTo(\n                 (this.userDataProfileService.currentProfile.settingsResource.toString())\n            )),  (ResourceContextKey.Resource.isEqualTo(\n                 (this.userDataProfilesService.defaultProfile.settingsResource.toString())\n            )))),\n            ContextKeyExpr.not('isInDiffEditor')\n        )));\n        const registerOpenUserSettingsEditorFromJsonAction = () => {\n            registerOpenUserSettingsEditorFromJsonActionDisposables.value = registerAction2(class extends Action2 {\n                constructor() {\n                    super({\n                        id: '_workbench.openUserSettingsEditor',\n                        title: OPEN_USER_SETTINGS_UI_TITLE,\n                        icon: preferencesOpenSettingsIcon,\n                        menu: [{\n                                id: MenuId.EditorTitle,\n                                when: openUserSettingsEditorWhen,\n                                group: 'navigation',\n                                order: 1\n                            }]\n                    });\n                }\n                run(accessor, args) {\n                    args = sanitizeOpenSettingsArgs(args);\n                    return accessor.get(IPreferencesService).openUserSettings({ jsonEditor: false, ...args });\n                }\n            });\n        };\n        const openSettingsJsonWhen = ( (ContextKeyExpr.and(\n            CONTEXT_SETTINGS_EDITOR,\n             (CONTEXT_SETTINGS_JSON_EDITOR.toNegated())\n        )));\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_EDITOR_COMMAND_SWITCH_TO_JSON,\n                    title: { value: ( (nls.localize('openSettingsJson', \"Open Settings (JSON)\"))), original: 'Open Settings (JSON)' },\n                    icon: preferencesOpenSettingsIcon,\n                    menu: [{\n                            id: MenuId.EditorTitle,\n                            when: openSettingsJsonWhen,\n                            group: 'navigation',\n                            order: 1\n                        }]\n                });\n            }\n            run(accessor) {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof SettingsEditor2) {\n                    return editorPane.switchToSettingsFile();\n                }\n                return null;\n            }\n        });\n        registerOpenUserSettingsEditorFromJsonAction();\n        this._register(this.userDataProfileService.onDidChangeCurrentProfile(() => {\n            registerOpenUserSettingsEditorFromJsonAction();\n        }));\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: ConfigureLanguageBasedSettingsAction.ID,\n                    title: ConfigureLanguageBasedSettingsAction.LABEL,\n                    category,\n                    f1: true,\n                });\n            }\n            run(accessor) {\n                return accessor.get(IInstantiationService).createInstance(ConfigureLanguageBasedSettingsAction, ConfigureLanguageBasedSettingsAction.ID, ConfigureLanguageBasedSettingsAction.LABEL.value).run();\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: 'workbench.action.openAccessibilitySettings',\n                    title: { value: ( (nls.localize('openAccessibilitySettings', \"Open Accessibility Settings\"))), original: 'Open Accessibility Settings' },\n                    category,\n                    menu: {\n                        id: MenuId.CommandPalette,\n                        when: ( (WorkbenchStateContext.notEqualsTo('empty')))\n                    }\n                });\n            }\n            async run(accessor) {\n                await accessor.get(IPreferencesService).openSettings({ jsonEditor: false, query: '@tag:accessibility' });\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: 'workbench.action.openFolderSettings',\n                    title: { value: ( (nls.localize('openFolderSettings', \"Open Folder Settings\"))), original: 'Open Folder Settings' },\n                    category,\n                    menu: {\n                        id: MenuId.CommandPalette,\n                        when: ( (WorkbenchStateContext.isEqualTo('workspace')))\n                    }\n                });\n            }\n            async run(accessor, args) {\n                const commandService = accessor.get(ICommandService);\n                const preferencesService = accessor.get(IPreferencesService);\n                const workspaceFolder = await commandService.executeCommand(PICK_WORKSPACE_FOLDER_COMMAND_ID);\n                if (workspaceFolder) {\n                    args = sanitizeOpenSettingsArgs(args);\n                    await preferencesService.openFolderSettings({ folderUri: workspaceFolder.uri, ...args });\n                }\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: 'workbench.action.openFolderSettingsFile',\n                    title: { value: ( (nls.localize('openFolderSettingsFile', \"Open Folder Settings (JSON)\"))), original: 'Open Folder Settings (JSON)' },\n                    category,\n                    menu: {\n                        id: MenuId.CommandPalette,\n                        when: ( (WorkbenchStateContext.isEqualTo('workspace')))\n                    }\n                });\n            }\n            async run(accessor, args) {\n                const commandService = accessor.get(ICommandService);\n                const preferencesService = accessor.get(IPreferencesService);\n                const workspaceFolder = await commandService.executeCommand(PICK_WORKSPACE_FOLDER_COMMAND_ID);\n                if (workspaceFolder) {\n                    args = sanitizeOpenSettingsArgs(args);\n                    await preferencesService.openFolderSettings({ folderUri: workspaceFolder.uri, jsonEditor: true, ...args });\n                }\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: '_workbench.action.openFolderSettings',\n                    title: { value: ( (nls.localize('openFolderSettings', \"Open Folder Settings\"))), original: 'Open Folder Settings' },\n                    category,\n                    menu: {\n                        id: MenuId.ExplorerContext,\n                        group: '2_workspace',\n                        order: 20,\n                        when: ( (ContextKeyExpr.and(ExplorerRootContext, ExplorerFolderContext)))\n                    }\n                });\n            }\n            run(accessor, resource) {\n                return accessor.get(IPreferencesService).openFolderSettings({ folderUri: resource });\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_EDITOR_COMMAND_FILTER_ONLINE,\n                    title: ( (nls.localize(\n                        { key: 'miOpenOnlineSettings', comment: ['&& denotes a mnemonic'] },\n                        \"&&Online Services Settings\"\n                    ))),\n                    menu: {\n                        id: MenuId.MenubarPreferencesMenu,\n                        group: '3_settings',\n                        order: 1,\n                    }\n                });\n            }\n            run(accessor) {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof SettingsEditor2) {\n                    editorPane.focusSearch(`@tag:usesOnlineServices`);\n                }\n                else {\n                    accessor.get(IPreferencesService).openSettings({ jsonEditor: false, query: '@tag:usesOnlineServices' });\n                }\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_COMMAND_FILTER_TELEMETRY,\n                    title: ( (nls.localize(\n                        { key: 'miOpenTelemetrySettings', comment: ['&& denotes a mnemonic'] },\n                        \"&&Telemetry Settings\"\n                    )))\n                });\n            }\n            run(accessor) {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof SettingsEditor2) {\n                    editorPane.focusSearch(`@tag:telemetry`);\n                }\n                else {\n                    accessor.get(IPreferencesService).openSettings({ jsonEditor: false, query: '@tag:telemetry' });\n                }\n            }\n        });\n        this.registerSettingsEditorActions();\n        this.extensionService.whenInstalledExtensionsRegistered()\n            .then(() => {\n            const remoteAuthority = this.environmentService.remoteAuthority;\n            this.labelService.getHostLabel(Schemas.vscodeRemote, remoteAuthority) || remoteAuthority;\n        });\n    }\n    registerSettingsEditorActions() {\n        function getPreferencesEditor(accessor) {\n            const activeEditorPane = accessor.get(IEditorService).activeEditorPane;\n            if (activeEditorPane instanceof SettingsEditor2) {\n                return activeEditorPane;\n            }\n            return null;\n        }\n        function settingsEditorFocusSearch(accessor) {\n            const preferencesEditor = getPreferencesEditor(accessor);\n            preferencesEditor?.focusSearch();\n        }\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_EDITOR_COMMAND_SEARCH,\n                    precondition: CONTEXT_SETTINGS_EDITOR,\n                    keybinding: {\n                        primary: 2048  | 36 ,\n                        weight: 100 ,\n                        when: null\n                    },\n                    category,\n                    f1: true,\n                    title: { value: ( (nls.localize('settings.focusSearch', \"Focus Settings Search\"))), original: 'Focus Settings Search' }\n                });\n            }\n            run(accessor) { settingsEditorFocusSearch(accessor); }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS,\n                    precondition: CONTEXT_SETTINGS_EDITOR,\n                    keybinding: {\n                        primary: 9 ,\n                        weight: 100 ,\n                        when: CONTEXT_SETTINGS_SEARCH_FOCUS\n                    },\n                    category,\n                    f1: true,\n                    title: { value: ( (nls.localize('settings.clearResults', \"Clear Settings Search Results\"))), original: 'Clear Settings Search Results' }\n                });\n            }\n            run(accessor) {\n                const preferencesEditor = getPreferencesEditor(accessor);\n                preferencesEditor?.clearSearchResults();\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_EDITOR_COMMAND_FOCUS_FILE,\n                    precondition: ( (ContextKeyExpr.and(CONTEXT_SETTINGS_SEARCH_FOCUS,  (Context.Visible.toNegated())))),\n                    keybinding: {\n                        primary: 18 ,\n                        weight: 100 ,\n                        when: null\n                    },\n                    title: ( (nls.localize('settings.focusFile', \"Focus settings file\")))\n                });\n            }\n            run(accessor, args) {\n                const preferencesEditor = getPreferencesEditor(accessor);\n                preferencesEditor?.focusSettings();\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_FROM_SEARCH,\n                    precondition: ( (ContextKeyExpr.and(CONTEXT_SETTINGS_SEARCH_FOCUS,  (Context.Visible.toNegated())))),\n                    keybinding: {\n                        primary: 18 ,\n                        weight: 200 ,\n                        when: null\n                    },\n                    title: ( (nls.localize('settings.focusFile', \"Focus settings file\")))\n                });\n            }\n            run(accessor, args) {\n                const preferencesEditor = getPreferencesEditor(accessor);\n                preferencesEditor?.focusSettings();\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_LIST,\n                    precondition: ( (ContextKeyExpr.and(CONTEXT_SETTINGS_EDITOR, CONTEXT_TOC_ROW_FOCUS))),\n                    keybinding: {\n                        primary: 3 ,\n                        weight: 200 ,\n                        when: null\n                    },\n                    title: ( (nls.localize('settings.focusSettingsList', \"Focus settings list\")))\n                });\n            }\n            run(accessor) {\n                const preferencesEditor = getPreferencesEditor(accessor);\n                if (preferencesEditor instanceof SettingsEditor2) {\n                    preferencesEditor.focusSettings();\n                }\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_EDITOR_COMMAND_FOCUS_TOC,\n                    precondition: CONTEXT_SETTINGS_EDITOR,\n                    f1: true,\n                    keybinding: [\n                        {\n                            primary: 15 ,\n                            weight: 200 ,\n                            when: CONTEXT_SETTINGS_ROW_FOCUS\n                        }\n                    ],\n                    category,\n                    title: { value: ( (nls.localize('settings.focusSettingsTOC', \"Focus Settings Table of Contents\"))), original: 'Focus Settings Table of Contents' }\n                });\n            }\n            run(accessor) {\n                const preferencesEditor = getPreferencesEditor(accessor);\n                if (!(preferencesEditor instanceof SettingsEditor2)) {\n                    return;\n                }\n                preferencesEditor.focusTOC();\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_EDITOR_COMMAND_FOCUS_CONTROL,\n                    precondition: ( (ContextKeyExpr.and(CONTEXT_SETTINGS_EDITOR, CONTEXT_SETTINGS_ROW_FOCUS))),\n                    keybinding: {\n                        primary: 3 ,\n                        weight: 200 ,\n                    },\n                    title: ( (nls.localize('settings.focusSettingControl', \"Focus Setting Control\")))\n                });\n            }\n            run(accessor) {\n                const preferencesEditor = getPreferencesEditor(accessor);\n                if (!(preferencesEditor instanceof SettingsEditor2)) {\n                    return;\n                }\n                if (document.activeElement?.classList.contains('monaco-list')) {\n                    preferencesEditor.focusSettings(true);\n                }\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU,\n                    precondition: CONTEXT_SETTINGS_EDITOR,\n                    keybinding: {\n                        primary: 1024  | 67 ,\n                        weight: 200 ,\n                        when: null\n                    },\n                    f1: true,\n                    category,\n                    title: { value: ( (nls.localize('settings.showContextMenu', \"Show Setting Context Menu\"))), original: 'Show Setting Context Menu' }\n                });\n            }\n            run(accessor) {\n                const preferencesEditor = getPreferencesEditor(accessor);\n                if (preferencesEditor instanceof SettingsEditor2) {\n                    preferencesEditor.showContextMenu();\n                }\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: SETTINGS_EDITOR_COMMAND_FOCUS_UP,\n                    precondition: ( (ContextKeyExpr.and(\n                        CONTEXT_SETTINGS_EDITOR,\n                         (CONTEXT_SETTINGS_SEARCH_FOCUS.toNegated()),\n                         (CONTEXT_SETTINGS_JSON_EDITOR.toNegated())\n                    ))),\n                    keybinding: {\n                        primary: 9 ,\n                        weight: 200 ,\n                        when: null\n                    },\n                    f1: true,\n                    category,\n                    title: { value: ( (nls.localize('settings.focusLevelUp', \"Move Focus Up One Level\"))), original: 'Move Focus Up One Level' }\n                });\n            }\n            run(accessor) {\n                const preferencesEditor = getPreferencesEditor(accessor);\n                if (!(preferencesEditor instanceof SettingsEditor2)) {\n                    return;\n                }\n                if (preferencesEditor.currentFocusContext === 3 ) {\n                    preferencesEditor.focusSettings();\n                }\n                else if (preferencesEditor.currentFocusContext === 2 ) {\n                    preferencesEditor.focusTOC();\n                }\n                else if (preferencesEditor.currentFocusContext === 1 ) {\n                    preferencesEditor.focusSearch();\n                }\n            }\n        });\n    }\n    registerKeybindingsActions() {\n        const that = this;\n        const category = { value: ( (nls.localize('preferences', \"Preferences\"))), original: 'Preferences' };\n        const id = 'workbench.action.openGlobalKeybindings';\n        this._register(registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id,\n                    title: { value: ( (nls.localize('openGlobalKeybindings', \"Open Keyboard Shortcuts\"))), original: 'Open Keyboard Shortcuts' },\n                    shortTitle: ( (nls.localize('keyboardShortcuts', \"Keyboard Shortcuts\"))),\n                    category,\n                    icon: preferencesOpenSettingsIcon,\n                    keybinding: {\n                        when: null,\n                        weight: 200 ,\n                        primary: KeyChord(2048  | 41 , 2048  | 49 )\n                    },\n                    menu: [\n                        { id: MenuId.CommandPalette },\n                        {\n                            id: MenuId.EditorTitle,\n                            when: ( (ResourceContextKey.Resource.isEqualTo(\n                                 (that.userDataProfileService.currentProfile.keybindingsResource.toString())\n                            ))),\n                            group: 'navigation',\n                            order: 1,\n                        },\n                        {\n                            id: MenuId.GlobalActivity,\n                            group: '2_configuration',\n                            order: 3\n                        }\n                    ]\n                });\n            }\n            run(accessor, args) {\n                const query = typeof args === 'string' ? args : undefined;\n                return accessor.get(IPreferencesService).openGlobalKeybindingSettings(false, { query });\n            }\n        }));\n        this._register(MenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n            command: {\n                id,\n                title: ( (nls.localize('keyboardShortcuts', \"Keyboard Shortcuts\"))),\n            },\n            group: '2_configuration',\n            order: 3\n        }));\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: 'workbench.action.openDefaultKeybindingsFile',\n                    title: { value: ( (nls.localize('openDefaultKeybindingsFile', \"Open Default Keyboard Shortcuts (JSON)\"))), original: 'Open Default Keyboard Shortcuts (JSON)' },\n                    category,\n                    menu: { id: MenuId.CommandPalette }\n                });\n            }\n            run(accessor) {\n                return accessor.get(IPreferencesService).openDefaultKeybindingsFile();\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: 'workbench.action.openGlobalKeybindingsFile',\n                    title: { value: ( (nls.localize('openGlobalKeybindingsFile', \"Open Keyboard Shortcuts (JSON)\"))), original: 'Open Keyboard Shortcuts (JSON)' },\n                    category,\n                    icon: preferencesOpenSettingsIcon,\n                    menu: [\n                        { id: MenuId.CommandPalette },\n                        {\n                            id: MenuId.EditorTitle,\n                            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR))),\n                            group: 'navigation',\n                        }\n                    ]\n                });\n            }\n            run(accessor) {\n                return accessor.get(IPreferencesService).openGlobalKeybindingSettings(true);\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS,\n                    title: { value: ( (nls.localize('showDefaultKeybindings', \"Show System Keybindings\"))), original: 'Show System Keyboard Shortcuts' },\n                    menu: [\n                        {\n                            id: MenuId.EditorTitle,\n                            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR))),\n                            group: '1_keyboard_preferences_actions'\n                        }\n                    ]\n                });\n            }\n            run(accessor) {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.search('@source:system');\n                }\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: KEYBINDINGS_EDITOR_SHOW_EXTENSION_KEYBINDINGS,\n                    title: { value: ( (nls.localize('showExtensionKeybindings', \"Show Extension Keybindings\"))), original: 'Show Extension Keyboard Shortcuts' },\n                    menu: [\n                        {\n                            id: MenuId.EditorTitle,\n                            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR))),\n                            group: '1_keyboard_preferences_actions'\n                        }\n                    ]\n                });\n            }\n            run(accessor) {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.search('@source:extension');\n                }\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS,\n                    title: { value: ( (nls.localize('showUserKeybindings', \"Show User Keybindings\"))), original: 'Show User Keyboard Shortcuts' },\n                    menu: [\n                        {\n                            id: MenuId.EditorTitle,\n                            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR))),\n                            group: '1_keyboard_preferences_actions'\n                        }\n                    ]\n                });\n            }\n            run(accessor) {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.search('@source:user');\n                }\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS,\n                    title: ( (nls.localize('clear', \"Clear Search Results\"))),\n                    keybinding: {\n                        weight: 200 ,\n                        when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS))),\n                        primary: 9 ,\n                    }\n                });\n            }\n            run(accessor) {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.clearSearchResults();\n                }\n            }\n        });\n        registerAction2(class extends Action2 {\n            constructor() {\n                super({\n                    id: KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_HISTORY,\n                    title: ( (nls.localize('clearHistory', \"Clear Keyboard Shortcuts Search History\"))),\n                    category,\n                    menu: [\n                        {\n                            id: MenuId.CommandPalette,\n                            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR))),\n                        }\n                    ]\n                });\n            }\n            run(accessor) {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.clearKeyboardShortcutSearchHistory();\n                }\n            }\n        });\n        this.registerKeybindingEditorActions();\n    }\n    registerKeybindingEditorActions() {\n        const that = this;\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_DEFINE,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(\n                CONTEXT_KEYBINDINGS_EDITOR,\n                CONTEXT_KEYBINDING_FOCUS,\n                 (CONTEXT_WHEN_FOCUS.toNegated())\n            ))),\n            primary: 3 ,\n            handler: (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.defineKeybinding(editorPane.activeKeybindingEntry, false);\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_ADD,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS))),\n            primary: KeyChord(2048  | 41 , 2048  | 31 ),\n            handler: (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.defineKeybinding(editorPane.activeKeybindingEntry, true);\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS))),\n            primary: KeyChord(2048  | 41 , 2048  | 35 ),\n            handler: (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor && editorPane.activeKeybindingEntry.keybindingItem.keybinding) {\n                    editorPane.defineWhenExpression(editorPane.activeKeybindingEntry);\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_REMOVE,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(\n                CONTEXT_KEYBINDINGS_EDITOR,\n                CONTEXT_KEYBINDING_FOCUS,\n                 (InputFocusedContext.toNegated())\n            ))),\n            primary: 20 ,\n            mac: {\n                primary: 2048  | 1\n            },\n            handler: (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.removeKeybinding(editorPane.activeKeybindingEntry);\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_RESET,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS))),\n            primary: 0,\n            handler: (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.resetKeybinding(editorPane.activeKeybindingEntry);\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_SEARCH,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR))),\n            primary: 2048  | 36 ,\n            handler: (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.focusSearch();\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS))),\n            primary: 512  | 41 ,\n            mac: { primary: 2048  | 512  | 41  },\n            handler: (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.recordSearchKeys();\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR))),\n            primary: 512  | 46 ,\n            mac: { primary: 2048  | 512  | 46  },\n            handler: (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.toggleSortByPrecedence();\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS))),\n            primary: 0,\n            handler: (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.showSimilarKeybindings(editorPane.activeKeybindingEntry);\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_COPY,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(\n                CONTEXT_KEYBINDINGS_EDITOR,\n                CONTEXT_KEYBINDING_FOCUS,\n                 (CONTEXT_WHEN_FOCUS.negate())\n            ))),\n            primary: 2048  | 33 ,\n            handler: async (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    await editorPane.copyKeybinding(editorPane.activeKeybindingEntry);\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS))),\n            primary: 0,\n            handler: async (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    await editorPane.copyKeybindingCommand(editorPane.activeKeybindingEntry);\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND_TITLE,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS))),\n            primary: 0,\n            handler: async (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    await editorPane.copyKeybindingCommandTitle(editorPane.activeKeybindingEntry);\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS))),\n            primary: 2048  | 18 ,\n            handler: (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.focusKeybindings();\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_REJECT_WHEN,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(\n                CONTEXT_KEYBINDINGS_EDITOR,\n                CONTEXT_WHEN_FOCUS,\n                 (Context.Visible.toNegated())\n            ))),\n            primary: 9 ,\n            handler: async (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.rejectWhenExpression(editorPane.activeKeybindingEntry);\n                }\n            }\n        });\n        KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: KEYBINDINGS_EDITOR_COMMAND_ACCEPT_WHEN,\n            weight: 200 ,\n            when: ( (ContextKeyExpr.and(\n                CONTEXT_KEYBINDINGS_EDITOR,\n                CONTEXT_WHEN_FOCUS,\n                 (Context.Visible.toNegated())\n            ))),\n            primary: 3 ,\n            handler: async (accessor, args) => {\n                const editorPane = accessor.get(IEditorService).activeEditorPane;\n                if (editorPane instanceof KeybindingsEditor) {\n                    editorPane.acceptWhenExpression(editorPane.activeKeybindingEntry);\n                }\n            }\n        });\n        const profileScopedActionDisposables = this._register(( (new DisposableStore())));\n        const registerProfileScopedActions = () => {\n            profileScopedActionDisposables.clear();\n            profileScopedActionDisposables.add(registerAction2(class DefineKeybindingAction extends Action2 {\n                constructor() {\n                    const when = ( (ResourceContextKey.Resource.isEqualTo(\n                         (that.userDataProfileService.currentProfile.keybindingsResource.toString())\n                    )));\n                    super({\n                        id: 'editor.action.defineKeybinding',\n                        title: { value: ( (nls.localize('defineKeybinding.start', \"Define Keybinding\"))), original: 'Define Keybinding' },\n                        f1: true,\n                        precondition: when,\n                        keybinding: {\n                            weight: 200 ,\n                            when,\n                            primary: KeyChord(2048  | 41 , 2048  | 41 )\n                        },\n                        menu: {\n                            id: MenuId.EditorContent,\n                            when,\n                        }\n                    });\n                }\n                async run(accessor) {\n                    const codeEditor = accessor.get(IEditorService).activeTextEditorControl;\n                    if (isCodeEditor(codeEditor)) {\n                        codeEditor.getContribution(DEFINE_KEYBINDING_EDITOR_CONTRIB_ID)?.showDefineKeybindingWidget();\n                    }\n                }\n            }));\n        };\n        registerProfileScopedActions();\n        this._register(this.userDataProfileService.onDidChangeCurrentProfile(() => registerProfileScopedActions()));\n    }\n    updatePreferencesEditorMenuItem() {\n        const commandId = '_workbench.openWorkspaceSettingsEditor';\n        if (this.workspaceContextService.getWorkbenchState() === 3  && !CommandsRegistry.getCommand(commandId)) {\n            CommandsRegistry.registerCommand(commandId, () => this.preferencesService.openWorkspaceSettings({ jsonEditor: false }));\n            MenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n                command: {\n                    id: commandId,\n                    title: OPEN_USER_SETTINGS_UI_TITLE,\n                    icon: preferencesOpenSettingsIcon\n                },\n                when: ( (ContextKeyExpr.and( (ResourceContextKey.Resource.isEqualTo(\n                     (this.preferencesService.workspaceSettingsResource.toString())\n                )),  (WorkbenchStateContext.isEqualTo('workspace')), ContextKeyExpr.not('isInDiffEditor')))),\n                group: 'navigation',\n                order: 1\n            });\n        }\n        this.updatePreferencesEditorMenuItemForWorkspaceFolders();\n    }\n    updatePreferencesEditorMenuItemForWorkspaceFolders() {\n        for (const folder of this.workspaceContextService.getWorkspace().folders) {\n            const commandId = `_workbench.openFolderSettings.${( ( folder.uri.toString()))}`;\n            if (!CommandsRegistry.getCommand(commandId)) {\n                CommandsRegistry.registerCommand(commandId, () => {\n                    if (this.workspaceContextService.getWorkbenchState() === 2 ) {\n                        return this.preferencesService.openWorkspaceSettings({ jsonEditor: false });\n                    }\n                    else {\n                        return this.preferencesService.openFolderSettings({ folderUri: folder.uri, jsonEditor: false });\n                    }\n                });\n                MenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n                    command: {\n                        id: commandId,\n                        title: OPEN_USER_SETTINGS_UI_TITLE,\n                        icon: preferencesOpenSettingsIcon\n                    },\n                    when: ( (ContextKeyExpr.and( (ResourceContextKey.Resource.isEqualTo(\n                         (this.preferencesService.getFolderSettingsResource(folder.uri).toString())\n                    )), ContextKeyExpr.not('isInDiffEditor')))),\n                    group: 'navigation',\n                    order: 1\n                });\n            }\n        }\n    }\n};\nPreferencesActionsContribution = ( (__decorate([\n    ( (__param(0, IWorkbenchEnvironmentService))),\n    ( (__param(1, IUserDataProfileService))),\n    ( (__param(2, IPreferencesService))),\n    ( (__param(3, IWorkspaceContextService))),\n    ( (__param(4, ILabelService))),\n    ( (__param(5, IExtensionService))),\n    ( (__param(6, IUserDataProfilesService)))\n], PreferencesActionsContribution)));\nconst workbenchContributionsRegistry = ( (Registry.as(Extensions.Workbench)));\nworkbenchContributionsRegistry.registerWorkbenchContribution(PreferencesActionsContribution, 1 );\nworkbenchContributionsRegistry.registerWorkbenchContribution(PreferencesContribution, 1 );\nregisterEditorContribution(SettingsEditorContribution.ID, SettingsEditorContribution, 1 );\n","import '../missing-services.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nimport { IPreferencesService } from '../vscode/vs/workbench/services/preferences/common/preferences.js';\nimport { PreferencesService } from '../vscode/vs/workbench/services/preferences/browser/preferencesService.js';\nimport { IPreferencesSearchService } from '../vscode/vs/workbench/contrib/preferences/common/preferences.js';\nimport { PreferencesSearchService } from '../vscode/vs/workbench/contrib/preferences/browser/preferencesSearch.js';\nimport { IKeybindingEditingService, KeybindingsEditingService } from '../vscode/vs/workbench/services/keybinding/common/keybindingEditing.js';\nimport '../vscode/vs/workbench/contrib/preferences/browser/preferences.contribution.js';\nfunction getServiceOverride() {\n    return {\n        [( IPreferencesService.toString())]: new SyncDescriptor(PreferencesService, [], true),\n        [( IPreferencesSearchService.toString())]: new SyncDescriptor(PreferencesSearchService, [], true),\n        [( IKeybindingEditingService.toString())]: new SyncDescriptor(KeybindingsEditingService, [], true)\n    };\n}\nexport { getServiceOverride as default };\n","import { reset } from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { renderLabelWithIcons } from 'monaco-editor/esm/vs/base/browser/ui/iconLabel/iconLabels.js';\nclass SimpleIconLabel {\n    constructor(_container) {\n        this._container = _container;\n    }\n    set text(text) {\n        reset(this._container, ...renderLabelWithIcons(text ?? ''));\n    }\n    set title(title) {\n        this._container.title = title;\n    }\n}\nexport { SimpleIconLabel };\n","import { __decorate, __param } from '../../../../node_modules/tslib/tslib.es6.js';\nimport { Widget } from 'monaco-editor/esm/vs/base/browser/ui/widget.js';\nimport { isCodeEditor, isCompositeEditor } from 'monaco-editor/esm/vs/editor/browser/editorBrowser.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { $, clearNode, append } from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { asCssVariableWithDefault, buttonBackground, asCssVariable, editorBackground, buttonForeground, editorForeground, contrastBorder } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { isEqual } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { IEditorService } from '../services/editor/common/editorService.js';\nimport { ModelDecorationOptions } from 'monaco-editor/esm/vs/editor/common/model/textModel.js';\nimport { MenuId, IMenuService } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { createAndFillInActionBarActions } from 'monaco-editor/esm/vs/platform/actions/browser/menuEntryActionViewItem.js';\nimport { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { EmbeddedCodeEditorWidget } from 'monaco-editor/esm/vs/editor/browser/widget/embeddedCodeEditorWidget.js';\nlet RangeHighlightDecorations = class RangeHighlightDecorations extends Disposable {\n    constructor(editorService) {\n        super();\n        this.editorService = editorService;\n        this._onHighlightRemoved = this._register(( new Emitter()));\n        this.onHighlightRemoved = this._onHighlightRemoved.event;\n        this.rangeHighlightDecorationId = null;\n        this.editor = null;\n        this.editorDisposables = this._register(( new DisposableStore()));\n    }\n    removeHighlightRange() {\n        if (this.editor && this.rangeHighlightDecorationId) {\n            const decorationId = this.rangeHighlightDecorationId;\n            this.editor.changeDecorations((accessor) => {\n                accessor.removeDecoration(decorationId);\n            });\n            this._onHighlightRemoved.fire();\n        }\n        this.rangeHighlightDecorationId = null;\n    }\n    highlightRange(range, editor) {\n        editor = editor ?? this.getEditor(range);\n        if (isCodeEditor(editor)) {\n            this.doHighlightRange(editor, range);\n        }\n        else if (isCompositeEditor(editor) && isCodeEditor(editor.activeCodeEditor)) {\n            this.doHighlightRange(editor.activeCodeEditor, range);\n        }\n    }\n    doHighlightRange(editor, selectionRange) {\n        this.removeHighlightRange();\n        editor.changeDecorations((changeAccessor) => {\n            this.rangeHighlightDecorationId = changeAccessor.addDecoration(selectionRange.range, this.createRangeHighlightDecoration(selectionRange.isWholeLine));\n        });\n        this.setEditor(editor);\n    }\n    getEditor(resourceRange) {\n        const resource = this.editorService.activeEditor?.resource;\n        if (resource && isEqual(resource, resourceRange.resource) && isCodeEditor(this.editorService.activeTextEditorControl)) {\n            return this.editorService.activeTextEditorControl;\n        }\n        return undefined;\n    }\n    setEditor(editor) {\n        if (this.editor !== editor) {\n            this.editorDisposables.clear();\n            this.editor = editor;\n            this.editorDisposables.add(this.editor.onDidChangeCursorPosition((e) => {\n                if (e.reason === 0\n                    || e.reason === 3\n                    || e.reason === 5\n                    || e.reason === 6 ) {\n                    this.removeHighlightRange();\n                }\n            }));\n            this.editorDisposables.add(this.editor.onDidChangeModel(() => { this.removeHighlightRange(); }));\n            this.editorDisposables.add(this.editor.onDidDispose(() => {\n                this.removeHighlightRange();\n                this.editor = null;\n            }));\n        }\n    }\n    static { this._WHOLE_LINE_RANGE_HIGHLIGHT = ModelDecorationOptions.register({\n        description: 'codeeditor-range-highlight-whole',\n        stickiness: 1 ,\n        className: 'rangeHighlight',\n        isWholeLine: true\n    }); }\n    static { this._RANGE_HIGHLIGHT = ModelDecorationOptions.register({\n        description: 'codeeditor-range-highlight',\n        stickiness: 1 ,\n        className: 'rangeHighlight'\n    }); }\n    createRangeHighlightDecoration(isWholeLine = true) {\n        return (isWholeLine ? RangeHighlightDecorations._WHOLE_LINE_RANGE_HIGHLIGHT : RangeHighlightDecorations._RANGE_HIGHLIGHT);\n    }\n    dispose() {\n        super.dispose();\n        if (this.editor?.getModel()) {\n            this.removeHighlightRange();\n            this.editor = null;\n        }\n    }\n};\nRangeHighlightDecorations = ( __decorate([\n    ( __param(0, IEditorService))\n], RangeHighlightDecorations));\nlet FloatingClickWidget = class FloatingClickWidget extends Widget {\n    constructor(editor, label, keyBindingAction, keybindingService) {\n        super();\n        this.editor = editor;\n        this.label = label;\n        this._onClick = this._register(( new Emitter()));\n        this.onClick = this._onClick.event;\n        this._domNode = $('.floating-click-widget');\n        this._domNode.style.padding = '6px 11px';\n        this._domNode.style.borderRadius = '2px';\n        this._domNode.style.cursor = 'pointer';\n        this._domNode.style.zIndex = '1';\n        if (keyBindingAction) {\n            const keybinding = keybindingService.lookupKeybinding(keyBindingAction);\n            if (keybinding) {\n                this.label += ` (${keybinding.getLabel()})`;\n            }\n        }\n    }\n    getId() {\n        return 'editor.overlayWidget.floatingClickWidget';\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return {\n            preference: 1\n        };\n    }\n    render() {\n        clearNode(this._domNode);\n        this._domNode.style.backgroundColor = asCssVariableWithDefault(buttonBackground, asCssVariable(editorBackground));\n        this._domNode.style.color = asCssVariableWithDefault(buttonForeground, asCssVariable(editorForeground));\n        this._domNode.style.border = `1px solid ${asCssVariable(contrastBorder)}`;\n        append(this._domNode, $('')).textContent = this.label;\n        this.onclick(this._domNode, e => this._onClick.fire());\n        this.editor.addOverlayWidget(this);\n    }\n    dispose() {\n        this.editor.removeOverlayWidget(this);\n        super.dispose();\n    }\n};\nFloatingClickWidget = ( __decorate([\n    ( __param(3, IKeybindingService))\n], FloatingClickWidget));\nlet FloatingClickMenu = class FloatingClickMenu extends Disposable {\n    static { this.ID = 'editor.contrib.floatingClickMenu'; }\n    constructor(editor, instantiationService, menuService, contextKeyService) {\n        super();\n        if (!(editor instanceof EmbeddedCodeEditorWidget)) {\n            const menu = menuService.createMenu(MenuId.EditorContent, contextKeyService);\n            const menuDisposables = ( new DisposableStore());\n            const renderMenuAsFloatingClickBtn = () => {\n                menuDisposables.clear();\n                if (!editor.hasModel() || editor.getOption(60 )) {\n                    return;\n                }\n                const actions = [];\n                createAndFillInActionBarActions(menu, { renderShortTitle: true, shouldForwardArgs: true }, actions);\n                if (actions.length === 0) {\n                    return;\n                }\n                const [first] = actions;\n                const widget = instantiationService.createInstance(FloatingClickWidget, editor, first.label, first.id);\n                menuDisposables.add(widget);\n                menuDisposables.add(widget.onClick(() => first.run(editor.getModel().uri)));\n                widget.render();\n            };\n            this._store.add(menu);\n            this._store.add(menuDisposables);\n            this._store.add(menu.onDidChange(renderMenuAsFloatingClickBtn));\n            renderMenuAsFloatingClickBtn();\n        }\n    }\n};\nFloatingClickMenu = ( __decorate([\n    ( __param(1, IInstantiationService)),\n    ( __param(2, IMenuService)),\n    ( __param(3, IContextKeyService))\n], FloatingClickMenu));\nexport { FloatingClickMenu, FloatingClickWidget, RangeHighlightDecorations };\n","import { registerThemingParticipant } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { TITLE_BAR_ACTIVE_BACKGROUND, WORKBENCH_BACKGROUND } from '../common/theme.js';\nimport { isWeb, isIOS, isWindows, isMacintosh } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { createMetaElement } from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { isSafari, isStandalone } from 'monaco-editor/esm/vs/base/browser/browser.js';\nimport { selectionBackground } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nregisterThemingParticipant((theme, collector) => {\n    const workbenchBackground = WORKBENCH_BACKGROUND(theme);\n    collector.addRule(`.monaco-workbench { background-color: ${workbenchBackground}; }`);\n    const windowSelectionBackground = theme.getColor(selectionBackground);\n    if (windowSelectionBackground) {\n        collector.addRule(`.monaco-workbench ::selection { background-color: ${windowSelectionBackground}; }`);\n    }\n    if (isWeb) {\n        const titleBackground = theme.getColor(TITLE_BAR_ACTIVE_BACKGROUND);\n        if (titleBackground) {\n            const metaElementId = 'monaco-workbench-meta-theme-color';\n            let metaElement = document.getElementById(metaElementId);\n            if (!metaElement) {\n                metaElement = createMetaElement();\n                metaElement.name = 'theme-color';\n                metaElement.id = metaElementId;\n            }\n            metaElement.content = ( titleBackground.toString());\n        }\n    }\n    if (isSafari) {\n        collector.addRule(`\n\t\t\tbody.web {\n\t\t\t\ttouch-action: none;\n\t\t\t}\n\t\t\t.monaco-workbench .monaco-editor .view-lines {\n\t\t\t\tuser-select: text;\n\t\t\t\t-webkit-user-select: text;\n\t\t\t}\n\t\t`);\n    }\n    if (isIOS && isStandalone()) {\n        collector.addRule(`body { background-color: ${workbenchBackground}; }`);\n    }\n});\nconst DEFAULT_FONT_FAMILY = isWindows ? '\"Segoe WPC\", \"Segoe UI\", sans-serif' : isMacintosh ? '-apple-system, BlinkMacSystemFont, sans-serif' : 'system-ui, \"Ubuntu\", \"Droid Sans\", sans-serif';\nexport { DEFAULT_FONT_FAMILY };\n","import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { refineServiceDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nconst FOLDER_CONFIG_FOLDER_NAME = '.vscode';\nconst FOLDER_SETTINGS_NAME = 'settings';\nconst FOLDER_SETTINGS_PATH = `${FOLDER_CONFIG_FOLDER_NAME}/${FOLDER_SETTINGS_NAME}.json`;\nconst defaultSettingsSchemaId = 'vscode://schemas/settings/default';\nconst userSettingsSchemaId = 'vscode://schemas/settings/user';\nconst profileSettingsSchemaId = 'vscode://schemas/settings/profile';\nconst machineSettingsSchemaId = 'vscode://schemas/settings/machine';\nconst workspaceSettingsSchemaId = 'vscode://schemas/settings/workspace';\nconst folderSettingsSchemaId = 'vscode://schemas/settings/folder';\nconst launchSchemaId = 'vscode://schemas/launch';\nconst tasksSchemaId = 'vscode://schemas/tasks';\nconst APPLICATION_SCOPES = [1 ];\nconst PROFILE_SCOPES = [2 , 3 , 4 , 5 , 6 ];\nconst LOCAL_MACHINE_PROFILE_SCOPES = [3 , 4 , 5 ];\nconst LOCAL_MACHINE_SCOPES = [1 , ...LOCAL_MACHINE_PROFILE_SCOPES];\nconst REMOTE_MACHINE_SCOPES = [2 , 3 , 4 , 5 , 6 ];\nconst WORKSPACE_SCOPES = [3 , 4 , 5 , 6 ];\nconst FOLDER_SCOPES = [4 , 5 , 6 ];\nconst TASKS_CONFIGURATION_KEY = 'tasks';\nconst LAUNCH_CONFIGURATION_KEY = 'launch';\nconst WORKSPACE_STANDALONE_CONFIGURATIONS = Object.create(null);\nWORKSPACE_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${TASKS_CONFIGURATION_KEY}.json`;\nWORKSPACE_STANDALONE_CONFIGURATIONS[LAUNCH_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${LAUNCH_CONFIGURATION_KEY}.json`;\nconst USER_STANDALONE_CONFIGURATIONS = Object.create(null);\nUSER_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${TASKS_CONFIGURATION_KEY}.json`;\nconst IWorkbenchConfigurationService = refineServiceDecorator(IConfigurationService);\nconst TASKS_DEFAULT = '{\\n\\t\\\"version\\\": \\\"2.0.0\\\",\\n\\t\\\"tasks\\\": []\\n}';\nconst APPLY_ALL_PROFILES_SETTING = 'workbench.settings.applyToAllProfiles';\nexport { APPLICATION_SCOPES, APPLY_ALL_PROFILES_SETTING, FOLDER_CONFIG_FOLDER_NAME, FOLDER_SCOPES, FOLDER_SETTINGS_NAME, FOLDER_SETTINGS_PATH, IWorkbenchConfigurationService, LAUNCH_CONFIGURATION_KEY, LOCAL_MACHINE_PROFILE_SCOPES, LOCAL_MACHINE_SCOPES, PROFILE_SCOPES, REMOTE_MACHINE_SCOPES, TASKS_CONFIGURATION_KEY, TASKS_DEFAULT, USER_STANDALONE_CONFIGURATIONS, WORKSPACE_SCOPES, WORKSPACE_STANDALONE_CONFIGURATIONS, defaultSettingsSchemaId, folderSettingsSchemaId, launchSchemaId, machineSettingsSchemaId, profileSettingsSchemaId, tasksSchemaId, userSettingsSchemaId, workspaceSettingsSchemaId };\n","import { CommandsRegistry } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { isNonEmptyArray } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { EditorExtensionsRegistry } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';\nimport { MenuRegistry, MenuId, isIMenuItem } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nfunction getAllUnboundCommands(boundCommands) {\n    const unboundCommands = [];\n    const seenMap = ( new Map());\n    const addCommand = (id, includeCommandWithArgs) => {\n        if (( seenMap.has(id))) {\n            return;\n        }\n        seenMap.set(id, true);\n        if (id[0] === '_' || id.indexOf('vscode.') === 0) {\n            return;\n        }\n        if (boundCommands.get(id) === true) {\n            return;\n        }\n        if (!includeCommandWithArgs) {\n            const command = CommandsRegistry.getCommand(id);\n            if (command && typeof command.description === 'object'\n                && isNonEmptyArray(command.description.args)) {\n                return;\n            }\n        }\n        unboundCommands.push(id);\n    };\n    for (const menuItem of MenuRegistry.getMenuItems(MenuId.CommandPalette)) {\n        if (isIMenuItem(menuItem)) {\n            addCommand(menuItem.command.id, true);\n        }\n    }\n    for (const editorAction of EditorExtensionsRegistry.getEditorActions()) {\n        addCommand(editorAction.id, true);\n    }\n    for (const id of ( CommandsRegistry.getCommands().keys())) {\n        addCommand(id, false);\n    }\n    return unboundCommands;\n}\nexport { getAllUnboundCommands };\n"],"names":["KEYBINDING_ENTRY_TEMPLATE_ID","SOURCE_SYSTEM","SOURCE_EXTENSION","SOURCE_USER","wordFilter","or","SOURCE_REGEX","EXTENSION_REGEX","KeybindingsEditorModel","constructor","os","keybindingsService","extensionService","super","this","_keybindingItems","_keybindingItemsSortedByPrecedence","modifierLabels","ui","aria","user","fetch","searchValue","sortByPrecedence","keybindingItems","commandIdMatches","exec","filter","k","command","map","keybindingItem","id","getId","templateId","test","filterBySource","replace","extensionMatches","extensionId","substring","length","filterByExtension","keybindingMatches","trim","filterByText","source","extension","toLowerCase","equals","identifier","displayName","quoteAtFirstChar","charAt","quoteAtLastChar","completeMatch","result","words","split","keybindingWords","splitKeybindingWords","KeybindingItemMatches","commandLabelMatches","commandDefaultLabelMatches","sourceMatches","whenMatches","extensionIdMatches","extensionLabelMatches","push","undefined","wordsSeparatedBySpaces","word","resolve","actionLabels","Map","extensions","set","boundCommands","keybinding","getKeybindings","toKeybindingEntry","commandsWithDefaultKeybindings","getDefaultKeybindings","g","indexOf","slice","sort","a","b","compareKeybindingData","getAriaLabel","when","value","commandLabel","localeCompare","isDefault","actions","menuCommand","getCommand","editorActionLabel","get","resolvedKeybinding","getCommandLabel","commandDefaultLabel","getCommandDefaultLabel","serialize","isDefaultVariant","title","original","category","matches","wordToMatchAgainst","matchesKeybinding","wordMatchesFilter","matchesWords","filterAndSort","wordMatches","start","end","match","some","m","firstPart","chordPart","getChords","userSettingsLabel","getUserSettingsLabel","ariaLabel","label","getLabel","strings","createCompleteMatch","firstPartMatch","chordPartMatch","matchedWords","firstPartMatchedWords","chordPartMatchedWords","matchFirstPart","index","firstPartMatched","chordPartMatched","keyCode","matchChordPart","matchPart","cordPartMatchedWordIndex","splice","isModifier","isCompleteMatch","hasAnyMatch","chord","matched","matchesMetaModifier","metaKey","matchesCtrlModifier","ctrlKey","matchesShiftModifier","shiftKey","matchesAltModifier","altKey","matchesKeyCode","keyAriaLabel","wordMatchesMetaModifier","wordMatchesCtrlModifier","wordMatchesShiftModifier","wordMatchesAltModifier","keybindingMatch","KeybindingsEditorInput","ID","instantiationService","searchOptions","resource","keybindingsModel","createInstance","OS","typeId","getName","nls","otherInput","dispose","SettingsEditor2Input","_preferencesService","from","scheme","vscodeSettings","path","_settingsModel","createSettings2EditorModel","canBeType","propTypes","types","t","includes","isNullOrEmpty","createValidator","prop","type","Array","isArray","isNullable","isNumeric","numericValidations","isIntegral","exclusiveMax","exclusiveMin","exclusiveMaximum","maximum","exclusiveMinimum","minimum","enabled","isValid","message","multipleOf","validation","getNumericValidators","stringValidations","uriRegex","patternRegex","pattern","RegExp","maxLength","minLength","patternErrorMessage","format","Format","CSS","parseHex","enum","key","join","getStringValidators","arrayValidator","items","propItems","withQuotes","s","arrayValue","uniqueItems","Set","size","minItems","maxItems","forEach","v","propItemsEnum","errorMessage","getErrorsForSchema","getArrayValidator","objectValidator","properties","patternProperties","additionalProperties","errors","Object","keys","data","getObjectValidator","err","isNaN","validator","getInvalidTypeError","_type","valueType","valueValidatesAsType","JSON","stringify","propertySchema","nullRange","startLineNumber","startColumn","endLineNumber","endColumn","isNullRange","range","AbstractSettingsModel","arguments","_currentResultGroups","updateResultGroup","resultGroup","delete","removeDuplicateResults","update","settingKeys","order","groupId","group","filterMatches","has","setting","add","compareTwoNullableNumbers","aOrMax","Number","MAX_SAFE_INTEGER","bOrMax","filterSettings","groupFilter","settingMatcher","allGroups","filterGroups","groupMatched","section","sections","settings","settingMatchResult","matchType","None","score","extensionInfo","categoryLabel","categoryOrder","getPreference","settingsGroups","collectMetadata","groups","metadata","create","hasMetadata","SettingsEditorModel","reference","_configurationTarget","_onDidChangeGroups","_register","onDidChangeGroups","event","settingsModel","object","textEditorModel","onWillDispose","onDidChangeContent","_settingsGroups","fire","uri","configurationTarget","parse","content","getValue","findValueMatches","findMatches","valueRange","isSettingsProperty","property","previousParents","resultGroups","values","filteredSettings","filteredGroup","filterMatch","modelGroup","titleRange","filteredGroups","Settings2EditorModel","_defaultSettings","configurationService","dirty","onDidChangeConfiguration","e","as","Configuration","onDidSchemaChange","getSettingsGroups","additionalGroups","setAdditionalGroups","Error","model","overrideSetting","currentProperty","currentParent","settingsPropertyIndex","onValue","offset","overrides","valueStartPosition","getPositionAt","valueEndPosition","lineNumber","column","assign","visitor","onObjectBegin","position","onObjectProperty","name","settingStartPosition","description","descriptionIsMarkdown","keyRange","descriptionRanges","overrideOf","onObjectEnd","pop","onArrayBegin","array","onArrayEnd","onLiteralValue","onError","error","isDisposed","WorkspaceConfigurationEditorModel","_configurationGroups","configurationGroups","DefaultSettings","_mostCommonlyUsedSettingsKeys","target","_settingsByName","_onDidChange","onDidChange","getContent","forceUpdate","_content","initialize","getContentWithoutMostCommonlyUsed","_contentWithoutMostCommonlyUsed","_allSettingsGroups","toContent","getRegisteredGroups","initAllSettingsMap","getMostCommonlyUsedSettings","configurations","getConfigurations","removeEmptySettingsGroups","compareConfigurationNodes","reduce","config","parseConfig","sortGroups","allSettingsGroups","scope","enumDescriptions","settingsGroup","seenSettings","configWithTitleAndSameId","find","c","configurationSettings","parseSettings","allOf","settingsObject","matchesScope","default","markdownDescription","descriptionLines","parseOverrideSettings","listItemType","objectProperties","objectPatternProperties","objectAdditionalProperties","enumToUse","markdownEnumDescriptions","enumDescriptionsAreMarkdown","allKeysAreBoolean","every","defaultValueSource","isLanguageTagSetting","registeredConfigurationProp","arrayItemType","tags","disallowSyncIgnore","restricted","deprecationMessage","markdownDeprecationMessage","deprecationMessageIsMarkdown","enumItemLabels","editPresentation","nonLanguageSpecificDefaultValueSource","overrideSettings","c1","c2","title1","title2","startIndex","builder","SettingsContentBuilder","i","pushGroup","DefaultSettingsEditorModel","_uri","defaultSettings","_model","nonEmptyResultGroups","startLine","writeResultGroups","pushLine","getGroup","writeSettingsGroupToBuilder","groupContent","groupEndLine","getLineCount","cursorPosition","edit","text","forceMoveMarkers","pushEditOperations","tokenizeTo","Math","min","tokenization","forceTokenization","filteredMatch","settingMatches","copySetting","lineCountWithOffset","_contentByLines","_rangeOffset","lastLine","lineText","isFirst","isLast","lastSetting","_pushGroup","lineIdx","indent","groupStart","sectionTitleStart","addDescription","pushSetting","settingStart","pushSettingDescription","preValueContent","valueStart","pushValue","fixSettingLink","line","settingName","descriptionPreValue","deprecationMessageLines","desc","displayEnum","enumValue","String","lines","l","preValueConent","valueString","subSetting","mulitLineValue","RawSettingsContentBuilder","DefaultRawSettingsEditorModel","defaultKeybindingsContents","keybindingService","getDefaultKeybindingsContent","DefaultKeybindingsEditorModel","PreferencesService","editorService","editorGroupService","textFileService","notificationService","contextService","userDataProfileService","userDataProfilesService","textModelResolverService","modelService","jsonEditingService","languageService","labelService","remoteAgentService","textEditorService","_onDispose","defaultKeybindingsResource","network","vscode","authority","defaultSettingsRawResource","onDidUpdateKeybindings","getModel","updateModel","userSettingsResource","currentProfile","settingsResource","workspaceSettingsResource","getWorkbenchState","workspace","getWorkspace","configuration","folders","toResource","settingsEditor2Input","getFolderSettingsResource","folder","getWorkspaceFolder","resolveModel","isDefaultSettingsResource","getConfigurationTargetFromDefaultSettingsResource","languageSelection","createById","createModel","getDefaultSettings","toString","defaultRawSettingsEditorModel","defaultKeybindingsEditorModel","createPreferencesEditorModel","createDefaultSettingsEditorModel","defaultProfile","createEditableSettingsEditorModel","workspaceSettingsUri","getEditableSettingsURI","settingsUri","remoteEnvironment","getEnvironment","remoteSettingsUri","settingsPath","openRawDefaultSettings","openEditor","openRawUserSettings","shouldOpenJsonByDefault","openSettings","options","query","jsonEditor","open","openLanguageSpecificSettings","languageId","revealSetting","openSettingsJson","openSettings2","input","focusSearch","openToSide","activeGroup","activeEditorPane","openApplicationSettings","openUserSettings","openRemoteSettings","environment","openWorkspaceSettings","info","Promise","reject","openFolderSettings","folderUri","folderSettingsUri","openGlobalKeybindingSettings","textual","pinned","revealIfOpened","emptyContents","editableKeybindings","keybindingsResource","openDefaultKeybindings","createIfNotExists","activeEditorGroup","sideEditorGroup","addGroup","all","preserveFocus","override","editor","search","openDefaultKeybindingsFile","doOpenSettingsJson","openSplitJSON","openDefaultSettings","doOpenSplitJSON","editableSettingsEditorInput","getOrCreateEditableSettingsEditorInput","createSettingsIfNotExists","preferencesEditorInput","createSplitJsonEditorInput","createTextEditor","defaultPreferencesEditorInput","getDefaultSettingsResource","isDefaultWorkspaceSettingsResource","isDefaultFolderSettingsResource","isDefaultUserSettingsResource","createModelReference","defaultSettingsUri","_defaultWorkspaceSettingsContentModel","_defaultFolderSettingsContentModel","_defaultUserSettingsContentModel","workspaceConfig","read","write","contents","acceptTextOnly","fileOperationResult","error2","getUriLabel","relative","settingKey","codeEditor","getControl","getPositionToReveal","setPosition","revealPositionNearTop","focus","triggerSuggest","schema","getConfigurationProperties","isOverrideProperty","defaultValue","inspect","LineBreakInsert","runEditorCommand","getLineMaxColumn","firstNonWhiteSpaceColumn","getLineFirstNonWhitespaceColumn","PreferencesSearchService","productService","extensionManagementService","extensionEnablementService","_installedExtensions","getInstalled","then","exts","ext","isEnabled","manifest","contributes","uuid","remoteSearchAllowed","workbench","enableNaturalLanguageSearch","_endpoint","urlBase","workbenchSettings","naturalLanguageSearchEndpoint","naturalLanguageSearchKey","settingsSearchUrl","getRemoteSearchProvider","newExtensionsOnly","getLocalSearchProvider","LocalSearchProvider","EXACT_MATCH_SCORE","START_SCORE","_filter","searchModel","preferencesModel","token","orderedScore","getGroupFilter","SettingMatches","exactMatch","regex","global","searchString","requireFullQueryMatch","searchDescription","valuesMatcher","descriptionMatchingWords","keyMatchingWords","valueMatchingWords","_findMatchesInSetting","_doFindMatchesInSetting","subSettingMatches","getRangesForWords","keyRanges","subSettingKeyRanges","subSettingValueRanges","refreshMatchType","settingKeyAsWords","settingValue","lineIndex","descriptionMatches","toDescriptionRange","checkForWholeWordMatchType","keyMatches","toKeyRange","valueMatches","toValueRange","valueRanges","singleWordQuery","lineToSearch","WholeWordMatch","keyRangesLength","KeyMatch","others","ranges","o","settingsScopeDropDownIcon","triangleDown","settingsMoreActionIcon","gear","keybindingsRecordKeysIcon","recordKeys","keybindingsSortIcon","sortPrecedence","keybindingsEditIcon","keybindingsAddIcon","settingsEditIcon","settingsRemoveIcon","close","settingsDiscardIcon","discard","preferencesClearInputIcon","clearAll","preferencesFilterIcon","preferencesOpenSettingsIcon","goToFile","FolderSettingsActionViewItem","action","contextMenuService","_folderSettingCounts","_folder","onDidChangeWorkspaceFolders","onWorkspaceFoldersChanged","setCount","settingsTarget","count","workspaceFolder","render","container","element","labelElement","dom","$","detailsElement","dropDownElement","asCSSSelector","anchorElement","role","MOUSE_DOWN","stop","CLICK","onClick","KEY_UP","onKeyUp","_action","checked","showMenu","run","updateEnabled","updateChecked","oldFolder","total","n","textContent","detailsText","labelWithCount","classList","toggle","labelText","remove","showContextMenu","getAnchor","getActions","getDropdownMenuActions","getActionViewItem","onHide","blur","workspaceFolders","folderCount","SettingsTargetsWidget","parent","environmentService","_settingsTarget","_onDidTargetChange","onDidTargetChange","onDidChangeWorkbenchState","onWorkbenchStateChanged","resetLabels","remoteAuthority","hostLabel","getHostLabel","vscodeRemote","userLocalSettings","userRemoteSettings","workspaceSettings","folderSettingsAction","settingsTabsWidget","settingsSwitcherBar","orientation","focusOnlyEnabledItems","animated","actionViewItemProvider","folderSettings","updateTarget","tooltip","async","setResultCount","updateLanguageFilterIndicators","languageToUse","getLanguageName","languageSuffix","domNode","enableRemoteSettings","SearchWidget","contextViewService","contextKeyService","_onFocus","onFocus","createSearchContainer","controlsDiv","showResultCount","countElement","style","backgroundColor","color","border","inputBox","inputElement","setAttribute","ariaLive","ariaLabelledBy","focusTracker","onDidFocus","focusKey","onDidBlur","searchContainer","searchInput","createInputBox","showHistoryHint","showMessage","paddingRight","getControlsWidth","layout","dimension","width","select","hasFocus","clear","setValue","EditPreferenceWidget","_line","_preferences","_editPreferenceDecoration","createDecorationsCollection","_onClick","onMouseDown","detail","isAfterLines","isVisible","preferences","getLine","show","hoverMessage","newDecoration","glyphMarginClassName","asClassName","glyphMarginHoverMessage","appendText","stickiness","hide","KeybindingsSearchWidget","recordDisposables","_onKeybinding","onKeybinding","_onEnter","onEnter","_onEscape","onEscape","_onBlur","onBlur","stopRecordingKeys","_chords","_inputValue","startRecordingKeys","KEY_DOWN","_onKeyDown","BLUR","INPUT","setInputValue","keyboardEvent","preventDefault","stopPropagation","recordEnter","printKeybinding","resolveKeyboardEvent","browserEvent","code","getDispatchChords","quoteRecordedKeys","DefineKeybindingWidget","WIDTH","HEIGHT","_isVisible","_onHide","_onShowExistingKeybindings","onShowExistingKeybidings","_domNode","document","createElement","setDisplay","setClassName","setWidth","setHeight","boxShadow","_keybindingInputWidget","history","inputBoxStyles","clearOrHide","onCancel","_outputNode","_showExistingKeybindingsNode","define","withAsyncBody","disposable","top","round","height","setTop","left","setLeft","printExisting","numberOfExisting","existingElement","createTextNode","appendChild","onmousedown","onmouseup","onclick","DefineKeybindingOverlayWidget","_editor","_widget","addOverlayWidget","getDomNode","getPosition","preference","removeOverlayWidget","hasModel","revealPositionInCenterIfOutsideViewport","layoutInfo","getLayoutInfo","SuggestEnabledInput","suggestionProvider","resourceHandle","defaultInstantiationService","languageFeaturesService","_onShouldFocusResults","onShouldFocusResults","_onInputDidChange","onInputDidChange","_onDidFocus","_onDidBlur","stylingContainer","placeholderText","editorOptions","fontSize","lineHeight","wordWrap","scrollbar","vertical","roundedSelection","guides","indentation","cursorWidth","fontFamily","snippetSuggestions","suggest","filterGraceful","showIcons","autoClosingBrackets","getSuggestEnabledInputOptions","overflowWidgetsDomNode","scopedContextKeyService","getScopedContextKeyService","createChild","inputWidget","contributions","getSomeEditorContributions","isSimpleWidget","affectsConfiguration","accessibilitySupport","cursorBlinking","updateOptions","onDidFocusEditorText","onDidBlurEditorText","scopeHandle","inputModel","setModel","onDidPaste","focusContextKey","onKeyDownMonaco","chain","onKeyDown","on","preexistingContent","inputWidgetModel","visibility","validatedSuggestProvider","provideResults","sortKey","triggerCharacters","wordDefinition","alwaysShowSuggestions","completionProvider","register","hasAccessToAllModels","_debugDisplayName","provideCompletionItems","_context","zeroIndexedColumn","alreadyTypedCount","zeroIndexedWordStart","wordAtText","lastIndexOf","suggestions","rest","insertText","fromPositions","delta","sortText","kind","styleOverrides","_contextKeyService","updateAriaLabel","val","fullRange","getFullModelRange","executeEdits","setScrollTop","inputBackground","inputForeground","inputPlaceholderForeground","borderWidth","borderStyle","borderColor","inputBorder","cursor","getElementsByClassName","selectAll","setSelection","theme","collector","selectionBackgroundColor","getColor","inputBackgroundColor","addRule","transparent","inputForegroundColor","settingsHeaderForeground","light","dark","hcDark","hcLight","settingsHeaderHoverForeground","settingsHeaderBorder","settingsSashBorder","settingsSelectBackground","settingsSelectForeground","settingsSelectBorder","settingsSelectListBorder","settingsTextInputBackground","settingsTextInputForeground","settingsTextInputBorder","settingsNumberInputBackground","settingsNumberInputForeground","settingsNumberInputBorder","KeybindingsEditor","telemetryService","themeService","keybindingEditingService","clipboardService","storageService","_onDefineWhenExpression","onDefineWhenExpression","_onRejectWhenExpression","onRejectWhenExpression","_onAcceptWhenExpression","onAcceptWhenExpression","_onLayout","onLayout","keybindingsEditorModel","unAssignedKeybindingItemToRevealAndFocus","tableEntries","latestEmptyFilters","delayedFiltering","keybindingFocusContextKey","keybindingsEditorContextKey","bindTo","searchFocusContextKey","searchHistoryDelayer","recordKeysAction","sortByPrecedenceAction","focusNotifiers","focusNextWidget","searchWidget","focusKeybindings","focusPreviousWidget","createEditor","keybindingsEditorElement","class","createAriaLabelElement","createOverlayContainer","createHeader","createBody","setInput","context","clearInput","reset","layoutSearchWidget","overlayContainer","defineKeybindingWidget","layoutKeybindingsTable","activeKeybindingEntry","selectEntry","focusedElement","keybindingsTable","getFocusedElements","defineKeybinding","keybindingEntry","showOverlayContainer","updateKeybinding","onKeybindingEditingError","hideOverlayContainer","defineWhenExpression","rejectWhenExpression","acceptWhenExpression","addKeybinding","editKeybinding","removeKeybinding","resetKeybinding","copyKeybinding","userFriendlyKeybinding","writeText","copyKeybindingCommand","copyKeybindingCommandTitle","clearSearchResults","showSimilarKeybindings","ariaLabelElement","zIndex","keybindingStr","display","headerContainer","fullTextSearchPlaceholder","keybindingsSearchPlaceholder","clearInputAction","placeholder","getMemento","trigger","filterKeybindings","updateSearchOptions","actionsContainer","recordingBadge","createRecordingBadge","renderKeybindingsEntries","setPlaceHolder","setAriaLabel","toolBar","lookupKeybinding","toggleStyles","getKeyBinding","setActions","keybindingsEditorInput","recordKeybindings","bodyContainer","createTable","keybindingsTableContainer","Delegate","weight","minimumWidth","maximumWidth","ActionsColumnRenderer","TEMPLATE_ID","project","row","CommandColumnRenderer","KeybindingColumnRenderer","WhenColumnRenderer","SourceColumnRenderer","identityProvider","horizontalScrolling","accessibilityProvider","AccessibilityProvider","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","overrideStyles","listBackground","multipleSelectionSupport","setRowLineHeight","openOnSingleClick","transformOptimization","onContextMenu","onDidChangeFocus","onFocusChange","getHTMLElement","onDidOpen","defaultPrevented","getActionsLabels","actionsLabels","editorAction","getEditorActions","menuItem","getMenuItems","CommandPalette","addToHistory","getHistory","saveState","clearKeyboardShortcutSearchHistory","clearHistory","keybindingsEntries","currentSelectedIndex","getSelection","setFocus","getNewIndexOfUnassignedKeybinding","reveal","tableHeight","getIndexOf","listEntry","unassignedKeybinding","entry","keybindingItemEntry","domFocus","currentFocusIndices","getFocus","selectKeybinding","recordSearchKeys","toggleSortByPrecedence","anchor","createCopyAction","createCopyCommandAction","createCopyCommandTitleAction","createDefineKeybindingAction","createAddKeybindingAction","createRemoveAction","createResetAction","createDefineWhenExpressionAction","createShowConflictsAction","headerRowHeight","getHeight","commandIdMatched","commandDefaultLabelMatched","extensionIdMatched","keybindingsEditor","renderTemplate","actionBar","renderElement","templateData","createEditAction","createAddAction","icon","disposeTemplate","commandColumn","commandLabelContainer","commandDefaultLabelContainer","commandIdLabelContainer","commandIdLabel","keybindingLabel","extensionsWorkbenchService","sourceColumn","sourceLabel","extensionContainer","extensionLabel","tabindex","disposables","callback","WhenInputWidget","_onDidAccept","onDidAccept","_onDidReject","onDidReject","contextKey","documentation","DBLCLICK","any","whenLabelContainer","whenLabel","whenInputContainer","whenInputDisposables","parentElement","clientWidth","hideInputWidget","paddingLeft","getWidgetAriaLabel","kbEditorAriaLabel","foregroundColor","whenForegroundColor","makeOpaque","listActiveSelectionForegroundColor","listActiveSelectionBackgroundColor","listInactiveSelectionForegroundColor","listInactiveSelectionBackgroundColor","listFocusForegroundColor","listFocusBackgroundColor","listHoverForegroundColor","listHoverBackgroundColor","ConfigureLanguageBasedSettingsAction","LABEL","quickInputService","preferencesService","picks","getSortedRegisteredLanguageNames","languageName","fakeResource","getExtensions","file","filenames","getFilenames","iconClasses","getIconClasses","pick","placeHolder","getLanguageIdByLanguageName","registerCommand","handler","accessor","precondition","UserSettingsRenderer","modelChangeDelayer","settingHighlighter","SettingHighlighter","editSettingActionRenderer","EditSettingRenderer","onUpdateSetting","updatePreference","onModelChanged","unsupportedSettingsRenderer","UnsupportedSettingsRenderer","associatedPreferencesModel","overrideIdentifiers","updateValue","onSettingUpdated","getSetting","highlight","focusPreference","clearFocus","editPreference","editableSetting","activateOnSetting","WorkspaceSettingsRenderer","workspaceConfigurationRenderer","WorkspaceConfigurationRenderer","primarySettingsModel","_onUpdateSetting","editPreferenceWidgetForCursorPosition","editPreferenceWidgetForMouseMove","toggleEditPreferencesForMouseMoveDelayer","onEditSettingClicked","onDidChangeCursorPosition","positionChangeEvent","onPositionChanged","onMouseMove","mouseMoveEvent","onMouseMoved","onConfigurationChanged","getSettings","showEditPreferencesWidget","isDefaultSettings","getOption","editPreferenceWidget","getEditPreferenceWidgetUnderMouse","onMouseOver","toggleEditPreferenceWidgetForMouseMove","editPreferencesWidget","marginFreeFromOtherDecorations","decorations","getLineDecorations","configurationMap","getConfigurationsMap","getSettingsAtLineNumber","configurationNode","policy","policyValue","toAbsoluteCoords","positionCoords","getScrolledVisiblePosition","editorCoords","x","y","jsonSchema","updateSetting","getDefaultActions","fixedHighlighter","volatileHighlighter","fix","removeHighlightRange","highlightRange","revealLineInCenterIfOutsideViewport","settingsEditorModel","markerService","workspaceTrustManagementService","uriIdentityService","renderingDelayer","codeActions","extUri","getComparisonKey","delayedRender","codeActionProvider","markerData","generateMarkerData","changeOne","provideCodeActions","codeActionsByRange","codeActionsRange","containsRange","configurationRegistry","handleOverrides","handlePolicyConfiguration","handleLocalUserConfiguration","handleRemoteUserConfiguration","handleWorkspaceConfiguration","handleWorkspaceFolderConfiguration","gemerateUnknownConfigurationMarker","severity","Hint","useDefaultFlags","isSettingAppliedForAllProfiles","generateUnsupportedApplicationSettingMarker","generateUnsupportedMachineSettingMarker","isWorkspaceTrusted","marker","generateUntrustedSettingMarker","generateUntrustedSettingCodeActions","addCodeActions","Warning","diagnostics","QuickFix","lift","supportedKeys","workspaceSettingsEditorModel","workspaceContextService","createDecoration","_DIM_CONFIGURATION_","inlineClassName","SettingsEditorContribution","_createPreferencesRenderer","onDidChangeModel","currentRenderer","defaultCommonlyUsedSettings","tocData","children","knownAcronyms","str","knownTermMappings","getIgnoredSettings","defaultIgnoredSettings","settingsContent","parsed","getIgnoredSettingsFromContent","userValue","getIgnoredSettingsFromConfig","added","removed","startsWith","cachedSyncIgnoredSettingsSet","cachedSyncIgnoredSettings","SettingsTreeIndicatorsLabel","hoverService","userDataSyncEnablementService","commandService","keybindingListeners","focusedIndex","defaultHoverOptions","hoverPosition","showPointer","compact","trapFocus","indicatorsContainerElement","profilesEnabled","workspaceTrustIndicator","createWorkspaceTrustIndicator","scopeOverridesIndicator","createScopeOverridesIndicator","syncIgnoredIndicator","createSyncIgnoredIndicator","defaultOverrideIndicator","createDefaultOverrideIndicator","allIndicators","addHoverDisposables","showHover","scheduler","hover","MOUSE_OVER","isScheduled","schedule","MOUSE_LEAVE","cancel","evt","workspaceTrustElement","workspaceTrustLabel","commandId","executeCommand","otherOverridesElement","syncIgnoredElement","syncIgnoredLabel","syncIgnoredHoverContent","defaultOverrideLabel","indicatorsToShow","indicator","innerText","resetIndicatorNavigationKeyBindings","indicators","focusElement","tabIndex","ev","handled","focusIndicatorAt","indexToFocus","elementToFocus","currentlyFocusedIndicator","updateWorkspaceTrust","isUntrusted","updateSyncIgnored","ignoredSettings","getInlineScopeDisplayText","completeScope","language","localizedScope","updateScopeOverrides","onDidClickOverrideElement","onApplyFilter","hasPolicyValue","_","overriddenScopeList","overriddenDefaultsLanguageList","scopeOverridesLabelText","isConfigured","contentMarkdownString","encodeURIComponent","getAccessibleScopeDisplayText","scopeDisplayText","isTrusted","supportHtml","linkHandler","url","decodeURIComponent","prefaceText","overriddenScope","view","onClickOrKeydown","updateDefaultOverrideIndicator","sourceToDisplay","getDefaultValueSourceToDisplay","defaultOverrideHoverContent","SettingsTreeElement","_id","_tabbable","_onDidChangeTabbable","onDidChangeTabbable","tabbable","SettingsTreeGroupElement","_children","newChildren","_childSettingKeys","child","SettingsTreeSettingElement","level","isFirstGroup","containsSetting","SettingsTreeNewExtensionsElement","extensionIds","MAX_DESC_LINES","inspectResult","_displayCategory","_displayLabel","languageOverrideValues","displayCategory","initLabels","displayLabel","displayKeyFormat","settingKeyToDisplayFormat","inspected","targetSelector","inspectedLanguageOverrides","languageSelector","displayValue","workspaceValue","userRemoteValue","userLocalValue","overrideIdentifier","inspectedOverride","isRegisteredLanguageId","userRemote","userLocal","scopeValue","overrideValues","registryValues","getConfigurationDefaultsOverrides","overrideValueSource","valuesSources","tag","truncatedDescLines","extensionRecommendations","displayExtensionId","isExtensionToggleSetting","enumRenderableSettingTypes","settingTypeEnumRenderable","Multiline","MultilineString","Exclude","isIncludeSetting","Include","Integer","Boolean","Null","NullableInteger","NullableNumber","Complex","schemas","arrays","anyOf","isObjectRenderableSchema","isObjectSetting","BooleanObject","LanguageTag","Enum","ExtensionToggle","matchesAllTags","tagFilters","hasFilteredTag","isRemote","configTarget","isUri","matchesAnyExtension","extensionFilters","matchesAnyFeature","featureFilters","features","feature","patterns","createSettingMatchRegExp","matchesAnyId","idFilters","matchesAllLanguages","languageFilter","SettingsTreeModel","_viewState","_isWorkspaceTrusted","_configurationService","_languageService","_userDataProfileService","_productService","_treeElementsBySettingName","root","_root","newTocRoot","_tocRoot","newRoot","createSettingsTreeGroupElement","disposeChildren","workspaceTrusted","updateRequireTrustedTargetElements","recursiveDispose","getElementsByName","updateElementsByName","updateSettings","flat","getTargetToInspect","inspectSetting","tocEntry","depth","getDepth","settingChildren","createSettingsTreeSettingElement","el","groupChildren","nameElements","inspectOverrides","targetOverrideSelector","overrideValue","lastDotIdx","doTrim","forward","parts","part","reg","shift","trimmed","trimCategoryForGroup","wordifyKey","p1","toUpperCase","SearchResultModel","viewState","rawSearchResults","cachedUniqueSearchResults","newExtensionSearchResults","searchResultCount","getUniqueResults","localMatchKeys","localResult","remoteResult","getRawResults","setResult","updateChildren","getFlatSettings","resultExtensionIds","extensionName","extensionPublisher","newExtElement","getUniqueResultsCount","flatSettings","r","tagRegex","extensionRegex","featureRegex","idRegex","languageRegex","parseQuery","getTagsForType","filterRegex","parsedParts","__","quotedParsedElement","unquotedParsedElement","parsedElement","ids","langs","quotedTag","ListSettingListModel","_dataItems","item","editing","_editKey","selected","_selectedIdx","_newDataItem","newItem","setEditKey","listData","idx","getSelected","selectNext","selectPrevious","max","AbstractListSettingWidget","listElement","inReadMode","rowElements","_onDidChangeList","getEmptyItem","listDisposables","onDidChangeList","getContainerClasses","renderAddButton","renderList","POINTER_DOWN","onListClick","onListDoubleClick","selectPreviousRow","selectNextRow","renderHeader","isAddButtonVisible","focused","activeElement","newMode","isItemNew","removeAttribute","header","listHeight","renderDataOrEditItem","rowElement","createBasicSelectBox","selectBoxOptions","findIndex","option","styles","selectBackground","selectForeground","selectBorder","selectListBorder","useCustomDrawn","pointerEvents","editSetting","cancelEdit","handleItemChange","originalItem","changedItem","targetIndex","listFocused","renderEdit","renderDataItem","rowElementGroup","renderItem","getActionsForItem","addTooltipsToRow","startAddButton","getLocalizedStrings","addButtonLabel","onDidClick","targetIdx","getClickedItemIndex","stopImmediatePropagation","selectRow","targetIdxStr","getAttribute","parseInt","selectedRow","ListSettingWidget","showAddButton","keyValueSuggester","keySuggester","editActionTooltip","deleteActionTooltip","getDragImage","dragImage","valueElement","siblingElement","sibling","addDragAndDrop","keyElement","draggable","DRAG_START","dragDetails","itemIndex","dataTransfer","dropEffect","body","setDragImage","setTimeout","removeChild","DRAG_OVER","counter","DRAG_ENTER","DRAG_LEAVE","DROP","sourceIndex","DRAG_END","clearData","valueInput","currentDisplayValue","currentEnumOptions","enumData","renderInputBox","renderDropdown","updatedInputBoxItem","siblingInput","selectBox","onDidSelect","siblingInputPlaceholder","okButton","cancelButton","secondary","inputPlaceholder","wrapper","ExcludeSettingWidget","IncludeSettingWidget","ObjectSettingDropdownWidget","currentSettingKey","valueSuggester","removable","resetActionTooltip","keyHeader","valueHeader","keyHeaderText","valueHeaderText","onKeyChange","suggestedValue","shouldUseSuggestion","onValueChange","renderLatestValue","keyWidget","valueWidget","suggestedKey","widget","renderEditWidget","isKey","valueContainer","append","keyOrValue","renderStringEditWidget","renderEnumEditWidget","changedKeyOrValue","originalValue","previousValue","newValue","previousEnums","accessibleDescription","keyDescription","getEnumDescription","valueDescription","ObjectSettingCheckboxWidget","checkboxDescription","checkbox","tagName","check","actionClassName","isChecked","areAllPropertiesDefined","itemsToDisplay","staticProperties","getEnumOptionsFromSchema","getObjectValueType","getObjectDisplayValue","elementDefaultValue","elementScopeValue","patternsAndSchemas","entries","wellDefinedKeyEnumOptions","valueEnumOptions","additionalValueEnums","createObjectKeySuggester","allStaticKeys","existingKeys","enumOptions","staticKey","createObjectValueSuggester","suggestedSchema","patternSchema","isNonNullableNumericType","getShowAddButtonList","dataElement","listDisplayValue","resolveSettingsTree","coreSettingsGroups","logService","allSettings","tree","_resolveSettingsTree","leftoverSettings","compareNullableIntegers","createTocTreeForExtensionSettings","extGroupTree","processPromises","getExtension","childEntry","rootEntry","addEntryToTree","processGroupEntry","extGroups","extensionRootEntry","ungroupedChild","groupedChildren","regExp","settingPatternCache","knownDynamicSettingGroups","warn","getMatchingSettings","SETTINGS_TEXT_TEMPLATE_ID","SETTINGS_MULTILINE_TEXT_TEMPLATE_ID","SETTINGS_NUMBER_TEMPLATE_ID","SETTINGS_ENUM_TEMPLATE_ID","SETTINGS_BOOL_TEMPLATE_ID","SETTINGS_ARRAY_TEMPLATE_ID","SETTINGS_EXCLUDE_TEMPLATE_ID","SETTINGS_INCLUDE_TEMPLATE_ID","SETTINGS_OBJECT_TEMPLATE_ID","SETTINGS_BOOL_OBJECT_TEMPLATE_ID","SETTINGS_COMPLEX_TEMPLATE_ID","SETTINGS_NEW_EXTENSIONS_TEMPLATE_ID","SETTINGS_ELEMENT_TEMPLATE_ID","SETTINGS_EXTENSION_TOGGLE_TEMPLATE_ID","removeChildrenFromTabOrder","node","querySelectorAll","AbstractSettingRenderer","ELEMENT_FOCUSABLE_ATTR","addChildrenToTabOrder","CONTROL_CLASS","CONTROL_SELECTOR","CONTENTS_CLASS","CONTENTS_SELECTOR","ALL_ROWS_SELECTOR","SETTING_KEY_ATTR","SETTING_ID_ATTR","settingActions","disposableActionFactory","_themeService","_contextViewService","_openerService","_instantiationService","_commandService","_contextMenuService","_keybindingService","_configService","_extensionsService","_extensionsWorkbenchService","_telemetryService","_onDidClickOverrideElement","_onDidChangeSetting","onDidChangeSetting","_onDidOpenSettings","onDidOpenSettings","_onDidClickSettingLink","onDidClickSettingLink","_onDidFocusSetting","onDidFocusSetting","_onDidChangeIgnoredSettings","onDidChangeIgnoredSettings","_onDidChangeSettingHeight","onDidChangeSettingHeight","_onApplyFilter","markdownRenderer","renderCommonTemplate","_container","typeClass","toDispose","titleElement","labelCategoryContainer","categoryElement","labelElementContainer","indicatorsLabel","descriptionElement","controlElement","deprecationWarningElement","toolbarContainer","toolbar","renderSettingToolbar","template","elementDisposables","containerElement","MOUSE_ENTER","addSettingElementFocusHandler","contains","toggleMenuKeybinding","toggleMenuTitle","renderDropdownAsChildElement","moreIcon","renderSettingElement","titleTooltip","renderedDescription","renderSettingMarkdown","deprecationText","prepend","renderValue","manualReset","updateSettingTabbable","fixSettingLinks","renderedMarkdown","actionHandler","targetKey","allowCommands","catch","asyncRenderCallback","clientHeight","cleanRenderedMarkdown","disposeElement","_element","_index","_height","SettingGroupRenderer","SettingNewExtensionsRenderer","button","SettingComplexRenderer","EDIT_IN_JSON_LABEL","common","openSettingsButton","validationErrorMessageElement","onChange","plainKey","editLanguageSettingLabel","renderValidations","errMsg","SettingArrayRenderer","querySelector","after","listWidget","newList","computeNewList","splicedElem","itemValueData","getListDisplayValue","renderArrayValidations","arrToSave","AbstractSettingObjectRenderer","renderTemplateWithWidget","objectCheckboxWidget","objectDropdownWidget","onDidChangeObject","newItems","itemToDelete","defaultItemValue","newObject","SettingObjectRenderer","parsedRecord","newRecord","keyMatchesNumericProperty","propKey","patternKey","parseNumericObjectValues","SettingBoolObjectRenderer","SettingIncludeExcludeRenderer","includeExcludeWidget","isExclude","onDidChangeIncludeExclude","sortKeys","obj","sortedKeys","retVal","elementType","getIncludeExcludeDisplayValue","SettingExcludeRenderer","SettingIncludeRenderer","settingsInputBoxStyles","AbstractSettingTextRenderer","MULTILINE_MAX_HEIGHT","useMultiline","inputBoxOptions","flexibleHeight","flexibleWidth","flexibleMaxHeight","SettingTextRenderer","SettingMultilineTextRenderer","onDidHeightChange","SettingEnumRenderer","selectElement","enumDescriptionElement","insertBefore","nextSibling","settingEnum","createdDefault","unshift","stringifiedDefaultValue","displayOptions","descriptionMarkdownActionHandler","decoratorRight","setOptions","settingsNumberInputBoxStyles","SettingNumberRenderer","numParseFn","parseFloat","nullNumParseFn","step","SettingBoolRenderer","descriptionAndValueElement","setTitle","SettingsExtensionToggleRenderer","actionButton","publicLog2","SettingTreeRenderers","_userDataProfilesService","_userDataSyncEnablementService","CopySettingIdAction","CopySettingAsJSONAction","actionFactory","settingTarget","getActionsForSetting","settingRenderers","allRenderers","ApplySettingToAllProfilesAction","SyncSettingAction","cancelSuggesters","hideContextView","settingDOMElement","toolbarElement","getActionsContext","getSettingDOMElementForDOMElement","domElement","getDOMElementsForSettingKey","treeContainer","getKeyForDOMElementInSetting","settingElement","getIdForDOMElementInSetting","calledOnStartup","validationError","childNodes","linkify","backticksGroup","quotesGroup","targetDisplayFormat","targetName","SettingsTreeFilter","parentVisibility","filterToCategory","settingContainedInGroup","SettingsTreeDelegate","getTemplateId","hasDynamicHeight","estimateHeight","NonCollapsibleObjectTreeModel","isCollapsible","setCollapsed","collapsed","recursive","SettingsTreeAccessibilityProvider","ariaLabelSections","modifiedText","indicatorsLabelAriaLabel","otherOverridesStart","otherOverridesList","getAccessibleScopeDisplayMidSentenceText","otherLanguageOverridesList","otherLanguageOverridesText","getIndicatorsLabelAriaLabel","descriptionWithoutSettingLinks","SettingsTree","renderers","listService","supportDynamicHeights","styleController","smoothScrolling","findWidgetEnabled","renderIndentGuides","listActiveSelectionBackground","listActiveSelectionForeground","listFocusAndSelectionBackground","listFocusAndSelectionForeground","listFocusBackground","listFocusForeground","listHoverForeground","listHoverBackground","listHoverOutline","listFocusOutline","listInactiveSelectionBackground","listInactiveSelectionForeground","listInactiveFocusBackground","listInactiveFocusOutline","treeIndentGuidesStroke","treeInactiveIndentGuidesStroke","jsonResult","configService","currentValue","isDefaultIgnored","askedToSync","allProfilesSettings","application","TOCTreeModel","_currentSearchModel","settingsTreeRoot","_settingsTreeRoot","currentSearchModel","updateGroupCount","childCount","acc","cur","getGroupCount","TOC_ENTRY_TEMPLATE_ID","TOCRenderer","TOCTreeDelegate","createTOCIterator","hasGroupChildren","collapsible","SettingsAccessibilityProvider","comment","getAriaLevel","TOCTree","collapseByDefault","hideTwistiesOfChildlessElements","SettingsSearchFilterDropdownMenuActionViewItem","actionRunner","classNames","anchorAlignmentProvider","menuAsChild","suggestController","doSearchWidgetAction","queryToAppend","trimEnd","createAction","createToggleAction","queryContainsQueryToAppend","queryWithRemovedTags","trimmedCurrentQuery","newQuery","createGroupIterator","searchBoxLabel","SettingsEditor2","NUM_INSTANCES","SEARCH_DEBOUNCE","SETTING_UPDATE_FAST_DEBOUNCE","SETTING_UPDATE_SLOW_DEBOUNCE","CONFIG_SCHEMA_UPDATE_DELAYER","TOC_MIN_WIDTH","TOC_RESET_WIDTH","EDITOR_MIN_WIDTH","NARROW_TOTAL_WIDTH","SUGGESTIONS","shouldSettingUpdateFast","textResourceConfigurationService","preferencesSearchService","userDataSyncWorkbenchService","workbenchAssignmentService","extensionGalleryService","searchInProgress","pendingSettingUpdate","_searchResultModel","searchResultLabel","lastSyncedLabel","_currentFocusContext","hasWarnedMissingSettings","tocFocusedElement","treeFocusedElement","settingsTreeScrollTop","installedExtensionIds","delayedFilterLogging","localSearchDelayer","remoteSearchThrottle","settingFastUpdateDelayer","settingSlowUpdateDelayer","searchInputDelayer","updatedConfigSchemaDelayer","inSettingsEditorContextKey","tocRowFocused","settingRowFocused","scheduledRefreshes","editorMemento","getEditorMemento","onConfigUpdate","affectedKeys","onDidChangeTrust","searchResultModel","settingsTreeModel","renderTree","onDidChangeRestrictedSettings","currentSettingsModel","updateElementsByKey","modelDisposables","POSITIVE_INFINITY","minimumHeight","rootElement","focusedSettingDOMElement","settingsTree","currentFocusContext","addCtrlAInterceptor","updateStyles","isCancellationRequested","defaultSettingsEditorModel","settingsTargetsWidget","optionsHasViewStateTarget","_setOptions","updateTreeScrollSync","restoreCachedState","cachedState","loadEditorState","revive","searchQuery","clearEditorState","getViewState","recoveredViewState","layoutSplitView","monacoWidth","controlsElement","control","tocTree","setEditorVisible","visible","focusSettings","focusSettingInput","focusFirst","controlInFocusedRow","focusTOC","clearSearchFilters","splitQuery","suggestion","updateInputAriaLabel","filterAction","queryParts","getRegisteredLanguageIds","langFilter","extFilter","endsWith","searchVal","onSearchInputChanged","headerControlsContainer","targetWidgetContainer","onDidSettingsTargetChange","canToggleEnablement","syncControls","SyncControls","onDidChangeLastSyncedLabel","onDidClickSetting","recursed","targetElement","revealFailed","sourceTop","_sourceTop","getRelativeTop","domElements","triggerSearch","switchToSettingsFile","openSettingsFile","currentSettingsTarget","openOptions","configurationProperties","configurationScope","noResultsMessage","clearFilterLinkContainer","clearFilterLink","tocTreeContainer","settingsTreeContainer","createTOC","createSettingsTree","splitView","proportionalLayout","startingWidth","getNumber","addView","minimumSize","maximumSize","Distribute","onDidSashReset","totalSize","getViewSize","resizeView","onDidSashChange","store","separatorBorder","tocTreeModel","elements","scrollTop","fromScroll","applyFilter","trimStart","removeLanguageFilters","params","updateElementHeight","onDidScroll","firstVisibleElement","updateChangedSetting","elementToSync","nodeExists","getNode","ancestors","getAncestors","expand","elementTop","collapseAll","fakeKeyboardEvent","KeyboardEvent","reverse","userPassedInManualReset","isManualReset","handleDirtyFile","refreshTOCTree","reportModifiedProps","searchResults","rawResults","showConfiguredOnly","isReset","reportModifiedSetting","props","nlpIndex","displayIndex","localIndex","_nlpIndex","reportedTarget","onSearchModeToggled","scheduleRefresh","scheduledRefreshTracker","addOrRemoveManageExtensionSetting","matchingGroups","lowerCaseId","stableExtensionId","prereleaseExtensionId","newGroup","extensionGroupTitle","matchingGroupIndex","forceRefresh","schemaChange","coreSettings","settingsResult","resolvedSettingsRoot","settingKeyList","toggleData","settingsEditorRecommendedExtensions","prerelease","onSettingsEditorOpen","quality","groupTitle","getManifest","contributesConfiguration","additionalGroup","commonlyUsedDataToUse","commonlyUsed","getCommonlyUsedData","configuredUntrustedWorkspaceSettings","resolveConfiguredUntrustedSettings","refreshTree","getActiveControlInSettingsTree","force","updateModifiedLabelForKey","contextViewFocused","focusedSetting","renderResultCountMessages","setChildren","dataElements","isModified","reportFilteringUsed","parseSettingFromJSON","parsedQuery","triggerFilterPreferences","createFilterModel","expandAll","filterModel","fullResult","sect","results","nlpResult","nlpMetadata","duration","counts","filterResult","requestCount","localFilterPreferences","remoteSearchPreferences","localSearchProvider","filterOrSearchPreferences","remoteSearchProvider","newExtSearchProvider","searchProvider","_filterOrSearchPreferencesModel","resultString","provider","firstViewWasVisible","isViewVisible","firstViewVisible","setViewVisible","saveEditorState","userDataSyncService","_onDidChangeLastSyncedLabel","headerRightControlsContainer","turnOnSyncButtonContainer","turnOnSyncButton","updateLastSyncedTime","onDidChangeLastSyncTime","cancelAndSet","onDidChangeStatus","onDidChangeEnablement","last","lastSyncTime","d","status","schemaRegistry","JSONContribution","PreferencesContribution","workspaceService","editorResolverService","settingsListener","handleSettingsEditorRegistration","editorOpeningListener","registerEditor","priority","builtin","createEditorInput","state","registerTextModelContentProvider","provideTextContent","getSchemaModel","getSchemaContributions","modelContent","onDidChangeSchema","schemaUri","registerConfiguration","EditorPane","registerEditorPane","OPEN_USER_SETTINGS_UI_TITLE","OPEN_USER_SETTINGS_JSON_TITLE","sanitizeBoolean","arg","sanitizeOpenSettingsArgs","args","sanitizedObject","PreferencesActionsContribution","registerSettingsActions","registerKeybindingsActions","updatePreferencesEditorMenuItem","updatePreferencesEditorMenuItemForWorkspaceFolders","mnemonicTitle","primary","menu","GlobalActivity","MenubarPreferencesMenu","opts","f1","registerOpenUserSettingsEditorFromJsonActionDisposables","openUserSettingsEditorWhen","and","Resource","isEqualTo","not","registerOpenUserSettingsEditorFromJsonAction","EditorTitle","openSettingsJsonWhen","toNegated","editorPane","onDidChangeCurrentProfile","notEqualsTo","ExplorerContext","registerSettingsEditorActions","whenInstalledExtensionsRegistered","getPreferencesEditor","preferencesEditor","settingsEditorFocusSearch","Visible","that","shortTitle","appendMenuItem","registerKeybindingEditorActions","registerCommandAndKeybindingRule","mac","negate","profileScopedActionDisposables","registerProfileScopedActions","EditorContent","activeTextEditorControl","getContribution","showDefineKeybindingWidget","workbenchContributionsRegistry","Workbench","getServiceOverride","registerWorkbenchContribution","SimpleIconLabel","RangeHighlightDecorations","_onHighlightRemoved","onHighlightRemoved","rangeHighlightDecorationId","editorDisposables","decorationId","changeDecorations","removeDecoration","getEditor","doHighlightRange","activeCodeEditor","selectionRange","changeAccessor","addDecoration","createRangeHighlightDecoration","isWholeLine","setEditor","resourceRange","activeEditor","reason","onDidDispose","_WHOLE_LINE_RANGE_HIGHLIGHT","className","_RANGE_HIGHLIGHT","FloatingClickWidget","keyBindingAction","padding","borderRadius","FloatingClickMenu","menuService","createMenu","menuDisposables","renderMenuAsFloatingClickBtn","renderShortTitle","shouldForwardArgs","first","_store","workbenchBackground","windowSelectionBackground","titleBackground","metaElementId","metaElement","getElementById","DEFAULT_FONT_FAMILY","FOLDER_CONFIG_FOLDER_NAME","FOLDER_SETTINGS_NAME","FOLDER_SETTINGS_PATH","defaultSettingsSchemaId","userSettingsSchemaId","profileSettingsSchemaId","machineSettingsSchemaId","workspaceSettingsSchemaId","folderSettingsSchemaId","launchSchemaId","tasksSchemaId","APPLICATION_SCOPES","PROFILE_SCOPES","LOCAL_MACHINE_PROFILE_SCOPES","LOCAL_MACHINE_SCOPES","REMOTE_MACHINE_SCOPES","WORKSPACE_SCOPES","FOLDER_SCOPES","TASKS_CONFIGURATION_KEY","LAUNCH_CONFIGURATION_KEY","WORKSPACE_STANDALONE_CONFIGURATIONS","USER_STANDALONE_CONFIGURATIONS","IWorkbenchConfigurationService","TASKS_DEFAULT","APPLY_ALL_PROFILES_SETTING","getAllUnboundCommands","unboundCommands","seenMap","addCommand","includeCommandWithArgs","getCommands"],"sourceRoot":""}