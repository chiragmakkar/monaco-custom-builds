{"version":3,"file":"354.bundle.js","mappings":"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","sources":["webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/languageDetection/browser/languageDetectionWorkerServiceImpl.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/service-override/languageDetectionWorker.js"],"sourcesContent":["import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { LanguageDetectionStatsId } from '../common/languageDetectionWorkerService.js';\nimport { FileAccess, Schemas, nodeModulesPath, nodeModulesAsarPath } from 'monaco-editor/esm/vs/base/common/network.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { isWeb } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';\nimport { SimpleWorkerClient } from 'monaco-editor/esm/vs/base/common/worker/simpleWorker.js';\nimport { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';\nimport { EditorWorkerClient, EditorWorkerHost } from 'monaco-editor/esm/vs/editor/browser/services/editorWorkerService.js';\nimport { ILanguageConfigurationService } from 'monaco-editor/esm/vs/editor/common/languages/languageConfigurationRegistry.js';\nimport { IDiagnosticsService } from '../../../../platform/diagnostics/common/diagnostics.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { LRUCache } from 'monaco-editor/esm/vs/base/common/map.js';\nimport { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';\nconst TOP_LANG_COUNTS = 12;\nconst regexpModuleLocation = `${nodeModulesPath}/vscode-regexp-languagedetection`;\nconst regexpModuleLocationAsar = `${nodeModulesAsarPath}/vscode-regexp-languagedetection`;\nconst moduleLocation = `${nodeModulesPath}/@vscode/vscode-languagedetection`;\nconst moduleLocationAsar = `${nodeModulesAsarPath}/@vscode/vscode-languagedetection`;\nlet LanguageDetectionService = class LanguageDetectionService extends Disposable {\n    static { this.enablementSettingKey = 'workbench.editor.languageDetection'; }\n    static { this.historyBasedEnablementConfig = 'workbench.editor.historyBasedLanguageDetection'; }\n    static { this.preferHistoryConfig = 'workbench.editor.preferHistoryBasedLanguageDetection'; }\n    static { this.workspaceOpenedLanguagesStorageKey = 'workbench.editor.languageDetectionOpenedLanguages.workspace'; }\n    static { this.globalOpenedLanguagesStorageKey = 'workbench.editor.languageDetectionOpenedLanguages.global'; }\n    constructor(_environmentService, languageService, _configurationService, _diagnosticsService, _workspaceContextService, modelService, _editorService, telemetryService, storageService, _logService, languageConfigurationService) {\n        super();\n        this._environmentService = _environmentService;\n        this._configurationService = _configurationService;\n        this._diagnosticsService = _diagnosticsService;\n        this._workspaceContextService = _workspaceContextService;\n        this._editorService = _editorService;\n        this._logService = _logService;\n        this.hasResolvedWorkspaceLanguageIds = false;\n        this.workspaceLanguageIds = ( new Set());\n        this.sessionOpenedLanguageIds = ( new Set());\n        this.historicalGlobalOpenedLanguageIds = ( new LRUCache(TOP_LANG_COUNTS));\n        this.historicalWorkspaceOpenedLanguageIds = ( new LRUCache(TOP_LANG_COUNTS));\n        this.dirtyBiases = true;\n        this.langBiases = {};\n        this._languageDetectionWorkerClient = ( new LanguageDetectionWorkerClient(\n            modelService,\n            languageService,\n            telemetryService,\n            this._environmentService.isBuilt && !isWeb\n                ? ( ( FileAccess.asBrowserUri(`${moduleLocationAsar}/dist/lib/index.js`)).toString(true))\n                : ( ( FileAccess.asBrowserUri(`${moduleLocation}/dist/lib/index.js`)).toString(true)),\n            this._environmentService.isBuilt && !isWeb\n                ? ( ( FileAccess.asBrowserUri(`${moduleLocationAsar}/model/model.json`)).toString(true))\n                : ( ( FileAccess.asBrowserUri(`${moduleLocation}/model/model.json`)).toString(true)),\n            this._environmentService.isBuilt && !isWeb\n                ? ( ( FileAccess.asBrowserUri(`${moduleLocationAsar}/model/group1-shard1of1.bin`)).toString(true))\n                : ( ( FileAccess.asBrowserUri(`${moduleLocation}/model/group1-shard1of1.bin`)).toString(true)),\n            this._environmentService.isBuilt && !isWeb\n                ? ( ( FileAccess.asBrowserUri(`${regexpModuleLocationAsar}/dist/index.js`)).toString(true))\n                : ( ( FileAccess.asBrowserUri(`${regexpModuleLocation}/dist/index.js`)).toString(true)),\n            languageConfigurationService\n        ));\n        this.initEditorOpenedListeners(storageService);\n    }\n    async resolveWorkspaceLanguageIds() {\n        if (this.hasResolvedWorkspaceLanguageIds) {\n            return;\n        }\n        this.hasResolvedWorkspaceLanguageIds = true;\n        const fileExtensions = await this._diagnosticsService.getWorkspaceFileExtensions(this._workspaceContextService.getWorkspace());\n        let count = 0;\n        for (const ext of fileExtensions.extensions) {\n            const langId = this._languageDetectionWorkerClient.getLanguageId(ext);\n            if (langId && count < TOP_LANG_COUNTS) {\n                this.workspaceLanguageIds.add(langId);\n                count++;\n                if (count > TOP_LANG_COUNTS) {\n                    break;\n                }\n            }\n        }\n        this.dirtyBiases = true;\n    }\n    isEnabledForLanguage(languageId) {\n        return !!languageId && this._configurationService.getValue(LanguageDetectionService.enablementSettingKey, { overrideIdentifier: languageId });\n    }\n    getLanguageBiases() {\n        if (!this.dirtyBiases) {\n            return this.langBiases;\n        }\n        const biases = {};\n        this.sessionOpenedLanguageIds.forEach(lang => biases[lang] = (biases[lang] ?? 0) + 7);\n        this.workspaceLanguageIds.forEach(lang => biases[lang] = (biases[lang] ?? 0) + 5);\n        [...( this.historicalWorkspaceOpenedLanguageIds.keys())].forEach(lang => biases[lang] = (biases[lang] ?? 0) + 3);\n        [...( this.historicalGlobalOpenedLanguageIds.keys())].forEach(lang => biases[lang] = (biases[lang] ?? 0) + 1);\n        this._logService.trace('Session Languages:', JSON.stringify([...this.sessionOpenedLanguageIds]));\n        this._logService.trace('Workspace Languages:', JSON.stringify([...this.workspaceLanguageIds]));\n        this._logService.trace('Historical Workspace Opened Languages:', JSON.stringify([...( this.historicalWorkspaceOpenedLanguageIds.keys())]));\n        this._logService.trace('Historical Globally Opened Languages:', JSON.stringify([...( this.historicalGlobalOpenedLanguageIds.keys())]));\n        this._logService.trace('Computed Language Detection Biases:', JSON.stringify(biases));\n        this.dirtyBiases = false;\n        this.langBiases = biases;\n        return biases;\n    }\n    async detectLanguage(resource, supportedLangs) {\n        const useHistory = this._configurationService.getValue(LanguageDetectionService.historyBasedEnablementConfig);\n        const preferHistory = this._configurationService.getValue(LanguageDetectionService.preferHistoryConfig);\n        if (useHistory) {\n            await this.resolveWorkspaceLanguageIds();\n        }\n        const biases = useHistory ? this.getLanguageBiases() : undefined;\n        return this._languageDetectionWorkerClient.detectLanguage(resource, biases, preferHistory, supportedLangs);\n    }\n    initEditorOpenedListeners(storageService) {\n        try {\n            const globalLangHistoryData = JSON.parse(storageService.get(LanguageDetectionService.globalOpenedLanguagesStorageKey, 0 , '[]'));\n            this.historicalGlobalOpenedLanguageIds.fromJSON(globalLangHistoryData);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        try {\n            const workspaceLangHistoryData = JSON.parse(storageService.get(LanguageDetectionService.workspaceOpenedLanguagesStorageKey, 1 , '[]'));\n            this.historicalWorkspaceOpenedLanguageIds.fromJSON(workspaceLangHistoryData);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        this._register(this._editorService.onDidActiveEditorChange(() => {\n            const activeLanguage = this._editorService.activeTextEditorLanguageId;\n            if (activeLanguage && this._editorService.activeEditor?.resource?.scheme !== Schemas.untitled) {\n                this.sessionOpenedLanguageIds.add(activeLanguage);\n                this.historicalGlobalOpenedLanguageIds.set(activeLanguage, true);\n                this.historicalWorkspaceOpenedLanguageIds.set(activeLanguage, true);\n                storageService.store(LanguageDetectionService.globalOpenedLanguagesStorageKey, JSON.stringify(this.historicalGlobalOpenedLanguageIds.toJSON()), 0 , 1 );\n                storageService.store(LanguageDetectionService.workspaceOpenedLanguagesStorageKey, JSON.stringify(this.historicalWorkspaceOpenedLanguageIds.toJSON()), 1 , 1 );\n                this.dirtyBiases = true;\n            }\n        }));\n    }\n};\nLanguageDetectionService = ( __decorate([\n    ( __param(0, IWorkbenchEnvironmentService)),\n    ( __param(1, ILanguageService)),\n    ( __param(2, IConfigurationService)),\n    ( __param(3, IDiagnosticsService)),\n    ( __param(4, IWorkspaceContextService)),\n    ( __param(5, IModelService)),\n    ( __param(6, IEditorService)),\n    ( __param(7, ITelemetryService)),\n    ( __param(8, IStorageService)),\n    ( __param(9, ILogService)),\n    ( __param(10, ILanguageConfigurationService))\n], LanguageDetectionService));\nclass LanguageDetectionWorkerClient extends EditorWorkerClient {\n    constructor(modelService, _languageService, _telemetryService, _indexJsUri, _modelJsonUri, _weightsUri, _regexpModelUri, languageConfigurationService) {\n        super(modelService, true, 'languageDetectionWorkerService', languageConfigurationService);\n        this._languageService = _languageService;\n        this._telemetryService = _telemetryService;\n        this._indexJsUri = _indexJsUri;\n        this._modelJsonUri = _modelJsonUri;\n        this._weightsUri = _weightsUri;\n        this._regexpModelUri = _regexpModelUri;\n    }\n    _getOrCreateLanguageDetectionWorker() {\n        if (this.workerPromise) {\n            return this.workerPromise;\n        }\n        this.workerPromise = ( new Promise((resolve, reject) => {\n            resolve(this._register(( new SimpleWorkerClient(\n                this._workerFactory,\n                'vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker',\n                ( new EditorWorkerHost(this))\n            ))));\n        }));\n        return this.workerPromise;\n    }\n    _guessLanguageIdByUri(uri) {\n        const guess = this._languageService.guessLanguageIdByFilepathOrFirstLine(uri);\n        if (guess && guess !== 'unknown') {\n            return guess;\n        }\n        return undefined;\n    }\n    async _getProxy() {\n        return (await this._getOrCreateLanguageDetectionWorker()).getProxyObject();\n    }\n    async fhr(method, args) {\n        switch (method) {\n            case 'getIndexJsUri':\n                return this.getIndexJsUri();\n            case 'getModelJsonUri':\n                return this.getModelJsonUri();\n            case 'getWeightsUri':\n                return this.getWeightsUri();\n            case 'getRegexpModelUri':\n                return this.getRegexpModelUri();\n            case 'getLanguageId':\n                return this.getLanguageId(args[0]);\n            case 'sendTelemetryEvent':\n                return this.sendTelemetryEvent(args[0], args[1], args[2]);\n            default:\n                return super.fhr(method, args);\n        }\n    }\n    async getIndexJsUri() {\n        return this._indexJsUri;\n    }\n    getLanguageId(languageIdOrExt) {\n        if (!languageIdOrExt) {\n            return undefined;\n        }\n        if (this._languageService.isRegisteredLanguageId(languageIdOrExt)) {\n            return languageIdOrExt;\n        }\n        const guessed = this._guessLanguageIdByUri(URI.file(`file.${languageIdOrExt}`));\n        if (!guessed || guessed === 'unknown') {\n            return undefined;\n        }\n        return guessed;\n    }\n    async getModelJsonUri() {\n        return this._modelJsonUri;\n    }\n    async getWeightsUri() {\n        return this._weightsUri;\n    }\n    async getRegexpModelUri() {\n        return this._regexpModelUri;\n    }\n    async sendTelemetryEvent(languages, confidences, timeSpent) {\n        this._telemetryService.publicLog2(LanguageDetectionStatsId, {\n            languages: languages.join(','),\n            confidences: confidences.join(','),\n            timeSpent\n        });\n    }\n    async detectLanguage(resource, langBiases, preferHistory, supportedLangs) {\n        const startTime = Date.now();\n        const quickGuess = this._guessLanguageIdByUri(resource);\n        if (quickGuess) {\n            return quickGuess;\n        }\n        await this._withSyncedResources([resource]);\n        const modelId = await (await this._getProxy()).detectLanguage(( resource.toString()), langBiases, preferHistory, supportedLangs);\n        const languageId = this.getLanguageId(modelId);\n        const LanguageDetectionStatsId = 'automaticlanguagedetection.perf';\n        this._telemetryService.publicLog2(LanguageDetectionStatsId, {\n            timeSpent: Date.now() - startTime,\n            detection: languageId || 'unknown',\n        });\n        return languageId;\n    }\n}\nexport { LanguageDetectionService, LanguageDetectionWorkerClient };\n","import '../missing-services.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nimport { LanguageDetectionService } from '../vscode/vs/workbench/services/languageDetection/browser/languageDetectionWorkerServiceImpl.js';\nimport { ILanguageDetectionService } from '../vscode/vs/workbench/services/languageDetection/common/languageDetectionWorkerService.js';\nimport { registerAssets } from '../assets.js';\nregisterAssets({\n    'vs/../../node_modules/@vscode/vscode-languagedetection/model/model.json': new URL('@vscode/vscode-languagedetection/model/model.json', import.meta.url).href,\n    'vs/../../node_modules/@vscode/vscode-languagedetection/model/group1-shard1of1.bin': new URL('@vscode/vscode-languagedetection/model/group1-shard1of1.bin', import.meta.url).href\n});\nfunction getServiceOverride() {\n    return {\n        [( ILanguageDetectionService.toString())]: new SyncDescriptor(LanguageDetectionService, [], false)\n    };\n}\nexport { getServiceOverride as default };\n"],"names":["regexpModuleLocation","regexpModuleLocationAsar","moduleLocation","moduleLocationAsar","LanguageDetectionService","this","enablementSettingKey","historyBasedEnablementConfig","preferHistoryConfig","workspaceOpenedLanguagesStorageKey","globalOpenedLanguagesStorageKey","constructor","_environmentService","languageService","_configurationService","_diagnosticsService","_workspaceContextService","modelService","_editorService","telemetryService","storageService","_logService","languageConfigurationService","super","hasResolvedWorkspaceLanguageIds","workspaceLanguageIds","Set","sessionOpenedLanguageIds","historicalGlobalOpenedLanguageIds","historicalWorkspaceOpenedLanguageIds","dirtyBiases","langBiases","_languageDetectionWorkerClient","LanguageDetectionWorkerClient","isBuilt","asBrowserUri","toString","initEditorOpenedListeners","resolveWorkspaceLanguageIds","fileExtensions","getWorkspaceFileExtensions","getWorkspace","count","ext","extensions","langId","getLanguageId","add","isEnabledForLanguage","languageId","getValue","overrideIdentifier","getLanguageBiases","biases","forEach","lang","keys","trace","JSON","stringify","detectLanguage","resource","supportedLangs","useHistory","preferHistory","undefined","globalLangHistoryData","parse","get","fromJSON","e","console","error","workspaceLangHistoryData","_register","onDidActiveEditorChange","activeLanguage","activeTextEditorLanguageId","activeEditor","scheme","untitled","set","store","toJSON","_languageService","_telemetryService","_indexJsUri","_modelJsonUri","_weightsUri","_regexpModelUri","_getOrCreateLanguageDetectionWorker","workerPromise","Promise","resolve","reject","_workerFactory","_guessLanguageIdByUri","uri","guess","guessLanguageIdByFilepathOrFirstLine","_getProxy","getProxyObject","fhr","method","args","getIndexJsUri","getModelJsonUri","getWeightsUri","getRegexpModelUri","sendTelemetryEvent","languageIdOrExt","isRegisteredLanguageId","guessed","file","languages","confidences","timeSpent","publicLog2","join","startTime","Date","now","quickGuess","_withSyncedResources","modelId","detection","getServiceOverride","URL","href"],"sourceRoot":""}