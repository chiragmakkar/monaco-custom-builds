{"version":3,"file":"577.bundle.js","mappings":"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","sources":["webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/notifications/media/notificationsToasts.css.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/notifications/media/notificationsList.css.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/notifications/media/notificationsActions.css.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/notifications/notificationsActions.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/notifications/notificationsViewer.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/notifications/notificationsList.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/notifications/notificationsToasts.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/notification/common/notificationService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/notifications/media/notificationsCenter.css.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/notifications/notificationsCenter.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/browser/parts/notifications/notificationsAlerts.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/service-override/notifications.js"],"sourcesContent":["import n from '../../../../../../../node_modules/rollup-plugin-styles/dist/runtime/inject-css.js';\nvar css = \".monaco-workbench>.notifications-toasts{bottom:26px;display:none;overflow:hidden;position:absolute;right:3px;z-index:1000}.monaco-workbench.nostatusbar>.notifications-toasts{bottom:3px}.monaco-workbench>.notifications-toasts.visible{display:flex;flex-direction:column}.monaco-workbench>.notifications-toasts .notification-toast-container{overflow:hidden}.monaco-workbench>.notifications-toasts .notification-toast-container>.notification-toast{border-radius:4px;margin:8px;opacity:0;transform:translate3d(0,100%,0);transition:transform .3s ease-out,opacity .3s ease-out}.monaco-workbench.reduce-motion>.notifications-toasts .notification-toast-container>.notification-toast{transition:transform 0ms ease-out,opacity 0ms ease-out}.monaco-workbench>.notifications-toasts .notification-toast-container>.notification-toast.notification-fade-in{opacity:1;transform:none}.monaco-workbench>.notifications-toasts .notification-toast-container>.notification-toast.notification-fade-in-done{opacity:1;transform:none;transition:none}.monaco-workbench>.notifications-toasts .codicon.codicon-error{color:var(--vscode-notificationsErrorIcon-foreground)!important}.monaco-workbench>.notifications-toasts .codicon.codicon-warning{color:var(--vscode-notificationsWarningIcon-foreground)!important}.monaco-workbench>.notifications-toasts .codicon.codicon-info{color:var(--vscode-notificationsInfoIcon-foreground)!important}\";\nn(css,{});\nexport { css, css as default };\n","import n from '../../../../../../../node_modules/rollup-plugin-styles/dist/runtime/inject-css.js';\nvar css = \".monaco-workbench .notifications-list-container{background:var(--vscode-notifications-background);border-radius:inherit;color:var(--vscode-notifications-foreground);outline-color:var(--vscode-contrastBorder)}.monaco-workbench .notifications-list-container .notification-list-item{border-radius:4px;box-sizing:border-box;display:flex;flex-direction:column;flex-direction:column-reverse;height:100%;padding:10px 5px}.monaco-workbench .notifications-list-container .notification-offset-helper{word-wrap:break-word;line-height:22px;opacity:0;position:absolute}.monaco-workbench .notifications-list-container .monaco-scrollable-element{border-radius:4px}.monaco-workbench .notifications-list-container .notification-list-item>.notification-list-item-main-row{display:flex;flex-grow:1}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-icon{align-items:center;background-position:50%;background-repeat:no-repeat;display:flex;flex:0 0 16px;font-size:18px;height:22px;margin-left:4px;margin-right:4px}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-message{flex:1;line-height:22px;overflow:hidden;text-overflow:ellipsis;user-select:text;-webkit-user-select:text}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-message a{color:var(--vscode-notificationLink-foreground)}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-message a:focus{outline-color:var(--vscode-focusBorder);outline-style:solid;outline-width:1px}.monaco-workbench .notifications-list-container .notification-list-item.expanded .notification-list-item-message{word-wrap:break-word;white-space:normal}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-toolbar-container{display:none;height:22px}.monaco-workbench .notifications-list-container .monaco-list-row.focused .notification-list-item .notification-list-item-toolbar-container,.monaco-workbench .notifications-list-container .monaco-list:focus-within .notification-list-item .notification-list-item-toolbar-container,.monaco-workbench .notifications-list-container .notification-list-item.expanded .notification-list-item-toolbar-container,.monaco-workbench .notifications-list-container .notification-list-item:hover .notification-list-item-toolbar-container{display:block}.monaco-workbench .notifications-list-container .notification-list-item>.notification-list-item-details-row{align-items:center;display:none;overflow:hidden;padding-left:5px}.monaco-workbench .notifications-list-container .notification-list-item.expanded>.notification-list-item-details-row{display:flex}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-source{flex:1;font-size:12px;overflow:hidden;text-overflow:ellipsis}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-buttons-container{display:flex;overflow:hidden}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-buttons-container>.monaco-button,.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-buttons-container>.monaco-button-dropdown{margin:4px 5px}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-buttons-container .monaco-button{outline-offset:2px!important}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-buttons-container .monaco-text-button{display:inline-block;font-size:12px;overflow:hidden;padding:4px 10px;text-overflow:ellipsis;width:fit-content}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-buttons-container .monaco-dropdown-button{padding:5px}.monaco-workbench .notifications-list-container .progress-bit{bottom:0;height:2px}\";\nn(css,{});\nexport { css, css as default };\n","import n from '../../../../../../../node_modules/rollup-plugin-styles/dist/runtime/inject-css.js';\nvar css = \".monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-toolbar-container .action-item,.monaco-workbench>.notifications-center>.notifications-center-header>.notifications-center-header-toolbar .action-item{margin-right:4px}.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-toolbar-container .action-item:first-child,.monaco-workbench>.notifications-center>.notifications-center-header>.notifications-center-header-toolbar .action-item:first-child{margin-left:4px}\";\nn(css,{});\nexport { css, css as default };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport './media/notificationsActions.css.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { Action } from 'monaco-editor/esm/vs/base/common/actions.js';\nimport { CLEAR_NOTIFICATION, CLEAR_ALL_NOTIFICATIONS, TOGGLE_DO_NOT_DISTURB_MODE, HIDE_NOTIFICATIONS_CENTER, EXPAND_NOTIFICATION, COLLAPSE_NOTIFICATION } from './notificationsCommands.js';\nimport { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { IClipboardService } from 'monaco-editor/esm/vs/platform/clipboard/common/clipboardService.js';\nimport { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';\nimport { registerIcon } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';\nimport { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';\nconst clearIcon = registerIcon('notifications-clear', Codicon.close, ( localize('clearIcon', 'Icon for the clear action in notifications.')));\nconst clearAllIcon = registerIcon('notifications-clear-all', Codicon.clearAll, ( localize('clearAllIcon', 'Icon for the clear all action in notifications.')));\nconst hideIcon = registerIcon('notifications-hide', Codicon.chevronDown, ( localize('hideIcon', 'Icon for the hide action in notifications.')));\nconst expandIcon = registerIcon('notifications-expand', Codicon.chevronUp, ( localize('expandIcon', 'Icon for the expand action in notifications.')));\nconst collapseIcon = registerIcon('notifications-collapse', Codicon.chevronDown, ( localize('collapseIcon', 'Icon for the collapse action in notifications.')));\nconst configureIcon = registerIcon('notifications-configure', Codicon.gear, ( localize('configureIcon', 'Icon for the configure action in notifications.')));\nconst doNotDisturbIcon = registerIcon('notifications-do-not-disturb', Codicon.bellSlash, ( localize('doNotDisturbIcon', 'Icon for the mute all action in notifications.')));\nlet ClearNotificationAction = class ClearNotificationAction extends Action {\n    static { this.ID = CLEAR_NOTIFICATION; }\n    static { this.LABEL = ( localize('clearNotification', \"Clear Notification\")); }\n    constructor(id, label, commandService) {\n        super(id, label, ThemeIcon.asClassName(clearIcon));\n        this.commandService = commandService;\n    }\n    async run(notification) {\n        this.commandService.executeCommand(CLEAR_NOTIFICATION, notification);\n    }\n};\nClearNotificationAction = ( __decorate([\n    ( __param(2, ICommandService))\n], ClearNotificationAction));\nlet ClearAllNotificationsAction = class ClearAllNotificationsAction extends Action {\n    static { this.ID = CLEAR_ALL_NOTIFICATIONS; }\n    static { this.LABEL = ( localize('clearNotifications', \"Clear All Notifications\")); }\n    constructor(id, label, commandService) {\n        super(id, label, ThemeIcon.asClassName(clearAllIcon));\n        this.commandService = commandService;\n    }\n    async run() {\n        this.commandService.executeCommand(CLEAR_ALL_NOTIFICATIONS);\n    }\n};\nClearAllNotificationsAction = ( __decorate([\n    ( __param(2, ICommandService))\n], ClearAllNotificationsAction));\nlet ToggleDoNotDisturbAction = class ToggleDoNotDisturbAction extends Action {\n    static { this.ID = TOGGLE_DO_NOT_DISTURB_MODE; }\n    static { this.LABEL = ( localize('toggleDoNotDisturbMode', \"Toggle Do Not Disturb Mode\")); }\n    constructor(id, label, commandService) {\n        super(id, label, ThemeIcon.asClassName(doNotDisturbIcon));\n        this.commandService = commandService;\n    }\n    async run() {\n        this.commandService.executeCommand(TOGGLE_DO_NOT_DISTURB_MODE);\n    }\n};\nToggleDoNotDisturbAction = ( __decorate([\n    ( __param(2, ICommandService))\n], ToggleDoNotDisturbAction));\nlet HideNotificationsCenterAction = class HideNotificationsCenterAction extends Action {\n    static { this.ID = HIDE_NOTIFICATIONS_CENTER; }\n    static { this.LABEL = ( localize('hideNotificationsCenter', \"Hide Notifications\")); }\n    constructor(id, label, commandService) {\n        super(id, label, ThemeIcon.asClassName(hideIcon));\n        this.commandService = commandService;\n    }\n    async run() {\n        this.commandService.executeCommand(HIDE_NOTIFICATIONS_CENTER);\n    }\n};\nHideNotificationsCenterAction = ( __decorate([\n    ( __param(2, ICommandService))\n], HideNotificationsCenterAction));\nlet ExpandNotificationAction = class ExpandNotificationAction extends Action {\n    static { this.ID = EXPAND_NOTIFICATION; }\n    static { this.LABEL = ( localize('expandNotification', \"Expand Notification\")); }\n    constructor(id, label, commandService) {\n        super(id, label, ThemeIcon.asClassName(expandIcon));\n        this.commandService = commandService;\n    }\n    async run(notification) {\n        this.commandService.executeCommand(EXPAND_NOTIFICATION, notification);\n    }\n};\nExpandNotificationAction = ( __decorate([\n    ( __param(2, ICommandService))\n], ExpandNotificationAction));\nlet CollapseNotificationAction = class CollapseNotificationAction extends Action {\n    static { this.ID = COLLAPSE_NOTIFICATION; }\n    static { this.LABEL = ( localize('collapseNotification', \"Collapse Notification\")); }\n    constructor(id, label, commandService) {\n        super(id, label, ThemeIcon.asClassName(collapseIcon));\n        this.commandService = commandService;\n    }\n    async run(notification) {\n        this.commandService.executeCommand(COLLAPSE_NOTIFICATION, notification);\n    }\n};\nCollapseNotificationAction = ( __decorate([\n    ( __param(2, ICommandService))\n], CollapseNotificationAction));\nclass ConfigureNotificationAction extends Action {\n    static { this.ID = 'workbench.action.configureNotification'; }\n    static { this.LABEL = ( localize('configureNotification', \"Configure Notification\")); }\n    constructor(id, label, configurationActions) {\n        super(id, label, ThemeIcon.asClassName(configureIcon));\n        this.configurationActions = configurationActions;\n    }\n}\nlet CopyNotificationMessageAction = class CopyNotificationMessageAction extends Action {\n    static { this.ID = 'workbench.action.copyNotificationMessage'; }\n    static { this.LABEL = ( localize('copyNotification', \"Copy Text\")); }\n    constructor(id, label, clipboardService) {\n        super(id, label);\n        this.clipboardService = clipboardService;\n    }\n    run(notification) {\n        return this.clipboardService.writeText(notification.message.raw);\n    }\n};\nCopyNotificationMessageAction = ( __decorate([\n    ( __param(2, IClipboardService))\n], CopyNotificationMessageAction));\nexport { ClearAllNotificationsAction, ClearNotificationAction, CollapseNotificationAction, ConfigureNotificationAction, CopyNotificationMessageAction, ExpandNotificationAction, HideNotificationsCenterAction, ToggleDoNotDisturbAction };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { clearNode, $, EventType, addDisposableListener, EventHelper, isEventLike } from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { IOpenerService } from 'monaco-editor/esm/vs/platform/opener/common/opener.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { ButtonBar } from 'monaco-editor/esm/vs/base/browser/ui/button/button.js';\nimport { ActionBar } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js';\nimport { ActionRunner } from 'monaco-editor/esm/vs/base/common/actions.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { DisposableStore, dispose, Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { NotificationViewItem, ChoiceAction } from '../../../common/notifications.js';\nimport { ConfigureNotificationAction, ClearNotificationAction, ExpandNotificationAction, CollapseNotificationAction } from './notificationsActions.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { ProgressBar } from 'monaco-editor/esm/vs/base/browser/ui/progressbar/progressbar.js';\nimport { Severity } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { isNonEmptyArray } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';\nimport { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';\nimport { DropdownMenuActionViewItem } from 'monaco-editor/esm/vs/base/browser/ui/dropdown/dropdownActionViewItem.js';\nimport { DomEmitter } from 'monaco-editor/esm/vs/base/browser/event.js';\nimport { Gesture, EventType as EventType$1 } from 'monaco-editor/esm/vs/base/browser/touch.js';\nimport { Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { defaultProgressBarStyles, defaultButtonStyles } from 'monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js';\nimport { StandardKeyboardEvent } from 'monaco-editor/esm/vs/base/browser/keyboardEvent.js';\nclass NotificationsListDelegate {\n    static { this.ROW_HEIGHT = 42; }\n    static { this.LINE_HEIGHT = 22; }\n    constructor(container) {\n        this.offsetHelper = this.createOffsetHelper(container);\n    }\n    createOffsetHelper(container) {\n        const offsetHelper = document.createElement('div');\n        offsetHelper.classList.add('notification-offset-helper');\n        container.appendChild(offsetHelper);\n        return offsetHelper;\n    }\n    getHeight(notification) {\n        if (!notification.expanded) {\n            return NotificationsListDelegate.ROW_HEIGHT;\n        }\n        let expandedHeight = NotificationsListDelegate.ROW_HEIGHT;\n        const preferredMessageHeight = this.computePreferredHeight(notification);\n        const messageOverflows = NotificationsListDelegate.LINE_HEIGHT < preferredMessageHeight;\n        if (messageOverflows) {\n            const overflow = preferredMessageHeight - NotificationsListDelegate.LINE_HEIGHT;\n            expandedHeight += overflow;\n        }\n        if (notification.source || isNonEmptyArray(notification.actions && notification.actions.primary)) {\n            expandedHeight += NotificationsListDelegate.ROW_HEIGHT;\n        }\n        if (expandedHeight === NotificationsListDelegate.ROW_HEIGHT) {\n            notification.collapse(true );\n        }\n        return expandedHeight;\n    }\n    computePreferredHeight(notification) {\n        let actions = 0;\n        if (!notification.hasProgress) {\n            actions++;\n        }\n        if (notification.canCollapse) {\n            actions++;\n        }\n        if (isNonEmptyArray(notification.actions && notification.actions.secondary)) {\n            actions++;\n        }\n        this.offsetHelper.style.width = `${450  - ((10  + 26  + (actions * (24 + 8))  - 4) )}px`;\n        const renderedMessage = NotificationMessageRenderer.render(notification.message);\n        this.offsetHelper.appendChild(renderedMessage);\n        const preferredHeight = Math.max(this.offsetHelper.offsetHeight, this.offsetHelper.scrollHeight);\n        clearNode(this.offsetHelper);\n        return preferredHeight;\n    }\n    getTemplateId(element) {\n        if (element instanceof NotificationViewItem) {\n            return NotificationRenderer.TEMPLATE_ID;\n        }\n        throw new Error('unknown element type: ' + element);\n    }\n}\nclass NotificationMessageRenderer {\n    static render(message, actionHandler) {\n        const messageContainer = document.createElement('span');\n        for (const node of message.linkedText.nodes) {\n            if (typeof node === 'string') {\n                messageContainer.appendChild(document.createTextNode(node));\n            }\n            else {\n                let title = node.title;\n                if (!title && node.href.startsWith('command:')) {\n                    title = ( localize(\n                        'executeCommand',\n                        \"Click to execute command '{0}'\",\n                        node.href.substr('command:'.length)\n                    ));\n                }\n                else if (!title) {\n                    title = node.href;\n                }\n                const anchor = $('a', { href: node.href, title, tabIndex: 0 }, node.label);\n                if (actionHandler) {\n                    const handleOpen = (e) => {\n                        if (isEventLike(e)) {\n                            EventHelper.stop(e, true);\n                        }\n                        actionHandler.callback(node.href);\n                    };\n                    const onClick = actionHandler.toDispose.add(( new DomEmitter(anchor, EventType.CLICK))).event;\n                    const onKeydown = actionHandler.toDispose.add(( new DomEmitter(anchor, EventType.KEY_DOWN))).event;\n                    const onSpaceOrEnter = actionHandler.toDispose.add(Event.chain(onKeydown)).filter(e => {\n                        const event = ( new StandardKeyboardEvent(e));\n                        return event.equals(10 ) || event.equals(3 );\n                    }).event;\n                    actionHandler.toDispose.add(Gesture.addTarget(anchor));\n                    const onTap = actionHandler.toDispose.add(( new DomEmitter(anchor, EventType$1.Tap))).event;\n                    Event.any(onClick, onTap, onSpaceOrEnter)(handleOpen, null, actionHandler.toDispose);\n                }\n                messageContainer.appendChild(anchor);\n            }\n        }\n        return messageContainer;\n    }\n}\nlet NotificationRenderer = class NotificationRenderer {\n    static { this.TEMPLATE_ID = 'notification'; }\n    constructor(actionRunner, contextMenuService, instantiationService) {\n        this.actionRunner = actionRunner;\n        this.contextMenuService = contextMenuService;\n        this.instantiationService = instantiationService;\n    }\n    get templateId() {\n        return NotificationRenderer.TEMPLATE_ID;\n    }\n    renderTemplate(container) {\n        const data = Object.create(null);\n        data.toDispose = ( new DisposableStore());\n        data.container = document.createElement('div');\n        data.container.classList.add('notification-list-item');\n        data.mainRow = document.createElement('div');\n        data.mainRow.classList.add('notification-list-item-main-row');\n        data.icon = document.createElement('div');\n        data.icon.classList.add('notification-list-item-icon', 'codicon');\n        data.message = document.createElement('div');\n        data.message.classList.add('notification-list-item-message');\n        const toolbarContainer = document.createElement('div');\n        toolbarContainer.classList.add('notification-list-item-toolbar-container');\n        data.toolbar = ( new ActionBar(toolbarContainer, {\n            ariaLabel: ( localize('notificationActions', \"Notification Actions\")),\n            actionViewItemProvider: action => {\n                if (action && action instanceof ConfigureNotificationAction) {\n                    const item = ( new DropdownMenuActionViewItem(\n                        action,\n                        action.configurationActions,\n                        this.contextMenuService,\n                        { actionRunner: this.actionRunner, classNames: action.class }\n                    ));\n                    data.toDispose.add(item);\n                    return item;\n                }\n                return undefined;\n            },\n            actionRunner: this.actionRunner\n        }));\n        data.toDispose.add(data.toolbar);\n        data.detailsRow = document.createElement('div');\n        data.detailsRow.classList.add('notification-list-item-details-row');\n        data.source = document.createElement('div');\n        data.source.classList.add('notification-list-item-source');\n        data.buttonsContainer = document.createElement('div');\n        data.buttonsContainer.classList.add('notification-list-item-buttons-container');\n        container.appendChild(data.container);\n        data.container.appendChild(data.detailsRow);\n        data.detailsRow.appendChild(data.source);\n        data.detailsRow.appendChild(data.buttonsContainer);\n        data.container.appendChild(data.mainRow);\n        data.mainRow.appendChild(data.icon);\n        data.mainRow.appendChild(data.message);\n        data.mainRow.appendChild(toolbarContainer);\n        data.progress = ( new ProgressBar(container, defaultProgressBarStyles));\n        data.toDispose.add(data.progress);\n        data.renderer = this.instantiationService.createInstance(NotificationTemplateRenderer, data, this.actionRunner);\n        data.toDispose.add(data.renderer);\n        return data;\n    }\n    renderElement(notification, index, data) {\n        data.renderer.setInput(notification);\n    }\n    disposeTemplate(templateData) {\n        dispose(templateData.toDispose);\n    }\n};\nNotificationRenderer = ( __decorate([\n    ( __param(1, IContextMenuService)),\n    ( __param(2, IInstantiationService))\n], NotificationRenderer));\nlet NotificationTemplateRenderer = class NotificationTemplateRenderer extends Disposable {\n    static { this.SEVERITIES = [Severity.Info, Severity.Warning, Severity.Error]; }\n    constructor(template, actionRunner, openerService, instantiationService, keybindingService, contextMenuService) {\n        super();\n        this.template = template;\n        this.actionRunner = actionRunner;\n        this.openerService = openerService;\n        this.instantiationService = instantiationService;\n        this.keybindingService = keybindingService;\n        this.contextMenuService = contextMenuService;\n        this.inputDisposables = this._register(( new DisposableStore()));\n        if (!NotificationTemplateRenderer.closeNotificationAction) {\n            NotificationTemplateRenderer.closeNotificationAction = instantiationService.createInstance(ClearNotificationAction, ClearNotificationAction.ID, ClearNotificationAction.LABEL);\n            NotificationTemplateRenderer.expandNotificationAction = instantiationService.createInstance(ExpandNotificationAction, ExpandNotificationAction.ID, ExpandNotificationAction.LABEL);\n            NotificationTemplateRenderer.collapseNotificationAction = instantiationService.createInstance(CollapseNotificationAction, CollapseNotificationAction.ID, CollapseNotificationAction.LABEL);\n        }\n    }\n    setInput(notification) {\n        this.inputDisposables.clear();\n        this.render(notification);\n    }\n    render(notification) {\n        this.template.container.classList.toggle('expanded', notification.expanded);\n        this.inputDisposables.add(addDisposableListener(this.template.container, EventType.MOUSE_UP, e => {\n            if (e.button === 1 ) {\n                EventHelper.stop(e, true);\n            }\n        }));\n        this.inputDisposables.add(addDisposableListener(this.template.container, EventType.AUXCLICK, e => {\n            if (!notification.hasProgress && e.button === 1 ) {\n                EventHelper.stop(e, true);\n                notification.close();\n            }\n        }));\n        this.renderSeverity(notification);\n        const messageOverflows = this.renderMessage(notification);\n        this.renderSecondaryActions(notification, messageOverflows);\n        this.renderSource(notification);\n        this.renderButtons(notification);\n        this.renderProgress(notification);\n        this.inputDisposables.add(notification.onDidChangeContent(event => {\n            switch (event.kind) {\n                case 0 :\n                    this.renderSeverity(notification);\n                    break;\n                case 3 :\n                    this.renderProgress(notification);\n                    break;\n                case 1 :\n                    this.renderMessage(notification);\n                    break;\n            }\n        }));\n    }\n    renderSeverity(notification) {\n        NotificationTemplateRenderer.SEVERITIES.forEach(severity => {\n            if (notification.severity !== severity) {\n                this.template.icon.classList.remove(...ThemeIcon.asClassNameArray(this.toSeverityIcon(severity)));\n            }\n        });\n        this.template.icon.classList.add(...ThemeIcon.asClassNameArray(this.toSeverityIcon(notification.severity)));\n    }\n    renderMessage(notification) {\n        clearNode(this.template.message);\n        this.template.message.appendChild(NotificationMessageRenderer.render(notification.message, {\n            callback: link => this.openerService.open(( URI.parse(link)), { allowCommands: true }),\n            toDispose: this.inputDisposables\n        }));\n        const messageOverflows = notification.canCollapse && !notification.expanded && this.template.message.scrollWidth > this.template.message.clientWidth;\n        if (messageOverflows) {\n            this.template.message.title = this.template.message.textContent + '';\n        }\n        else {\n            this.template.message.removeAttribute('title');\n        }\n        return messageOverflows;\n    }\n    renderSecondaryActions(notification, messageOverflows) {\n        const actions = [];\n        const secondaryActions = notification.actions ? notification.actions.secondary : undefined;\n        if (isNonEmptyArray(secondaryActions)) {\n            const configureNotificationAction = this.instantiationService.createInstance(ConfigureNotificationAction, ConfigureNotificationAction.ID, ConfigureNotificationAction.LABEL, secondaryActions);\n            actions.push(configureNotificationAction);\n            this.inputDisposables.add(configureNotificationAction);\n        }\n        let showExpandCollapseAction = false;\n        if (notification.canCollapse) {\n            if (notification.expanded) {\n                showExpandCollapseAction = true;\n            }\n            else if (notification.source) {\n                showExpandCollapseAction = true;\n            }\n            else if (messageOverflows) {\n                showExpandCollapseAction = true;\n            }\n        }\n        if (showExpandCollapseAction) {\n            actions.push(notification.expanded ? NotificationTemplateRenderer.collapseNotificationAction : NotificationTemplateRenderer.expandNotificationAction);\n        }\n        if (!notification.hasProgress) {\n            actions.push(NotificationTemplateRenderer.closeNotificationAction);\n        }\n        this.template.toolbar.clear();\n        this.template.toolbar.context = notification;\n        actions.forEach(action => this.template.toolbar.push(action, { icon: true, label: false, keybinding: this.getKeybindingLabel(action) }));\n    }\n    renderSource(notification) {\n        if (notification.expanded && notification.source) {\n            this.template.source.textContent = ( localize('notificationSource', \"Source: {0}\", notification.source));\n            this.template.source.title = notification.source;\n        }\n        else {\n            this.template.source.textContent = '';\n            this.template.source.removeAttribute('title');\n        }\n    }\n    renderButtons(notification) {\n        clearNode(this.template.buttonsContainer);\n        const primaryActions = notification.actions ? notification.actions.primary : undefined;\n        if (notification.expanded && isNonEmptyArray(primaryActions)) {\n            const that = this;\n            const actionRunner = new (class extends ActionRunner {\n                async runAction(action) {\n                    that.actionRunner.run(action, notification);\n                    if (!(action instanceof ChoiceAction) || !action.keepOpen) {\n                        notification.close();\n                    }\n                }\n            })();\n            const buttonToolbar = this.inputDisposables.add(( new ButtonBar(this.template.buttonsContainer)));\n            for (let i = 0; i < primaryActions.length; i++) {\n                const action = primaryActions[i];\n                const options = {\n                    title: true,\n                    secondary: i > 0,\n                    ...defaultButtonStyles\n                };\n                const dropdownActions = action instanceof ChoiceAction ? action.menu : undefined;\n                const button = this.inputDisposables.add(dropdownActions ?\n                    buttonToolbar.addButtonWithDropdown({\n                        ...options,\n                        contextMenuProvider: this.contextMenuService,\n                        actions: dropdownActions,\n                        actionRunner\n                    }) :\n                    buttonToolbar.addButton(options));\n                button.label = action.label;\n                this.inputDisposables.add(button.onDidClick(e => {\n                    if (e) {\n                        EventHelper.stop(e, true);\n                    }\n                    actionRunner.run(action);\n                }));\n            }\n        }\n    }\n    renderProgress(notification) {\n        if (!notification.hasProgress) {\n            this.template.progress.stop().hide();\n            return;\n        }\n        const state = notification.progress.state;\n        if (state.infinite) {\n            this.template.progress.infinite().show();\n        }\n        else if (typeof state.total === 'number' || typeof state.worked === 'number') {\n            if (typeof state.total === 'number' && !this.template.progress.hasTotal()) {\n                this.template.progress.total(state.total);\n            }\n            if (typeof state.worked === 'number') {\n                this.template.progress.setWorked(state.worked).show();\n            }\n        }\n        else {\n            this.template.progress.done().hide();\n        }\n    }\n    toSeverityIcon(severity) {\n        switch (severity) {\n            case Severity.Warning:\n                return Codicon.warning;\n            case Severity.Error:\n                return Codicon.error;\n        }\n        return Codicon.info;\n    }\n    getKeybindingLabel(action) {\n        const keybinding = this.keybindingService.lookupKeybinding(action.id);\n        return keybinding ? keybinding.getLabel() : null;\n    }\n};\nNotificationTemplateRenderer = ( __decorate([\n    ( __param(2, IOpenerService)),\n    ( __param(3, IInstantiationService)),\n    ( __param(4, IKeybindingService)),\n    ( __param(5, IContextMenuService))\n], NotificationTemplateRenderer));\nexport { NotificationRenderer, NotificationTemplateRenderer, NotificationsListDelegate };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport './media/notificationsList.css.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { trackFocus, isAncestor } from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { WorkbenchList } from 'monaco-editor/esm/vs/platform/list/browser/listService.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { NOTIFICATIONS_BACKGROUND } from '../../../common/theme.js';\nimport { NotificationRenderer, NotificationsListDelegate } from './notificationsViewer.js';\nimport { CopyNotificationMessageAction } from './notificationsActions.js';\nimport { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { assertAllDefined } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { NotificationFocusedContext } from '../../../common/contextkeys.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { NotificationActionRunner } from './notificationsCommands.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nlet NotificationsList = class NotificationsList extends Disposable {\n    constructor(container, options, instantiationService, contextMenuService) {\n        super();\n        this.container = container;\n        this.options = options;\n        this.instantiationService = instantiationService;\n        this.contextMenuService = contextMenuService;\n        this.viewModel = [];\n    }\n    show() {\n        if (this.isVisible) {\n            return;\n        }\n        if (!this.list) {\n            this.createNotificationsList();\n        }\n        this.isVisible = true;\n    }\n    createNotificationsList() {\n        this.listContainer = document.createElement('div');\n        this.listContainer.classList.add('notifications-list-container');\n        const actionRunner = this._register(this.instantiationService.createInstance(NotificationActionRunner));\n        const renderer = this.instantiationService.createInstance(NotificationRenderer, actionRunner);\n        const listDelegate = this.listDelegate = ( new NotificationsListDelegate(this.listContainer));\n        const options = this.options;\n        const list = this.list = this._register(this.instantiationService.createInstance(WorkbenchList, 'NotificationsList', this.listContainer, listDelegate, [renderer], {\n            ...options,\n            setRowLineHeight: false,\n            horizontalScrolling: false,\n            overrideStyles: {\n                listBackground: NOTIFICATIONS_BACKGROUND\n            },\n            accessibilityProvider: this.instantiationService.createInstance(NotificationAccessibilityProvider, options)\n        }));\n        const copyAction = this._register(this.instantiationService.createInstance(CopyNotificationMessageAction, CopyNotificationMessageAction.ID, CopyNotificationMessageAction.LABEL));\n        this._register((list.onContextMenu(e => {\n            if (!e.element) {\n                return;\n            }\n            this.contextMenuService.showContextMenu({\n                getAnchor: () => e.anchor,\n                getActions: () => [copyAction],\n                getActionsContext: () => e.element,\n                actionRunner\n            });\n        })));\n        this._register((list.onMouseDblClick(event => event.element.toggle())));\n        const listFocusTracker = this._register(trackFocus(list.getHTMLElement()));\n        this._register(listFocusTracker.onDidBlur(() => {\n            if (document.hasFocus()) {\n                list.setFocus([]);\n            }\n        }));\n        NotificationFocusedContext.bindTo(list.contextKeyService);\n        this._register(list.onDidChangeSelection(e => {\n            if (e.indexes.length > 0) {\n                list.setSelection([]);\n            }\n        }));\n        this.container.appendChild(this.listContainer);\n    }\n    updateNotificationsList(start, deleteCount, items = []) {\n        const [list, listContainer] = assertAllDefined(this.list, this.listContainer);\n        const listHasDOMFocus = isAncestor(document.activeElement, listContainer);\n        const focusedIndex = list.getFocus()[0];\n        const focusedItem = this.viewModel[focusedIndex];\n        let focusRelativeTop = null;\n        if (typeof focusedIndex === 'number') {\n            focusRelativeTop = list.getRelativeTop(focusedIndex);\n        }\n        this.viewModel.splice(start, deleteCount, ...items);\n        list.splice(start, deleteCount, items);\n        list.layout();\n        if (this.viewModel.length === 0) {\n            this.hide();\n        }\n        else if (typeof focusedIndex === 'number') {\n            let indexToFocus = 0;\n            if (focusedItem) {\n                let indexToFocusCandidate = this.viewModel.indexOf(focusedItem);\n                if (indexToFocusCandidate === -1) {\n                    indexToFocusCandidate = focusedIndex - 1;\n                }\n                if (indexToFocusCandidate < this.viewModel.length && indexToFocusCandidate >= 0) {\n                    indexToFocus = indexToFocusCandidate;\n                }\n            }\n            if (typeof focusRelativeTop === 'number') {\n                list.reveal(indexToFocus, focusRelativeTop);\n            }\n            list.setFocus([indexToFocus]);\n        }\n        if (this.isVisible && listHasDOMFocus) {\n            list.domFocus();\n        }\n    }\n    updateNotificationHeight(item) {\n        const index = this.viewModel.indexOf(item);\n        if (index === -1) {\n            return;\n        }\n        const [list, listDelegate] = assertAllDefined(this.list, this.listDelegate);\n        list.updateElementHeight(index, listDelegate.getHeight(item));\n        list.layout();\n    }\n    hide() {\n        if (!this.isVisible || !this.list) {\n            return;\n        }\n        this.isVisible = false;\n        this.list.splice(0, this.viewModel.length);\n        this.viewModel = [];\n    }\n    focusFirst() {\n        if (!this.list) {\n            return;\n        }\n        this.list.focusFirst();\n        this.list.domFocus();\n    }\n    hasFocus() {\n        if (!this.listContainer) {\n            return false;\n        }\n        return isAncestor(document.activeElement, this.listContainer);\n    }\n    layout(width, maxHeight) {\n        if (this.listContainer && this.list) {\n            this.listContainer.style.width = `${width}px`;\n            if (typeof maxHeight === 'number') {\n                this.list.getHTMLElement().style.maxHeight = `${maxHeight}px`;\n            }\n            this.list.layout();\n        }\n    }\n    dispose() {\n        this.hide();\n        super.dispose();\n    }\n};\nNotificationsList = ( __decorate([\n    ( __param(2, IInstantiationService)),\n    ( __param(3, IContextMenuService))\n], NotificationsList));\nlet NotificationAccessibilityProvider = class NotificationAccessibilityProvider {\n    constructor(_options, _keybindingService, _configurationService) {\n        this._options = _options;\n        this._keybindingService = _keybindingService;\n        this._configurationService = _configurationService;\n    }\n    getAriaLabel(element) {\n        let accessibleViewHint;\n        const keybinding = this._keybindingService.lookupKeybinding('editor.action.accessibleView')?.getAriaLabel();\n        if (this._configurationService.getValue('accessibility.verbosity.notification')) {\n            accessibleViewHint = keybinding ? ( localize(\n                'notificationAccessibleViewHint',\n                \"Inspect the response in the accessible view with {0}\",\n                keybinding\n            )) : ( localize(\n                'notificationAccessibleViewHintNoKb',\n                \"Inspect the response in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding\"\n            ));\n        }\n        if (!element.source) {\n            return accessibleViewHint ? ( localize(\n                'notificationAriaLabelHint',\n                \"{0}, notification, {1}\",\n                element.message.raw,\n                accessibleViewHint\n            )) : ( localize('notificationAriaLabel', \"{0}, notification\", element.message.raw));\n        }\n        return accessibleViewHint ? ( localize(\n            'notificationWithSourceAriaLabelHint',\n            \"{0}, source: {1}, notification, {2}\",\n            element.message.raw,\n            element.source,\n            accessibleViewHint\n        )) : ( localize(\n            'notificationWithSourceAriaLabel',\n            \"{0}, source: {1}, notification\",\n            element.message.raw,\n            element.source\n        ));\n    }\n    getWidgetAriaLabel() {\n        return this._options.widgetAriaLabel ?? ( localize('notificationsList', \"Notifications List\"));\n    }\n    getRole() {\n        return 'dialog';\n    }\n};\nNotificationAccessibilityProvider = ( __decorate([\n    ( __param(1, IKeybindingService)),\n    ( __param(2, IConfigurationService))\n], NotificationAccessibilityProvider));\nexport { NotificationsList };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport './media/notificationsToasts.css.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { toDisposable, dispose, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Dimension, scheduleAtNextAnimationFrame, addDisposableListener, EventType, isAncestor } from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { NotificationsList } from './notificationsList.js';\nimport { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';\nimport { NOTIFICATIONS_BACKGROUND, NOTIFICATIONS_TOAST_BORDER } from '../../../common/theme.js';\nimport { Themable, IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { widgetShadow } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { Severity, NotificationsFilter, NotificationPriority } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { ILifecycleService } from '../../../services/lifecycle/common/lifecycle.js';\nimport { IHostService } from '../../../services/host/browser/host.js';\nimport { IntervalCounter } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { assertIsDefined } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { NotificationsToastsVisibleContext } from '../../../common/contextkeys.js';\nvar ToastVisibility;\n( (function(ToastVisibility) {\n    ToastVisibility[ToastVisibility[\"HIDDEN_OR_VISIBLE\"] = 0] = \"HIDDEN_OR_VISIBLE\";\n    ToastVisibility[ToastVisibility[\"HIDDEN\"] = 1] = \"HIDDEN\";\n    ToastVisibility[ToastVisibility[\"VISIBLE\"] = 2] = \"VISIBLE\";\n})(ToastVisibility || (ToastVisibility = {})));\nlet NotificationsToasts = class NotificationsToasts extends Themable {\n    static { this.MAX_WIDTH = 450; }\n    static { this.MAX_NOTIFICATIONS = 3; }\n    static { this.PURGE_TIMEOUT = {\n        [Severity.Info]: 15000,\n        [Severity.Warning]: 18000,\n        [Severity.Error]: 20000\n    }; }\n    static { this.SPAM_PROTECTION = {\n        interval: 800,\n        limit: NotificationsToasts.MAX_NOTIFICATIONS\n    }; }\n    get isVisible() { return !!this._isVisible; }\n    constructor(container, model, instantiationService, layoutService, themeService, editorGroupService, contextKeyService, lifecycleService, hostService) {\n        super(themeService);\n        this.container = container;\n        this.model = model;\n        this.instantiationService = instantiationService;\n        this.layoutService = layoutService;\n        this.editorGroupService = editorGroupService;\n        this.contextKeyService = contextKeyService;\n        this.lifecycleService = lifecycleService;\n        this.hostService = hostService;\n        this._onDidChangeVisibility = this._register(( new Emitter()));\n        this.onDidChangeVisibility = this._onDidChangeVisibility.event;\n        this._isVisible = false;\n        this.mapNotificationToToast = ( new Map());\n        this.mapNotificationToDisposable = ( new Map());\n        this.notificationsToastsVisibleContextKey = NotificationsToastsVisibleContext.bindTo(this.contextKeyService);\n        this.addedToastsIntervalCounter = ( new IntervalCounter(NotificationsToasts.SPAM_PROTECTION.interval));\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.layoutService.onDidLayout(dimension => this.layout(Dimension.lift(dimension))));\n        this.lifecycleService.when(3 ).then(() => {\n            this.model.notifications.forEach(notification => this.addToast(notification));\n            this._register(this.model.onDidChangeNotification(e => this.onDidChangeNotification(e)));\n        });\n        this._register(this.model.onDidChangeFilter(filter => {\n            if (filter === NotificationsFilter.SILENT || filter === NotificationsFilter.ERROR) {\n                this.hide();\n            }\n        }));\n    }\n    onDidChangeNotification(e) {\n        switch (e.kind) {\n            case 0 :\n                return this.addToast(e.item);\n            case 3 :\n                return this.removeToast(e.item);\n        }\n    }\n    addToast(item) {\n        if (this.isNotificationsCenterVisible) {\n            return;\n        }\n        if (item.priority === NotificationPriority.SILENT) {\n            return;\n        }\n        if (this.addedToastsIntervalCounter.increment() > NotificationsToasts.SPAM_PROTECTION.limit) {\n            return;\n        }\n        const itemDisposables = ( new DisposableStore());\n        this.mapNotificationToDisposable.set(item, itemDisposables);\n        itemDisposables.add(scheduleAtNextAnimationFrame(() => this.doAddToast(item, itemDisposables)));\n    }\n    doAddToast(item, itemDisposables) {\n        let notificationsToastsContainer = this.notificationsToastsContainer;\n        if (!notificationsToastsContainer) {\n            notificationsToastsContainer = this.notificationsToastsContainer = document.createElement('div');\n            notificationsToastsContainer.classList.add('notifications-toasts');\n            this.container.appendChild(notificationsToastsContainer);\n        }\n        notificationsToastsContainer.classList.add('visible');\n        const notificationToastContainer = document.createElement('div');\n        notificationToastContainer.classList.add('notification-toast-container');\n        const firstToast = notificationsToastsContainer.firstChild;\n        if (firstToast) {\n            notificationsToastsContainer.insertBefore(notificationToastContainer, firstToast);\n        }\n        else {\n            notificationsToastsContainer.appendChild(notificationToastContainer);\n        }\n        const notificationToast = document.createElement('div');\n        notificationToast.classList.add('notification-toast');\n        notificationToastContainer.appendChild(notificationToast);\n        const notificationList = this.instantiationService.createInstance(NotificationsList, notificationToast, {\n            verticalScrollMode: 2 ,\n            widgetAriaLabel: (() => {\n                if (!item.source) {\n                    return ( localize('notificationAriaLabel', \"{0}, notification\", item.message.raw));\n                }\n                return ( localize(\n                    'notificationWithSourceAriaLabel',\n                    \"{0}, source: {1}, notification\",\n                    item.message.raw,\n                    item.source\n                ));\n            })()\n        });\n        itemDisposables.add(notificationList);\n        const toast = { item, list: notificationList, container: notificationToastContainer, toast: notificationToast };\n        this.mapNotificationToToast.set(item, toast);\n        itemDisposables.add(toDisposable(() => this.updateToastVisibility(toast, false)));\n        notificationList.show();\n        const maxDimensions = this.computeMaxDimensions();\n        this.layoutLists(maxDimensions.width);\n        notificationList.updateNotificationsList(0, 0, [item]);\n        this.layoutContainer(maxDimensions.height);\n        itemDisposables.add(item.onDidChangeExpansion(() => {\n            notificationList.updateNotificationsList(0, 1, [item]);\n        }));\n        itemDisposables.add(item.onDidChangeContent(e => {\n            switch (e.kind) {\n                case 2 :\n                    notificationList.updateNotificationsList(0, 1, [item]);\n                    break;\n                case 1 :\n                    if (item.expanded) {\n                        notificationList.updateNotificationHeight(item);\n                    }\n                    break;\n            }\n        }));\n        Event.once(item.onDidClose)(() => {\n            this.removeToast(item);\n        });\n        this.purgeNotification(item, notificationToastContainer, notificationList, itemDisposables);\n        this.updateStyles();\n        this.notificationsToastsVisibleContextKey.set(true);\n        notificationToast.classList.add('notification-fade-in');\n        itemDisposables.add(addDisposableListener(notificationToast, 'transitionend', () => {\n            notificationToast.classList.remove('notification-fade-in');\n            notificationToast.classList.add('notification-fade-in-done');\n        }));\n        item.updateVisibility(true);\n        if (!this._isVisible) {\n            this._isVisible = true;\n            this._onDidChangeVisibility.fire();\n        }\n    }\n    purgeNotification(item, notificationToastContainer, notificationList, disposables) {\n        let isMouseOverToast = false;\n        disposables.add(addDisposableListener(notificationToastContainer, EventType.MOUSE_OVER, () => isMouseOverToast = true));\n        disposables.add(addDisposableListener(notificationToastContainer, EventType.MOUSE_OUT, () => isMouseOverToast = false));\n        let purgeTimeoutHandle;\n        let listener;\n        const hideAfterTimeout = () => {\n            purgeTimeoutHandle = setTimeout(() => {\n                if (!this.hostService.hasFocus) {\n                    if (!listener) {\n                        listener = this.hostService.onDidChangeFocus(focus => {\n                            if (focus) {\n                                hideAfterTimeout();\n                            }\n                        });\n                        disposables.add(listener);\n                    }\n                }\n                else if (item.sticky ||\n                    notificationList.hasFocus() ||\n                    isMouseOverToast\n                ) {\n                    hideAfterTimeout();\n                }\n                else {\n                    this.removeToast(item);\n                }\n            }, NotificationsToasts.PURGE_TIMEOUT[item.severity]);\n        };\n        hideAfterTimeout();\n        disposables.add(toDisposable(() => clearTimeout(purgeTimeoutHandle)));\n    }\n    removeToast(item) {\n        let focusEditor = false;\n        const notificationToast = this.mapNotificationToToast.get(item);\n        if (notificationToast) {\n            const toastHasDOMFocus = isAncestor(document.activeElement, notificationToast.container);\n            if (toastHasDOMFocus) {\n                focusEditor = !(this.focusNext() || this.focusPrevious());\n            }\n            this.mapNotificationToToast.delete(item);\n        }\n        const notificationDisposables = this.mapNotificationToDisposable.get(item);\n        if (notificationDisposables) {\n            dispose(notificationDisposables);\n            this.mapNotificationToDisposable.delete(item);\n        }\n        if (this.mapNotificationToToast.size > 0) {\n            this.layout(this.workbenchDimensions);\n        }\n        else {\n            this.doHide();\n            if (focusEditor) {\n                this.editorGroupService.activeGroup.focus();\n            }\n        }\n    }\n    removeToasts() {\n        this.mapNotificationToToast.clear();\n        this.mapNotificationToDisposable.forEach(disposable => dispose(disposable));\n        this.mapNotificationToDisposable.clear();\n        this.doHide();\n    }\n    doHide() {\n        this.notificationsToastsContainer?.classList.remove('visible');\n        this.notificationsToastsVisibleContextKey.set(false);\n        if (this._isVisible) {\n            this._isVisible = false;\n            this._onDidChangeVisibility.fire();\n        }\n    }\n    hide() {\n        const focusEditor = this.notificationsToastsContainer ? isAncestor(document.activeElement, this.notificationsToastsContainer) : false;\n        this.removeToasts();\n        if (focusEditor) {\n            this.editorGroupService.activeGroup.focus();\n        }\n    }\n    focus() {\n        const toasts = this.getToasts(ToastVisibility.VISIBLE);\n        if (toasts.length > 0) {\n            toasts[0].list.focusFirst();\n            return true;\n        }\n        return false;\n    }\n    focusNext() {\n        const toasts = this.getToasts(ToastVisibility.VISIBLE);\n        for (let i = 0; i < toasts.length; i++) {\n            const toast = toasts[i];\n            if (toast.list.hasFocus()) {\n                const nextToast = toasts[i + 1];\n                if (nextToast) {\n                    nextToast.list.focusFirst();\n                    return true;\n                }\n                break;\n            }\n        }\n        return false;\n    }\n    focusPrevious() {\n        const toasts = this.getToasts(ToastVisibility.VISIBLE);\n        for (let i = 0; i < toasts.length; i++) {\n            const toast = toasts[i];\n            if (toast.list.hasFocus()) {\n                const previousToast = toasts[i - 1];\n                if (previousToast) {\n                    previousToast.list.focusFirst();\n                    return true;\n                }\n                break;\n            }\n        }\n        return false;\n    }\n    focusFirst() {\n        const toast = this.getToasts(ToastVisibility.VISIBLE)[0];\n        if (toast) {\n            toast.list.focusFirst();\n            return true;\n        }\n        return false;\n    }\n    focusLast() {\n        const toasts = this.getToasts(ToastVisibility.VISIBLE);\n        if (toasts.length > 0) {\n            toasts[toasts.length - 1].list.focusFirst();\n            return true;\n        }\n        return false;\n    }\n    update(isCenterVisible) {\n        if (this.isNotificationsCenterVisible !== isCenterVisible) {\n            this.isNotificationsCenterVisible = isCenterVisible;\n            if (this.isNotificationsCenterVisible) {\n                this.removeToasts();\n            }\n        }\n    }\n    updateStyles() {\n        this.mapNotificationToToast.forEach(({ toast }) => {\n            const backgroundColor = this.getColor(NOTIFICATIONS_BACKGROUND);\n            toast.style.background = backgroundColor ? backgroundColor : '';\n            const widgetShadowColor = this.getColor(widgetShadow);\n            toast.style.boxShadow = widgetShadowColor ? `0 0 8px 2px ${widgetShadowColor}` : '';\n            const borderColor = this.getColor(NOTIFICATIONS_TOAST_BORDER);\n            toast.style.border = borderColor ? `1px solid ${borderColor}` : '';\n        });\n    }\n    getToasts(state) {\n        const notificationToasts = [];\n        this.mapNotificationToToast.forEach(toast => {\n            switch (state) {\n                case ToastVisibility.HIDDEN_OR_VISIBLE:\n                    notificationToasts.push(toast);\n                    break;\n                case ToastVisibility.HIDDEN:\n                    if (!this.isToastInDOM(toast)) {\n                        notificationToasts.push(toast);\n                    }\n                    break;\n                case ToastVisibility.VISIBLE:\n                    if (this.isToastInDOM(toast)) {\n                        notificationToasts.push(toast);\n                    }\n                    break;\n            }\n        });\n        return notificationToasts.reverse();\n    }\n    layout(dimension) {\n        this.workbenchDimensions = dimension;\n        const maxDimensions = this.computeMaxDimensions();\n        if (maxDimensions.height) {\n            this.layoutContainer(maxDimensions.height);\n        }\n        this.layoutLists(maxDimensions.width);\n    }\n    computeMaxDimensions() {\n        const maxWidth = NotificationsToasts.MAX_WIDTH;\n        let availableWidth = maxWidth;\n        let availableHeight;\n        if (this.workbenchDimensions) {\n            availableWidth = this.workbenchDimensions.width;\n            availableWidth -= (2 * 8);\n            availableHeight = this.workbenchDimensions.height;\n            if (this.layoutService.isVisible(\"workbench.parts.statusbar\" )) {\n                availableHeight -= 22;\n            }\n            if (this.layoutService.isVisible(\"workbench.parts.titlebar\" )) {\n                availableHeight -= 22;\n            }\n            availableHeight -= (2 * 12);\n        }\n        availableHeight = typeof availableHeight === 'number'\n            ? Math.round(availableHeight * 0.618)\n            : 0;\n        return ( new Dimension(Math.min(maxWidth, availableWidth), availableHeight));\n    }\n    layoutLists(width) {\n        this.mapNotificationToToast.forEach(({ list }) => list.layout(width));\n    }\n    layoutContainer(heightToGive) {\n        let visibleToasts = 0;\n        for (const toast of this.getToasts(ToastVisibility.HIDDEN_OR_VISIBLE)) {\n            toast.container.style.opacity = '0';\n            this.updateToastVisibility(toast, true);\n            heightToGive -= toast.container.offsetHeight;\n            let makeVisible = false;\n            if (visibleToasts === NotificationsToasts.MAX_NOTIFICATIONS) {\n                makeVisible = false;\n            }\n            else if (heightToGive >= 0) {\n                makeVisible = true;\n            }\n            this.updateToastVisibility(toast, makeVisible);\n            toast.container.style.opacity = '';\n            if (makeVisible) {\n                visibleToasts++;\n            }\n        }\n    }\n    updateToastVisibility(toast, visible) {\n        if (this.isToastInDOM(toast) === visible) {\n            return;\n        }\n        const notificationsToastsContainer = assertIsDefined(this.notificationsToastsContainer);\n        if (visible) {\n            notificationsToastsContainer.appendChild(toast.container);\n        }\n        else {\n            notificationsToastsContainer.removeChild(toast.container);\n        }\n        toast.item.updateVisibility(visible);\n    }\n    isToastInDOM(toast) {\n        return !!toast.container.parentElement;\n    }\n};\nNotificationsToasts = ( __decorate([\n    ( __param(2, IInstantiationService)),\n    ( __param(3, IWorkbenchLayoutService)),\n    ( __param(4, IThemeService)),\n    ( __param(5, IEditorGroupsService)),\n    ( __param(6, IContextKeyService)),\n    ( __param(7, ILifecycleService)),\n    ( __param(8, IHostService))\n], NotificationsToasts));\nexport { NotificationsToasts };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { Severity, NoOpNotification, NeverShowAgainScope, NotificationsFilter } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { NotificationsModel, ChoiceAction } from '../../../common/notifications.js';\nimport { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Action } from 'monaco-editor/esm/vs/base/common/actions.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nlet NotificationService = class NotificationService extends Disposable {\n    constructor(storageService) {\n        super();\n        this.storageService = storageService;\n        this.model = this._register(( new NotificationsModel()));\n        this._onDidAddNotification = this._register(( new Emitter()));\n        this.onDidAddNotification = this._onDidAddNotification.event;\n        this._onDidRemoveNotification = this._register(( new Emitter()));\n        this.onDidRemoveNotification = this._onDidRemoveNotification.event;\n        this._onDidChangeDoNotDisturbMode = this._register(( new Emitter()));\n        this.onDidChangeDoNotDisturbMode = this._onDidChangeDoNotDisturbMode.event;\n        this._doNotDisturbMode = this.storageService.getBoolean(NotificationService.DND_SETTINGS_KEY, -1 , false);\n        this.updateDoNotDisturbFilters();\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.model.onDidChangeNotification(e => {\n            switch (e.kind) {\n                case 0 :\n                case 3 : {\n                    const notification = {\n                        message: e.item.message.original,\n                        severity: e.item.severity,\n                        source: typeof e.item.sourceId === 'string' && typeof e.item.source === 'string' ? { id: e.item.sourceId, label: e.item.source } : e.item.source,\n                        priority: e.item.priority\n                    };\n                    if (e.kind === 0 ) {\n                        this._onDidAddNotification.fire(notification);\n                    }\n                    if (e.kind === 3 ) {\n                        this._onDidRemoveNotification.fire(notification);\n                    }\n                    break;\n                }\n            }\n        }));\n    }\n    static { this.DND_SETTINGS_KEY = 'notifications.doNotDisturbMode'; }\n    get doNotDisturbMode() {\n        return this._doNotDisturbMode;\n    }\n    set doNotDisturbMode(enabled) {\n        if (this._doNotDisturbMode === enabled) {\n            return;\n        }\n        this.storageService.store(NotificationService.DND_SETTINGS_KEY, enabled, -1 , 1 );\n        this._doNotDisturbMode = enabled;\n        this.updateDoNotDisturbFilters();\n        this._onDidChangeDoNotDisturbMode.fire();\n    }\n    updateDoNotDisturbFilters() {\n        let filter;\n        if (this._doNotDisturbMode) {\n            filter = NotificationsFilter.ERROR;\n        }\n        else {\n            filter = NotificationsFilter.OFF;\n        }\n        this.model.setFilter(filter);\n    }\n    info(message) {\n        if (Array.isArray(message)) {\n            message.forEach(m => this.info(m));\n            return;\n        }\n        this.model.addNotification({ severity: Severity.Info, message });\n    }\n    warn(message) {\n        if (Array.isArray(message)) {\n            message.forEach(m => this.warn(m));\n            return;\n        }\n        this.model.addNotification({ severity: Severity.Warning, message });\n    }\n    error(message) {\n        if (Array.isArray(message)) {\n            message.forEach(m => this.error(m));\n            return;\n        }\n        this.model.addNotification({ severity: Severity.Error, message });\n    }\n    notify(notification) {\n        const toDispose = ( new DisposableStore());\n        if (notification.neverShowAgain) {\n            const scope = this.toStorageScope(notification.neverShowAgain);\n            const id = notification.neverShowAgain.id;\n            if (this.storageService.getBoolean(id, scope)) {\n                return ( new NoOpNotification());\n            }\n            const neverShowAgainAction = toDispose.add(( new Action('workbench.notification.neverShowAgain', ( localize('neverShowAgain', \"Don't Show Again\")), undefined, true, async () => {\n                handle.close();\n                this.storageService.store(id, true, scope, 0 );\n            })));\n            const actions = {\n                primary: notification.actions?.primary || [],\n                secondary: notification.actions?.secondary || []\n            };\n            if (!notification.neverShowAgain.isSecondary) {\n                actions.primary = [neverShowAgainAction, ...actions.primary];\n            }\n            else {\n                actions.secondary = [...actions.secondary, neverShowAgainAction];\n            }\n            notification.actions = actions;\n        }\n        const handle = this.model.addNotification(notification);\n        Event.once(handle.onDidClose)(() => toDispose.dispose());\n        return handle;\n    }\n    toStorageScope(options) {\n        switch (options.scope) {\n            case NeverShowAgainScope.APPLICATION:\n                return -1 ;\n            case NeverShowAgainScope.PROFILE:\n                return 0 ;\n            case NeverShowAgainScope.WORKSPACE:\n                return 1 ;\n            default:\n                return -1 ;\n        }\n    }\n    prompt(severity, message, choices, options) {\n        const toDispose = ( new DisposableStore());\n        if (options?.neverShowAgain) {\n            const scope = this.toStorageScope(options.neverShowAgain);\n            const id = options.neverShowAgain.id;\n            if (this.storageService.getBoolean(id, scope)) {\n                return ( new NoOpNotification());\n            }\n            const neverShowAgainChoice = {\n                label: ( localize('neverShowAgain', \"Don't Show Again\")),\n                run: () => this.storageService.store(id, true, scope, 0 ),\n                isSecondary: options.neverShowAgain.isSecondary\n            };\n            if (!options.neverShowAgain.isSecondary) {\n                choices = [neverShowAgainChoice, ...choices];\n            }\n            else {\n                choices = [...choices, neverShowAgainChoice];\n            }\n        }\n        let choiceClicked = false;\n        const primaryActions = [];\n        const secondaryActions = [];\n        choices.forEach((choice, index) => {\n            const action = ( new ChoiceAction(`workbench.dialog.choice.${index}`, choice));\n            if (!choice.isSecondary) {\n                primaryActions.push(action);\n            }\n            else {\n                secondaryActions.push(action);\n            }\n            toDispose.add(action.onDidRun(() => {\n                choiceClicked = true;\n                if (!choice.keepOpen) {\n                    handle.close();\n                }\n            }));\n            toDispose.add(action);\n        });\n        const actions = { primary: primaryActions, secondary: secondaryActions };\n        const handle = this.notify({ severity, message, actions, sticky: options?.sticky, priority: options?.priority });\n        Event.once(handle.onDidClose)(() => {\n            toDispose.dispose();\n            if (options && typeof options.onCancel === 'function' && !choiceClicked) {\n                options.onCancel();\n            }\n        });\n        return handle;\n    }\n    status(message, options) {\n        return this.model.showStatusMessage(message, options);\n    }\n};\nNotificationService = ( __decorate([\n    ( __param(0, IStorageService))\n], NotificationService));\nexport { NotificationService };\n","import n from '../../../../../../../node_modules/rollup-plugin-styles/dist/runtime/inject-css.js';\nvar css = \".monaco-workbench>.notifications-center{border-radius:4px;bottom:31px;display:none;overflow:hidden;position:absolute;right:8px;z-index:1000}.monaco-workbench.nostatusbar>.notifications-center{bottom:8px}.monaco-workbench>.notifications-center.visible{display:block}.monaco-workbench>.notifications-center>.notifications-center-header{align-items:center;display:flex;height:35px;padding-left:8px;padding-right:5px}.monaco-workbench>.notifications-center>.notifications-center-header>.notifications-center-header-title{font-size:11px;text-transform:uppercase}.monaco-workbench>.notifications-center>.notifications-center-header>.notifications-center-header-toolbar{flex:1}.monaco-workbench>.notifications-center>.notifications-center-header>.notifications-center-header-toolbar .actions-container{justify-content:flex-end}.monaco-workbench>.notifications-center .notifications-list-container .monaco-list-row[data-last-element=false]>.notification-list-item{border-bottom:1px solid var(--vscode-notifications-border)}.monaco-workbench>.notifications-center .notifications-list-container,.monaco-workbench>.notifications-center .notifications-list-container .monaco-scrollable-element,.monaco-workbench>.notifications-center .notifications-list-container .notification-list-item{border-radius:0}.monaco-workbench>.notifications-center .codicon.codicon-error{color:var(--vscode-notificationsErrorIcon-foreground)!important}.monaco-workbench>.notifications-center .codicon.codicon-warning{color:var(--vscode-notificationsWarningIcon-foreground)!important}.monaco-workbench>.notifications-center .codicon.codicon-info{color:var(--vscode-notificationsInfoIcon-foreground)!important}\";\nn(css,{});\nexport { css, css as default };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport './media/notificationsCenter.css.js';\nimport './media/notificationsActions.css.js';\nimport { NOTIFICATIONS_CENTER_BORDER, NOTIFICATIONS_CENTER_HEADER_FOREGROUND, NOTIFICATIONS_CENTER_HEADER_BACKGROUND } from '../../../common/theme.js';\nimport { Themable, IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { NotificationActionRunner } from './notificationsCommands.js';\nimport { NotificationsList } from './notificationsList.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { Dimension, isAncestor } from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { widgetShadow } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { ActionBar } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js';\nimport { ClearAllNotificationsAction, ToggleDoNotDisturbAction, HideNotificationsCenterAction } from './notificationsActions.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { assertIsDefined, assertAllDefined } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { NotificationsCenterVisibleContext } from '../../../common/contextkeys.js';\nimport { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nlet NotificationsCenter = class NotificationsCenter extends Themable {\n    static { this.MAX_DIMENSIONS = ( new Dimension(450, 400)); }\n    constructor(container, model, themeService, instantiationService, layoutService, contextKeyService, editorGroupService, keybindingService, notificationService) {\n        super(themeService);\n        this.container = container;\n        this.model = model;\n        this.instantiationService = instantiationService;\n        this.layoutService = layoutService;\n        this.contextKeyService = contextKeyService;\n        this.editorGroupService = editorGroupService;\n        this.keybindingService = keybindingService;\n        this.notificationService = notificationService;\n        this._onDidChangeVisibility = this._register(( new Emitter()));\n        this.onDidChangeVisibility = this._onDidChangeVisibility.event;\n        this.notificationsCenterVisibleContextKey = NotificationsCenterVisibleContext.bindTo(this.contextKeyService);\n        this.notificationsCenterVisibleContextKey = NotificationsCenterVisibleContext.bindTo(contextKeyService);\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.model.onDidChangeNotification(e => this.onDidChangeNotification(e)));\n        this._register(this.layoutService.onDidLayout(dimension => this.layout(Dimension.lift(dimension))));\n        this._register(this.notificationService.onDidChangeDoNotDisturbMode(() => this.onDidChangeDoNotDisturbMode()));\n    }\n    onDidChangeDoNotDisturbMode() {\n        this.hide();\n    }\n    get isVisible() {\n        return !!this._isVisible;\n    }\n    show() {\n        if (this._isVisible) {\n            const notificationsList = assertIsDefined(this.notificationsList);\n            notificationsList.show();\n            notificationsList.focusFirst();\n            return;\n        }\n        if (!this.notificationsCenterContainer) {\n            this.create();\n        }\n        this.updateTitle();\n        const [notificationsList, notificationsCenterContainer] = assertAllDefined(this.notificationsList, this.notificationsCenterContainer);\n        this._isVisible = true;\n        notificationsCenterContainer.classList.add('visible');\n        notificationsList.show();\n        this.layout(this.workbenchDimensions);\n        notificationsList.updateNotificationsList(0, 0, this.model.notifications);\n        notificationsList.focusFirst();\n        this.updateStyles();\n        this.model.notifications.forEach(notification => notification.updateVisibility(true));\n        this.notificationsCenterVisibleContextKey.set(true);\n        this._onDidChangeVisibility.fire();\n    }\n    updateTitle() {\n        const [notificationsCenterTitle, clearAllAction] = assertAllDefined(this.notificationsCenterTitle, this.clearAllAction);\n        if (this.model.notifications.length === 0) {\n            notificationsCenterTitle.textContent = ( localize('notificationsEmpty', \"No new notifications\"));\n            clearAllAction.enabled = false;\n        }\n        else {\n            notificationsCenterTitle.textContent = ( localize('notifications', \"Notifications\"));\n            clearAllAction.enabled = ( this.model.notifications.some(notification => !notification.hasProgress));\n        }\n    }\n    create() {\n        this.notificationsCenterContainer = document.createElement('div');\n        this.notificationsCenterContainer.classList.add('notifications-center');\n        this.notificationsCenterHeader = document.createElement('div');\n        this.notificationsCenterHeader.classList.add('notifications-center-header');\n        this.notificationsCenterContainer.appendChild(this.notificationsCenterHeader);\n        this.notificationsCenterTitle = document.createElement('span');\n        this.notificationsCenterTitle.classList.add('notifications-center-header-title');\n        this.notificationsCenterHeader.appendChild(this.notificationsCenterTitle);\n        const toolbarContainer = document.createElement('div');\n        toolbarContainer.classList.add('notifications-center-header-toolbar');\n        this.notificationsCenterHeader.appendChild(toolbarContainer);\n        const actionRunner = this._register(this.instantiationService.createInstance(NotificationActionRunner));\n        const notificationsToolBar = this._register(( new ActionBar(toolbarContainer, {\n            ariaLabel: ( localize('notificationsToolbar', \"Notification Center Actions\")),\n            actionRunner\n        })));\n        this.clearAllAction = this._register(this.instantiationService.createInstance(ClearAllNotificationsAction, ClearAllNotificationsAction.ID, ClearAllNotificationsAction.LABEL));\n        notificationsToolBar.push(this.clearAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(this.clearAllAction) });\n        this.toggleDoNotDisturbAction = this._register(this.instantiationService.createInstance(ToggleDoNotDisturbAction, ToggleDoNotDisturbAction.ID, ToggleDoNotDisturbAction.LABEL));\n        notificationsToolBar.push(this.toggleDoNotDisturbAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(this.toggleDoNotDisturbAction) });\n        const hideAllAction = this._register(this.instantiationService.createInstance(HideNotificationsCenterAction, HideNotificationsCenterAction.ID, HideNotificationsCenterAction.LABEL));\n        notificationsToolBar.push(hideAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(hideAllAction) });\n        this.notificationsList = this.instantiationService.createInstance(NotificationsList, this.notificationsCenterContainer, {\n            widgetAriaLabel: ( localize('notificationsCenterWidgetAriaLabel', \"Notifications Center\"))\n        });\n        this.container.appendChild(this.notificationsCenterContainer);\n    }\n    getKeybindingLabel(action) {\n        const keybinding = this.keybindingService.lookupKeybinding(action.id);\n        return keybinding ? keybinding.getLabel() : null;\n    }\n    onDidChangeNotification(e) {\n        if (!this._isVisible) {\n            return;\n        }\n        let focusEditor = false;\n        const [notificationsList, notificationsCenterContainer] = assertAllDefined(this.notificationsList, this.notificationsCenterContainer);\n        switch (e.kind) {\n            case 0 :\n                notificationsList.updateNotificationsList(e.index, 0, [e.item]);\n                e.item.updateVisibility(true);\n                break;\n            case 1 :\n                switch (e.detail) {\n                    case 2 :\n                        notificationsList.updateNotificationsList(e.index, 1, [e.item]);\n                        break;\n                    case 1 :\n                        if (e.item.expanded) {\n                            notificationsList.updateNotificationHeight(e.item);\n                        }\n                        break;\n                }\n                break;\n            case 2 :\n                notificationsList.updateNotificationsList(e.index, 1, [e.item]);\n                break;\n            case 3 :\n                focusEditor = isAncestor(document.activeElement, notificationsCenterContainer);\n                notificationsList.updateNotificationsList(e.index, 1);\n                e.item.updateVisibility(false);\n                break;\n        }\n        this.updateTitle();\n        if (this.model.notifications.length === 0) {\n            this.hide();\n            if (focusEditor) {\n                this.editorGroupService.activeGroup.focus();\n            }\n        }\n    }\n    hide() {\n        if (!this._isVisible || !this.notificationsCenterContainer || !this.notificationsList) {\n            return;\n        }\n        const focusEditor = isAncestor(document.activeElement, this.notificationsCenterContainer);\n        this._isVisible = false;\n        this.notificationsCenterContainer.classList.remove('visible');\n        this.notificationsList.hide();\n        this.model.notifications.forEach(notification => notification.updateVisibility(false));\n        this.notificationsCenterVisibleContextKey.set(false);\n        this._onDidChangeVisibility.fire();\n        if (focusEditor) {\n            this.editorGroupService.activeGroup.focus();\n        }\n    }\n    updateStyles() {\n        if (this.notificationsCenterContainer && this.notificationsCenterHeader) {\n            const widgetShadowColor = this.getColor(widgetShadow);\n            this.notificationsCenterContainer.style.boxShadow = widgetShadowColor ? `0 0 8px 2px ${widgetShadowColor}` : '';\n            const borderColor = this.getColor(NOTIFICATIONS_CENTER_BORDER);\n            this.notificationsCenterContainer.style.border = borderColor ? `1px solid ${borderColor}` : '';\n            const headerForeground = this.getColor(NOTIFICATIONS_CENTER_HEADER_FOREGROUND);\n            this.notificationsCenterHeader.style.color = headerForeground ?? '';\n            const headerBackground = this.getColor(NOTIFICATIONS_CENTER_HEADER_BACKGROUND);\n            this.notificationsCenterHeader.style.background = headerBackground ?? '';\n        }\n    }\n    layout(dimension) {\n        this.workbenchDimensions = dimension;\n        if (this._isVisible && this.notificationsCenterContainer) {\n            const maxWidth = NotificationsCenter.MAX_DIMENSIONS.width;\n            const maxHeight = NotificationsCenter.MAX_DIMENSIONS.height;\n            let availableWidth = maxWidth;\n            let availableHeight = maxHeight;\n            if (this.workbenchDimensions) {\n                availableWidth = this.workbenchDimensions.width;\n                availableWidth -= (2 * 8);\n                availableHeight = this.workbenchDimensions.height - 35 ;\n                if (this.layoutService.isVisible(\"workbench.parts.statusbar\" )) {\n                    availableHeight -= 22;\n                }\n                if (this.layoutService.isVisible(\"workbench.parts.titlebar\" )) {\n                    availableHeight -= 22;\n                }\n                availableHeight -= (2 * 12);\n            }\n            const notificationsList = assertIsDefined(this.notificationsList);\n            notificationsList.layout(Math.min(maxWidth, availableWidth), Math.min(maxHeight, availableHeight));\n        }\n    }\n    clearAll() {\n        this.hide();\n        for (const notification of [...this.model.notifications] ) {\n            if (!notification.hasProgress) {\n                notification.close();\n            }\n        }\n    }\n};\nNotificationsCenter = ( __decorate([\n    ( __param(2, IThemeService)),\n    ( __param(3, IInstantiationService)),\n    ( __param(4, IWorkbenchLayoutService)),\n    ( __param(5, IContextKeyService)),\n    ( __param(6, IEditorGroupsService)),\n    ( __param(7, IKeybindingService)),\n    ( __param(8, INotificationService))\n], NotificationsCenter));\nexport { NotificationsCenter };\n","import { alert } from 'monaco-editor/esm/vs/base/browser/ui/aria/aria.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { toErrorMessage } from 'monaco-editor/esm/vs/base/common/errorMessage.js';\nimport { Severity, NotificationPriority } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { Event } from 'monaco-editor/esm/vs/base/common/event.js';\nclass NotificationsAlerts extends Disposable {\n    constructor(model) {\n        super();\n        this.model = model;\n        for (const notification of model.notifications) {\n            this.triggerAriaAlert(notification);\n        }\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.model.onDidChangeNotification(e => this.onDidChangeNotification(e)));\n    }\n    onDidChangeNotification(e) {\n        if (e.kind === 0 ) {\n            this.triggerAriaAlert(e.item);\n            if (e.item.severity === Severity.Error) {\n                if (e.item.message.original instanceof Error) {\n                    console.error(e.item.message.original);\n                }\n                else {\n                    console.error(toErrorMessage(( e.item.message.linkedText.toString()), true));\n                }\n            }\n        }\n    }\n    triggerAriaAlert(notification) {\n        if (notification.priority === NotificationPriority.SILENT) {\n            return;\n        }\n        const listener = notification.onDidChangeContent(e => {\n            if (e.kind === 1 ) {\n                this.doTriggerAriaAlert(notification);\n            }\n        });\n        Event.once(notification.onDidClose)(() => listener.dispose());\n        this.doTriggerAriaAlert(notification);\n    }\n    doTriggerAriaAlert(notification) {\n        let alertText;\n        if (notification.severity === Severity.Error) {\n            alertText = ( localize('alertErrorMessage', \"Error: {0}\", ( notification.message.linkedText.toString())));\n        }\n        else if (notification.severity === Severity.Warning) {\n            alertText = ( localize('alertWarningMessage', \"Warning: {0}\", ( notification.message.linkedText.toString())));\n        }\n        else {\n            alertText = ( localize('alertInfoMessage', \"Info: {0}\", ( notification.message.linkedText.toString())));\n        }\n        alert(alertText);\n    }\n}\nexport { NotificationsAlerts };\n","import '../missing-services.js';\nimport { NotificationsToasts } from '../vscode/vs/workbench/browser/parts/notifications/notificationsToasts.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { NotificationService } from '../vscode/vs/workbench/services/notification/common/notificationService.js';\nimport { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { registerNotificationCommands } from '../vscode/vs/workbench/browser/parts/notifications/notificationsCommands.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nimport { NotificationsCenter } from '../vscode/vs/workbench/browser/parts/notifications/notificationsCenter.js';\nimport { NotificationsAlerts } from '../vscode/vs/workbench/browser/parts/notifications/notificationsAlerts.js';\nimport { NotificationsTelemetry } from '../vscode/vs/workbench/browser/parts/notifications/notificationsTelemetry.js';\nimport { ILayoutService } from 'monaco-editor/esm/vs/platform/layout/browser/layoutService.js';\nimport getServiceOverride$1 from './layout.js';\nimport { onRenderWorkbench } from '../lifecycle.js';\nonRenderWorkbench(async (accessor) => {\n    const container = accessor.get(ILayoutService).container;\n    const model = accessor.get(INotificationService).model;\n    const instantiationService = accessor.get(IInstantiationService);\n    setTimeout(() => {\n        const notificationsCenter = instantiationService.createInstance(NotificationsCenter, container, model);\n        const notificationsToasts = instantiationService.createInstance(NotificationsToasts, container, model);\n        instantiationService.createInstance(NotificationsAlerts, model);\n        instantiationService.createInstance(NotificationsTelemetry);\n        registerNotificationCommands(notificationsCenter, notificationsToasts, model);\n        notificationsToasts.layout(dom.getClientArea(container));\n    });\n});\nfunction getServiceOverride(container) {\n    return {\n        [( INotificationService.toString())]: new SyncDescriptor(NotificationService, undefined, true),\n        ...getServiceOverride$1(container)\n    };\n}\nexport { getServiceOverride as default };\n"],"names":["clearIcon","close","clearAllIcon","clearAll","hideIcon","chevronDown","expandIcon","chevronUp","collapseIcon","configureIcon","gear","doNotDisturbIcon","bellSlash","ClearNotificationAction","this","ID","LABEL","constructor","id","label","commandService","super","asClassName","run","notification","executeCommand","ClearAllNotificationsAction","ToggleDoNotDisturbAction","HideNotificationsCenterAction","ExpandNotificationAction","CollapseNotificationAction","ConfigureNotificationAction","configurationActions","CopyNotificationMessageAction","clipboardService","writeText","message","raw","NotificationsListDelegate","ROW_HEIGHT","LINE_HEIGHT","container","offsetHelper","createOffsetHelper","document","createElement","classList","add","appendChild","getHeight","expanded","expandedHeight","preferredMessageHeight","computePreferredHeight","source","actions","primary","collapse","hasProgress","canCollapse","secondary","style","width","renderedMessage","NotificationMessageRenderer","render","preferredHeight","Math","max","offsetHeight","scrollHeight","getTemplateId","element","NotificationRenderer","TEMPLATE_ID","Error","actionHandler","messageContainer","node","linkedText","nodes","createTextNode","title","href","startsWith","substr","anchor","$","tabIndex","handleOpen","e","stop","callback","onClick","toDispose","CLICK","event","onKeydown","KEY_DOWN","onSpaceOrEnter","chain","filter","equals","addTarget","onTap","Tap","any","actionRunner","contextMenuService","instantiationService","templateId","renderTemplate","data","Object","create","mainRow","icon","toolbarContainer","toolbar","ariaLabel","actionViewItemProvider","action","item","classNames","class","detailsRow","buttonsContainer","progress","renderer","createInstance","NotificationTemplateRenderer","renderElement","index","setInput","disposeTemplate","templateData","SEVERITIES","Info","Warning","template","openerService","keybindingService","inputDisposables","_register","closeNotificationAction","expandNotificationAction","collapseNotificationAction","clear","toggle","MOUSE_UP","button","AUXCLICK","renderSeverity","messageOverflows","renderMessage","renderSecondaryActions","renderSource","renderButtons","renderProgress","onDidChangeContent","kind","forEach","severity","remove","asClassNameArray","toSeverityIcon","link","open","parse","allowCommands","scrollWidth","clientWidth","textContent","removeAttribute","secondaryActions","undefined","configureNotificationAction","push","showExpandCollapseAction","context","keybinding","getKeybindingLabel","primaryActions","that","runAction","keepOpen","buttonToolbar","i","length","options","dropdownActions","menu","addButtonWithDropdown","contextMenuProvider","addButton","onDidClick","hide","state","infinite","show","total","worked","hasTotal","setWorked","done","warning","error","info","lookupKeybinding","getLabel","NotificationsList","viewModel","isVisible","list","createNotificationsList","listContainer","listDelegate","setRowLineHeight","horizontalScrolling","overrideStyles","listBackground","accessibilityProvider","NotificationAccessibilityProvider","copyAction","onContextMenu","showContextMenu","getAnchor","getActions","getActionsContext","onMouseDblClick","listFocusTracker","getHTMLElement","onDidBlur","hasFocus","setFocus","bindTo","contextKeyService","onDidChangeSelection","indexes","setSelection","updateNotificationsList","start","deleteCount","items","listHasDOMFocus","activeElement","focusedIndex","getFocus","focusedItem","focusRelativeTop","getRelativeTop","splice","layout","indexToFocus","indexToFocusCandidate","indexOf","reveal","domFocus","updateNotificationHeight","updateElementHeight","focusFirst","maxHeight","dispose","_options","_keybindingService","_configurationService","getAriaLabel","accessibleViewHint","getValue","getWidgetAriaLabel","widgetAriaLabel","getRole","ToastVisibility","NotificationsToasts","MAX_WIDTH","MAX_NOTIFICATIONS","PURGE_TIMEOUT","SPAM_PROTECTION","interval","limit","_isVisible","model","layoutService","themeService","editorGroupService","lifecycleService","hostService","_onDidChangeVisibility","onDidChangeVisibility","mapNotificationToToast","Map","mapNotificationToDisposable","notificationsToastsVisibleContextKey","addedToastsIntervalCounter","registerListeners","onDidLayout","dimension","lift","when","then","notifications","addToast","onDidChangeNotification","onDidChangeFilter","SILENT","ERROR","removeToast","isNotificationsCenterVisible","priority","increment","itemDisposables","set","doAddToast","notificationsToastsContainer","notificationToastContainer","firstToast","firstChild","insertBefore","notificationToast","notificationList","verticalScrollMode","toast","updateToastVisibility","maxDimensions","computeMaxDimensions","layoutLists","layoutContainer","height","onDidChangeExpansion","once","onDidClose","purgeNotification","updateStyles","updateVisibility","fire","disposables","purgeTimeoutHandle","listener","isMouseOverToast","MOUSE_OVER","MOUSE_OUT","hideAfterTimeout","setTimeout","sticky","onDidChangeFocus","focus","clearTimeout","focusEditor","get","focusNext","focusPrevious","delete","notificationDisposables","size","workbenchDimensions","doHide","activeGroup","removeToasts","disposable","toasts","getToasts","VISIBLE","nextToast","previousToast","focusLast","update","isCenterVisible","backgroundColor","getColor","background","widgetShadowColor","boxShadow","borderColor","border","notificationToasts","HIDDEN_OR_VISIBLE","HIDDEN","isToastInDOM","reverse","maxWidth","availableHeight","availableWidth","round","min","heightToGive","visibleToasts","opacity","makeVisible","visible","removeChild","parentElement","NotificationService","storageService","_onDidAddNotification","onDidAddNotification","_onDidRemoveNotification","onDidRemoveNotification","_onDidChangeDoNotDisturbMode","onDidChangeDoNotDisturbMode","_doNotDisturbMode","getBoolean","DND_SETTINGS_KEY","updateDoNotDisturbFilters","original","sourceId","doNotDisturbMode","enabled","store","OFF","setFilter","Array","isArray","m","addNotification","warn","notify","neverShowAgain","scope","toStorageScope","neverShowAgainAction","async","handle","isSecondary","APPLICATION","PROFILE","WORKSPACE","prompt","choices","neverShowAgainChoice","choiceClicked","choice","onDidRun","onCancel","status","showStatusMessage","NotificationsCenter","MAX_DIMENSIONS","notificationService","notificationsCenterVisibleContextKey","notificationsList","notificationsCenterContainer","updateTitle","notificationsCenterTitle","clearAllAction","some","notificationsCenterHeader","notificationsToolBar","toggleDoNotDisturbAction","hideAllAction","detail","headerForeground","color","headerBackground","NotificationsAlerts","triggerAriaAlert","console","toString","doTriggerAriaAlert","alertText","getServiceOverride","accessor","notificationsCenter","notificationsToasts","dom"],"sourceRoot":""}