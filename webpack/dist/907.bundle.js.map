{"version":3,"file":"907.bundle.js","mappings":"8WAiBA,IAAIA,EAAsB,cAAkC,KACxD,WAAAC,CAAYC,EAAaC,GACrBC,QACAC,KAAKC,yBAA2BD,KAAKE,UAAU,IAAI,MACnDF,KAAKG,wBAA0BH,KAAKC,yBAAyBG,MAC7DJ,KAAKK,0BAA4B,KAAMC,KACvCN,KAAKO,mBAAqB,KAAMD,KAChCN,KAAKQ,iBAAmB,KAAMF,KAC9BN,KAAKS,mBAAqB,GAC1BT,KAAKU,eAAiB,GACtBV,KAAKW,0BAA4B,GACjCX,KAAKY,QAAU,GACfZ,KAAKa,MAAQ,EACbb,KAAKc,WAAa,IAAM,GACxBd,KAAKe,YAAc,KACnBf,KAAKgB,eAAiB,KACtBhB,KAAKiB,SAAW,KAAM,EACtBjB,KAAKkB,UAAY,KAAM,EACvBlB,KAAKmB,KAAOC,UAAY,CAAGC,SAAS,EAAMT,QAAS,KACnDZ,KAAKsB,QAAUF,UAAY,CAAGC,SAAS,EAAMT,QAAS,KACtDZ,KAAKuB,OAAS,KACdvB,KAAKwB,UAAY,KACjBxB,KAAKyB,YAAc,KACnBzB,KAAK0B,aAAe,KACpBC,YAAW,KACP,MAAMC,EAAoB,KAAmBC,IAAI,KACjD7B,KAAK8B,wBAA0BF,EAAkBG,6BAA0BC,EAC3E,MAAMC,EAAoBC,IACtB,MAAMC,EAAkB,KACpB,MAAMC,EAAmBR,EAAkBG,uBACvCK,IAAqBpC,KAAK8B,0BAC1B9B,KAAK8B,wBAA0BM,QAAoBJ,EACnDhC,KAAKC,yBAAyBoC,OAClC,EAEJH,EAAOI,qBAAqBH,GAC5BD,EAAOK,uBAAuBJ,EAAgB,EAElDnC,KAAKE,UAAU0B,EAAkBY,gBAAgBP,IACjDL,EAAkBa,kBAAkBC,QAAQT,EAAiB,IAEjEjC,KAAK2C,YAAa,OAAe7C,EAAkBE,KAAK2C,WAAWC,KAAK5C,MAAOH,EACnF,CACA,gBAAM8C,CAAWE,EAASC,EAA0BC,GAEpD,CACA,WAAAC,GAAgB,MAAO,EAAI,GAU/B,SAASC,EAAmBN,GACxB,MAAO,CACH,CAAG,IAAmBO,YAAc,IAAI,IAAe,SAAmBlB,GAAW,GACrF,CAAG,KAAekB,YAAc,IAAI,IAAevD,EAAqB,CAACgD,IAAa,GACtF,CAAG,IAAmBO,YAAc,IAAI,IAAe,IAAmB,IAAI,GAEtF,CAdAvD,GAAsB,OAAW,EAC3B,OAAQ,EAAG,MACdA,GACD,IAASwD,GAAG,KAAiBC,eAAgBC,0BAA0B,CACrEC,OAAQ,KACRC,iBAAkB,KAClBC,aAAeC,IAAQ,G","sources":["webpack://monaco-custom-bundle/./node_modules/vscode/dist/service-override/editor.js"],"sourcesContent":["import { __decorate, __param } from '../node_modules/tslib/tslib.es6.js';\nimport '../missing-services.js';\nimport { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';\nimport { ITextModelService } from 'monaco-editor/esm/vs/editor/common/services/resolverService.js';\nimport { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';\nimport { CodeEditorService } from '../vscode/vs/workbench/services/editor/browser/codeEditorService.js';\nimport { IEditorService } from '../vscode/vs/workbench/services/editor/common/editorService.js';\nimport { EditorExtensions } from '../vscode/vs/workbench/common/editor.js';\nimport { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { ITextEditorService, TextEditorService } from '../vscode/vs/workbench/services/textfile/common/textEditorService.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { FILE_EDITOR_INPUT_ID } from '../vscode/vs/workbench/contrib/files/common/files.js';\nimport { wrapOpenEditor } from './tools/editor.js';\nimport { unsupported } from '../tools.js';\nimport '../vscode/vs/workbench/browser/parts/editor/editor.contribution.js';\nlet SimpleEditorService = class SimpleEditorService extends Disposable {\n    constructor(_openEditor, textModelService) {\n        super();\n        this._onDidActiveEditorChange = this._register(new Emitter());\n        this.onDidActiveEditorChange = this._onDidActiveEditorChange.event;\n        this.onDidVisibleEditorsChange = Event.None;\n        this.onDidEditorsChange = Event.None;\n        this.onDidCloseEditor = Event.None;\n        this.visibleEditorPanes = [];\n        this.visibleEditors = [];\n        this.visibleTextEditorControls = [];\n        this.editors = [];\n        this.count = 0;\n        this.getEditors = () => [];\n        this.openEditors = unsupported;\n        this.replaceEditors = unsupported;\n        this.isOpened = () => false;\n        this.isVisible = () => false;\n        this.save = async () => ({ success: true, editors: [] });\n        this.saveAll = async () => ({ success: true, editors: [] });\n        this.revert = unsupported;\n        this.revertAll = unsupported;\n        this.closeEditor = unsupported;\n        this.closeEditors = unsupported;\n        setTimeout(() => {\n            const codeEditorService = StandaloneServices.get(ICodeEditorService);\n            this.activeTextEditorControl = codeEditorService.getFocusedCodeEditor() ?? undefined;\n            const handleCodeEditor = (editor) => {\n                const onEditorFocused = () => {\n                    const newFocusedEditor = codeEditorService.getFocusedCodeEditor();\n                    if (newFocusedEditor !== this.activeTextEditorControl) {\n                        this.activeTextEditorControl = newFocusedEditor ?? undefined;\n                        this._onDidActiveEditorChange.fire();\n                    }\n                };\n                editor.onDidFocusEditorText(onEditorFocused);\n                editor.onDidFocusEditorWidget(onEditorFocused);\n            };\n            this._register(codeEditorService.onCodeEditorAdd(handleCodeEditor));\n            codeEditorService.listCodeEditors().forEach(handleCodeEditor);\n        });\n        this.openEditor = wrapOpenEditor(textModelService, this.openEditor.bind(this), _openEditor);\n    }\n    async openEditor(_editor, _optionsOrPreferredGroup, _preferredGroup) {\n        return undefined;\n    }\n    findEditors() { return []; }\n};\nSimpleEditorService = __decorate([\n    ( __param(1, ITextModelService))\n], SimpleEditorService);\n( Registry.as(EditorExtensions.EditorFactory)).registerFileEditorFactory({\n    typeId: FILE_EDITOR_INPUT_ID,\n    createFileEditor: unsupported,\n    isFileEditor: (obj) => false\n});\nfunction getServiceOverride(openEditor) {\n    return {\n        [( ICodeEditorService.toString())]: new SyncDescriptor(CodeEditorService, undefined, true),\n        [( IEditorService.toString())]: new SyncDescriptor(SimpleEditorService, [openEditor], true),\n        [( ITextEditorService.toString())]: new SyncDescriptor(TextEditorService, [], false)\n    };\n}\nexport { SimpleEditorService, getServiceOverride as default };\n"],"names":["SimpleEditorService","constructor","_openEditor","textModelService","super","this","_onDidActiveEditorChange","_register","onDidActiveEditorChange","event","onDidVisibleEditorsChange","None","onDidEditorsChange","onDidCloseEditor","visibleEditorPanes","visibleEditors","visibleTextEditorControls","editors","count","getEditors","openEditors","replaceEditors","isOpened","isVisible","save","async","success","saveAll","revert","revertAll","closeEditor","closeEditors","setTimeout","codeEditorService","get","activeTextEditorControl","getFocusedCodeEditor","undefined","handleCodeEditor","editor","onEditorFocused","newFocusedEditor","fire","onDidFocusEditorText","onDidFocusEditorWidget","onCodeEditorAdd","listCodeEditors","forEach","openEditor","bind","_editor","_optionsOrPreferredGroup","_preferredGroup","findEditors","getServiceOverride","toString","as","EditorFactory","registerFileEditorFactory","typeId","createFileEditor","isFileEditor","obj"],"sourceRoot":""}