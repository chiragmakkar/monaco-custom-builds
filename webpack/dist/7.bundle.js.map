{"version":3,"file":"7.bundle.js","mappings":"yUAGA,MAAMA,EAA0B,CAAC,EACjC,SAASC,EAAkBC,EAAWC,GAClC,IAAIC,EAAWJ,EAAwBE,GAClCE,IACDJ,EAAwBE,GAAaE,EAAW,IAEpDA,EAASC,KAAKF,EAClB,CACA,SAASG,EAAgBC,EAAaC,GAClC,IAAK,MAAMC,KAAQF,EAEf,GADAC,EAAOE,cAAcL,KAAKI,IACrBA,EAAKE,MAAO,CACb,MAAMC,EAAWH,EAAKG,SACtB,GAAKA,EAID,IAAK,MAAMC,KAAcD,EAAU,CAC/B,MAAME,EAAMD,EACNE,EAAWf,EAAwBc,GACzC,GAAIC,EAAU,CACV,MAAMC,EAAWJ,EAASE,GAC1B,GAAwB,iBAAbE,EAAuB,CAC9B,MAAMC,EAAU,KAAMC,QAAQF,GAC9B,IAAK,MAAMb,KAAWY,EAClBP,EAAOW,OAAOhB,GAAWc,CAEjC,CACJ,CACY,eAARH,GAAgC,eAARA,GAAgC,cAARA,UACzCF,EAASE,EAExB,MAlBAL,EAAKG,SAAW,CAAC,CAoBzB,CAER,CACAX,EAAkB,aAAcmB,EAAA,KAChCnB,EAAkB,aAAcmB,EAAA,KAChCnB,EAAkB,YAAamB,EAAA,KAC/BnB,EAAkB,oBAAqBmB,EAAA,KACvCnB,EAAkB,0BAA2BmB,EAAA,KAC7CnB,EAAkB,qBAAsBmB,EAAA,KACxCnB,EAAkB,4BAA6BmB,EAAA,KAC/CnB,EAAkB,iBAAkBmB,EAAA,KACpCnB,EAAkB,gBAAiB,kCACnCA,EAAkB,sBAAuB,wCACzCA,EAAkB,qBAAsBmB,EAAA,KACxCnB,EAAkB,qBAAsB,2CACxCA,EAAkB,qBAAsB,2CACxCA,EAAkB,gBAAiBoB,EAAA,IACnCpB,EAAkB,iBAAkBoB,EAAA,IACpCpB,EAAkB,QAASoB,EAAA,IAC3BpB,EAAkB,aAAcoB,EAAA,IAChCpB,EAAkB,QAASoB,EAAA,IAC3BpB,EAAkB,cAAeoB,EAAA,IACjC,MAAMC,EAAe,CAAC,YAAa,UAAW,YAAa,aAAc,WAAY,cAAe,WAAY,YAC5G,kBAAmB,gBAAiB,kBAAmB,mBAAoB,iBAAkB,oBAAqB,iBAAkB,mBAExI,IAAK,MAAML,KAASK,EAChBrB,EAAkBgB,EAAO,YAAcA,G,qCC/D3C,SAASM,EAAMC,GACX,OAEJ,SAAgBA,EAASC,EAAUC,GAC/B,MAAMC,EAAMH,EAAQI,OACpB,IAAIC,EAAM,EACNC,EAAO,EACPC,EAAO,EAIX,SAASC,EAAaC,GAClB,GAAwB,OAApBP,EACAG,GAAYI,OAGZ,KAAOA,EAAK,GAEO,KADAT,EAAQU,WAAWL,IAE9BA,IACAC,IACAC,EAAO,IAGPF,IACAE,KAEJE,GAGZ,CACA,SAASE,EAAaC,GACM,OAApBV,EACAG,EAAMO,EAGNJ,EAAaI,EAAKP,EAE1B,CACA,SAASQ,IACL,KAAOR,EAAMF,GAAK,CACd,MAAMW,EAASd,EAAQU,WAAWL,GAClC,GAAe,KAAXS,GAA6B,IAAXA,GAA4B,KAAXA,GAA6B,KAAXA,EACrD,MAEJN,EAAa,EACjB,CACJ,CACA,SAASO,EAAoBC,GACzB,OAAIhB,EAAQiB,OAAOZ,EAAKW,EAAIZ,UAAYY,IACpCR,EAAaQ,EAAIZ,SACV,EAGf,CACA,SAASc,EAAaF,GAClB,MAAMG,EAAgBnB,EAAQoB,QAAQJ,EAAKX,GAEvCM,GADmB,IAAnBQ,EACaA,EAAgBH,EAAIZ,OAGpBD,EAErB,CACA,SAASkB,EAAaL,GAClB,MAAMG,EAAgBnB,EAAQoB,QAAQJ,EAAKX,GAC3C,IAAuB,IAAnBc,EAAsB,CACtB,MAAMG,EAAItB,EAAQuB,UAAUlB,EAAKc,GAEjC,OADAR,EAAaQ,EAAgBH,EAAIZ,QAC1BkB,CACX,CACK,CACD,MAAMA,EAAItB,EAAQiB,OAAOZ,GAEzB,OADAM,EAAaR,GACNmB,CACX,CACJ,CApEInB,EAAM,GAA+B,QAA1BH,EAAQU,WAAW,KAC9BL,EAAM,GAoEV,IAAImB,EAAQ,EACRC,EAAM,KACV,MAAMC,EAAa,GACbC,EAAW,GACjB,IAAIC,EAAS,KACb,SAASC,EAAUC,EAAUC,GACzBL,EAAW7C,KAAK2C,GAChBG,EAAS9C,KAAK4C,GACdD,EAAQM,EACRL,EAAMM,CACV,CACA,SAASC,IACL,GAA0B,IAAtBN,EAAWtB,OACX,OAAO6B,EAAK,uBAEhBT,EAAQE,EAAWQ,MACnBT,EAAME,EAASO,KACnB,CACA,SAASD,EAAKE,GACV,MAAM,IAAIC,MAAM,eAAiB/B,EAAM,KAAO8B,EAAM,OAASnC,EAAQiB,OAAOZ,EAAK,IAAM,MAC3F,CACA,MAAMgC,EACS,WACP,GAAe,OAAXT,EACA,OAAOK,EAAK,iBAEhB,MAAMK,EAAU,CAAC,EACO,OAApBpC,IACAoC,EAAQpC,GAAmB,CACvBD,SAAUA,EACVK,KAAMA,EACNC,KAAMA,IAGdkB,EAAIG,GAAUU,EACdV,EAAS,KACTC,EAAU,EAAIS,EAClB,EAhBED,EAiBU,WACR,GAAe,OAAXT,EACA,OAAOK,EAAK,iBAEhB,MAAMM,EAAS,GACfd,EAAIG,GAAUW,EACdX,EAAS,KACTC,EAAU,EAAIU,EAClB,EAEEC,EACS,WACP,MAAMF,EAAU,CAAC,EACO,OAApBpC,IACAoC,EAAQpC,GAAmB,CACvBD,SAAUA,EACVK,KAAMA,EACNC,KAAMA,IAGdkB,EAAI5C,KAAKyD,GACTT,EAAU,EAAIS,EAClB,EAZEE,EAaU,WACR,MAAMD,EAAS,GACfd,EAAI5C,KAAK0D,GACTV,EAAU,EAAIU,EAClB,EAqBJ,SAASE,IACL,GAAc,IAAVjB,EAGC,OACMS,EAAK,sBAHZD,GAQR,CAaA,SAASU,IACL,OAAc,IAAVlB,GAGe,IAAVA,EAFES,EAAK,4BAGZD,GAKR,CAeA,SAASW,EAAaC,GAClB,GAAc,IAAVpB,EAAc,CACd,GAAe,OAAXI,EACA,OAAOK,EAAK,iBAEhBR,EAAIG,GAAUgB,EACdhB,EAAS,IACb,MACmB,IAAVJ,EACLC,EAAI5C,KAAK+D,GAGTnB,EAAMmB,CAEd,CACA,SAASC,EAAWD,GAChB,GAAIE,MAAMF,GACN,OAAOX,EAAK,sBAEhB,GAAc,IAAVT,EAAc,CACd,GAAe,OAAXI,EACA,OAAOK,EAAK,iBAEhBR,EAAIG,GAAUgB,EACdhB,EAAS,IACb,MACmB,IAAVJ,EACLC,EAAI5C,KAAK+D,GAGTnB,EAAMmB,CAEd,CACA,SAASG,EAAcH,GACnB,GAAIE,MAAMF,GACN,OAAOX,EAAK,wBAEhB,GAAc,IAAVT,EAAc,CACd,GAAe,OAAXI,EACA,OAAOK,EAAK,iBAEhBR,EAAIG,GAAUgB,EACdhB,EAAS,IACb,MACmB,IAAVJ,EACLC,EAAI5C,KAAK+D,GAGTnB,EAAMmB,CAEd,CACA,SAASI,EAAWJ,GAChB,GAAc,IAAVpB,EAAc,CACd,GAAe,OAAXI,EACA,OAAOK,EAAK,iBAEhBR,EAAIG,GAAUgB,EACdhB,EAAS,IACb,MACmB,IAAVJ,EACLC,EAAI5C,KAAK+D,GAGTnB,EAAMmB,CAEd,CACA,SAASK,EAAWL,GAChB,GAAc,IAAVpB,EAAc,CACd,GAAe,OAAXI,EACA,OAAOK,EAAK,iBAEhBR,EAAIG,GAAUgB,EACdhB,EAAS,IACb,MACmB,IAAVJ,EACLC,EAAI5C,KAAK+D,GAGTnB,EAAMmB,CAEd,CACA,SAASM,EAAWN,GAChB,GAAc,IAAVpB,EAAc,CACd,GAAe,OAAXI,EACA,OAAOK,EAAK,iBAEhBR,EAAIG,GAAUgB,EACdhB,EAAS,IACb,MACmB,IAAVJ,EACLC,EAAI5C,KAAK+D,GAGTnB,EAAMmB,CAEd,CAiBA,SAASO,IACL,IAAI7B,EAAID,EAAa,KACjB+B,GAAW,EAKf,OAJmC,KAA/B9B,EAAEZ,WAAWY,EAAElB,OAAS,KACxBgD,GAAW,EACX9B,EAAIA,EAAEC,UAAU,EAAGD,EAAElB,OAAS,IAE3B,CACHiD,KAAM/B,EAAEgC,OACRF,SAAUA,EAElB,CACA,SAASG,EAAcC,GACnB,GAAIA,EAAIJ,SACJ,MAAO,GAEX,MAAMR,EAAMvB,EAAa,MAEzB,OADAH,EAAa,KACI0B,EAjCNa,QAAQ,gBAAgB,SAAUC,EAAGC,GAC5C,OAAOC,OAAOC,cAAcC,SAASH,EAAI,IAC7C,IAAGF,QAAQ,oBAAoB,SAAUC,EAAGC,GACxC,OAAOC,OAAOC,cAAcC,SAASH,EAAI,IAC7C,IAAGF,QAAQ,kCAAkC,SAAUC,GACnD,OAAQA,GACJ,IAAK,QAAS,MAAO,IACrB,IAAK,OAAQ,MAAO,IACpB,IAAK,OAAQ,MAAO,IACpB,IAAK,SAAU,MAAO,IACtB,IAAK,SAAU,MAAO,IAE1B,OAAOA,CACX,GAqBJ,CACA,KAAOrD,EAAMF,IACTU,MACIR,GAAOF,KAFG,CAKd,MAAMW,EAASd,EAAQU,WAAWL,GAElC,GADAG,EAAa,GACE,KAAXM,EACA,OAAOmB,EAAK,cAEhB,GAAI5B,GAAOF,EACP,OAAO8B,EAAK,2BAEhB,MAAM8B,EAAa/D,EAAQU,WAAWL,GACtC,GAAmB,KAAf0D,EAAoB,CACpBvD,EAAa,GACbU,EAAa,MACb,QACJ,CACA,GAAmB,KAAf6C,EAAoB,CAEpB,GADAvD,EAAa,GACTO,EAAoB,MAAO,CAC3BG,EAAa,UACb,QACJ,CACAA,EAAa,KACb,QACJ,CACA,GAAmB,KAAf6C,EAAoB,CAGpB,GAFAvD,EAAa,GACbK,IACIE,EAAoB,SAAU,CAC9BG,EAAa,KACb,QACJ,CACA,GAAIH,EAAoB,QAAS,CAC7BG,EAAa,KACbuB,IACA,QACJ,CACA,GAAI1B,EAAoB,SAAU,CAC9BG,EAAa,KACbwB,IACA,QACJ,CACA,OAAOT,EAAK,wBAChB,CACA,MAAMuB,EAAML,IACZ,OAAQK,EAAIH,MACR,IAAK,OAvPK,IAAV7B,EACAa,IAEe,IAAVb,EACLgB,KAGAf,EAAM,CAAC,EACiB,OAApBvB,IACAuB,EAAIvB,GAAmB,CACnBD,SAAUA,EACVK,KAAMA,EACNC,KAAMA,IAGdsB,EAAU,EAAIJ,IA0ON+B,EAAIJ,UACJX,IAEJ,SACJ,IAAK,QA/NK,IAAVjB,EACAa,IAEe,IAAVb,EACLgB,KAGAf,EAAM,GACNI,EAAU,EAAIJ,IAyNN+B,EAAIJ,UACJV,IAEJ,SACJ,IAAK,MA/MME,EAgNGW,EAAcC,GA/MlB,IAAVhC,EAOOS,EAAK,oBANG,OAAXL,EACOK,EAAK,kBAEhBL,EAASgB,EA4ML,SACJ,IAAK,SACDD,EAAaY,EAAcC,IAC3B,SACJ,IAAK,OACDX,EAAWmB,WAAWT,EAAcC,KACpC,SACJ,IAAK,UACDT,EAAce,SAASP,EAAcC,GAAM,KAC3C,SACJ,IAAK,OACDR,EAAW,IAAMiB,KAAKV,EAAcC,KACpC,SACJ,IAAK,OACDP,EAAWM,EAAcC,IACzB,SACJ,IAAK,OACDD,EAAcC,GACdN,GAAW,GACX,SACJ,IAAK,QACDK,EAAcC,GACdN,GAAW,GACX,SAER,IAAI,SAASgB,KAAKV,EAAIH,MAGtB,OAAOpB,EAAK,yBAA2BuB,EAAIH,KAC/C,CA9OA,IAAmBT,EA+OnB,OAAOnB,CACX,CApbW0C,CAAOnE,EAAS,KAAM,KACjC,C,eCFA,SAASoE,EAAeC,EAAUC,EAAaC,GAC3C,MAAMC,EAwGV,SAAsBC,GAClB,MAAMC,EAAQ,0CACd,IAAIC,EAAQD,EAAME,KAAKH,GACvB,MAAO,CACHI,KAAM,KACF,IAAKF,EACD,OAAO,KAEX,MAAMG,EAAMH,EAAM,GAElB,OADAA,EAAQD,EAAME,KAAKH,GACZK,CAAG,EAGtB,CArHsBC,CAAaV,GAC/B,IAAIW,EAAQR,EAAUK,OACtB,KAAiB,OAAVG,GAAgB,CACnB,IAAIC,EAAW,EACf,GAAqB,IAAjBD,EAAM5E,QAAoC,MAApB4E,EAAME,OAAO,GAAY,CAC/C,OAAQF,EAAME,OAAO,IACjB,IAAK,IACDD,EAAW,EACX,MACJ,IAAK,IACDA,GAAY,EACZ,MACJ,QACIE,QAAQC,IAAI,oBAAoBJ,uBAExCA,EAAQR,EAAUK,MACtB,CACA,MAAMQ,EAAUC,IAIhB,GAHID,GACAd,EAAQ1F,KAAK,CAAEwG,UAASJ,aAEd,MAAVD,EACA,MAEJA,EAAQR,EAAUK,MACtB,CACA,SAASU,IACL,GAAc,MAAVP,EAAe,CACfA,EAAQR,EAAUK,OAClB,MAAMW,EAAqBD,IAC3B,OAAKC,EAGEC,GACWD,EAAmBC,GAClB,EAAI,GAAK,EAJjB,IAMf,CACA,GAAc,MAAVT,EAAe,CACfA,EAAQR,EAAUK,OAClB,MAAMa,EAkCd,WACI,IAAIL,EAAUC,IACd,IAAKD,EACD,OAAO,KAEX,MAAMM,EAAW,GACjB,KAAON,IACHM,EAAS9G,KAAKwG,GACA,MAAVL,GAA2B,MAAVA,IAFT,CAGR,GACIA,EAAQR,EAAUK,aACH,MAAVG,GAA2B,MAAVA,GAK9BK,EAAUC,GACd,CACA,OAAOG,IACH,IAAIG,EAAMD,EAAS,GAAGF,GACtB,IAAK,IAAII,EAAI,EAAGA,EAAIF,EAASvF,OAAQyF,IACjCD,EAAME,KAAKF,IAAIA,EAAKD,EAASE,GAAGJ,IAEpC,OAAOG,CAAG,CAElB,CA3DoCG,GAI5B,MAHc,MAAVf,IACAA,EAAQR,EAAUK,QAEfa,CACX,CACA,GAAIM,EAAahB,GAAQ,CACrB,MAAMiB,EAAc,GACpB,GACIA,EAAYpH,KAAKmG,GACjBA,EAAQR,EAAUK,aACbmB,EAAahB,IACtB,OAAOS,GAAgBnB,EAAY2B,EAAaR,EACpD,CACA,OAAO,IACX,CACA,SAASH,IACL,IAAID,EAAUE,IACd,IAAKF,EACD,OAAO,KAEX,MAAMM,EAAW,GACjB,KAAON,GACHM,EAAS9G,KAAKwG,GACdA,EAAUE,IAEd,OAAOE,IACH,IAAIS,EAAMP,EAAS,GAAGF,GACtB,IAAK,IAAII,EAAI,EAAGK,GAAO,GAAKL,EAAIF,EAASvF,OAAQyF,IAC7CK,EAAMJ,KAAKI,IAAIA,EAAKP,EAASE,GAAGJ,IAEpC,OAAOS,CAAG,CAElB,CA2BJ,CACA,SAASF,EAAahB,GAClB,QAASA,KAAWA,EAAML,MAAM,WACpC,C,eCxFA,MAAM,EAAkB,IAASwB,GAAG,MAAWC,mBACzC,GAA8B,UAC9BC,EAAwB,CAC1BC,SAAU,CAAC,UAAW,kCACtBC,QAAS,CAAC,SAAU,0BACpBC,SAAU,CAAC,6BAA8B,kBAAmB,UAAW,gBACvEC,QAAS,CAAC,oBACVC,MAAO,CAAC,mBAAoB,oBAAqB,eAAgB,iBACjEC,UAAW,CAAC,uBAAwB,oBACpCC,UAAW,CAAC,WAAY,yBAE5B,MAAMC,SACOC,KAAKC,YAAc,gBAAkB,CAC9C,WAAAC,CAAYC,EAAIC,EAAOC,GACnBL,KAAKM,iBAAmB,GACxBN,KAAKO,kBAAoB,GACzBP,KAAKQ,SAAW,CAAC,EACjBR,KAAKS,eAAiB,CAAC,EACvBT,KAAKU,mBAAqB,GAC1BV,KAAKW,yBAA2B,GAChCX,KAAKY,0BAAuBC,EAC5Bb,KAAKc,qBAAkBD,EACvBb,KAAKG,GAAKA,EACVH,KAAKI,MAAQA,EACbJ,KAAKK,WAAaA,EAClBL,KAAKe,UAAW,CACpB,CACA,wBAAIC,GACA,YAAwCH,IAApCb,KAAKiB,2BACEjB,KAAKiB,gCAEkCJ,IAA9Cb,KAAKkB,qCACElB,KAAKkB,uCAEPlB,KAAKmB,yBAClB,CACA,eAAIC,GACA,IAAKpB,KAAKY,qBAAsB,CAC5B,MAAM1I,EAAS,GACTmJ,EAAarB,KAAKsB,SAAS,QAAqBtB,KAAKuB,WAAW,OAChEC,EAAaxB,KAAKsB,SAAS,QAAqBtB,KAAKuB,WAAW,OACtErJ,EAAOH,KAAK,CACRO,SAAU,CACN+I,WAAYI,EAAeJ,GAC3BG,WAAYC,EAAeD,MAGnC,IAAIE,GAAmB,EACvB,SAASC,EAAQxJ,GACTA,EAAKE,OAASF,EAAKG,WACA,qBAAfH,EAAKE,QACLqJ,GAAmB,GAEvBxJ,EAAOH,KAAK,CAAEM,MAAOF,EAAKE,MAAOC,SAAU,CAAE+I,WAAYI,EAAetJ,EAAKG,SAAS+I,YAAaG,WAAYC,EAAetJ,EAAKG,SAASkJ,YAAaI,UAAWzJ,EAAKG,SAASsJ,aAE1L,CACA5B,KAAKM,iBAAiBuB,QAAQF,GAC9B3B,KAAKO,kBAAkBsB,QAAQF,GAC1BD,GACDI,EAAmB9B,KAAK+B,MAAMF,QAAQF,GAE1C3B,KAAKY,qBAAuB1I,CAChC,CACA,OAAO8H,KAAKY,oBAChB,CACA,QAAAU,CAASzJ,EAASmK,GACd,IAAIrJ,EAAQqH,KAAKS,eAAe5I,GAChC,OAAIc,IAGJA,EAAQqH,KAAKQ,SAAS3I,IACH,IAAfmK,GAAwBpC,EAAA,GAAkBjH,KAC1CA,EAAQqH,KAAKuB,WAAW1J,IAErBc,EACX,CACA,aAAAsJ,CAAcF,EAAMG,EAAWC,EAAUH,GAAa,EAAMI,EAAc,CAAC,GACvE,MAAMlK,EAAS,CACXmJ,gBAAYR,EACZwB,UAAMxB,EACNyB,eAAWzB,EACX0B,mBAAe1B,EACf2B,YAAQ3B,GAEN4B,EAAQ,CACVpB,YAAa,EACbgB,MAAO,EACPC,WAAY,EACZC,eAAgB,EAChBC,QAAS,GAEb,SAASE,EAAcC,EAAYC,EAAOC,GAClCD,EAAMvB,YAAcoB,EAAMpB,YAAcsB,IACxCF,EAAMpB,WAAasB,EACnBzK,EAAOmJ,WAAauB,EAAMvB,WAC1Be,EAAYf,WAAawB,GAE7B,IAAK,MAAMC,IAAK,CAAC,OAAQ,YAAa,gBAAiB,UAAW,CAC9D,MAAMC,EAAWD,EACXE,EAAOJ,EAAMG,QACNlC,IAATmC,GACIP,EAAMM,IAAaJ,IACnBF,EAAMM,GAAYJ,EAClBzK,EAAO6K,GAAYC,EACnBZ,EAAYW,GAAYF,EAGpC,CACJ,CACA,SAASI,EAA0B9K,GAC/B,MAAMwK,EAAaxK,EAAKoF,SAASM,MAAMkE,EAAMG,EAAWC,GACpDQ,GAAc,GACdD,EAAcC,EAAYxK,EAAKyK,MAAOzK,EAE9C,CACA6H,KAAKU,mBAAmBmB,QAAQoB,GAChCjD,KAAKW,yBAAyBkB,QAAQoB,GACtC,IAAIC,GAA4B,EAChC,IAAK,MAAMC,KAAKV,EAAO,CACnB,MAAMjK,EAAM2K,GACQ,IAAhBV,EAAMjK,GACN0K,GAA4B,EAG5BT,EAAMjK,GAAO4K,OAAOC,SAE5B,CACA,GAAIH,EACA,IAAK,MAAM/K,KAAQ,EAA4BmL,8BAA+B,CAC1E,MAAMX,EAAaxK,EAAKoF,SAASM,MAAMkE,EAAMG,EAAWC,GACxD,GAAIQ,GAAc,EAAG,CACjB,IAAIC,EAOJ,GANIzK,EAAKoL,SAASC,gBACdZ,EAAQ5C,KAAKyD,cAActL,EAAKoL,SAASC,eACrCZ,GACAF,EAAcC,EAAYC,EAAOzK,EAAKoL,SAASC,iBAGlDZ,IAAwB,IAAfZ,EAAsB,CAChC,MAAM0B,EAAkBvL,EAAKoL,SAASvD,KAAK+B,MAC3Ca,EAAQ5C,KAAK2D,uBAAuBD,GAChCd,GACAF,EAAcC,EAAYC,EAAOc,EAEzC,CACJ,CACJ,CAEJ,OAAO,KAAWE,SAAS1L,EAC/B,CACA,sBAAAyL,CAAuBD,GACnB,QAAwB7C,IAApB6C,EAAJ,CAGK,GAA+B,iBAApBA,EAA8B,CAC1C,MAAM,KAAE3B,EAAI,UAAEG,EAAS,SAAEC,IAAa,QAAsBuB,EAAiB,IAC7E,OAAO1D,KAAKiC,cAAcF,EAAMG,EAAWC,EAC/C,CACK,MAA+B,iBAApBuB,EACLA,OADN,CAEL,CAEJ,CACA,kBAAAG,GACI,IAAK7D,KAAKc,gBAAiB,CACvB,MAAMgD,EAAQ,IAAMC,EACpB/D,KAAKoB,YAAYS,SAAQ1J,IACrB2L,EAAME,IAAI7L,EAAKG,SAAS+I,YACxByC,EAAME,IAAI7L,EAAKG,SAASkJ,WAAW,IAEvCxB,KAAKU,mBAAmBmB,SAAQrH,GAAKsJ,EAAME,IAAIxJ,EAAEoI,MAAMvB,cACvD,EAA4BiC,8BAA8BzB,SAAQrH,IAC9D,MAAMyJ,EAAezJ,EAAE+I,SAASvD,KAAK+B,MACjCkC,GAAwC,iBAAjBA,GACvBH,EAAME,IAAIC,EAAa5C,WAC3B,IAEJrB,KAAKW,yBAAyBkB,SAAQrH,GAAKsJ,EAAME,IAAIxJ,EAAEoI,MAAMvB,cAC7DrB,KAAKc,gBAAkBgD,CAC3B,CACA,OAAO9D,KAAKc,eAChB,CACA,iBAAIoD,GACA,OAAOlE,KAAK6D,qBAAqBM,SACrC,CACA,qBAAAC,CAAsBC,EAAkBnC,EAAWoC,EAAiBtC,GAAa,EAAMI,EAAc,CAAC,GAClG,MAAM,KAAEL,EAAI,SAAEI,IAAa,QAAsBkC,EAAkBC,GAC7D1B,EAAQ5C,KAAKiC,cAAcF,EAAMG,EAAWC,EAAUH,EAAYI,GACxE,GAAKQ,EAGL,MAAO,CACHvB,WAAYrB,KAAK6D,qBAAqBU,IAAI3B,EAAMvB,YAChDgB,KAAMO,EAAMP,KACZC,UAAWM,EAAMN,UACjBC,cAAeK,EAAML,cACrBC,OAAQI,EAAMJ,OAEtB,CACA,wBAAAgC,CAAyBrM,GACrB,OAAqD,IAAjD6H,KAAKW,yBAAyBrG,QAAQnC,GAC/B,WAEoC,IAA3C6H,KAAKU,mBAAmBpG,QAAQnC,GACzB,aADX,CAIJ,CACA,UAAAoJ,CAAW1J,GACP,OAAO,EAAc4M,oBAAoB5M,EAASmI,KACtD,CACA,aAAAyD,CAAciB,EAAQtC,GACbpC,KAAK2E,0BACN3E,KAAK2E,wBAA4B3E,KAAKM,iBAAiBsE,IAAIC,IAE1D7E,KAAK8E,2BACN9E,KAAK8E,yBAA6B9E,KAAKO,kBAAkBqE,IAAIC,IAEjE,IAAK,MAAMxM,KAASqM,EAAQ,CACxB,IAAIrD,EACAO,EAGAmD,EACAC,EAHAC,GAAmB,EACnBC,GAAkB,EAGtB,SAASC,EAA+BC,EAAeC,GACnD,IAAK,IAAItG,EAAI,EAAGA,EAAIqG,EAAc9L,OAAQyF,IAAK,CAC3C,MAAM0D,EAAQ2C,EAAcrG,GAAG1G,GAC/B,GAAIoK,GAAS,EAAG,CACZ,MAAM6C,EAAcD,EAAatG,GAC3BzG,EAAW+M,EAAatG,GAAGzG,SAC7BmK,GAASwC,GAAmB3M,EAAS+I,aACrCA,EAAa/I,EAAS+I,WACtB4D,EAAkBxC,EAClBuC,EAAwBM,GAExB7C,GAASyC,GAAkBtF,EAAA,GAAetH,EAASsJ,aACnDA,EAAYtJ,EAASsJ,UACrBsD,EAAiBzC,EACjBsC,EAAuBO,EAE/B,CACJ,CACJ,CAGA,GAFAH,EAA+BnF,KAAK2E,wBAAyB3E,KAAKM,kBAClE6E,EAA+BnF,KAAK8E,yBAA0B9E,KAAKO,wBAChDM,IAAfQ,QAA0CR,IAAde,EAM5B,OALIQ,IACAA,EAAYf,WAAa2D,EACzB5C,EAAYC,KAAOD,EAAYI,OAASJ,EAAYE,UAAYF,EAAYG,cAAgBwC,EAC5F3C,EAAY/J,MAAQA,GAEjB,KAAWkN,aAAalE,EAAYO,EAEnD,CAEJ,CACA,OAAA4D,CAAQ3N,GACJ,OAAOmI,KAAKS,eAAegF,eAAe5N,IAAYmI,KAAKQ,SAASiF,eAAe5N,EACvF,CACA,iBAAA6N,CAAkBpN,GACd0H,KAAK2F,gBAAgBrN,EAASsN,qBAC9B5F,KAAK6F,qBAAqBvN,EAASwN,0BACnC9F,KAAK+F,6BAA6BzN,EAAS0N,iCAC/C,CACA,eAAAL,CAAgB9M,GACZmH,KAAKS,eAAiB,CAAC,EACvBT,KAAKiG,sBAAsBpN,GAC3B,MAAMqN,EAAsBlG,KAAKmG,uBAAuBtN,GACpD+G,EAAA,GAAesG,IACflG,KAAKiG,sBAAsBC,GAE/BlG,KAAKc,qBAAkBD,EACvBb,KAAKY,0BAAuBC,EAC5Bb,KAAK8E,8BAA2BjE,CACpC,CACA,qBAAAoF,CAAsBpN,GAClB,IAAK,MAAMsH,KAAMtH,EAAQ,CACrB,MAAMuN,EAAWvN,EAAOsH,GACA,iBAAbiG,IACPpG,KAAKS,eAAeN,GAAQ,KAAMvH,QAAQwN,GAElD,CACJ,CACA,oBAAAP,CAAqBtF,GACjBP,KAAKO,kBAAoB,GACzBP,KAAKkB,0CAAuCL,EAC5Cb,KAAKqG,qBAAqB9F,GAC1B,MAAM+F,EAA2BtG,KAAKmG,uBAAuB5F,GACzDX,EAAA,GAAe0G,IACftG,KAAKqG,qBAAqBC,GAE9BtG,KAAKc,qBAAkBD,EACvBb,KAAKY,0BAAuBC,EAC5Bb,KAAK8E,8BAA2BjE,CACpC,CACA,4BAAAkF,CAA6BQ,GAGzB,GAFAvG,KAAKW,yBAA2B,GAChCX,KAAKiB,gCAA6BJ,EAC9B0F,EAAqB,CACrBvG,KAAKiB,2BAA6BsF,EAAoBC,QAClDD,EAAoBE,OACpBzG,KAAK0G,uBAAuBH,EAAoBE,OAEpD,MAAMP,EAAsBlG,KAAKmG,uBAAuBI,GACpD3G,EAAA,GAAesG,UACqBrF,IAAhCqF,EAAoBM,UACpBxG,KAAKiB,2BAA6BiF,EAAoBM,SAEtDN,EAAoBO,OACpBzG,KAAK0G,uBAAuBR,EAAoBO,OAG5D,CACAzG,KAAKc,qBAAkBD,EACvBb,KAAKY,0BAAuBC,CAChC,CACA,YAAA8F,CAAanO,GACT,OAAOA,EAAI4F,OAAO,KAAO,MAA0B5F,EAAI4F,OAAO5F,EAAIc,OAAS,KAAO,IACtF,CACA,iBAAAsN,CAAkBC,GACd,MAAMC,EAAmBD,EAAQzI,OAAO,GAClC2I,EAAkBF,EAAQzI,OAAOyI,EAAQvN,OAAS,GAClD0N,EAAgBH,EAAQI,MAAM,GAAI,GAClCC,EAAeL,EAAQI,MAAM,GAAI,GACjCE,EAAgBN,EAAQI,MAAM,GACpC,OAAOJ,IAAY7G,KAAKK,YAChBL,KAAKK,WAAW+G,SAASF,IAAiBJ,IAAqB,MAAwBC,IAAoB,MAC3G/G,KAAKK,WAAWgH,WAAWL,IAAkBD,IAAoB,MACjE/G,KAAKK,WAAWiH,SAASH,IAAkBL,IAAqB,IAC5E,CACA,sBAAAX,CAAuBtN,GACnB,IAAIqN,EACJ,IAAK,MAAM1N,KAAOK,EAAQ,CACtB,MAAM0O,EAAe1O,EAAOL,GAC5B,GAAIwH,KAAK2G,aAAanO,IAAQ+O,aAAwBC,SAAWC,MAAMC,QAAQH,GAAe,CAC1F,MAAMI,EAAiBnP,EAAIqF,MAAM,OAAoB,GACrD,IAAK,MAAM+J,KAAcD,EAAgB,CACrC,MAAMd,EAAUe,EAAWnN,UAAU,EAAGmN,EAAWtO,OAAS,GAC5D,GAAI0G,KAAK4G,kBAAkBC,GAAU,CAC5BX,IACDA,EAAsB,CAAC,GAE3B,MAAM2B,EAA4BN,EAClC,IAAK,MAAMO,KAAUD,EAA2B,CAC5C,MAAME,EAAiB7B,EAAoB4B,GACrCE,EAAiBH,EAA0BC,GAC7CL,MAAMC,QAAQK,IAAmBN,MAAMC,QAAQM,GAC/C9B,EAAoB4B,GAAUC,EAAeE,OAAOD,GAE/CA,IACL9B,EAAoB4B,GAAUE,EAEtC,CACJ,CACJ,CACJ,CACJ,CACA,OAAO9B,CACX,CACA,sBAAAQ,CAAuBwB,GACnB,IAAK,MAAM1P,KAAO0P,EACd,IAAKlI,KAAK2G,aAAanO,GACnB,IACI,MAAML,EAAOgQ,EAAsB3P,EAAK0P,EAAwB1P,IAC5DL,GACA6H,KAAKW,yBAAyB5I,KAAKI,EAE3C,CACA,MAAOiQ,GACP,CAGZ,CACA,oBAAA/B,CAAqB9F,GACjB,IAAK,MAAM8H,KAAc9I,EAAuB,CAC5C,MAAM+I,EAAQD,EACRE,EAAQhI,EAAkB+H,GAChC,GAAIC,EAAO,CACP,MAAMjQ,EAA4B,iBAAViQ,EAAqB,CAAElH,WAAYkH,GAAUA,EAC/D7D,EAASnF,EAAsB+I,GACrC,IAAK,MAAMjQ,KAASqM,EAChB1E,KAAKO,kBAAkBxI,KAAK,CAAEM,QAAOC,YAE7C,CACJ,CACA,GAAImP,MAAMC,QAAQnH,EAAkBnI,eAChC,IAAK,MAAMD,KAAQoI,EAAkBnI,cAC7BD,EAAKE,OAASF,EAAKG,UACnB0H,KAAKO,kBAAkBxI,KAAKI,QAIO0I,IAA3CN,EAAkBS,uBAClBhB,KAAKkB,qCAAuCX,EAAkBS,qBAEtE,CACA,YAAAwH,CAAaC,GACT,OAAQzI,KAAKe,SAAuD2H,QAAQC,aAAQ9H,GAA5Db,KAAK4I,KAAKH,EACtC,CACA,MAAAI,CAAOJ,GACH,OAAOzI,KAAK4I,KAAKH,EACrB,CACA,IAAAG,CAAKH,GACD,IAAKzI,KAAK8I,SACN,OAAOJ,QAAQC,aAAQ9H,GAE3Bb,KAAKM,iBAAmB,GACxBN,KAAK+I,cACL,MAAM7Q,EAAS,CACXW,OAAQ,CAAC,EACTT,cAAe,GACfsI,mBAAoB,GACpBM,sBAAsB,GAE1B,OAAOgI,EAAgBP,EAAgCzI,KAAK8I,SAAU5Q,GAAQ+Q,MAAKrM,IAC/EoD,KAAKe,UAAW,EAChBf,KAAKU,mBAAqBxI,EAAOwI,mBACjCV,KAAKQ,SAAWtI,EAAOW,OACvBmH,KAAKM,iBAAmBpI,EAAOE,cAC/B4H,KAAKmB,0BAA4BjJ,EAAO8I,oBAAoB,GAEpE,CACA,WAAA+H,GACI/I,KAAKc,qBAAkBD,EACvBb,KAAKY,0BAAuBC,EAC5Bb,KAAK2E,6BAA0B9D,EAC/Bb,KAAK8E,8BAA2BjE,CACpC,CACA,SAAAqI,CAAUC,GACN,MAAMC,EAAe,CAAC,EACtB,IAAK,MAAM5Q,KAAOwH,KAAKQ,SACnB4I,EAAa5Q,GAAO,KAAM6Q,OAAOC,IAAIC,WAAWvJ,KAAKQ,SAAShI,IAAM,GAExE,MAAM+P,EAAQiB,KAAKC,UAAU,CACzBtJ,GAAIH,KAAKG,GACTC,MAAOJ,KAAKI,MACZC,WAAYL,KAAKK,WACjBC,iBAAoBN,KAAKM,iBAAiBsE,KAAI8E,IAAM,CAAGpR,SAAUoR,EAAGpR,SAAUD,MAAOqR,EAAGrR,UACxFqI,mBAAsBV,KAAKU,mBAAmBkE,IAAI,KAAkB+E,cACpEC,cAAe,KAAcD,aAAa3J,KAAK4J,eAC/CzI,0BAA2BnB,KAAKmB,0BAChCX,SAAU4I,EACVS,MAAO7J,KAAK6J,QAEhBV,EAAeW,MAAM/J,EAAeE,YAAasI,EAAO,EAAI,EAChE,CACA,aAAIwB,GACA,OAAO/J,KAAKgK,WAAW,EAC3B,CACA,cAAIA,GACA,OAAOhK,KAAKG,GAAG8J,MAAM,IACzB,CACA,QAAIlI,GACA,OAAQ/B,KAAK+J,WACT,KAAK,KAAgB,OAAO,KAAYG,MACxC,KAAK,KAAa,OAAO,KAAYC,mBACrC,KAAK,KAAmB,OAAO,KAAYC,oBAC3C,QAAS,OAAO,KAAYC,KAEpC,CACA,sCAAOC,CAAgCC,EAAW/J,GAC9C,OAAOT,EAAeyK,qBAAoB,QAAqBD,GAAY/J,EAC/E,CACA,0BAAOgK,CAAoBrK,EAAIK,GAC3B,MAAMiK,EAAY,IAAM1K,EAAeI,EAAI,GAAI,KAAOA,GAItD,GAHAsK,EAAU1J,UAAW,EACrB0J,EAAUnK,iBAAmB,GAC7BmK,EAAUZ,OAAQ,EACdrJ,EACA,IAAK,MAAML,KAAMK,EACbiK,EAAUjK,SAASL,GAAQ,KAAMvH,QAAQ4H,EAASL,IAG1D,OAAOsK,CACX,CACA,6BAAOC,CAAuBvK,EAAIE,GAC9B,MAAMoK,EAAY,IAAM1K,EAAeI,EAAI,GAAIE,GAI/C,OAHAoK,EAAU1J,UAAW,EACrB0J,EAAUnK,iBAAmB,GAC7BmK,EAAUZ,OAAQ,EACXY,CACX,CACA,sBAAOE,CAAgBxB,GACnB,MAAMxL,EAAQwL,EAAe5E,IAAIxE,EAAeE,YAAa,GAC7D,GAAKtC,EAGL,IACI,MAAMiN,EAAOpB,KAAKvQ,MAAM0E,GAClBkN,EAAQ,IAAM9K,EAAe,GAAI,GAAI,IAC3C,IAAK,MAAMvH,KAAOoS,EACd,OAAQpS,GACJ,IAAK,WAAY,CACb,MAAM4Q,EAAewB,EAAKpS,GAC1B,IAAK,MAAM2H,KAAMiJ,EACbyB,EAAMrK,SAASL,GAAQ,KAAMvH,QAAQwQ,EAAajJ,IAEtD,KACJ,CACA,IAAK,mBACL,IAAK,KACL,IAAK,QACL,IAAK,aACL,IAAK,QACL,IAAK,4BACD0K,EAAMrS,GAAOoS,EAAKpS,GAClB,MACJ,IAAK,qBAAsB,CACvB,MAAMsS,EAAYF,EAAKpS,GACvB,GAAIiP,MAAMC,QAAQoD,GACd,IAAK,MAAMC,KAAKD,EAAW,CACvB,MAAM3S,EAAO,KAAkB6S,eAAe,EAA6BD,GACvE5S,GACA0S,EAAMnK,mBAAmB3I,KAAKI,EAEtC,CAEJ,KACJ,CACA,IAAK,WACD,MACJ,IAAK,gBACD0S,EAAMjB,cAAgB,KAAcoB,eAAeJ,EAAKhB,eAIpE,IAAKiB,EAAM1K,KAAO0K,EAAMxK,WACpB,OAEJ,OAAOwK,CACX,CACA,MAAOzC,GACH,MACJ,CACJ,CACA,yBAAO6C,CAAmBJ,EAAOK,EAAoBtB,GACjD,MAAMG,EAAYc,EAAe,SAAK,UAChCM,EAad,SAAuBC,EAAaC,GAC5BA,EAAKhE,WAAW,QAChBgE,EAAOA,EAAKlR,OAAO,IAEvB,IAAID,EAAM,GAAGkR,KAAeC,IAK5B,OAJAnR,EAAMA,EAAIyC,QAAQ,kBAAmB,KACjCzC,EAAIkE,OAAO,GAAGP,MAAM,YACpB3D,EAAM,IAAMA,GAETA,CACX,CAvB8BoR,CAAc1B,EAAcwB,YAAaP,EAAMQ,MAC/DlL,EAAK,GAAG4J,KAAaoB,IACrB/K,EAAQyK,EAAMzK,QAAS,QAASyK,EAAMQ,MACtChL,EAAawK,EAAM1K,IAAMC,EACzBqK,EAAY,IAAM1K,EAAeI,EAAIC,EAAOC,GAMlD,OALAoK,EAAUc,YAAcV,EAAMU,YAC9Bd,EAAUZ,OAAyB,IAAjBgB,EAAMW,OACxBf,EAAU3B,SAAWoC,EACrBT,EAAUb,cAAgBA,EAC1Ba,EAAU1J,UAAW,EACd0J,CACX,EAaJgB,eAAezC,EAAgBP,EAAgCiD,EAAexT,GAC1E,GAAyC,UAArCyT,EAAA,GAAkBD,GA6ElB,OAAOE,EAAkBnD,EAAgCiD,EAAexT,GA7E1B,CAC9C,MAAMgB,QAAgBuP,EAA+BoD,sBAAsBH,GACrEI,EAAS,GACTC,EAAeC,EAAA,GAAW9S,EAAS4S,GACzC,GAAIA,EAAOxS,OAAS,EAChB,OAAOoP,QAAQuD,OAAO,IAAM3Q,MAAQ4Q,EAAA,GAChC,wBACA,wCACEJ,EAAOlH,KAAIwD,IAAK,OAAqBA,EAAE+D,SAASC,KAAK,SAG1D,GAAuC,WAAnCJ,EAAA,GAAiBD,GACtB,OAAOrD,QAAQuD,OAAO,IAAM3Q,MAAQ4Q,EAAA,GAChC,sBACA,0DAMR,GAHIH,EAAaM,eACPrD,EAAgBP,EAAgCkD,EAAA,GAAmBA,EAAA,GAAkBD,GAAgBK,EAAaM,SAAUnU,GAElIuP,MAAMC,QAAQqE,EAAazT,UAE3B,OADAN,EAAgB+T,EAAazT,SAAUJ,GAChC,KAEXA,EAAO8I,qBAAuB9I,EAAO8I,sBAAwB+K,EAAa/K,qBAC1E,MAAMnI,EAASkT,EAAalT,OAC5B,GAAIA,EAAQ,CACR,GAAsB,iBAAXA,EACP,OAAO6P,QAAQuD,OAAO,IAAM3Q,MAAQ4Q,EAAA,GAChC,CAAE1T,IAAK,6BAA8B8T,QAAS,CAAC,+EAC/C,oFACEZ,EAAca,cAGxB,IAAK,MAAM1U,KAAWgB,EAEM,iBADPA,EAAOhB,KAEpBK,EAAOW,OAAOhB,GAAa,KAAMe,QAAQC,EAAOhB,IAG5D,CACA,MAAMuJ,EAAc2K,EAAa3K,YACjC,GAAIA,EACA,GAAIqG,MAAMC,QAAQtG,GACdlJ,EAAOE,cAAcL,QAAQqJ,OAE5B,IAA2B,iBAAhBA,EAIZ,OAAOsH,QAAQuD,OAAO,IAAM3Q,MAAQ4Q,EAAA,GAChC,CAAE1T,IAAK,kCAAmC8T,QAAS,CAAC,+EACpD,+IACEZ,EAAca,oBANdX,EAAkBnD,EAAgCkD,EAAA,GAAmBA,EAAA,GAAkBD,GAAgBtK,GAAclJ,EAQ/H,CAEJ,MAAMqO,EAAsBwF,EAAaxF,oBACzC,GAAIA,GAAsD,iBAAxBA,EAC9B,IAAK,MAAM/N,KAAO+N,EACd,IACI,MAAMpO,EAAOgQ,EAAsB3P,EAAK+N,EAAoB/N,IACxDL,GACAD,EAAOwI,mBAAmB3I,KAAKI,EAEvC,CACA,MAAOiQ,GACH,OAAOM,QAAQuD,OAAO,IAAM3Q,MAAQ4Q,EAAA,GAChC,CAAE1T,IAAK,0CAA2C8T,QAAS,CAAC,+EAC5D,oGACEZ,EAAca,aAExB,CAGZ,CAIJ,CACA,SAASX,EAAkBnD,EAAgCiD,EAAexT,GACtE,OAAOuQ,EAA+BoD,sBAAsBH,GAAezC,MAAK/P,IAC5E,IACI,MACMZ,EADeW,EAAMC,GACGZ,SAC9B,OAAKmP,MAAMC,QAAQpP,IAMnBN,EAAgBM,EAAUJ,GACnBwQ,QAAQC,QAAQ,OANZD,QAAQuD,OAAO,IAAM3Q,MAAQ4Q,EAAA,GAChC,4BACA,gEAKZ,CACA,MAAO9D,GACH,OAAOM,QAAQuD,OAAO,IAAM3Q,MAAQ4Q,EAAA,GAAa,oBAAqB,qCAAsC9D,EAAEoE,UAClH,KACDL,GACQzD,QAAQuD,OAAO,IAAM3Q,MAAQ4Q,EAAA,GAChC,mBACA,yCACER,EAAca,WAChBJ,EAAMK,YAGlB,CACA,MAAM1K,EAAqB,CACvB,MAAS,CACL,CAAEzJ,MAAO,mBAAoBC,SAAU,CAAE+I,WAAY,YACrD,CAAEhJ,MAAO,mBAAoBC,SAAU,CAAE+I,WAAY,YACrD,CAAEhJ,MAAO,oBAAqBC,SAAU,CAAE+I,WAAY,YACtD,CAAEhJ,MAAO,oBAAqBC,SAAU,CAAE+I,WAAY,aAE1D,KAAQ,CACJ,CAAEhJ,MAAO,mBAAoBC,SAAU,CAAE+I,WAAY,YACrD,CAAEhJ,MAAO,mBAAoBC,SAAU,CAAE+I,WAAY,YACrD,CAAEhJ,MAAO,oBAAqBC,SAAU,CAAE+I,WAAY,YACtD,CAAEhJ,MAAO,oBAAqBC,SAAU,CAAE+I,WAAY,aAE1D,QAAW,CACP,CAAEhJ,MAAO,mBAAoBC,SAAU,CAAE+I,WAAY,YACrD,CAAEhJ,MAAO,mBAAoBC,SAAU,CAAE+I,WAAY,YACrD,CAAEhJ,MAAO,oBAAqBC,SAAU,CAAE+I,WAAY,YACtD,CAAEhJ,MAAO,oBAAqBC,SAAU,CAAE+I,WAAY,aAE1D,OAAU,CACN,CAAEhJ,MAAO,mBAAoBC,SAAU,CAAE+I,WAAY,YACrD,CAAEhJ,MAAO,mBAAoBC,SAAU,CAAE+I,WAAY,YACrD,CAAEhJ,MAAO,oBAAqBC,SAAU,CAAE+I,WAAY,YACtD,CAAEhJ,MAAO,oBAAqBC,SAAU,CAAE+I,WAAY,cAGxDoL,EAAWC,IAAY,EAC7B,SAASC,EAAYC,EAAYvU,GAC7B,SAASwU,EAAaC,EAAGC,GACrB,IAAK,IAAIhO,EAAIgO,EAAa,EAAGhO,GAAK,EAAGA,IACjC,GAAIiO,EAAkBF,EAAGF,EAAW7N,IAChC,OAAOA,EAGf,OAAQ,CACZ,CACA,GAAI1G,EAAMiB,OAASsT,EAAWtT,OAC1B,OAAQ,EAEZ,IAAI2T,EAAiB5U,EAAMiB,OAAS,EAChC4T,EAAsBL,EAAaxU,EAAM4U,KAAmBL,EAAWtT,QAC3E,GAAI4T,GAAuB,EAAG,CAC1B,MAAMzK,EAAoC,OAA3ByK,EAAsB,GAAeN,EAAWM,GAAqB5T,OACpF,KAAO2T,GAAkB,GAErB,GADAC,EAAsBL,EAAaxU,EAAM4U,KAAmBC,IAC/B,IAAzBA,EACA,OAAQ,EAGhB,OAAOzK,CACX,CACA,OAAQ,CACZ,CACA,SAASuK,EAAkBG,EAAeC,GACtC,IAAKD,EACD,OAAO,EAEX,GAAIA,IAAkBC,EAClB,OAAO,EAEX,MAAM/T,EAAM+T,EAAU9T,OACtB,OAAO6T,EAAc7T,OAASD,GAAO8T,EAAchT,OAAO,EAAGd,KAAS+T,GAAoC,MAAvBD,EAAc9T,EACrG,CACA,SAASwL,EAAgB1M,GACrB,MAAMkV,EAAYlV,EAAKE,MACvB,IAAKgV,IAAclV,EAAKG,SACpB,OAAOmU,EAEX,MAAM5N,EAAW,GACjB,GAAI4I,MAAMC,QAAQ2F,GACd,IAAK,MAAMC,KAAMD,EACb/P,EAAegQ,EAAIX,EAAa9N,QAIpCvB,EAAe+P,EAAWV,EAAa9N,GAE3C,OAAwB,IAApBA,EAASvF,OACFmT,EAEHpU,IACJ,IAAIyG,EAAMD,EAAS,GAAGN,QAAQlG,GAC9B,IAAK,IAAI0G,EAAI,EAAGA,EAAIF,EAASvF,OAAQyF,IACjCD,EAAME,KAAKF,IAAIA,EAAKD,EAASE,GAAGR,QAAQlG,IAE5C,OAAOyG,CAAG,CAElB,CACA,SAASqJ,EAAsBoF,EAAgBjV,GAC3C,MAAMiF,EAAW,EAA4BiQ,mBAAmBD,GAChE,IAAI3K,EAOJ,GANwB,iBAAbtK,EACPsK,EAAQ,KAAW2C,aAAajN,OAAUuI,GAUlD,SAA4C+B,GACxC,OAAOA,IAAUhD,EAAA,GAAegD,EAAMvB,aAAezB,EAAA,GAAegD,EAAMhB,YAAchC,EAAA,GAAgBgD,EAAMJ,SACvG5C,EAAA,GAAgBgD,EAAMN,YAAc1C,EAAA,GAAgBgD,EAAML,gBAAkB3C,EAAA,GAAgBgD,EAAMP,MAC7G,CAXaoL,CAAmCnV,KACxCsK,EAAQ,KAAW2C,aAAajN,EAAS+I,WAAY/I,EAASsJ,UAAWtJ,EAAS+J,KAAM/J,EAASgK,UAAWhK,EAASiK,cAAejK,EAASkK,SAE7II,EACA,MAAO,CAAErF,WAAUqF,QAG3B,CAKA,MAAMmB,EACF,WAAA7D,GACIF,KAAK0N,aAAe,EACpB1N,KAAK2N,UAAY,GACjB3N,KAAK4N,UAAYpG,OAAOqG,OAAO,KACnC,CACA,GAAA7J,CAAIrL,GAEA,QAAckI,KADdlI,EAAQ8I,EAAe9I,IAEnB,OAAO,EAEX,IAAI4P,EAAQvI,KAAK4N,UAAUjV,GAC3B,OAAI4P,IAGJA,IAAUvI,KAAK0N,aACf1N,KAAK4N,UAAUjV,GAAS4P,EACxBvI,KAAK2N,UAAUpF,GAAS5P,EACjB4P,EACX,CACA,GAAAhE,CAAI5L,GAEA,QAAckI,KADdlI,EAAQ8I,EAAe9I,IAEnB,OAAO,EAGX,OADcqH,KAAK4N,UAAUjV,KAI7B0F,QAAQC,IAAI,SAAS3F,mBACd,EACX,CACA,OAAAwL,GACI,OAAOnE,KAAK2N,UAAU1G,MAAM,EAChC,EAEJ,SAASxF,EAAe9I,GACpB,IAAKA,EACD,OAEiB,iBAAVA,IACPA,EAAQ,KAAM0Q,OAAOC,IAAIC,WAAW5Q,GAAO,IAE/C,MAAMU,EAAMV,EAAMW,OAClB,GAA4B,KAAxBX,EAAMiB,WAAW,IAAuB,IAARP,GAAqB,IAARA,GAAqB,IAARA,GAAqB,IAARA,EACvE,OAEJ,MAAMnB,EAAS,CAAC,IAChB,IAAK,IAAI6G,EAAI,EAAGA,EAAI1F,EAAK0F,IAAK,CAC1B,MAAM+O,GAcIC,EAdapV,EAAMiB,WAAWmF,KAe5B,IAAOgP,GAAY,IAAOA,GAAY,IAAOA,GAAY,GAC9DA,EAEFA,GAAY,IAAOA,GAAY,IAC7BA,EAAW,GAAM,GAErB,EApBH,IAAKD,EACD,OAEJ5V,EAAOH,KAAK+V,GACA,IAARzU,GAAqB,IAARA,GACbnB,EAAOH,KAAK+V,EAEpB,CAMJ,IAAkBC,EAFd,OAHsB,IAAlB7V,EAAOoB,QAA8B,KAAdpB,EAAO,IAA4B,KAAdA,EAAO,KACnDA,EAAOoB,OAAS,GAEbwD,OAAOkR,gBAAgB9V,EAClC,C,oCCj1BA,MAAM+V,EAAc,eACdC,EAAiB,yCACjBC,EAAkB,+CAClBC,EAAgB,kBAGhBC,EAAS,CACXtM,KAAM,SACNuM,eAAe,EACfC,qBAAqB,EACrBC,WAAY,CACRC,MAAO,CACH1M,KAAM,QACN2M,MAAO,CACH3M,KAAM,SACNyM,WAAY,CACRrO,GAAI,CACA4B,KAAM,SACNwJ,YAAeW,EAAA,GAAa,YAAa,uBACzCyC,QAASV,EACTW,oBAAuB1C,EAAA,GACnB,wBACA,qEAGR2C,IAAK,CACD9M,KAAM,QACNwJ,YAAeW,EAAA,GAAa,aAAc,6BAC1CwC,MAAO,CACH3M,KAAM,SACNyM,WAAY,CACRnD,KAAM,CACFtJ,KAAM,SACNwJ,YAAeW,EAAA,GACX,mBACA,oEAGR4C,OAAQ,CACJ/M,KAAM,SACNwJ,YAAeW,EAAA,GAAa,qBAAsB,2BAClD6C,KAAM,CAAC,OAAQ,QAAS,WAAY,WAAY,oBAAqB,SAG7EC,SAAU,CACN,OACA,YAIZC,OAAQ,CACJlN,KAAM,SACNwJ,YAAeW,EAAA,GACX,qBACA,8GAEJgD,MAAO,CACH,CAAEH,KAAM,CAAC,SAAU,OAAQ,UAAW,WACtC,CAAEhN,KAAM,SAAU4M,QAASR,KAGnCvL,MAAO,CACHb,KAAM,SACNwJ,YAAeW,EAAA,GACX,oBACA,4GAEJgD,MAAO,CACH,CAAEH,KAAM,CAAC,SAAU,SAAU,YAC7B,CAAEhN,KAAM,SAAU4M,QAAST,MAIvCc,SAAU,CACN,KACA,SAIZG,gBAAiB,CACb5D,YAAeW,EAAA,GAAa,yBAA0B,iDACtDkD,KAAM,QChFZ,EAAS,CACXrN,KAAM,SACNuM,eAAe,EACfC,qBAAqB,EACrBnM,YAAa,CACTiN,eAAgB,CACZtN,KAAM,SACNwJ,YAAeW,EAAA,GACX,wBACA,uIAGRoD,OAAQ,CACJvN,KAAM,SACNwJ,YAAeW,EAAA,GACX,gBACA,wGAGRqD,KAAM,CACFxN,KAAM,SACNwJ,YAAeW,EAAA,GACX,cACA,wGAGRsD,YAAa,CACTzN,KAAM,SACNwJ,YAAeW,EAAA,GACX,qBACA,yLAEJuD,qBAAsB,CAClB1N,KAAM,SACNwJ,YAAeW,EAAA,GAAa,oBAAqB,wDAGzDwD,oBAAqB,CACjB3N,KAAM,SACNwJ,YAAeW,EAAA,GACX,6BACA,8MAEJuD,qBAAsB,CAClB1N,KAAM,SACNwJ,YAAeW,EAAA,GACX,4BACA,wDAIZyD,eAAgB,CACZ5N,KAAM,SACNwJ,YAAeW,EAAA,GACX,wBACA,+NAEJuD,qBAAsB,CAClB1N,KAAM,SACNwJ,YAAeW,EAAA,GACX,uBACA,wDAIZ0D,UAAW,CACP7N,KAAM,SACNwJ,YAAeW,EAAA,GACX,mBACA,sPAEJuD,qBAAsB,CAClB1N,KAAM,SACNwJ,YAAeW,EAAA,GAAa,kBAAmB,wDAGvD2D,YAAa,CACT9N,KAAM,SACNwJ,YAAeW,EAAA,GACX,qBACA,mHAEJuD,qBAAsB,CAClB1N,KAAM,SACNwJ,YAAeW,EAAA,GAAa,oBAAqB,wDAGzD4D,aAAc,CACV/N,KAAM,SACNyM,WAAY,CACRa,eAAgB,CACZD,KAAM,gCAEVE,OAAQ,CACJF,KAAM,wBAEVG,KAAM,CACFH,KAAM,sBAEVI,YAAa,CACTJ,KAAM,6BAEVM,oBAAqB,CACjBN,KAAM,qCAEVO,eAAgB,CACZP,KAAM,gCAEVQ,UAAW,CACPR,KAAM,2BAEVS,YAAa,CACTT,KAAM,gCAKtBZ,WAAY,CACRC,MAAO,CACH1M,KAAM,QACNwJ,YAAeW,EAAA,GAAa,eAAgB,gDAC5CwC,MAAO,CACH3M,KAAM,SACNyM,WAAY,CACRrO,GAAI,CACA4B,KAAM,SACNwJ,YAAeW,EAAA,GAAa,YAAa,uBACzCyC,QAASV,EACTW,oBAAuB1C,EAAA,GACnB,wBACA,oEAGR2C,IAAK,CACD9M,KAAM,QACNwJ,YAAeW,EAAA,GAAa,aAAc,6BAC1CwC,MAAO,CACH3M,KAAM,SACNyM,WAAY,CACRnD,KAAM,CACFtJ,KAAM,SACNwJ,YAAeW,EAAA,GACX,mBACA,iEAGR4C,OAAQ,CACJ/M,KAAM,SACNwJ,YAAeW,EAAA,GAAa,qBAAsB,2BAClD6C,KAAM,CAAC,OAAQ,QAAS,WAAY,WAAY,oBAAqB,SAG7EC,SAAU,CACN,OACA,YAIZC,OAAQ,CACJlN,KAAM,SACNwJ,YAAeW,EAAA,GACX,qBACA,8GAEJyC,QAASR,GAEbvL,MAAO,CACHb,KAAM,SACNwJ,YAAeW,EAAA,GACX,oBACA,4GAEJyC,QAAST,GAEb6B,KAAM,CACFhO,KAAM,SACNwJ,YAAeW,EAAA,GACX,mBACA,kHAEJyC,QAASP,IAGjBY,SAAU,CACN,KACA,SAIZG,gBAAiB,CACbpN,KAAM,SACNwJ,YAAeW,EAAA,GACX,yBACA,8EAEJuD,qBAAsB,CAClB1N,KAAM,SACNwJ,YAAeW,EAAA,GACX,wBACA,mEAEJsC,WAAY,CACRwB,SAAU,CACNjO,KAAM,SACNwJ,YAAeW,EAAA,GACX,kBACA,+FAGR+D,cAAe,CACXlO,KAAM,SACNwJ,YAAeW,EAAA,GACX,uBACA,+DAGRgE,UAAW,CACPnO,KAAM,SACN+M,OAAQ,YACRvD,YAAeW,EAAA,GAAa,mBAAoB,+CAEpDiE,SAAU,CACNpO,KAAM,SACNwJ,YAAeW,EAAA,GACX,kBACA,6HAEJyC,QAASP,GAEbgC,OAAQ,CACJrO,KAAM,SACNwJ,YAAeW,EAAA,GACX,gBACA,iGAMpBmD,eAAgB,CACZD,KAAM,gCAEVE,OAAQ,CACJF,KAAM,wBAEVG,KAAM,CACFH,KAAM,sBAEVI,YAAa,CACTJ,KAAM,6BAEVM,oBAAqB,CACjBN,KAAM,qCAEVO,eAAgB,CACZP,KAAM,gCAEVQ,UAAW,CACPR,KAAM,2BAEVS,YAAa,CACTT,KAAM,6BAEViB,MAAO,CACHjB,KAAM,6BACN7D,YAAeW,EAAA,GACX,eACA,gEAGRoE,aAAc,CACVlB,KAAM,6BACN7D,YAAeW,EAAA,GACX,sBACA,wEAGRqE,oBAAqB,CACjBxO,KAAM,UACNwJ,YAAeW,EAAA,GACX,6BACA,8FAGRsE,sBAAuB,CACnBzO,KAAM,UACNwJ,YAAeW,EAAA,GACX,+BACA,wH,0BC9RhB,MAAMuE,UACOzQ,KAAKC,YAAc,eAAiB,CAC7C,WAAAC,CAAYC,EAAIC,EAAOC,GACnBL,KAAKG,GAAKA,EACVH,KAAKI,MAAQA,EACbJ,KAAKK,WAAaA,EAClBL,KAAKe,UAAW,EAChBf,KAAK0Q,cAAe,EACpB1Q,KAAK2Q,gBAAiB,EACtB3Q,KAAKuQ,qBAAsB,CAC/B,CACA,YAAA/H,CAAaoI,GACT,OAAQ5Q,KAAKe,SAAoC2H,QAAQC,QAAQ3I,KAAK6Q,mBAA9C7Q,KAAK4I,KAAKgI,EACtC,CACA,MAAA/H,CAAO+H,GACH,OAAO5Q,KAAK4I,KAAKgI,EACrB,CACA,IAAAhI,CAAKgI,GACD,OAAOA,EAAYhI,KAAK5I,KAC5B,CACA,yBAAOiL,CAAmB6F,EAAWC,EAAmBnH,GACpD,MAAMzJ,EAAKyJ,EAAcwB,YAAc,IAAM0F,EAAU3Q,GACjDC,EAAQ0Q,EAAU1Q,OAASiL,EAAA,GAAcyF,EAAUzF,MACnDhL,EAAayQ,EAAU3Q,GACvBsK,EAAY,IAAMgG,GAAkBtQ,EAAIC,EAAOC,GAMrD,OALAoK,EAAUc,YAAcuF,EAAUvF,YAClCd,EAAU3B,SAAWiI,EACrBtG,EAAUb,cAAgBA,EAC1Ba,EAAUZ,MAAQiH,EAAUtF,OAC5Bf,EAAU1J,UAAW,EACd0J,CACX,QACSzK,KAAKgR,aAAe,IAAM,CACnC,sBAAWC,GACP,IAAIxG,EAAYgG,GAAkBO,aAUlC,OATKvG,IACDA,EAAYgG,GAAkBO,aAAe,IAAMP,GAAkB,GAAI,GAAI,MAC7EhG,EAAUiG,cAAe,EACzBjG,EAAUkG,gBAAiB,EAC3BlG,EAAU8F,qBAAsB,EAChC9F,EAAU1J,UAAW,EACrB0J,EAAUb,mBAAgB/I,EAC1B4J,EAAUZ,OAAQ,GAEfY,CACX,CACA,0BAAOD,CAAoBrK,GACvB,MAAMsK,EAAY,IAAMgG,GAAkBtQ,EAAI,GAAI,KAAOA,GAOzD,OANAsK,EAAU1J,UAAW,EACrB0J,EAAUiG,cAAe,EACzBjG,EAAUkG,gBAAiB,EAC3BlG,EAAU8F,qBAAsB,EAChC9F,EAAUb,mBAAgB/I,EAC1B4J,EAAUZ,OAAQ,EACXY,CACX,CACA,sBAAOE,CAAgBxB,GACnB,MAAMxL,EAAQwL,EAAe5E,IAAIkM,GAAkBxQ,YAAa,GAChE,GAAKtC,EAGL,IACI,MAAMiN,EAAOpB,KAAKvQ,MAAM0E,GAClBkN,EAAQ,IAAM4F,GAAkB,GAAI,GAAI,MAC9C,IAAK,MAAMjY,KAAOoS,EACd,OAAQpS,GACJ,IAAK,KACL,IAAK,QACL,IAAK,cACL,IAAK,aACL,IAAK,oBACL,IAAK,eACL,IAAK,sBACL,IAAK,iBACL,IAAK,QACDqS,EAAMrS,GAAOoS,EAAKpS,GAClB,MACJ,IAAK,WACD,MACJ,IAAK,gBACDqS,EAAMjB,cAAgB,KAAcoB,eAAeJ,EAAKhB,eAIpE,OAAOiB,CACX,CACA,MAAOzC,GACH,MACJ,CACJ,CACA,SAAAc,CAAUC,GACN,MAAMyB,EAAOpB,KAAKC,UAAU,CACxBtJ,GAAIH,KAAKG,GACTC,MAAOJ,KAAKI,MACZmL,YAAavL,KAAKuL,YAClBlL,WAAYL,KAAKK,WACjBwQ,kBAAmB7Q,KAAK6Q,kBACxBH,aAAc1Q,KAAK0Q,aACnBC,eAAgB3Q,KAAK2Q,eACrBJ,oBAAqBvQ,KAAKuQ,oBAC1B3G,cAAe,KAAcD,aAAa3J,KAAK4J,eAC/CC,MAAO7J,KAAK6J,QAEhBV,EAAeW,MAAM2G,GAAkBxQ,YAAa2K,EAAM,EAAI,EAClE,EAEJ,MAAMsG,GACF,WAAAhR,CAAYiR,EAAaC,GACrBpR,KAAKmR,YAAcA,EACnBnR,KAAKoR,gBAAkBA,CAC3B,CACA,IAAAxI,CAAKgC,GACD,OAAKA,EAAK9B,SAGH9I,KAAKqR,sBAAsBzG,EAAK9B,UAAUG,MAAKqI,IAClD,MAAMpZ,EAAS8H,KAAKuR,yBAAyB3G,EAAKzK,GAAIyK,EAAK9B,SAAUwI,GAMrE,OALA1G,EAAKiG,kBAAoB3Y,EAAOgB,QAChC0R,EAAK8F,aAAexY,EAAOwY,aAC3B9F,EAAK+F,eAAiBzY,EAAOyY,eAC7B/F,EAAK2F,oBAAsBrY,EAAOqY,oBAClC3F,EAAK7J,UAAW,EACT6J,EAAKiG,iBAAiB,IATtBnI,QAAQC,QAAQiC,EAAKiG,kBAWpC,CACA,qBAAAQ,CAAsBvI,GAClB,OAAO9I,KAAKmR,YAAYtF,sBAAsB/C,GAAUG,MAAM/P,IAC1D,MAAM4S,EAAS,GACTC,EAAeC,EAAA,GAAW9S,EAAS4S,GACzC,OAAIA,EAAOxS,OAAS,EACToP,QAAQuD,OAAO,IAAM3Q,MAAQ4Q,EAAA,GAChC,6BACA,wCACEJ,EAAOlH,KAAIwD,IAAK,OAAqBA,EAAE+D,SAASC,KAAK,SAGnB,WAAnCJ,EAAA,GAAiBD,GACfrD,QAAQuD,OAAO,IAAM3Q,MAAQ4Q,EAAA,GAChC,sBACA,gEAGDxD,QAAQC,QAAQoD,EAAa,GAE5C,CACA,wBAAAwF,CAAyBpR,EAAIqR,EAA2BF,GACpD,MAAMpZ,EAAS,CAAEgB,QAAS,GAAIwX,cAAc,EAAOC,gBAAgB,EAAOJ,sBAAuBe,EAAkBf,qBACnH,IAAIkB,GAAuB,EAC3B,IAAKH,EAAkBnC,gBACnB,OAAOjX,EAEX,MAAMwZ,EAAyB,CAAC,EAC1BC,EAAmB,CAAC,EACpBC,EAAmCjG,EAAA,GAAkB6F,GAC3D,SAASK,EAAYxG,GACjB,OAAOM,EAAA,GAAmBiG,EAAkCvG,EAChE,CACA,SAASyG,EAAiBhC,EAAciC,GACpC,SAASC,EAAYzU,EAAU0U,GAC3B,GAAIA,EAAO,CACP,IAAIC,EAAOR,EAAuBO,GAC7BC,IACDA,EAAOR,EAAuBO,GAAS,IAE3CC,EAAKna,KAAKwF,EACd,CACJ,CACA,GAAIuS,EAAc,CACd,IAAIqC,EAAY,mBACZJ,IACAI,EAAYJ,EAAqB,IAAMI,GAE3C,MAAMC,EAAW,uEACbtC,EAAaR,SACb0C,EAAY,GAAGG,yBAAkCrC,EAAaR,QAC9DpX,EAAOyY,gBAAiB,GAExBb,EAAaT,iBACb2C,EAAY,GAAGG,KAAaC,yBAAiCtC,EAAaT,gBAC1EnX,EAAOyY,gBAAiB,GAE5B,MAAM0B,EAAavC,EAAauC,YAAcvC,EAAaR,OACrDgD,EAAqBxC,EAAawC,oBAAsBxC,EAAaT,eACvEgD,IACAL,EAAY,GAAGG,6BAAsCE,GACrDna,EAAOyY,gBAAiB,GAExB2B,IACAN,EAAY,GAAGG,KAAaC,6BAAqCE,GACjEpa,EAAOyY,gBAAiB,GAExBb,EAAaP,OACbyC,EAAY,GAAGG,uBAAgCrC,EAAaP,MAC5DrX,EAAOwY,cAAe,GAE1B,MAAMlB,EAAcM,EAAaN,YACjC,GAAIA,EACA,IAAK,MAAMhX,KAAOgX,EAAa,CAC3B,MAAM+C,EAAY,GACZhW,EAAOiW,GAAmBha,EAAIia,cAAeF,GACnDA,EAAUxa,KAAK,IAAI2a,GAAUnW,uBAC7ByV,EAAY,GAAGG,KAAaI,EAAUnG,KAAK,0BAA2BoD,EAAYhX,IAClFN,EAAOyY,gBAAiB,CAC5B,CAEJ,MAAMjB,EAAsBI,EAAaJ,oBACzC,GAAIA,EACA,IAAK,MAAMlX,KAAOkX,EAAqB,CACnC,MAAM6C,EAAY,GACZhW,EAAOiW,GAAmBha,EAAIia,cAAeF,GACnDA,EAAUxa,KAAK,IAAI2a,GAAUnW,uBAC7ByV,EAAY,GAAGG,KAAaC,KAAYG,EAAUnG,KAAK,0BAA2BsD,EAAoBlX,IACtGN,EAAOyY,gBAAiB,CAC5B,CAEJ,MAAMd,EAAcC,EAAaD,YACjC,GAAIA,EAAa,EACRA,EAAY8C,OAAS9C,EAAY7D,OAClC6D,EAAY8C,MAAQ9C,EAAY7D,MAEpC,IAAK,MAAM4G,KAAc/C,EACrBmC,EAAY,GAAGG,MAAcO,GAAUE,sCAAgD/C,EAAY+C,IACnG1a,EAAOwY,cAAe,EACtBe,GAAuB,EACvBE,EAAiBiB,IAAc,CAEvC,CACA,MAAMjD,EAAiBG,EAAaH,eACpC,GAAIA,EACA,IAAK,MAAMnX,KAAOmX,EAAgB,CAC9B,MAAM4C,EAAY,GAEZM,EADOL,GAAmBha,EAAIia,cAAeF,GAC7BtI,MAAM,KAC5B,GAAI4I,EAASvZ,OAAQ,CACjB,IAAK,IAAIyF,EAAI,EAAGA,EAAI8T,EAASvZ,OAAQyF,IACjCwT,EAAUxa,KAAK,IAAI2a,GAAUG,EAAS5L,MAAMlI,GAAGqN,KAAK,uBAExDmG,EAAUxa,KAAK,iBACnB,CACAia,EAAY,GAAGG,KAAaI,EAAUnG,KAAK,wBAAyBuD,EAAenX,IACnFN,EAAOwY,cAAe,EACtBe,GAAuB,CAC3B,CAEJ,MAAM7B,EAAYE,EAAaF,UAC/B,GAAIA,EACA,IAAK,MAAMpX,KAAOoX,EAAW,CACzB,MAAM2C,EAAY,GACZO,EAAWN,GAAmBha,EAAIia,cAAeF,GACvDA,EAAUxa,KAAK,IAAI2a,GAAUI,qBAC7BP,EAAUxa,KAAK,mBACf,MAAM8a,EAAWC,EAAS7I,MAAM,KAChC,GAAI4I,EAASvZ,OAAQ,CACjB,IAAK,IAAIyF,EAAI,EAAGA,EAAI8T,EAASvZ,OAAQyF,IACjCwT,EAAUxa,KAAK,IAAI2a,GAAUG,EAAS5L,MAAMlI,GAAGqN,KAAK,uBAExDmG,EAAUxa,KAAK,iBACnB,CACAia,EAAY,GAAGG,KAAaI,EAAUnG,KAAK,wBAAyBwD,EAAUpX,IAC9EN,EAAOwY,cAAe,EACtBe,GAAuB,CAC3B,CAER,CACJ,CAKA,GAJAK,EAAiBR,GACjBQ,EAAiBR,EAAkBjB,MAAO,OAC1CyB,EAAiBR,EAAkBhB,aAAc,aACjDwB,EAAiBR,EAAkBhB,aAAc,cAC5CpY,EAAOwY,eAAiBxY,EAAOyY,eAChC,OAAOzY,EAEX,MAAMsY,GAAoE,IAA5Cc,EAAkBd,uBAAmCiB,IAAoE,IAA5CH,EAAkBd,sBACvHuC,EAAW,GACXtE,EAAQ6C,EAAkB7C,MAC1BuE,EAAY,IAAMC,IACxB,GAAIxL,MAAMC,QAAQ+G,GAAQ,CACtB,MAAMyE,EAAkBzE,EAAM,GAAGsB,MAAQ,OACzCtB,EAAM5M,SAAQsR,IACV,MAAMtE,EAAQsE,EAAKtE,IAAIjK,KAAIwO,GAAK,IAAG,SAASvB,EAAYuB,EAAE/H,kBAAkB+H,EAAEtE,aAAa1C,KAAK,MAChG2G,EAAShb,KAAK,qBAAqB8W,oBAAsBsE,EAAKhT,qBAAqBgT,EAAKlE,uBAAuBkE,EAAKvQ,sCAClG/B,IAAdsS,EAAKpD,MAAsBoD,EAAKpD,OAASmD,GACzCF,EAAUK,IAAIF,EAAKhT,GAAIgT,EAAKpD,KAChC,IAEJgD,EAAShb,KAAK,yIAAyI0W,EAAM,GAAGtO,mBAAmB+S,OACvL,CACA,IAAK,MAAMjB,KAASP,EAAwB,CACxC,MAAMa,EAAYb,EAAuBO,GACnCpP,EAAayO,EAAkBnC,gBAAgB8C,GACrD,GAAIpP,EACA,GAAIA,EAAWmN,SACX+C,EAAShb,KAAK,GAAGwa,EAAUnG,KAAK,4CAA2C,SAASyF,EAAYhP,EAAWmN,sBAE1G,GAAInN,EAAWoN,eAAiBpN,EAAWqN,UAAW,CACvD,MAAMoD,EAAO,GACTzQ,EAAWqN,WACXoD,EAAKvb,KAAK,UAAU8K,EAAWqN,cAE/BrN,EAAWoN,eACXqD,EAAKvb,KAAK,aAAa8K,EAAWoN,mBAEtC,MAAME,EAAWtN,EAAWsN,WAAatN,EAAWuN,OAAS4C,EAAUzO,IAAI1B,EAAWuN,aAAUvP,GAC5FsP,GACAmD,EAAKvb,KAAK,cAAcoY,MAExBtN,EAAWuN,QACXkD,EAAKvb,KAAK,gBAAgB8K,EAAWuN,WAErCI,GACA8C,EAAKvb,KAAK,4BAEdgb,EAAShb,KAAK,GAAGwa,EAAUnG,KAAK,WAAWkH,EAAKlH,KAAK,SACzD,CAER,CACA,GAAIoE,EACA,IAAK,MAAMoC,KAAc5S,KAAKoR,gBAAgBmC,2BAC1C,IAAK5B,EAAiBiB,GAAa,CAC/B,MAAMY,EAAOxT,KAAKoR,gBAAgBqC,QAAQb,GAC1C,GAAIY,EAAM,CACN,MAAMjW,EAAW,qBAAqBmV,GAAUE,sCAChDG,EAAShb,KAAK,GAAGwF,wCAA8C,SAASiW,EAAKE,YAC7EX,EAAShb,KAAK,OAAOwF,wCAA8C,SAASiW,EAAKnD,YACrF,CACJ,CAIR,OADAnY,EAAOgB,QAAU6Z,EAAS3G,KAAK,MACxBlU,CACX,EAEJ,SAASsa,GAAmBha,EAAK+Z,GAC7B,MAAMoB,EAAmBnb,EAAIob,YAAY,KACzC,GAAID,GAAoB,EAAG,CACvB,MAAME,EAAerb,EAAIiC,UAAU,EAAGkZ,GAEtC,OADApB,EAAUxa,KAAK,IAAI2a,GAAUmB,oBACtBrb,EAAIiC,UAAUkZ,EAAmB,EAC5C,CACA,OAAOnb,CACX,CACA,SAASka,GAAUxY,GAEf,OADAA,EAAMA,EAAIyC,QAAQ,qBAAsB,KACjCmX,OAAOxK,IAAIyK,OAAO7Z,EAC7B,C,4BC1VA,MAAM8Z,GAAiB,CACnB,UACA,gBACA,8BACA,eACA,WACA,qBACA,4BACA,mBACA,2BACA,yBACA,uBACA,yBACA,iBACA,kBACA,qBACA,WACA,SACA,cACA,oBACA,uBACA,qBACA,sBACA,uBACA,kBACA,mBACA,eACA,8BACA,+BACA,UACA,qBACA,kBACA,UACA,kBACA,mBACA,uBACA,8BACA,8BACA,2BACA,gBACA,SACA,cACA,iBACA,iBACA,iBACA,oBACA,kBACA,gBACA,cACA,uBACA,yBACA,eACA,eACA,aACA,mBACA,wBACA,OACA,aACA,YACA,aACA,gBACA,qBACA,oBACA,mBACA,gBACA,WACA,uBACA,YACA,sCACA,oCACA,wBACA,qCACA,yBACA,UACA,mBACA,eACA,SACA,sBACA,eACA,gBACA,uBACA,sBACA,uBACA,uBACA,gBACA,kBACA,SACA,UACA,gBACA,mBACA,mBACA,gBACA,eACA,6BACA,mBACA,WACA,oBACA,gB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","sources":["webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/common/themeCompatibility.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/common/plistParser.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/common/textMateScopeMatcher.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/common/colorThemeData.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/common/productIconThemeSchema.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/common/fileIconThemeSchema.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/browser/fileIconThemeData.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/common/colorThemeSchema.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/common/themeExtensionPoints.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/common/themeConfiguration.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/browser/productIconThemeData.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/browser/workbenchThemeService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/service-override/theme.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/themes/common/workbenchThemeService.js"],"sourcesContent":["import { Color } from 'monaco-editor/esm/vs/base/common/color.js';\nimport * as colorRegistry from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport * as editorColorRegistry from 'monaco-editor/esm/vs/editor/common/core/editorColorRegistry.js';\nconst settingToColorIdMapping = {};\nfunction addSettingMapping(settingId, colorId) {\n    let colorIds = settingToColorIdMapping[settingId];\n    if (!colorIds) {\n        settingToColorIdMapping[settingId] = colorIds = [];\n    }\n    colorIds.push(colorId);\n}\nfunction convertSettings(oldSettings, result) {\n    for (const rule of oldSettings) {\n        result.textMateRules.push(rule);\n        if (!rule.scope) {\n            const settings = rule.settings;\n            if (!settings) {\n                rule.settings = {};\n            }\n            else {\n                for (const settingKey in settings) {\n                    const key = settingKey;\n                    const mappings = settingToColorIdMapping[key];\n                    if (mappings) {\n                        const colorHex = settings[key];\n                        if (typeof colorHex === 'string') {\n                            const color = ( Color.fromHex(colorHex));\n                            for (const colorId of mappings) {\n                                result.colors[colorId] = color;\n                            }\n                        }\n                    }\n                    if (key !== 'foreground' && key !== 'background' && key !== 'fontStyle') {\n                        delete settings[key];\n                    }\n                }\n            }\n        }\n    }\n}\naddSettingMapping('background', colorRegistry.editorBackground);\naddSettingMapping('foreground', colorRegistry.editorForeground);\naddSettingMapping('selection', colorRegistry.editorSelectionBackground);\naddSettingMapping('inactiveSelection', colorRegistry.editorInactiveSelection);\naddSettingMapping('selectionHighlightColor', colorRegistry.editorSelectionHighlight);\naddSettingMapping('findMatchHighlight', colorRegistry.editorFindMatchHighlight);\naddSettingMapping('currentFindMatchHighlight', colorRegistry.editorFindMatch);\naddSettingMapping('hoverHighlight', colorRegistry.editorHoverHighlight);\naddSettingMapping('wordHighlight', 'editor.wordHighlightBackground');\naddSettingMapping('wordHighlightStrong', 'editor.wordHighlightStrongBackground');\naddSettingMapping('findRangeHighlight', colorRegistry.editorFindRangeHighlight);\naddSettingMapping('findMatchHighlight', 'peekViewResult.matchHighlightBackground');\naddSettingMapping('referenceHighlight', 'peekViewEditor.matchHighlightBackground');\naddSettingMapping('lineHighlight', editorColorRegistry.editorLineHighlight);\naddSettingMapping('rangeHighlight', editorColorRegistry.editorRangeHighlight);\naddSettingMapping('caret', editorColorRegistry.editorCursorForeground);\naddSettingMapping('invisibles', editorColorRegistry.editorWhitespaces);\naddSettingMapping('guide', editorColorRegistry.editorIndentGuide1);\naddSettingMapping('activeGuide', editorColorRegistry.editorActiveIndentGuide1);\nconst ansiColorMap = ['ansiBlack', 'ansiRed', 'ansiGreen', 'ansiYellow', 'ansiBlue', 'ansiMagenta', 'ansiCyan', 'ansiWhite',\n    'ansiBrightBlack', 'ansiBrightRed', 'ansiBrightGreen', 'ansiBrightYellow', 'ansiBrightBlue', 'ansiBrightMagenta', 'ansiBrightCyan', 'ansiBrightWhite'\n];\nfor (const color of ansiColorMap) {\n    addSettingMapping(color, 'terminal.' + color);\n}\nexport { convertSettings };\n","function parse(content) {\n    return _parse(content, null, null);\n}\nfunction _parse(content, filename, locationKeyName) {\n    const len = content.length;\n    let pos = 0;\n    let line = 1;\n    let char = 0;\n    if (len > 0 && content.charCodeAt(0) === 65279 ) {\n        pos = 1;\n    }\n    function advancePosBy(by) {\n        if (locationKeyName === null) {\n            pos = pos + by;\n        }\n        else {\n            while (by > 0) {\n                const chCode = content.charCodeAt(pos);\n                if (chCode === 10 ) {\n                    pos++;\n                    line++;\n                    char = 0;\n                }\n                else {\n                    pos++;\n                    char++;\n                }\n                by--;\n            }\n        }\n    }\n    function advancePosTo(to) {\n        if (locationKeyName === null) {\n            pos = to;\n        }\n        else {\n            advancePosBy(to - pos);\n        }\n    }\n    function skipWhitespace() {\n        while (pos < len) {\n            const chCode = content.charCodeAt(pos);\n            if (chCode !== 32  && chCode !== 9  && chCode !== 13  && chCode !== 10 ) {\n                break;\n            }\n            advancePosBy(1);\n        }\n    }\n    function advanceIfStartsWith(str) {\n        if (content.substr(pos, str.length) === str) {\n            advancePosBy(str.length);\n            return true;\n        }\n        return false;\n    }\n    function advanceUntil(str) {\n        const nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            advancePosTo(nextOccurence + str.length);\n        }\n        else {\n            advancePosTo(len);\n        }\n    }\n    function captureUntil(str) {\n        const nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            const r = content.substring(pos, nextOccurence);\n            advancePosTo(nextOccurence + str.length);\n            return r;\n        }\n        else {\n            const r = content.substr(pos);\n            advancePosTo(len);\n            return r;\n        }\n    }\n    let state = 0 ;\n    let cur = null;\n    const stateStack = [];\n    const objStack = [];\n    let curKey = null;\n    function pushState(newState, newCur) {\n        stateStack.push(state);\n        objStack.push(cur);\n        state = newState;\n        cur = newCur;\n    }\n    function popState() {\n        if (stateStack.length === 0) {\n            return fail('illegal state stack');\n        }\n        state = stateStack.pop();\n        cur = objStack.pop();\n    }\n    function fail(msg) {\n        throw new Error('Near offset ' + pos + ': ' + msg + ' ~~~' + content.substr(pos, 50) + '~~~');\n    }\n    const dictState = {\n        enterDict: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            const newDict = {};\n            if (locationKeyName !== null) {\n                newDict[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            cur[curKey] = newDict;\n            curKey = null;\n            pushState(1 , newDict);\n        },\n        enterArray: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            const newArr = [];\n            cur[curKey] = newArr;\n            curKey = null;\n            pushState(2 , newArr);\n        }\n    };\n    const arrState = {\n        enterDict: function () {\n            const newDict = {};\n            if (locationKeyName !== null) {\n                newDict[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            cur.push(newDict);\n            pushState(1 , newDict);\n        },\n        enterArray: function () {\n            const newArr = [];\n            cur.push(newArr);\n            pushState(2 , newArr);\n        }\n    };\n    function enterDict() {\n        if (state === 1 ) {\n            dictState.enterDict();\n        }\n        else if (state === 2 ) {\n            arrState.enterDict();\n        }\n        else {\n            cur = {};\n            if (locationKeyName !== null) {\n                cur[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            pushState(1 , cur);\n        }\n    }\n    function leaveDict() {\n        if (state === 1 ) {\n            popState();\n        }\n        else if (state === 2 ) {\n            return fail('unexpected </dict>');\n        }\n        else {\n            return fail('unexpected </dict>');\n        }\n    }\n    function enterArray() {\n        if (state === 1 ) {\n            dictState.enterArray();\n        }\n        else if (state === 2 ) {\n            arrState.enterArray();\n        }\n        else {\n            cur = [];\n            pushState(2 , cur);\n        }\n    }\n    function leaveArray() {\n        if (state === 1 ) {\n            return fail('unexpected </array>');\n        }\n        else if (state === 2 ) {\n            popState();\n        }\n        else {\n            return fail('unexpected </array>');\n        }\n    }\n    function acceptKey(val) {\n        if (state === 1 ) {\n            if (curKey !== null) {\n                return fail('too many <key>');\n            }\n            curKey = val;\n        }\n        else if (state === 2 ) {\n            return fail('unexpected <key>');\n        }\n        else {\n            return fail('unexpected <key>');\n        }\n    }\n    function acceptString(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptReal(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse float');\n        }\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptInteger(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse integer');\n        }\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptDate(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptData(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function acceptBool(val) {\n        if (state === 1 ) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 ) {\n            cur.push(val);\n        }\n        else {\n            cur = val;\n        }\n    }\n    function escapeVal(str) {\n        return str.replace(/&#([0-9]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 10));\n        }).replace(/&#x([0-9a-f]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 16));\n        }).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g, function (_) {\n            switch (_) {\n                case '&amp;': return '&';\n                case '&lt;': return '<';\n                case '&gt;': return '>';\n                case '&quot;': return '\"';\n                case '&apos;': return '\\'';\n            }\n            return _;\n        });\n    }\n    function parseOpenTag() {\n        let r = captureUntil('>');\n        let isClosed = false;\n        if (r.charCodeAt(r.length - 1) === 47 ) {\n            isClosed = true;\n            r = r.substring(0, r.length - 1);\n        }\n        return {\n            name: r.trim(),\n            isClosed: isClosed\n        };\n    }\n    function parseTagValue(tag) {\n        if (tag.isClosed) {\n            return '';\n        }\n        const val = captureUntil('</');\n        advanceUntil('>');\n        return escapeVal(val);\n    }\n    while (pos < len) {\n        skipWhitespace();\n        if (pos >= len) {\n            break;\n        }\n        const chCode = content.charCodeAt(pos);\n        advancePosBy(1);\n        if (chCode !== 60 ) {\n            return fail('expected <');\n        }\n        if (pos >= len) {\n            return fail('unexpected end of input');\n        }\n        const peekChCode = content.charCodeAt(pos);\n        if (peekChCode === 63 ) {\n            advancePosBy(1);\n            advanceUntil('?>');\n            continue;\n        }\n        if (peekChCode === 33 ) {\n            advancePosBy(1);\n            if (advanceIfStartsWith('--')) {\n                advanceUntil('-->');\n                continue;\n            }\n            advanceUntil('>');\n            continue;\n        }\n        if (peekChCode === 47 ) {\n            advancePosBy(1);\n            skipWhitespace();\n            if (advanceIfStartsWith('plist')) {\n                advanceUntil('>');\n                continue;\n            }\n            if (advanceIfStartsWith('dict')) {\n                advanceUntil('>');\n                leaveDict();\n                continue;\n            }\n            if (advanceIfStartsWith('array')) {\n                advanceUntil('>');\n                leaveArray();\n                continue;\n            }\n            return fail('unexpected closed tag');\n        }\n        const tag = parseOpenTag();\n        switch (tag.name) {\n            case 'dict':\n                enterDict();\n                if (tag.isClosed) {\n                    leaveDict();\n                }\n                continue;\n            case 'array':\n                enterArray();\n                if (tag.isClosed) {\n                    leaveArray();\n                }\n                continue;\n            case 'key':\n                acceptKey(parseTagValue(tag));\n                continue;\n            case 'string':\n                acceptString(parseTagValue(tag));\n                continue;\n            case 'real':\n                acceptReal(parseFloat(parseTagValue(tag)));\n                continue;\n            case 'integer':\n                acceptInteger(parseInt(parseTagValue(tag), 10));\n                continue;\n            case 'date':\n                acceptDate(( new Date(parseTagValue(tag))));\n                continue;\n            case 'data':\n                acceptData(parseTagValue(tag));\n                continue;\n            case 'true':\n                parseTagValue(tag);\n                acceptBool(true);\n                continue;\n            case 'false':\n                parseTagValue(tag);\n                acceptBool(false);\n                continue;\n        }\n        if (/^plist/.test(tag.name)) {\n            continue;\n        }\n        return fail('unexpected opened tag ' + tag.name);\n    }\n    return cur;\n}\nexport { parse };\n","function createMatchers(selector, matchesName, results) {\n    const tokenizer = newTokenizer(selector);\n    let token = tokenizer.next();\n    while (token !== null) {\n        let priority = 0;\n        if (token.length === 2 && token.charAt(1) === ':') {\n            switch (token.charAt(0)) {\n                case 'R':\n                    priority = 1;\n                    break;\n                case 'L':\n                    priority = -1;\n                    break;\n                default:\n                    console.log(`Unknown priority ${token} in scope selector`);\n            }\n            token = tokenizer.next();\n        }\n        const matcher = parseConjunction();\n        if (matcher) {\n            results.push({ matcher, priority });\n        }\n        if (token !== ',') {\n            break;\n        }\n        token = tokenizer.next();\n    }\n    function parseOperand() {\n        if (token === '-') {\n            token = tokenizer.next();\n            const expressionToNegate = parseOperand();\n            if (!expressionToNegate) {\n                return null;\n            }\n            return matcherInput => {\n                const score = expressionToNegate(matcherInput);\n                return score < 0 ? 0 : -1;\n            };\n        }\n        if (token === '(') {\n            token = tokenizer.next();\n            const expressionInParents = parseInnerExpression();\n            if (token === ')') {\n                token = tokenizer.next();\n            }\n            return expressionInParents;\n        }\n        if (isIdentifier(token)) {\n            const identifiers = [];\n            do {\n                identifiers.push(token);\n                token = tokenizer.next();\n            } while (isIdentifier(token));\n            return matcherInput => matchesName(identifiers, matcherInput);\n        }\n        return null;\n    }\n    function parseConjunction() {\n        let matcher = parseOperand();\n        if (!matcher) {\n            return null;\n        }\n        const matchers = [];\n        while (matcher) {\n            matchers.push(matcher);\n            matcher = parseOperand();\n        }\n        return matcherInput => {\n            let min = matchers[0](matcherInput);\n            for (let i = 1; min >= 0 && i < matchers.length; i++) {\n                min = Math.min(min, matchers[i](matcherInput));\n            }\n            return min;\n        };\n    }\n    function parseInnerExpression() {\n        let matcher = parseConjunction();\n        if (!matcher) {\n            return null;\n        }\n        const matchers = [];\n        while (matcher) {\n            matchers.push(matcher);\n            if (token === '|' || token === ',') {\n                do {\n                    token = tokenizer.next();\n                } while (token === '|' || token === ',');\n            }\n            else {\n                break;\n            }\n            matcher = parseConjunction();\n        }\n        return matcherInput => {\n            let max = matchers[0](matcherInput);\n            for (let i = 1; i < matchers.length; i++) {\n                max = Math.max(max, matchers[i](matcherInput));\n            }\n            return max;\n        };\n    }\n}\nfunction isIdentifier(token) {\n    return !!token && !!token.match(/[\\w\\.:]+/);\n}\nfunction newTokenizer(input) {\n    const regex = /([LR]:|[\\w\\.:][\\w\\.:\\-]*|[\\,\\|\\-\\(\\)])/g;\n    let match = regex.exec(input);\n    return {\n        next: () => {\n            if (!match) {\n                return null;\n            }\n            const res = match[0];\n            match = regex.exec(input);\n            return res;\n        }\n    };\n}\nexport { createMatchers };\n","import { basename } from 'monaco-editor/esm/vs/base/common/path.js';\nimport * as json from 'monaco-editor/esm/vs/base/common/json.js';\nimport { Color } from 'monaco-editor/esm/vs/base/common/color.js';\nimport { THEME_SCOPE_OPEN_PAREN, THEME_SCOPE_CLOSE_PAREN, THEME_SCOPE_WILDCARD, themeScopeRegex, ExtensionData, VS_HC_LIGHT_THEME, VS_HC_THEME, VS_LIGHT_THEME } from './workbenchThemeService.js';\nimport { convertSettings } from './themeCompatibility.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as types from 'monaco-editor/esm/vs/base/common/types.js';\nimport * as resources from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { editorForeground, editorBackground, Extensions } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { getThemeTypeSelector } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { getParseErrorMessage } from '../../../../base/common/jsonErrorMessages.js';\nimport { parse } from './plistParser.js';\nimport { TokenStyle, parseClassifierString, SemanticTokenRule, getTokenClassificationRegistry } from '../../../../platform/theme/common/tokenClassificationRegistry.js';\nimport { createMatchers } from './textMateScopeMatcher.js';\nimport { ColorScheme } from 'monaco-editor/esm/vs/platform/theme/common/theme.js';\nconst colorRegistry = ( Registry.as(Extensions.ColorContribution));\nconst tokenClassificationRegistry = getTokenClassificationRegistry();\nconst tokenGroupToScopesMap = {\n    comments: ['comment', 'punctuation.definition.comment'],\n    strings: ['string', 'meta.embedded.assembly'],\n    keywords: ['keyword - keyword.operator', 'keyword.control', 'storage', 'storage.type'],\n    numbers: ['constant.numeric'],\n    types: ['entity.name.type', 'entity.name.class', 'support.type', 'support.class'],\n    functions: ['entity.name.function', 'support.function'],\n    variables: ['variable', 'entity.name.variable']\n};\nclass ColorThemeData {\n    static { this.STORAGE_KEY = 'colorThemeData'; }\n    constructor(id, label, settingsId) {\n        this.themeTokenColors = [];\n        this.customTokenColors = [];\n        this.colorMap = {};\n        this.customColorMap = {};\n        this.semanticTokenRules = [];\n        this.customSemanticTokenRules = [];\n        this.textMateThemingRules = undefined;\n        this.tokenColorIndex = undefined;\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n    }\n    get semanticHighlighting() {\n        if (this.customSemanticHighlighting !== undefined) {\n            return this.customSemanticHighlighting;\n        }\n        if (this.customSemanticHighlightingDeprecated !== undefined) {\n            return this.customSemanticHighlightingDeprecated;\n        }\n        return !!this.themeSemanticHighlighting;\n    }\n    get tokenColors() {\n        if (!this.textMateThemingRules) {\n            const result = [];\n            const foreground = this.getColor(editorForeground) || this.getDefault(editorForeground);\n            const background = this.getColor(editorBackground) || this.getDefault(editorBackground);\n            result.push({\n                settings: {\n                    foreground: normalizeColor(foreground),\n                    background: normalizeColor(background)\n                }\n            });\n            let hasDefaultTokens = false;\n            function addRule(rule) {\n                if (rule.scope && rule.settings) {\n                    if (rule.scope === 'token.info-token') {\n                        hasDefaultTokens = true;\n                    }\n                    result.push({ scope: rule.scope, settings: { foreground: normalizeColor(rule.settings.foreground), background: normalizeColor(rule.settings.background), fontStyle: rule.settings.fontStyle } });\n                }\n            }\n            this.themeTokenColors.forEach(addRule);\n            this.customTokenColors.forEach(addRule);\n            if (!hasDefaultTokens) {\n                defaultThemeColors[this.type].forEach(addRule);\n            }\n            this.textMateThemingRules = result;\n        }\n        return this.textMateThemingRules;\n    }\n    getColor(colorId, useDefault) {\n        let color = this.customColorMap[colorId];\n        if (color) {\n            return color;\n        }\n        color = this.colorMap[colorId];\n        if (useDefault !== false && types.isUndefined(color)) {\n            color = this.getDefault(colorId);\n        }\n        return color;\n    }\n    getTokenStyle(type, modifiers, language, useDefault = true, definitions = {}) {\n        const result = {\n            foreground: undefined,\n            bold: undefined,\n            underline: undefined,\n            strikethrough: undefined,\n            italic: undefined\n        };\n        const score = {\n            foreground: -1,\n            bold: -1,\n            underline: -1,\n            strikethrough: -1,\n            italic: -1\n        };\n        function _processStyle(matchScore, style, definition) {\n            if (style.foreground && score.foreground <= matchScore) {\n                score.foreground = matchScore;\n                result.foreground = style.foreground;\n                definitions.foreground = definition;\n            }\n            for (const p of ['bold', 'underline', 'strikethrough', 'italic']) {\n                const property = p;\n                const info = style[property];\n                if (info !== undefined) {\n                    if (score[property] <= matchScore) {\n                        score[property] = matchScore;\n                        result[property] = info;\n                        definitions[property] = definition;\n                    }\n                }\n            }\n        }\n        function _processSemanticTokenRule(rule) {\n            const matchScore = rule.selector.match(type, modifiers, language);\n            if (matchScore >= 0) {\n                _processStyle(matchScore, rule.style, rule);\n            }\n        }\n        this.semanticTokenRules.forEach(_processSemanticTokenRule);\n        this.customSemanticTokenRules.forEach(_processSemanticTokenRule);\n        let hasUndefinedStyleProperty = false;\n        for (const k in score) {\n            const key = k;\n            if (score[key] === -1) {\n                hasUndefinedStyleProperty = true;\n            }\n            else {\n                score[key] = Number.MAX_VALUE;\n            }\n        }\n        if (hasUndefinedStyleProperty) {\n            for (const rule of tokenClassificationRegistry.getTokenStylingDefaultRules()) {\n                const matchScore = rule.selector.match(type, modifiers, language);\n                if (matchScore >= 0) {\n                    let style;\n                    if (rule.defaults.scopesToProbe) {\n                        style = this.resolveScopes(rule.defaults.scopesToProbe);\n                        if (style) {\n                            _processStyle(matchScore, style, rule.defaults.scopesToProbe);\n                        }\n                    }\n                    if (!style && useDefault !== false) {\n                        const tokenStyleValue = rule.defaults[this.type];\n                        style = this.resolveTokenStyleValue(tokenStyleValue);\n                        if (style) {\n                            _processStyle(matchScore, style, tokenStyleValue);\n                        }\n                    }\n                }\n            }\n        }\n        return TokenStyle.fromData(result);\n    }\n    resolveTokenStyleValue(tokenStyleValue) {\n        if (tokenStyleValue === undefined) {\n            return undefined;\n        }\n        else if (typeof tokenStyleValue === 'string') {\n            const { type, modifiers, language } = parseClassifierString(tokenStyleValue, '');\n            return this.getTokenStyle(type, modifiers, language);\n        }\n        else if (typeof tokenStyleValue === 'object') {\n            return tokenStyleValue;\n        }\n        return undefined;\n    }\n    getTokenColorIndex() {\n        if (!this.tokenColorIndex) {\n            const index = ( new TokenColorIndex());\n            this.tokenColors.forEach(rule => {\n                index.add(rule.settings.foreground);\n                index.add(rule.settings.background);\n            });\n            this.semanticTokenRules.forEach(r => index.add(r.style.foreground));\n            tokenClassificationRegistry.getTokenStylingDefaultRules().forEach(r => {\n                const defaultColor = r.defaults[this.type];\n                if (defaultColor && typeof defaultColor === 'object') {\n                    index.add(defaultColor.foreground);\n                }\n            });\n            this.customSemanticTokenRules.forEach(r => index.add(r.style.foreground));\n            this.tokenColorIndex = index;\n        }\n        return this.tokenColorIndex;\n    }\n    get tokenColorMap() {\n        return this.getTokenColorIndex().asArray();\n    }\n    getTokenStyleMetadata(typeWithLanguage, modifiers, defaultLanguage, useDefault = true, definitions = {}) {\n        const { type, language } = parseClassifierString(typeWithLanguage, defaultLanguage);\n        const style = this.getTokenStyle(type, modifiers, language, useDefault, definitions);\n        if (!style) {\n            return undefined;\n        }\n        return {\n            foreground: this.getTokenColorIndex().get(style.foreground),\n            bold: style.bold,\n            underline: style.underline,\n            strikethrough: style.strikethrough,\n            italic: style.italic,\n        };\n    }\n    getTokenStylingRuleScope(rule) {\n        if (this.customSemanticTokenRules.indexOf(rule) !== -1) {\n            return 'setting';\n        }\n        if (this.semanticTokenRules.indexOf(rule) !== -1) {\n            return 'theme';\n        }\n        return undefined;\n    }\n    getDefault(colorId) {\n        return colorRegistry.resolveDefaultColor(colorId, this);\n    }\n    resolveScopes(scopes, definitions) {\n        if (!this.themeTokenScopeMatchers) {\n            this.themeTokenScopeMatchers = ( this.themeTokenColors.map(getScopeMatcher));\n        }\n        if (!this.customTokenScopeMatchers) {\n            this.customTokenScopeMatchers = ( this.customTokenColors.map(getScopeMatcher));\n        }\n        for (const scope of scopes) {\n            let foreground = undefined;\n            let fontStyle = undefined;\n            let foregroundScore = -1;\n            let fontStyleScore = -1;\n            let fontStyleThemingRule = undefined;\n            let foregroundThemingRule = undefined;\n            function findTokenStyleForScopeInScopes(scopeMatchers, themingRules) {\n                for (let i = 0; i < scopeMatchers.length; i++) {\n                    const score = scopeMatchers[i](scope);\n                    if (score >= 0) {\n                        const themingRule = themingRules[i];\n                        const settings = themingRules[i].settings;\n                        if (score >= foregroundScore && settings.foreground) {\n                            foreground = settings.foreground;\n                            foregroundScore = score;\n                            foregroundThemingRule = themingRule;\n                        }\n                        if (score >= fontStyleScore && types.isString(settings.fontStyle)) {\n                            fontStyle = settings.fontStyle;\n                            fontStyleScore = score;\n                            fontStyleThemingRule = themingRule;\n                        }\n                    }\n                }\n            }\n            findTokenStyleForScopeInScopes(this.themeTokenScopeMatchers, this.themeTokenColors);\n            findTokenStyleForScopeInScopes(this.customTokenScopeMatchers, this.customTokenColors);\n            if (foreground !== undefined || fontStyle !== undefined) {\n                if (definitions) {\n                    definitions.foreground = foregroundThemingRule;\n                    definitions.bold = definitions.italic = definitions.underline = definitions.strikethrough = fontStyleThemingRule;\n                    definitions.scope = scope;\n                }\n                return TokenStyle.fromSettings(foreground, fontStyle);\n            }\n        }\n        return undefined;\n    }\n    defines(colorId) {\n        return this.customColorMap.hasOwnProperty(colorId) || this.colorMap.hasOwnProperty(colorId);\n    }\n    setCustomizations(settings) {\n        this.setCustomColors(settings.colorCustomizations);\n        this.setCustomTokenColors(settings.tokenColorCustomizations);\n        this.setCustomSemanticTokenColors(settings.semanticTokenColorCustomizations);\n    }\n    setCustomColors(colors) {\n        this.customColorMap = {};\n        this.overwriteCustomColors(colors);\n        const themeSpecificColors = this.getThemeSpecificColors(colors);\n        if (types.isObject(themeSpecificColors)) {\n            this.overwriteCustomColors(themeSpecificColors);\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    overwriteCustomColors(colors) {\n        for (const id in colors) {\n            const colorVal = colors[id];\n            if (typeof colorVal === 'string') {\n                this.customColorMap[id] = ( Color.fromHex(colorVal));\n            }\n        }\n    }\n    setCustomTokenColors(customTokenColors) {\n        this.customTokenColors = [];\n        this.customSemanticHighlightingDeprecated = undefined;\n        this.addCustomTokenColors(customTokenColors);\n        const themeSpecificTokenColors = this.getThemeSpecificColors(customTokenColors);\n        if (types.isObject(themeSpecificTokenColors)) {\n            this.addCustomTokenColors(themeSpecificTokenColors);\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    setCustomSemanticTokenColors(semanticTokenColors) {\n        this.customSemanticTokenRules = [];\n        this.customSemanticHighlighting = undefined;\n        if (semanticTokenColors) {\n            this.customSemanticHighlighting = semanticTokenColors.enabled;\n            if (semanticTokenColors.rules) {\n                this.readSemanticTokenRules(semanticTokenColors.rules);\n            }\n            const themeSpecificColors = this.getThemeSpecificColors(semanticTokenColors);\n            if (types.isObject(themeSpecificColors)) {\n                if (themeSpecificColors.enabled !== undefined) {\n                    this.customSemanticHighlighting = themeSpecificColors.enabled;\n                }\n                if (themeSpecificColors.rules) {\n                    this.readSemanticTokenRules(themeSpecificColors.rules);\n                }\n            }\n        }\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n    }\n    isThemeScope(key) {\n        return key.charAt(0) === THEME_SCOPE_OPEN_PAREN && key.charAt(key.length - 1) === THEME_SCOPE_CLOSE_PAREN;\n    }\n    isThemeScopeMatch(themeId) {\n        const themeIdFirstChar = themeId.charAt(0);\n        const themeIdLastChar = themeId.charAt(themeId.length - 1);\n        const themeIdPrefix = themeId.slice(0, -1);\n        const themeIdInfix = themeId.slice(1, -1);\n        const themeIdSuffix = themeId.slice(1);\n        return themeId === this.settingsId\n            || (this.settingsId.includes(themeIdInfix) && themeIdFirstChar === THEME_SCOPE_WILDCARD && themeIdLastChar === THEME_SCOPE_WILDCARD)\n            || (this.settingsId.startsWith(themeIdPrefix) && themeIdLastChar === THEME_SCOPE_WILDCARD)\n            || (this.settingsId.endsWith(themeIdSuffix) && themeIdFirstChar === THEME_SCOPE_WILDCARD);\n    }\n    getThemeSpecificColors(colors) {\n        let themeSpecificColors;\n        for (const key in colors) {\n            const scopedColors = colors[key];\n            if (this.isThemeScope(key) && scopedColors instanceof Object && !Array.isArray(scopedColors)) {\n                const themeScopeList = key.match(themeScopeRegex) || [];\n                for (const themeScope of themeScopeList) {\n                    const themeId = themeScope.substring(1, themeScope.length - 1);\n                    if (this.isThemeScopeMatch(themeId)) {\n                        if (!themeSpecificColors) {\n                            themeSpecificColors = {};\n                        }\n                        const scopedThemeSpecificColors = scopedColors;\n                        for (const subkey in scopedThemeSpecificColors) {\n                            const originalColors = themeSpecificColors[subkey];\n                            const overrideColors = scopedThemeSpecificColors[subkey];\n                            if (Array.isArray(originalColors) && Array.isArray(overrideColors)) {\n                                themeSpecificColors[subkey] = originalColors.concat(overrideColors);\n                            }\n                            else if (overrideColors) {\n                                themeSpecificColors[subkey] = overrideColors;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return themeSpecificColors;\n    }\n    readSemanticTokenRules(tokenStylingRuleSection) {\n        for (const key in tokenStylingRuleSection) {\n            if (!this.isThemeScope(key)) {\n                try {\n                    const rule = readSemanticTokenRule(key, tokenStylingRuleSection[key]);\n                    if (rule) {\n                        this.customSemanticTokenRules.push(rule);\n                    }\n                }\n                catch (e) {\n                }\n            }\n        }\n    }\n    addCustomTokenColors(customTokenColors) {\n        for (const tokenGroup in tokenGroupToScopesMap) {\n            const group = tokenGroup;\n            const value = customTokenColors[group];\n            if (value) {\n                const settings = typeof value === 'string' ? { foreground: value } : value;\n                const scopes = tokenGroupToScopesMap[group];\n                for (const scope of scopes) {\n                    this.customTokenColors.push({ scope, settings });\n                }\n            }\n        }\n        if (Array.isArray(customTokenColors.textMateRules)) {\n            for (const rule of customTokenColors.textMateRules) {\n                if (rule.scope && rule.settings) {\n                    this.customTokenColors.push(rule);\n                }\n            }\n        }\n        if (customTokenColors.semanticHighlighting !== undefined) {\n            this.customSemanticHighlightingDeprecated = customTokenColors.semanticHighlighting;\n        }\n    }\n    ensureLoaded(extensionResourceLoaderService) {\n        return !this.isLoaded ? this.load(extensionResourceLoaderService) : Promise.resolve(undefined);\n    }\n    reload(extensionResourceLoaderService) {\n        return this.load(extensionResourceLoaderService);\n    }\n    load(extensionResourceLoaderService) {\n        if (!this.location) {\n            return Promise.resolve(undefined);\n        }\n        this.themeTokenColors = [];\n        this.clearCaches();\n        const result = {\n            colors: {},\n            textMateRules: [],\n            semanticTokenRules: [],\n            semanticHighlighting: false\n        };\n        return _loadColorTheme(extensionResourceLoaderService, this.location, result).then(_ => {\n            this.isLoaded = true;\n            this.semanticTokenRules = result.semanticTokenRules;\n            this.colorMap = result.colors;\n            this.themeTokenColors = result.textMateRules;\n            this.themeSemanticHighlighting = result.semanticHighlighting;\n        });\n    }\n    clearCaches() {\n        this.tokenColorIndex = undefined;\n        this.textMateThemingRules = undefined;\n        this.themeTokenScopeMatchers = undefined;\n        this.customTokenScopeMatchers = undefined;\n    }\n    toStorage(storageService) {\n        const colorMapData = {};\n        for (const key in this.colorMap) {\n            colorMapData[key] = Color.Format.CSS.formatHexA(this.colorMap[key], true);\n        }\n        const value = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            settingsId: this.settingsId,\n            themeTokenColors: ( this.themeTokenColors.map(tc => ({ settings: tc.settings, scope: tc.scope }))),\n            semanticTokenRules: ( this.semanticTokenRules.map(SemanticTokenRule.toJSONObject)),\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            themeSemanticHighlighting: this.themeSemanticHighlighting,\n            colorMap: colorMapData,\n            watch: this.watch\n        });\n        storageService.store(ColorThemeData.STORAGE_KEY, value, 0 , 0 );\n    }\n    get baseTheme() {\n        return this.classNames[0];\n    }\n    get classNames() {\n        return this.id.split(' ');\n    }\n    get type() {\n        switch (this.baseTheme) {\n            case VS_LIGHT_THEME: return ColorScheme.LIGHT;\n            case VS_HC_THEME: return ColorScheme.HIGH_CONTRAST_DARK;\n            case VS_HC_LIGHT_THEME: return ColorScheme.HIGH_CONTRAST_LIGHT;\n            default: return ColorScheme.DARK;\n        }\n    }\n    static createUnloadedThemeForThemeType(themeType, colorMap) {\n        return ColorThemeData.createUnloadedTheme(getThemeTypeSelector(themeType), colorMap);\n    }\n    static createUnloadedTheme(id, colorMap) {\n        const themeData = ( new ColorThemeData(id, '', '__' + id));\n        themeData.isLoaded = false;\n        themeData.themeTokenColors = [];\n        themeData.watch = false;\n        if (colorMap) {\n            for (const id in colorMap) {\n                themeData.colorMap[id] = ( Color.fromHex(colorMap[id]));\n            }\n        }\n        return themeData;\n    }\n    static createLoadedEmptyTheme(id, settingsId) {\n        const themeData = ( new ColorThemeData(id, '', settingsId));\n        themeData.isLoaded = true;\n        themeData.themeTokenColors = [];\n        themeData.watch = false;\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(ColorThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( new ColorThemeData('', '', ''));\n            for (const key in data) {\n                switch (key) {\n                    case 'colorMap': {\n                        const colorMapData = data[key];\n                        for (const id in colorMapData) {\n                            theme.colorMap[id] = ( Color.fromHex(colorMapData[id]));\n                        }\n                        break;\n                    }\n                    case 'themeTokenColors':\n                    case 'id':\n                    case 'label':\n                    case 'settingsId':\n                    case 'watch':\n                    case 'themeSemanticHighlighting':\n                        theme[key] = data[key];\n                        break;\n                    case 'semanticTokenRules': {\n                        const rulesData = data[key];\n                        if (Array.isArray(rulesData)) {\n                            for (const d of rulesData) {\n                                const rule = SemanticTokenRule.fromJSONObject(tokenClassificationRegistry, d);\n                                if (rule) {\n                                    theme.semanticTokenRules.push(rule);\n                                }\n                            }\n                        }\n                        break;\n                    }\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            if (!theme.id || !theme.settingsId) {\n                return undefined;\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    static fromExtensionTheme(theme, colorThemeLocation, extensionData) {\n        const baseTheme = theme['uiTheme'] || 'vs-dark';\n        const themeSelector = toCSSSelector(extensionData.extensionId, theme.path);\n        const id = `${baseTheme} ${themeSelector}`;\n        const label = theme.label || basename(theme.path);\n        const settingsId = theme.id || label;\n        const themeData = ( new ColorThemeData(id, label, settingsId));\n        themeData.description = theme.description;\n        themeData.watch = theme._watch === true;\n        themeData.location = colorThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n}\nfunction toCSSSelector(extensionId, path) {\n    if (path.startsWith('./')) {\n        path = path.substr(2);\n    }\n    let str = `${extensionId}-${path}`;\n    str = str.replace(/[^_a-zA-Z0-9-]/g, '-');\n    if (str.charAt(0).match(/[0-9-]/)) {\n        str = '_' + str;\n    }\n    return str;\n}\nasync function _loadColorTheme(extensionResourceLoaderService, themeLocation, result) {\n    if (resources.extname(themeLocation) === '.json') {\n        const content = await extensionResourceLoaderService.readExtensionResource(themeLocation);\n        const errors = [];\n        const contentValue = json.parse(content, errors);\n        if (errors.length > 0) {\n            return Promise.reject(( new Error(( nls.localize(\n                'error.cannotparsejson',\n                \"Problems parsing JSON theme file: {0}\",\n                ( errors.map(e => getParseErrorMessage(e.error))).join(', ')\n            )))));\n        }\n        else if (json.getNodeType(contentValue) !== 'object') {\n            return Promise.reject(( new Error(( nls.localize(\n                'error.invalidformat',\n                \"Invalid format for JSON theme file: Object expected.\"\n            )))));\n        }\n        if (contentValue.include) {\n            await _loadColorTheme(extensionResourceLoaderService, resources.joinPath(resources.dirname(themeLocation), contentValue.include), result);\n        }\n        if (Array.isArray(contentValue.settings)) {\n            convertSettings(contentValue.settings, result);\n            return null;\n        }\n        result.semanticHighlighting = result.semanticHighlighting || contentValue.semanticHighlighting;\n        const colors = contentValue.colors;\n        if (colors) {\n            if (typeof colors !== 'object') {\n                return Promise.reject(( new Error(( nls.localize(\n                    { key: 'error.invalidformat.colors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] },\n                    \"Problem parsing color theme file: {0}. Property 'colors' is not of type 'object'.\",\n                    ( themeLocation.toString())\n                )))));\n            }\n            for (const colorId in colors) {\n                const colorHex = colors[colorId];\n                if (typeof colorHex === 'string') {\n                    result.colors[colorId] = ( Color.fromHex(colors[colorId]));\n                }\n            }\n        }\n        const tokenColors = contentValue.tokenColors;\n        if (tokenColors) {\n            if (Array.isArray(tokenColors)) {\n                result.textMateRules.push(...tokenColors);\n            }\n            else if (typeof tokenColors === 'string') {\n                await _loadSyntaxTokens(extensionResourceLoaderService, resources.joinPath(resources.dirname(themeLocation), tokenColors), result);\n            }\n            else {\n                return Promise.reject(( new Error(( nls.localize(\n                    { key: 'error.invalidformat.tokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] },\n                    \"Problem parsing color theme file: {0}. Property 'tokenColors' should be either an array specifying colors or a path to a TextMate theme file\",\n                    ( themeLocation.toString())\n                )))));\n            }\n        }\n        const semanticTokenColors = contentValue.semanticTokenColors;\n        if (semanticTokenColors && typeof semanticTokenColors === 'object') {\n            for (const key in semanticTokenColors) {\n                try {\n                    const rule = readSemanticTokenRule(key, semanticTokenColors[key]);\n                    if (rule) {\n                        result.semanticTokenRules.push(rule);\n                    }\n                }\n                catch (e) {\n                    return Promise.reject(( new Error(( nls.localize(\n                        { key: 'error.invalidformat.semanticTokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] },\n                        \"Problem parsing color theme file: {0}. Property 'semanticTokenColors' contains a invalid selector\",\n                        ( themeLocation.toString())\n                    )))));\n                }\n            }\n        }\n    }\n    else {\n        return _loadSyntaxTokens(extensionResourceLoaderService, themeLocation, result);\n    }\n}\nfunction _loadSyntaxTokens(extensionResourceLoaderService, themeLocation, result) {\n    return extensionResourceLoaderService.readExtensionResource(themeLocation).then(content => {\n        try {\n            const contentValue = parse(content);\n            const settings = contentValue.settings;\n            if (!Array.isArray(settings)) {\n                return Promise.reject(( new Error(( nls.localize(\n                    'error.plist.invalidformat',\n                    \"Problem parsing tmTheme file: {0}. 'settings' is not array.\"\n                )))));\n            }\n            convertSettings(settings, result);\n            return Promise.resolve(null);\n        }\n        catch (e) {\n            return Promise.reject(( new Error(( nls.localize('error.cannotparse', \"Problems parsing tmTheme file: {0}\", e.message)))));\n        }\n    }, error => {\n        return Promise.reject(( new Error(( nls.localize(\n            'error.cannotload',\n            \"Problems loading tmTheme file {0}: {1}\",\n            ( themeLocation.toString()),\n            error.message\n        )))));\n    });\n}\nconst defaultThemeColors = {\n    'light': [\n        { scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n        { scope: 'token.debug-token', settings: { foreground: '#800080' } }\n    ],\n    'dark': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#f44747' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ],\n    'hcLight': [\n        { scope: 'token.info-token', settings: { foreground: '#316bcd' } },\n        { scope: 'token.warn-token', settings: { foreground: '#cd9731' } },\n        { scope: 'token.error-token', settings: { foreground: '#cd3131' } },\n        { scope: 'token.debug-token', settings: { foreground: '#800080' } }\n    ],\n    'hcDark': [\n        { scope: 'token.info-token', settings: { foreground: '#6796e6' } },\n        { scope: 'token.warn-token', settings: { foreground: '#008000' } },\n        { scope: 'token.error-token', settings: { foreground: '#FF0000' } },\n        { scope: 'token.debug-token', settings: { foreground: '#b267e6' } }\n    ]\n};\nconst noMatch = (_scope) => -1;\nfunction nameMatcher(identifers, scope) {\n    function findInIdents(s, lastIndent) {\n        for (let i = lastIndent - 1; i >= 0; i--) {\n            if (scopesAreMatching(s, identifers[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    if (scope.length < identifers.length) {\n        return -1;\n    }\n    let lastScopeIndex = scope.length - 1;\n    let lastIdentifierIndex = findInIdents(scope[lastScopeIndex--], identifers.length);\n    if (lastIdentifierIndex >= 0) {\n        const score = (lastIdentifierIndex + 1) * 0x10000 + identifers[lastIdentifierIndex].length;\n        while (lastScopeIndex >= 0) {\n            lastIdentifierIndex = findInIdents(scope[lastScopeIndex--], lastIdentifierIndex);\n            if (lastIdentifierIndex === -1) {\n                return -1;\n            }\n        }\n        return score;\n    }\n    return -1;\n}\nfunction scopesAreMatching(thisScopeName, scopeName) {\n    if (!thisScopeName) {\n        return false;\n    }\n    if (thisScopeName === scopeName) {\n        return true;\n    }\n    const len = scopeName.length;\n    return thisScopeName.length > len && thisScopeName.substr(0, len) === scopeName && thisScopeName[len] === '.';\n}\nfunction getScopeMatcher(rule) {\n    const ruleScope = rule.scope;\n    if (!ruleScope || !rule.settings) {\n        return noMatch;\n    }\n    const matchers = [];\n    if (Array.isArray(ruleScope)) {\n        for (const rs of ruleScope) {\n            createMatchers(rs, nameMatcher, matchers);\n        }\n    }\n    else {\n        createMatchers(ruleScope, nameMatcher, matchers);\n    }\n    if (matchers.length === 0) {\n        return noMatch;\n    }\n    return (scope) => {\n        let max = matchers[0].matcher(scope);\n        for (let i = 1; i < matchers.length; i++) {\n            max = Math.max(max, matchers[i].matcher(scope));\n        }\n        return max;\n    };\n}\nfunction readSemanticTokenRule(selectorString, settings) {\n    const selector = tokenClassificationRegistry.parseTokenSelector(selectorString);\n    let style;\n    if (typeof settings === 'string') {\n        style = TokenStyle.fromSettings(settings, undefined);\n    }\n    else if (isSemanticTokenColorizationSetting(settings)) {\n        style = TokenStyle.fromSettings(settings.foreground, settings.fontStyle, settings.bold, settings.underline, settings.strikethrough, settings.italic);\n    }\n    if (style) {\n        return { selector, style };\n    }\n    return undefined;\n}\nfunction isSemanticTokenColorizationSetting(style) {\n    return style && (types.isString(style.foreground) || types.isString(style.fontStyle) || types.isBoolean(style.italic)\n        || types.isBoolean(style.underline) || types.isBoolean(style.strikethrough) || types.isBoolean(style.bold));\n}\nclass TokenColorIndex {\n    constructor() {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = Object.create(null);\n    }\n    add(color) {\n        color = normalizeColor(color);\n        if (color === undefined) {\n            return 0;\n        }\n        let value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        value = ++this._lastColorId;\n        this._color2id[color] = value;\n        this._id2color[value] = color;\n        return value;\n    }\n    get(color) {\n        color = normalizeColor(color);\n        if (color === undefined) {\n            return 0;\n        }\n        const value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        console.log(`Color ${color} not in index.`);\n        return 0;\n    }\n    asArray() {\n        return this._id2color.slice(0);\n    }\n}\nfunction normalizeColor(color) {\n    if (!color) {\n        return undefined;\n    }\n    if (typeof color !== 'string') {\n        color = Color.Format.CSS.formatHexA(color, true);\n    }\n    const len = color.length;\n    if (color.charCodeAt(0) !== 35  || (len !== 4 && len !== 5 && len !== 7 && len !== 9)) {\n        return undefined;\n    }\n    const result = [35 ];\n    for (let i = 1; i < len; i++) {\n        const upper = hexUpper(color.charCodeAt(i));\n        if (!upper) {\n            return undefined;\n        }\n        result.push(upper);\n        if (len === 4 || len === 5) {\n            result.push(upper);\n        }\n    }\n    if (result.length === 9 && result[7] === 70  && result[8] === 70 ) {\n        result.length = 7;\n    }\n    return String.fromCharCode(...result);\n}\nfunction hexUpper(charCode) {\n    if (charCode >= 48  && charCode <= 57  || charCode >= 65  && charCode <= 70 ) {\n        return charCode;\n    }\n    else if (charCode >= 97  && charCode <= 102 ) {\n        return charCode - 97  + 65 ;\n    }\n    return 0;\n}\nexport { ColorThemeData };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { iconsSchemaId } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';\nconst fontIdRegex = '^([\\\\w_-]+)$';\nconst fontStyleRegex = '^(normal|italic|(oblique[ \\\\w\\\\s-]+))$';\nconst fontWeightRegex = '^(normal|bold|lighter|bolder|(\\\\d{0-1000}))$';\nconst fontSizeRegex = '^([\\\\w .%_-]+)$';\nconst fontFormatRegex = '^woff|woff2|truetype|opentype|embedded-opentype|svg$';\nconst schemaId = 'vscode://schemas/product-icon-theme';\nconst schema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    properties: {\n        fonts: {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    id: {\n                        type: 'string',\n                        description: ( nls.localize('schema.id', 'The ID of the font.')),\n                        pattern: fontIdRegex,\n                        patternErrorMessage: ( nls.localize(\n                            'schema.id.formatError',\n                            'The ID must only contain letters, numbers, underscore and minus.'\n                        ))\n                    },\n                    src: {\n                        type: 'array',\n                        description: ( nls.localize('schema.src', 'The location of the font.')),\n                        items: {\n                            type: 'object',\n                            properties: {\n                                path: {\n                                    type: 'string',\n                                    description: ( nls.localize(\n                                        'schema.font-path',\n                                        'The font path, relative to the current product icon theme file.'\n                                    )),\n                                },\n                                format: {\n                                    type: 'string',\n                                    description: ( nls.localize('schema.font-format', 'The format of the font.')),\n                                    enum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']\n                                }\n                            },\n                            required: [\n                                'path',\n                                'format'\n                            ]\n                        }\n                    },\n                    weight: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.font-weight',\n                            'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'\n                        )),\n                        anyOf: [\n                            { enum: ['normal', 'bold', 'lighter', 'bolder'] },\n                            { type: 'string', pattern: fontWeightRegex }\n                        ]\n                    },\n                    style: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.font-style',\n                            'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'\n                        )),\n                        anyOf: [\n                            { enum: ['normal', 'italic', 'oblique'] },\n                            { type: 'string', pattern: fontStyleRegex }\n                        ]\n                    }\n                },\n                required: [\n                    'id',\n                    'src'\n                ]\n            }\n        },\n        iconDefinitions: {\n            description: ( nls.localize('schema.iconDefinitions', 'Association of icon name to a font character.')),\n            $ref: iconsSchemaId\n        }\n    }\n};\nfunction registerProductIconThemeSchemas() {\n    const schemaRegistry = ( Registry.as(Extensions.JSONContribution));\n    schemaRegistry.registerSchema(schemaId, schema);\n}\nexport { fontFormatRegex, fontIdRegex, fontSizeRegex, fontStyleRegex, fontWeightRegex, registerProductIconThemeSchemas };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { fontIdRegex, fontWeightRegex, fontStyleRegex, fontSizeRegex } from './productIconThemeSchema.js';\nconst schemaId = 'vscode://schemas/icon-theme';\nconst schema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    definitions: {\n        folderExpanded: {\n            type: 'string',\n            description: ( nls.localize(\n                'schema.folderExpanded',\n                'The folder icon for expanded folders. The expanded folder icon is optional. If not set, the icon defined for folder will be shown.'\n            ))\n        },\n        folder: {\n            type: 'string',\n            description: ( nls.localize(\n                'schema.folder',\n                'The folder icon for collapsed folders, and if folderExpanded is not set, also for expanded folders.'\n            ))\n        },\n        file: {\n            type: 'string',\n            description: ( nls.localize(\n                'schema.file',\n                'The default file icon, shown for all files that don\\'t match any extension, filename or language id.'\n            ))\n        },\n        folderNames: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.folderNames',\n                'Associates folder names to icons. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( nls.localize('schema.folderName', 'The ID of the icon definition for the association.'))\n            }\n        },\n        folderNamesExpanded: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.folderNamesExpanded',\n                'Associates folder names to icons for expanded folders. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( nls.localize(\n                    'schema.folderNameExpanded',\n                    'The ID of the icon definition for the association.'\n                ))\n            }\n        },\n        fileExtensions: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.fileExtensions',\n                'Associates file extensions to icons. The object key is the file extension name. The extension name is the last segment of a file name after the last dot (not including the dot). Extensions are compared case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( nls.localize(\n                    'schema.fileExtension',\n                    'The ID of the icon definition for the association.'\n                ))\n            }\n        },\n        fileNames: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.fileNames',\n                'Associates file names to icons. The object key is the full file name, but not including any path segments. File name can include dots and a possible file extension. No patterns or wildcards are allowed. File name matching is case insensitive.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( nls.localize('schema.fileName', 'The ID of the icon definition for the association.'))\n            }\n        },\n        languageIds: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.languageIds',\n                'Associates languages to icons. The object key is the language id as defined in the language contribution point.'\n            )),\n            additionalProperties: {\n                type: 'string',\n                description: ( nls.localize('schema.languageId', 'The ID of the icon definition for the association.'))\n            }\n        },\n        associations: {\n            type: 'object',\n            properties: {\n                folderExpanded: {\n                    $ref: '#/definitions/folderExpanded'\n                },\n                folder: {\n                    $ref: '#/definitions/folder'\n                },\n                file: {\n                    $ref: '#/definitions/file'\n                },\n                folderNames: {\n                    $ref: '#/definitions/folderNames'\n                },\n                folderNamesExpanded: {\n                    $ref: '#/definitions/folderNamesExpanded'\n                },\n                fileExtensions: {\n                    $ref: '#/definitions/fileExtensions'\n                },\n                fileNames: {\n                    $ref: '#/definitions/fileNames'\n                },\n                languageIds: {\n                    $ref: '#/definitions/languageIds'\n                }\n            }\n        }\n    },\n    properties: {\n        fonts: {\n            type: 'array',\n            description: ( nls.localize('schema.fonts', 'Fonts that are used in the icon definitions.')),\n            items: {\n                type: 'object',\n                properties: {\n                    id: {\n                        type: 'string',\n                        description: ( nls.localize('schema.id', 'The ID of the font.')),\n                        pattern: fontIdRegex,\n                        patternErrorMessage: ( nls.localize(\n                            'schema.id.formatError',\n                            'The ID must only contain letter, numbers, underscore and minus.'\n                        ))\n                    },\n                    src: {\n                        type: 'array',\n                        description: ( nls.localize('schema.src', 'The location of the font.')),\n                        items: {\n                            type: 'object',\n                            properties: {\n                                path: {\n                                    type: 'string',\n                                    description: ( nls.localize(\n                                        'schema.font-path',\n                                        'The font path, relative to the current file icon theme file.'\n                                    )),\n                                },\n                                format: {\n                                    type: 'string',\n                                    description: ( nls.localize('schema.font-format', 'The format of the font.')),\n                                    enum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']\n                                }\n                            },\n                            required: [\n                                'path',\n                                'format'\n                            ]\n                        }\n                    },\n                    weight: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.font-weight',\n                            'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'\n                        )),\n                        pattern: fontWeightRegex\n                    },\n                    style: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.font-style',\n                            'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'\n                        )),\n                        pattern: fontStyleRegex\n                    },\n                    size: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.font-size',\n                            'The default size of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-size for valid values.'\n                        )),\n                        pattern: fontSizeRegex\n                    }\n                },\n                required: [\n                    'id',\n                    'src'\n                ]\n            }\n        },\n        iconDefinitions: {\n            type: 'object',\n            description: ( nls.localize(\n                'schema.iconDefinitions',\n                'Description of all icons that can be used when associating files to icons.'\n            )),\n            additionalProperties: {\n                type: 'object',\n                description: ( nls.localize(\n                    'schema.iconDefinition',\n                    'An icon definition. The object key is the ID of the definition.'\n                )),\n                properties: {\n                    iconPath: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.iconPath',\n                            'When using a SVG or PNG: The path to the image. The path is relative to the icon set file.'\n                        ))\n                    },\n                    fontCharacter: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.fontCharacter',\n                            'When using a glyph font: The character in the font to use.'\n                        ))\n                    },\n                    fontColor: {\n                        type: 'string',\n                        format: 'color-hex',\n                        description: ( nls.localize('schema.fontColor', 'When using a glyph font: The color to use.'))\n                    },\n                    fontSize: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.fontSize',\n                            'When using a font: The font size in percentage to the text font. If not set, defaults to the size in the font definition.'\n                        )),\n                        pattern: fontSizeRegex\n                    },\n                    fontId: {\n                        type: 'string',\n                        description: ( nls.localize(\n                            'schema.fontId',\n                            'When using a font: The id of the font. If not set, defaults to the first font definition.'\n                        ))\n                    }\n                }\n            }\n        },\n        folderExpanded: {\n            $ref: '#/definitions/folderExpanded'\n        },\n        folder: {\n            $ref: '#/definitions/folder'\n        },\n        file: {\n            $ref: '#/definitions/file'\n        },\n        folderNames: {\n            $ref: '#/definitions/folderNames'\n        },\n        folderNamesExpanded: {\n            $ref: '#/definitions/folderNamesExpanded'\n        },\n        fileExtensions: {\n            $ref: '#/definitions/fileExtensions'\n        },\n        fileNames: {\n            $ref: '#/definitions/fileNames'\n        },\n        languageIds: {\n            $ref: '#/definitions/languageIds'\n        },\n        light: {\n            $ref: '#/definitions/associations',\n            description: ( nls.localize(\n                'schema.light',\n                'Optional associations for file icons in light color themes.'\n            ))\n        },\n        highContrast: {\n            $ref: '#/definitions/associations',\n            description: ( nls.localize(\n                'schema.highContrast',\n                'Optional associations for file icons in high contrast color themes.'\n            ))\n        },\n        hidesExplorerArrows: {\n            type: 'boolean',\n            description: ( nls.localize(\n                'schema.hidesExplorerArrows',\n                'Configures whether the file explorer\\'s arrows should be hidden when this theme is active.'\n            ))\n        },\n        showLanguageModeIcons: {\n            type: 'boolean',\n            description: ( nls.localize(\n                'schema.showLanguageModeIcons',\n                'Configures whether the default language icons should be used if the theme does not define an icon for a language.'\n            ))\n        }\n    }\n};\nfunction registerFileIconThemeSchemas() {\n    const schemaRegistry = ( Registry.as(Extensions.JSONContribution));\n    schemaRegistry.registerSchema(schemaId, schema);\n}\nexport { registerFileIconThemeSchemas };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as path from 'monaco-editor/esm/vs/base/common/path.js';\nimport * as resources from 'monaco-editor/esm/vs/base/common/resources.js';\nimport * as json from 'monaco-editor/esm/vs/base/common/json.js';\nimport { ExtensionData } from '../common/workbenchThemeService.js';\nimport { getParseErrorMessage } from '../../../../base/common/jsonErrorMessages.js';\nimport { asCSSUrl } from 'monaco-editor/esm/vs/base/browser/dom.js';\nclass FileIconThemeData {\n    static { this.STORAGE_KEY = 'iconThemeData'; }\n    constructor(id, label, settingsId) {\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n        this.hasFileIcons = false;\n        this.hasFolderIcons = false;\n        this.hidesExplorerArrows = false;\n    }\n    ensureLoaded(themeLoader) {\n        return !this.isLoaded ? this.load(themeLoader) : Promise.resolve(this.styleSheetContent);\n    }\n    reload(themeLoader) {\n        return this.load(themeLoader);\n    }\n    load(themeLoader) {\n        return themeLoader.load(this);\n    }\n    static fromExtensionTheme(iconTheme, iconThemeLocation, extensionData) {\n        const id = extensionData.extensionId + '-' + iconTheme.id;\n        const label = iconTheme.label || path.basename(iconTheme.path);\n        const settingsId = iconTheme.id;\n        const themeData = ( new FileIconThemeData(id, label, settingsId));\n        themeData.description = iconTheme.description;\n        themeData.location = iconThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.watch = iconTheme._watch;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n    static { this._noIconTheme = null; }\n    static get noIconTheme() {\n        let themeData = FileIconThemeData._noIconTheme;\n        if (!themeData) {\n            themeData = FileIconThemeData._noIconTheme = ( new FileIconThemeData('', '', null));\n            themeData.hasFileIcons = false;\n            themeData.hasFolderIcons = false;\n            themeData.hidesExplorerArrows = false;\n            themeData.isLoaded = true;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n        }\n        return themeData;\n    }\n    static createUnloadedTheme(id) {\n        const themeData = ( new FileIconThemeData(id, '', '__' + id));\n        themeData.isLoaded = false;\n        themeData.hasFileIcons = false;\n        themeData.hasFolderIcons = false;\n        themeData.hidesExplorerArrows = false;\n        themeData.extensionData = undefined;\n        themeData.watch = false;\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(FileIconThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( new FileIconThemeData('', '', null));\n            for (const key in data) {\n                switch (key) {\n                    case 'id':\n                    case 'label':\n                    case 'description':\n                    case 'settingsId':\n                    case 'styleSheetContent':\n                    case 'hasFileIcons':\n                    case 'hidesExplorerArrows':\n                    case 'hasFolderIcons':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    toStorage(storageService) {\n        const data = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            description: this.description,\n            settingsId: this.settingsId,\n            styleSheetContent: this.styleSheetContent,\n            hasFileIcons: this.hasFileIcons,\n            hasFolderIcons: this.hasFolderIcons,\n            hidesExplorerArrows: this.hidesExplorerArrows,\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            watch: this.watch\n        });\n        storageService.store(FileIconThemeData.STORAGE_KEY, data, 0 , 1 );\n    }\n}\nclass FileIconThemeLoader {\n    constructor(fileService, languageService) {\n        this.fileService = fileService;\n        this.languageService = languageService;\n    }\n    load(data) {\n        if (!data.location) {\n            return Promise.resolve(data.styleSheetContent);\n        }\n        return this.loadIconThemeDocument(data.location).then(iconThemeDocument => {\n            const result = this.processIconThemeDocument(data.id, data.location, iconThemeDocument);\n            data.styleSheetContent = result.content;\n            data.hasFileIcons = result.hasFileIcons;\n            data.hasFolderIcons = result.hasFolderIcons;\n            data.hidesExplorerArrows = result.hidesExplorerArrows;\n            data.isLoaded = true;\n            return data.styleSheetContent;\n        });\n    }\n    loadIconThemeDocument(location) {\n        return this.fileService.readExtensionResource(location).then((content) => {\n            const errors = [];\n            const contentValue = json.parse(content, errors);\n            if (errors.length > 0) {\n                return Promise.reject(( new Error(( nls.localize(\n                    'error.cannotparseicontheme',\n                    \"Problems parsing file icons file: {0}\",\n                    ( errors.map(e => getParseErrorMessage(e.error))).join(', ')\n                )))));\n            }\n            else if (json.getNodeType(contentValue) !== 'object') {\n                return Promise.reject(( new Error(( nls.localize(\n                    'error.invalidformat',\n                    \"Invalid format for file icons theme file: Object expected.\"\n                )))));\n            }\n            return Promise.resolve(contentValue);\n        });\n    }\n    processIconThemeDocument(id, iconThemeDocumentLocation, iconThemeDocument) {\n        const result = { content: '', hasFileIcons: false, hasFolderIcons: false, hidesExplorerArrows: !!iconThemeDocument.hidesExplorerArrows };\n        let hasSpecificFileIcons = false;\n        if (!iconThemeDocument.iconDefinitions) {\n            return result;\n        }\n        const selectorByDefinitionId = {};\n        const coveredLanguages = {};\n        const iconThemeDocumentLocationDirname = resources.dirname(iconThemeDocumentLocation);\n        function resolvePath(path) {\n            return resources.joinPath(iconThemeDocumentLocationDirname, path);\n        }\n        function collectSelectors(associations, baseThemeClassName) {\n            function addSelector(selector, defId) {\n                if (defId) {\n                    let list = selectorByDefinitionId[defId];\n                    if (!list) {\n                        list = selectorByDefinitionId[defId] = [];\n                    }\n                    list.push(selector);\n                }\n            }\n            if (associations) {\n                let qualifier = '.show-file-icons';\n                if (baseThemeClassName) {\n                    qualifier = baseThemeClassName + ' ' + qualifier;\n                }\n                const expanded = '.monaco-tl-twistie.collapsible:not(.collapsed) + .monaco-tl-contents';\n                if (associations.folder) {\n                    addSelector(`${qualifier} .folder-icon::before`, associations.folder);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.folderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .folder-icon::before`, associations.folderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                const rootFolder = associations.rootFolder || associations.folder;\n                const rootFolderExpanded = associations.rootFolderExpanded || associations.folderExpanded;\n                if (rootFolder) {\n                    addSelector(`${qualifier} .rootfolder-icon::before`, rootFolder);\n                    result.hasFolderIcons = true;\n                }\n                if (rootFolderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .rootfolder-icon::before`, rootFolderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.file) {\n                    addSelector(`${qualifier} .file-icon::before`, associations.file);\n                    result.hasFileIcons = true;\n                }\n                const folderNames = associations.folderNames;\n                if (folderNames) {\n                    for (const key in folderNames) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(name)}-name-folder-icon`);\n                        addSelector(`${qualifier} ${selectors.join('')}.folder-icon::before`, folderNames[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const folderNamesExpanded = associations.folderNamesExpanded;\n                if (folderNamesExpanded) {\n                    for (const key in folderNamesExpanded) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(name)}-name-folder-icon`);\n                        addSelector(`${qualifier} ${expanded} ${selectors.join('')}.folder-icon::before`, folderNamesExpanded[key]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                const languageIds = associations.languageIds;\n                if (languageIds) {\n                    if (!languageIds.jsonc && languageIds.json) {\n                        languageIds.jsonc = languageIds.json;\n                    }\n                    for (const languageId in languageIds) {\n                        addSelector(`${qualifier} .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`, languageIds[languageId]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                        coveredLanguages[languageId] = true;\n                    }\n                }\n                const fileExtensions = associations.fileExtensions;\n                if (fileExtensions) {\n                    for (const key in fileExtensions) {\n                        const selectors = [];\n                        const name = handleParentFolder(key.toLowerCase(), selectors);\n                        const segments = name.split('.');\n                        if (segments.length) {\n                            for (let i = 0; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon');\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileExtensions[key]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                    }\n                }\n                const fileNames = associations.fileNames;\n                if (fileNames) {\n                    for (const key in fileNames) {\n                        const selectors = [];\n                        const fileName = handleParentFolder(key.toLowerCase(), selectors);\n                        selectors.push(`.${escapeCSS(fileName)}-name-file-icon`);\n                        selectors.push('.name-file-icon');\n                        const segments = fileName.split('.');\n                        if (segments.length) {\n                            for (let i = 1; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon');\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileNames[key]);\n                        result.hasFileIcons = true;\n                        hasSpecificFileIcons = true;\n                    }\n                }\n            }\n        }\n        collectSelectors(iconThemeDocument);\n        collectSelectors(iconThemeDocument.light, '.vs');\n        collectSelectors(iconThemeDocument.highContrast, '.hc-black');\n        collectSelectors(iconThemeDocument.highContrast, '.hc-light');\n        if (!result.hasFileIcons && !result.hasFolderIcons) {\n            return result;\n        }\n        const showLanguageModeIcons = iconThemeDocument.showLanguageModeIcons === true || (hasSpecificFileIcons && iconThemeDocument.showLanguageModeIcons !== false);\n        const cssRules = [];\n        const fonts = iconThemeDocument.fonts;\n        const fontSizes = ( new Map());\n        if (Array.isArray(fonts)) {\n            const defaultFontSize = fonts[0].size || '150%';\n            fonts.forEach(font => {\n                const src = ( font.src.map(l => `${asCSSUrl(resolvePath(l.path))} format('${l.format}')`)).join(', ');\n                cssRules.push(`@font-face { src: ${src}; font-family: '${font.id}'; font-weight: ${font.weight}; font-style: ${font.style}; font-display: block; }`);\n                if (font.size !== undefined && font.size !== defaultFontSize) {\n                    fontSizes.set(font.id, font.size);\n                }\n            });\n            cssRules.push(`.show-file-icons .file-icon::before, .show-file-icons .folder-icon::before, .show-file-icons .rootfolder-icon::before { font-family: '${fonts[0].id}'; font-size: ${defaultFontSize}; }`);\n        }\n        for (const defId in selectorByDefinitionId) {\n            const selectors = selectorByDefinitionId[defId];\n            const definition = iconThemeDocument.iconDefinitions[defId];\n            if (definition) {\n                if (definition.iconPath) {\n                    cssRules.push(`${selectors.join(', ')} { content: ' '; background-image: ${asCSSUrl(resolvePath(definition.iconPath))}; }`);\n                }\n                else if (definition.fontCharacter || definition.fontColor) {\n                    const body = [];\n                    if (definition.fontColor) {\n                        body.push(`color: ${definition.fontColor};`);\n                    }\n                    if (definition.fontCharacter) {\n                        body.push(`content: '${definition.fontCharacter}';`);\n                    }\n                    const fontSize = definition.fontSize ?? (definition.fontId ? fontSizes.get(definition.fontId) : undefined);\n                    if (fontSize) {\n                        body.push(`font-size: ${fontSize};`);\n                    }\n                    if (definition.fontId) {\n                        body.push(`font-family: ${definition.fontId};`);\n                    }\n                    if (showLanguageModeIcons) {\n                        body.push(`background-image: unset;`);\n                    }\n                    cssRules.push(`${selectors.join(', ')} { ${body.join(' ')} }`);\n                }\n            }\n        }\n        if (showLanguageModeIcons) {\n            for (const languageId of this.languageService.getRegisteredLanguageIds()) {\n                if (!coveredLanguages[languageId]) {\n                    const icon = this.languageService.getIcon(languageId);\n                    if (icon) {\n                        const selector = `.show-file-icons .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`;\n                        cssRules.push(`${selector} { content: ' '; background-image: ${asCSSUrl(icon.dark)}; }`);\n                        cssRules.push(`.vs ${selector} { content: ' '; background-image: ${asCSSUrl(icon.light)}; }`);\n                    }\n                }\n            }\n        }\n        result.content = cssRules.join('\\n');\n        return result;\n    }\n}\nfunction handleParentFolder(key, selectors) {\n    const lastIndexOfSlash = key.lastIndexOf('/');\n    if (lastIndexOfSlash >= 0) {\n        const parentFolder = key.substring(0, lastIndexOfSlash);\n        selectors.push(`.${escapeCSS(parentFolder)}-name-dir-icon`);\n        return key.substring(lastIndexOfSlash + 1);\n    }\n    return key;\n}\nfunction escapeCSS(str) {\n    str = str.replace(/[\\11\\12\\14\\15\\40]/g, '/');\n    return window.CSS.escape(str);\n}\nexport { FileIconThemeData, FileIconThemeLoader };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { workbenchColorsSchemaId } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { tokenStylingSchemaId } from '../../../../platform/theme/common/tokenClassificationRegistry.js';\nconst textMateScopes = [\n    'comment',\n    'comment.block',\n    'comment.block.documentation',\n    'comment.line',\n    'constant',\n    'constant.character',\n    'constant.character.escape',\n    'constant.numeric',\n    'constant.numeric.integer',\n    'constant.numeric.float',\n    'constant.numeric.hex',\n    'constant.numeric.octal',\n    'constant.other',\n    'constant.regexp',\n    'constant.rgb-value',\n    'emphasis',\n    'entity',\n    'entity.name',\n    'entity.name.class',\n    'entity.name.function',\n    'entity.name.method',\n    'entity.name.section',\n    'entity.name.selector',\n    'entity.name.tag',\n    'entity.name.type',\n    'entity.other',\n    'entity.other.attribute-name',\n    'entity.other.inherited-class',\n    'invalid',\n    'invalid.deprecated',\n    'invalid.illegal',\n    'keyword',\n    'keyword.control',\n    'keyword.operator',\n    'keyword.operator.new',\n    'keyword.operator.assignment',\n    'keyword.operator.arithmetic',\n    'keyword.operator.logical',\n    'keyword.other',\n    'markup',\n    'markup.bold',\n    'markup.changed',\n    'markup.deleted',\n    'markup.heading',\n    'markup.inline.raw',\n    'markup.inserted',\n    'markup.italic',\n    'markup.list',\n    'markup.list.numbered',\n    'markup.list.unnumbered',\n    'markup.other',\n    'markup.quote',\n    'markup.raw',\n    'markup.underline',\n    'markup.underline.link',\n    'meta',\n    'meta.block',\n    'meta.cast',\n    'meta.class',\n    'meta.function',\n    'meta.function-call',\n    'meta.preprocessor',\n    'meta.return-type',\n    'meta.selector',\n    'meta.tag',\n    'meta.type.annotation',\n    'meta.type',\n    'punctuation.definition.string.begin',\n    'punctuation.definition.string.end',\n    'punctuation.separator',\n    'punctuation.separator.continuation',\n    'punctuation.terminator',\n    'storage',\n    'storage.modifier',\n    'storage.type',\n    'string',\n    'string.interpolated',\n    'string.other',\n    'string.quoted',\n    'string.quoted.double',\n    'string.quoted.other',\n    'string.quoted.single',\n    'string.quoted.triple',\n    'string.regexp',\n    'string.unquoted',\n    'strong',\n    'support',\n    'support.class',\n    'support.constant',\n    'support.function',\n    'support.other',\n    'support.type',\n    'support.type.property-name',\n    'support.variable',\n    'variable',\n    'variable.language',\n    'variable.name',\n    'variable.other',\n    'variable.other.readwrite',\n    'variable.parameter'\n];\nconst textmateColorsSchemaId = 'vscode://schemas/textmate-colors';\nconst textmateColorGroupSchemaId = `${textmateColorsSchemaId}#/definitions/colorGroup`;\nconst textmateColorSchema = {\n    type: 'array',\n    definitions: {\n        colorGroup: {\n            default: '#FF0000',\n            anyOf: [\n                {\n                    type: 'string',\n                    format: 'color-hex'\n                },\n                {\n                    $ref: '#/definitions/settings'\n                }\n            ]\n        },\n        settings: {\n            type: 'object',\n            description: ( nls.localize('schema.token.settings', 'Colors and styles for the token.')),\n            properties: {\n                foreground: {\n                    type: 'string',\n                    description: ( nls.localize('schema.token.foreground', 'Foreground color for the token.')),\n                    format: 'color-hex',\n                    default: '#ff0000'\n                },\n                background: {\n                    type: 'string',\n                    deprecationMessage: ( nls.localize(\n                        'schema.token.background.warning',\n                        'Token background colors are currently not supported.'\n                    ))\n                },\n                fontStyle: {\n                    type: 'string',\n                    description: ( nls.localize(\n                        'schema.token.fontStyle',\n                        'Font style of the rule: \\'italic\\', \\'bold\\', \\'underline\\', \\'strikethrough\\' or a combination. The empty string unsets inherited settings.'\n                    )),\n                    pattern: '^(\\\\s*\\\\b(italic|bold|underline|strikethrough))*\\\\s*$',\n                    patternErrorMessage: ( nls.localize(\n                        'schema.fontStyle.error',\n                        'Font style must be \\'italic\\', \\'bold\\', \\'underline\\', \\'strikethrough\\' or a combination or the empty string.'\n                    )),\n                    defaultSnippets: [\n                        { label: ( nls.localize('schema.token.fontStyle.none', 'None (clear inherited style)')), bodyText: '\"\"' },\n                        { body: 'italic' },\n                        { body: 'bold' },\n                        { body: 'underline' },\n                        { body: 'strikethrough' },\n                        { body: 'italic bold' },\n                        { body: 'italic underline' },\n                        { body: 'italic strikethrough' },\n                        { body: 'bold underline' },\n                        { body: 'bold strikethrough' },\n                        { body: 'underline strikethrough' },\n                        { body: 'italic bold underline' },\n                        { body: 'italic bold strikethrough' },\n                        { body: 'italic underline strikethrough' },\n                        { body: 'bold underline strikethrough' },\n                        { body: 'italic bold underline strikethrough' }\n                    ]\n                }\n            },\n            additionalProperties: false,\n            defaultSnippets: [{ body: { foreground: '${1:#FF0000}', fontStyle: '${2:bold}' } }]\n        }\n    },\n    items: {\n        type: 'object',\n        defaultSnippets: [{ body: { scope: '${1:keyword.operator}', settings: { foreground: '${2:#FF0000}' } } }],\n        properties: {\n            name: {\n                type: 'string',\n                description: ( nls.localize('schema.properties.name', 'Description of the rule.'))\n            },\n            scope: {\n                description: ( nls.localize(\n                    'schema.properties.scope',\n                    'Scope selector against which this rule matches.'\n                )),\n                anyOf: [\n                    {\n                        enum: textMateScopes\n                    },\n                    {\n                        type: 'string'\n                    },\n                    {\n                        type: 'array',\n                        items: {\n                            enum: textMateScopes\n                        }\n                    },\n                    {\n                        type: 'array',\n                        items: {\n                            type: 'string'\n                        }\n                    }\n                ]\n            },\n            settings: {\n                $ref: '#/definitions/settings'\n            }\n        },\n        required: [\n            'settings'\n        ],\n        additionalProperties: false\n    }\n};\nconst colorThemeSchemaId = 'vscode://schemas/color-theme';\nconst colorThemeSchema = {\n    type: 'object',\n    allowComments: true,\n    allowTrailingCommas: true,\n    properties: {\n        colors: {\n            description: ( nls.localize('schema.workbenchColors', 'Colors in the workbench')),\n            $ref: workbenchColorsSchemaId,\n            additionalProperties: false\n        },\n        tokenColors: {\n            anyOf: [{\n                    type: 'string',\n                    description: ( nls.localize(\n                        'schema.tokenColors.path',\n                        'Path to a tmTheme file (relative to the current file).'\n                    ))\n                },\n                {\n                    description: ( nls.localize('schema.colors', 'Colors for syntax highlighting')),\n                    $ref: textmateColorsSchemaId\n                }\n            ]\n        },\n        semanticHighlighting: {\n            type: 'boolean',\n            description: ( nls.localize(\n                'schema.supportsSemanticHighlighting',\n                'Whether semantic highlighting should be enabled for this theme.'\n            ))\n        },\n        semanticTokenColors: {\n            type: 'object',\n            description: ( nls.localize('schema.semanticTokenColors', 'Colors for semantic tokens')),\n            $ref: tokenStylingSchemaId\n        }\n    }\n};\nfunction registerColorThemeSchemas() {\n    const schemaRegistry = ( Registry.as(Extensions.JSONContribution));\n    schemaRegistry.registerSchema(colorThemeSchemaId, colorThemeSchema);\n    schemaRegistry.registerSchema(textmateColorsSchemaId, textmateColorSchema);\n}\nexport { colorThemeSchemaId, registerColorThemeSchemas, textmateColorGroupSchemaId, textmateColorsSchemaId };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as types from 'monaco-editor/esm/vs/base/common/types.js';\nimport * as resources from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';\nimport { ExtensionData, VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME } from './workbenchThemeService.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nfunction registerColorThemeExtensionPoint() {\n    return ( ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'themes',\n        jsonSchema: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.themes',\n                'Contributes textmate color themes.'\n            )),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { label: '${1:label}', id: '${2:id}', uiTheme: VS_DARK_THEME, path: './themes/${3:id}.tmTheme.' } }],\n                properties: {\n                    id: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.themes.id',\n                            'Id of the color theme as used in the user settings.'\n                        )),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.themes.label',\n                            'Label of the color theme as shown in the UI.'\n                        )),\n                        type: 'string'\n                    },\n                    uiTheme: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.themes.uiTheme',\n                            'Base theme defining the colors around the editor: \\'vs\\' is the light color theme, \\'vs-dark\\' is the dark color theme. \\'hc-black\\' is the dark high contrast theme, \\'hc-light\\' is the light high contrast theme.'\n                        )),\n                        enum: [VS_LIGHT_THEME, VS_DARK_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME]\n                    },\n                    path: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.themes.path',\n                            'Path of the tmTheme file. The path is relative to the extension folder and is typically \\'./colorthemes/awesome-color-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'uiTheme']\n            }\n        }\n    }));\n}\nfunction registerFileIconThemeExtensionPoint() {\n    return ( ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'iconThemes',\n        jsonSchema: {\n            description: ( nls.localize('vscode.extension.contributes.iconThemes', 'Contributes file icon themes.')),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './fileicons/${3:id}-icon-theme.json' } }],\n                properties: {\n                    id: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.iconThemes.id',\n                            'Id of the file icon theme as used in the user settings.'\n                        )),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.iconThemes.label',\n                            'Label of the file icon theme as shown in the UI.'\n                        )),\n                        type: 'string'\n                    },\n                    path: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.iconThemes.path',\n                            'Path of the file icon theme definition file. The path is relative to the extension folder and is typically \\'./fileicons/awesome-icon-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'id']\n            }\n        }\n    }));\n}\nfunction registerProductIconThemeExtensionPoint() {\n    return ( ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'productIconThemes',\n        jsonSchema: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.productIconThemes',\n                'Contributes product icon themes.'\n            )),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { id: '${1:id}', label: '${2:label}', path: './producticons/${3:id}-product-icon-theme.json' } }],\n                properties: {\n                    id: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.productIconThemes.id',\n                            'Id of the product icon theme as used in the user settings.'\n                        )),\n                        type: 'string'\n                    },\n                    label: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.productIconThemes.label',\n                            'Label of the product icon theme as shown in the UI.'\n                        )),\n                        type: 'string'\n                    },\n                    path: {\n                        description: ( nls.localize(\n                            'vscode.extension.contributes.productIconThemes.path',\n                            'Path of the product icon theme definition file. The path is relative to the extension folder and is typically \\'./producticons/awesome-product-icon-theme.json\\'.'\n                        )),\n                        type: 'string'\n                    }\n                },\n                required: ['path', 'id']\n            }\n        }\n    }));\n}\nclass ThemeRegistry {\n    constructor(themesExtPoint, create, idRequired = false, builtInTheme = undefined) {\n        this.themesExtPoint = themesExtPoint;\n        this.create = create;\n        this.idRequired = idRequired;\n        this.builtInTheme = builtInTheme;\n        this.onDidChangeEmitter = ( new Emitter());\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.extensionThemes = [];\n        this.initialize();\n    }\n    initialize() {\n        this.themesExtPoint.setHandler((extensions, delta) => {\n            const previousIds = {};\n            const added = [];\n            for (const theme of this.extensionThemes) {\n                previousIds[theme.id] = theme;\n            }\n            this.extensionThemes.length = 0;\n            for (const ext of extensions) {\n                const extensionData = ExtensionData.fromName(ext.description.publisher, ext.description.name, ext.description.isBuiltin);\n                this.onThemes(extensionData, ext.description.extensionLocation, ext.value, this.extensionThemes, ext.collector);\n            }\n            for (const theme of this.extensionThemes) {\n                if (!previousIds[theme.id]) {\n                    added.push(theme);\n                }\n                else {\n                    delete previousIds[theme.id];\n                }\n            }\n            const removed = ( Object.values(previousIds));\n            this.onDidChangeEmitter.fire({ themes: this.extensionThemes, added, removed });\n        });\n    }\n    onThemes(extensionData, extensionLocation, themeContributions, resultingThemes = [], log) {\n        if (!Array.isArray(themeContributions)) {\n            log?.error(( nls.localize(\n                'reqarray',\n                \"Extension point `{0}` must be an array.\",\n                this.themesExtPoint.name\n            )));\n            return resultingThemes;\n        }\n        themeContributions.forEach(theme => {\n            if (!theme.path || !types.isString(theme.path)) {\n                log?.error(( nls.localize(\n                    'reqpath',\n                    \"Expected string in `contributes.{0}.path`. Provided value: {1}\",\n                    this.themesExtPoint.name,\n                    String(theme.path)\n                )));\n                return;\n            }\n            if (this.idRequired && (!theme.id || !types.isString(theme.id))) {\n                log?.error(( nls.localize(\n                    'reqid',\n                    \"Expected string in `contributes.{0}.id`. Provided value: {1}\",\n                    this.themesExtPoint.name,\n                    String(theme.id)\n                )));\n                return;\n            }\n            const themeLocation = resources.joinPath(extensionLocation, theme.path);\n            if (!resources.isEqualOrParent(themeLocation, extensionLocation)) {\n                log?.warn(( nls.localize(\n                    'invalid.path.1',\n                    \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\",\n                    this.themesExtPoint.name,\n                    themeLocation.path,\n                    extensionLocation.path\n                )));\n            }\n            const themeData = this.create(theme, themeLocation, extensionData);\n            resultingThemes.push(themeData);\n        });\n        return resultingThemes;\n    }\n    findThemeById(themeId) {\n        if (this.builtInTheme && this.builtInTheme.id === themeId) {\n            return this.builtInTheme;\n        }\n        const allThemes = this.getThemes();\n        for (const t of allThemes) {\n            if (t.id === themeId) {\n                return t;\n            }\n        }\n        return undefined;\n    }\n    findThemeBySettingsId(settingsId, defaultSettingsId) {\n        if (this.builtInTheme && this.builtInTheme.settingsId === settingsId) {\n            return this.builtInTheme;\n        }\n        const allThemes = this.getThemes();\n        let defaultTheme = undefined;\n        for (const t of allThemes) {\n            if (t.settingsId === settingsId) {\n                return t;\n            }\n            if (t.settingsId === defaultSettingsId) {\n                defaultTheme = t;\n            }\n        }\n        return defaultTheme;\n    }\n    findThemeByExtensionLocation(extLocation) {\n        if (extLocation) {\n            return this.getThemes().filter(t => t.location && resources.isEqualOrParent(t.location, extLocation));\n        }\n        return [];\n    }\n    getThemes() {\n        return this.extensionThemes;\n    }\n    getMarketplaceThemes(manifest, extensionLocation, extensionData) {\n        const themes = manifest?.contributes?.[this.themesExtPoint.name];\n        if (Array.isArray(themes)) {\n            return this.onThemes(extensionData, extensionLocation, themes);\n        }\n        return [];\n    }\n}\nexport { ThemeRegistry, registerColorThemeExtensionPoint, registerFileIconThemeExtensionPoint, registerProductIconThemeExtensionPoint };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as types from 'monaco-editor/esm/vs/base/common/types.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { textmateColorsSchemaId, textmateColorGroupSchemaId } from './colorThemeSchema.js';\nimport { workbenchColorsSchemaId } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { tokenStylingSchemaId } from '../../../../platform/theme/common/tokenClassificationRegistry.js';\nimport { ThemeSettings, ThemeSettingDefaults } from './workbenchThemeService.js';\nimport { isWeb } from 'monaco-editor/esm/vs/base/common/platform.js';\nconst configurationRegistry = ( Registry.as(Extensions.Configuration));\nconst colorThemeSettingEnum = [];\nconst colorThemeSettingEnumItemLabels = [];\nconst colorThemeSettingEnumDescriptions = [];\nfunction formatSettingAsLink(str) {\n    return `\\`#${str}#\\``;\n}\nconst colorThemeSettingSchema = {\n    type: 'string',\n    description: ( nls.localize('colorTheme', \"Specifies the color theme used in the workbench.\")),\n    default: isWeb ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( nls.localize('colorThemeError', \"Theme is unknown or not installed.\")),\n};\nconst preferredDarkThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( nls.localize(\n        { key: 'preferredDarkColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme for dark OS appearance when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_DARK,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( nls.localize('colorThemeError', \"Theme is unknown or not installed.\")),\n};\nconst preferredLightThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( nls.localize(\n        { key: 'preferredLightColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme for light OS appearance when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_COLOR_SCHEME)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_LIGHT,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( nls.localize('colorThemeError', \"Theme is unknown or not installed.\")),\n};\nconst preferredHCDarkThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( nls.localize(\n        { key: 'preferredHCDarkColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme used in high contrast dark mode when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_HC)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_HC_DARK,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( nls.localize('colorThemeError', \"Theme is unknown or not installed.\")),\n};\nconst preferredHCLightThemeSettingSchema = {\n    type: 'string',\n    markdownDescription: ( nls.localize(\n        { key: 'preferredHCLightColorTheme', comment: ['{0} will become a link to another setting.'] },\n        'Specifies the preferred color theme used in high contrast light mode when {0} is enabled.',\n        formatSettingAsLink(ThemeSettings.DETECT_HC)\n    )),\n    default: ThemeSettingDefaults.COLOR_THEME_HC_LIGHT,\n    enum: colorThemeSettingEnum,\n    enumDescriptions: colorThemeSettingEnumDescriptions,\n    enumItemLabels: colorThemeSettingEnumItemLabels,\n    errorMessage: ( nls.localize('colorThemeError', \"Theme is unknown or not installed.\")),\n};\nconst detectColorSchemeSettingSchema = {\n    type: 'boolean',\n    markdownDescription: ( nls.localize(\n        { key: 'detectColorScheme', comment: ['{0} and {1} will become links to other settings.'] },\n        'If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at {0} is used, for light {1}.',\n        formatSettingAsLink(ThemeSettings.PREFERRED_DARK_THEME),\n        formatSettingAsLink(ThemeSettings.PREFERRED_LIGHT_THEME)\n    )),\n    default: false\n};\nconst colorCustomizationsSchema = {\n    type: 'object',\n    description: ( nls.localize(\n        'workbenchColors',\n        \"Overrides colors from the currently selected color theme.\"\n    )),\n    allOf: [{ $ref: workbenchColorsSchemaId }],\n    default: {},\n    defaultSnippets: [{\n            body: {}\n        }]\n};\nconst fileIconThemeSettingSchema = {\n    type: ['string', 'null'],\n    default: ThemeSettingDefaults.FILE_ICON_THEME,\n    description: ( nls.localize(\n        'iconTheme',\n        \"Specifies the file icon theme used in the workbench or 'null' to not show any file icons.\"\n    )),\n    enum: [null],\n    enumItemLabels: [( nls.localize('noIconThemeLabel', 'None'))],\n    enumDescriptions: [( nls.localize('noIconThemeDesc', 'No file icons'))],\n    errorMessage: ( nls.localize('iconThemeError', \"File icon theme is unknown or not installed.\"))\n};\nconst productIconThemeSettingSchema = {\n    type: ['string', 'null'],\n    default: ThemeSettingDefaults.PRODUCT_ICON_THEME,\n    description: ( nls.localize('productIconTheme', \"Specifies the product icon theme used.\")),\n    enum: [ThemeSettingDefaults.PRODUCT_ICON_THEME],\n    enumItemLabels: [( nls.localize('defaultProductIconThemeLabel', 'Default'))],\n    enumDescriptions: [( nls.localize('defaultProductIconThemeDesc', 'Default'))],\n    errorMessage: ( nls.localize('productIconThemeError', \"Product icon theme is unknown or not installed.\"))\n};\nconst detectHCSchemeSettingSchema = {\n    type: 'boolean',\n    default: true,\n    markdownDescription: ( nls.localize(\n        { key: 'autoDetectHighContrast', comment: ['{0} and {1} will become links to other settings.'] },\n        \"If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by {0} and {1}\",\n        formatSettingAsLink(ThemeSettings.PREFERRED_HC_DARK_THEME),\n        formatSettingAsLink(ThemeSettings.PREFERRED_HC_LIGHT_THEME)\n    )),\n    scope: 1\n};\nconst themeSettingsConfiguration = {\n    id: 'workbench',\n    order: 7.1,\n    type: 'object',\n    properties: {\n        [ThemeSettings.COLOR_THEME]: colorThemeSettingSchema,\n        [ThemeSettings.PREFERRED_DARK_THEME]: preferredDarkThemeSettingSchema,\n        [ThemeSettings.PREFERRED_LIGHT_THEME]: preferredLightThemeSettingSchema,\n        [ThemeSettings.PREFERRED_HC_DARK_THEME]: preferredHCDarkThemeSettingSchema,\n        [ThemeSettings.PREFERRED_HC_LIGHT_THEME]: preferredHCLightThemeSettingSchema,\n        [ThemeSettings.FILE_ICON_THEME]: fileIconThemeSettingSchema,\n        [ThemeSettings.COLOR_CUSTOMIZATIONS]: colorCustomizationsSchema,\n        [ThemeSettings.PRODUCT_ICON_THEME]: productIconThemeSettingSchema\n    }\n};\nconfigurationRegistry.registerConfiguration(themeSettingsConfiguration);\nconst themeSettingsWindowConfiguration = {\n    id: 'window',\n    order: 8.1,\n    type: 'object',\n    properties: {\n        [ThemeSettings.DETECT_HC]: detectHCSchemeSettingSchema,\n        [ThemeSettings.DETECT_COLOR_SCHEME]: detectColorSchemeSettingSchema,\n    }\n};\nconfigurationRegistry.registerConfiguration(themeSettingsWindowConfiguration);\nfunction tokenGroupSettings(description) {\n    return {\n        description,\n        $ref: textmateColorGroupSchemaId\n    };\n}\nconst themeSpecificSettingKey = '^\\\\[[^\\\\]]*(\\\\]\\\\s*\\\\[[^\\\\]]*)*\\\\]$';\nconst tokenColorSchema = {\n    type: 'object',\n    properties: {\n        comments: tokenGroupSettings(( nls.localize('editorColors.comments', \"Sets the colors and styles for comments\"))),\n        strings: tokenGroupSettings(( nls.localize('editorColors.strings', \"Sets the colors and styles for strings literals.\"))),\n        keywords: tokenGroupSettings(( nls.localize('editorColors.keywords', \"Sets the colors and styles for keywords.\"))),\n        numbers: tokenGroupSettings(( nls.localize('editorColors.numbers', \"Sets the colors and styles for number literals.\"))),\n        types: tokenGroupSettings(( nls.localize(\n            'editorColors.types',\n            \"Sets the colors and styles for type declarations and references.\"\n        ))),\n        functions: tokenGroupSettings(( nls.localize(\n            'editorColors.functions',\n            \"Sets the colors and styles for functions declarations and references.\"\n        ))),\n        variables: tokenGroupSettings(( nls.localize(\n            'editorColors.variables',\n            \"Sets the colors and styles for variables declarations and references.\"\n        ))),\n        textMateRules: {\n            description: ( nls.localize(\n                'editorColors.textMateRules',\n                'Sets colors and styles using textmate theming rules (advanced).'\n            )),\n            $ref: textmateColorsSchemaId\n        },\n        semanticHighlighting: {\n            description: ( nls.localize(\n                'editorColors.semanticHighlighting',\n                'Whether semantic highlighting should be enabled for this theme.'\n            )),\n            deprecationMessage: ( nls.localize(\n                'editorColors.semanticHighlighting.deprecationMessage',\n                'Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.'\n            )),\n            markdownDeprecationMessage: ( nls.localize(\n                { key: 'editorColors.semanticHighlighting.deprecationMessageMarkdown', comment: ['{0} will become a link to another setting.'] },\n                'Use `enabled` in {0} setting instead.',\n                formatSettingAsLink('editor.semanticTokenColorCustomizations')\n            )),\n            type: 'boolean'\n        }\n    },\n    additionalProperties: false\n};\nconst tokenColorCustomizationSchema = {\n    description: ( nls.localize(\n        'editorColors',\n        \"Overrides editor syntax colors and font style from the currently selected color theme.\"\n    )),\n    default: {},\n    allOf: [{ ...tokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\nconst semanticTokenColorSchema = {\n    type: 'object',\n    properties: {\n        enabled: {\n            type: 'boolean',\n            description: ( nls.localize(\n                'editorColors.semanticHighlighting.enabled',\n                'Whether semantic highlighting is enabled or disabled for this theme'\n            )),\n            suggestSortText: '0_enabled'\n        },\n        rules: {\n            $ref: tokenStylingSchemaId,\n            description: ( nls.localize(\n                'editorColors.semanticHighlighting.rules',\n                'Semantic token styling rules for this theme.'\n            )),\n            suggestSortText: '0_rules'\n        }\n    },\n    additionalProperties: false\n};\nconst semanticTokenColorCustomizationSchema = {\n    description: ( nls.localize(\n        'semanticTokenColors',\n        \"Overrides editor semantic token color and styles from the currently selected color theme.\"\n    )),\n    default: {},\n    allOf: [{ ...semanticTokenColorSchema, patternProperties: { '^\\\\[': {} } }]\n};\nconst tokenColorCustomizationConfiguration = {\n    id: 'editor',\n    order: 7.2,\n    type: 'object',\n    properties: {\n        [ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS]: tokenColorCustomizationSchema,\n        [ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS]: semanticTokenColorCustomizationSchema\n    }\n};\nconfigurationRegistry.registerConfiguration(tokenColorCustomizationConfiguration);\nfunction updateColorThemeConfigurationSchemas(themes) {\n    themes.sort((a, b) => a.label.localeCompare(b.label));\n    colorThemeSettingEnum.splice(0, colorThemeSettingEnum.length, ...( themes.map(t => t.settingsId)));\n    colorThemeSettingEnumDescriptions.splice(0, colorThemeSettingEnumDescriptions.length, ...( themes.map(t => t.description || '')));\n    colorThemeSettingEnumItemLabels.splice(0, colorThemeSettingEnumItemLabels.length, ...( themes.map(t => t.label || '')));\n    const themeSpecificWorkbenchColors = { properties: {} };\n    const themeSpecificTokenColors = { properties: {} };\n    const themeSpecificSemanticTokenColors = { properties: {} };\n    const workbenchColors = { $ref: workbenchColorsSchemaId, additionalProperties: false };\n    const tokenColors = { properties: tokenColorSchema.properties, additionalProperties: false };\n    for (const t of themes) {\n        const themeId = `[${t.settingsId}]`;\n        themeSpecificWorkbenchColors.properties[themeId] = workbenchColors;\n        themeSpecificTokenColors.properties[themeId] = tokenColors;\n        themeSpecificSemanticTokenColors.properties[themeId] = semanticTokenColorSchema;\n    }\n    themeSpecificWorkbenchColors.patternProperties = { [themeSpecificSettingKey]: workbenchColors };\n    themeSpecificTokenColors.patternProperties = { [themeSpecificSettingKey]: tokenColors };\n    themeSpecificSemanticTokenColors.patternProperties = { [themeSpecificSettingKey]: semanticTokenColorSchema };\n    colorCustomizationsSchema.allOf[1] = themeSpecificWorkbenchColors;\n    tokenColorCustomizationSchema.allOf[1] = themeSpecificTokenColors;\n    semanticTokenColorCustomizationSchema.allOf[1] = themeSpecificSemanticTokenColors;\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration, tokenColorCustomizationConfiguration);\n}\nfunction updateFileIconThemeConfigurationSchemas(themes) {\n    fileIconThemeSettingSchema.enum.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.settingsId)));\n    fileIconThemeSettingSchema.enumItemLabels.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.label)));\n    fileIconThemeSettingSchema.enumDescriptions.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.description || '')));\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\nfunction updateProductIconThemeConfigurationSchemas(themes) {\n    productIconThemeSettingSchema.enum.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.settingsId)));\n    productIconThemeSettingSchema.enumItemLabels.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.label)));\n    productIconThemeSettingSchema.enumDescriptions.splice(1, Number.MAX_VALUE, ...( themes.map(t => t.description || '')));\n    configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n}\nclass ThemeConfiguration {\n    constructor(configurationService) {\n        this.configurationService = configurationService;\n    }\n    get colorTheme() {\n        return this.configurationService.getValue(ThemeSettings.COLOR_THEME);\n    }\n    get fileIconTheme() {\n        return this.configurationService.getValue(ThemeSettings.FILE_ICON_THEME);\n    }\n    get productIconTheme() {\n        return this.configurationService.getValue(ThemeSettings.PRODUCT_ICON_THEME);\n    }\n    get colorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.COLOR_CUSTOMIZATIONS) || {};\n    }\n    get tokenColorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS) || {};\n    }\n    get semanticTokenColorCustomizations() {\n        return this.configurationService.getValue(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS);\n    }\n    async setColorTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.COLOR_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    async setFileIconTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.FILE_ICON_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    async setProductIconTheme(theme, settingsTarget) {\n        await this.writeConfiguration(ThemeSettings.PRODUCT_ICON_THEME, theme.settingsId, settingsTarget);\n        return theme;\n    }\n    isDefaultColorTheme() {\n        const settings = this.configurationService.inspect(ThemeSettings.COLOR_THEME);\n        return settings && settings.default?.value === settings.value;\n    }\n    findAutoConfigurationTarget(key) {\n        const settings = this.configurationService.inspect(key);\n        if (!types.isUndefined(settings.workspaceFolderValue)) {\n            return 6 ;\n        }\n        else if (!types.isUndefined(settings.workspaceValue)) {\n            return 5 ;\n        }\n        else if (!types.isUndefined(settings.userRemote)) {\n            return 4 ;\n        }\n        return 2 ;\n    }\n    async writeConfiguration(key, value, settingsTarget) {\n        if (settingsTarget === undefined || settingsTarget === 'preview') {\n            return;\n        }\n        const settings = this.configurationService.inspect(key);\n        if (settingsTarget === 'auto') {\n            return this.configurationService.updateValue(key, value);\n        }\n        if (settingsTarget === 2 ) {\n            if (value === settings.userValue) {\n                return Promise.resolve(undefined);\n            }\n            else if (value === settings.defaultValue) {\n                if (types.isUndefined(settings.userValue)) {\n                    return Promise.resolve(undefined);\n                }\n                value = undefined;\n            }\n        }\n        else if (settingsTarget === 5  || settingsTarget === 6  || settingsTarget === 4 ) {\n            if (value === settings.value) {\n                return Promise.resolve(undefined);\n            }\n        }\n        return this.configurationService.updateValue(key, value, settingsTarget);\n    }\n}\nexport { ThemeConfiguration, updateColorThemeConfigurationSchemas, updateFileIconThemeConfigurationSchemas, updateProductIconThemeConfigurationSchemas };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as path from 'monaco-editor/esm/vs/base/common/path.js';\nimport * as resources from 'monaco-editor/esm/vs/base/common/resources.js';\nimport * as json from 'monaco-editor/esm/vs/base/common/json.js';\nimport { ThemeSettingDefaults, ExtensionData } from '../common/workbenchThemeService.js';\nimport { getParseErrorMessage } from '../../../../base/common/jsonErrorMessages.js';\nimport { fontIdRegex, fontWeightRegex, fontStyleRegex, fontFormatRegex } from '../common/productIconThemeSchema.js';\nimport { isObject, isString } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { IconFontDefinition, getIconRegistry } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';\nimport { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';\nconst DEFAULT_PRODUCT_ICON_THEME_ID = '';\nclass ProductIconThemeData {\n    static { this.STORAGE_KEY = 'productIconThemeData'; }\n    constructor(id, label, settingsId) {\n        this.iconThemeDocument = { iconDefinitions: ( new Map()) };\n        this.id = id;\n        this.label = label;\n        this.settingsId = settingsId;\n        this.isLoaded = false;\n    }\n    getIcon(iconContribution) {\n        return _resolveIconDefinition(iconContribution, this.iconThemeDocument);\n    }\n    ensureLoaded(fileService, logService) {\n        return !this.isLoaded ? this.load(fileService, logService) : Promise.resolve(this.styleSheetContent);\n    }\n    reload(fileService, logService) {\n        return this.load(fileService, logService);\n    }\n    async load(fileService, logService) {\n        const location = this.location;\n        if (!location) {\n            return Promise.resolve(this.styleSheetContent);\n        }\n        const warnings = [];\n        this.iconThemeDocument = await _loadProductIconThemeDocument(fileService, location, warnings);\n        this.isLoaded = true;\n        if (warnings.length) {\n            logService.error(( nls.localize(\n                'error.parseicondefs',\n                \"Problems processing product icons definitions in {0}:\\n{1}\",\n                ( location.toString()),\n                warnings.join('\\n')\n            )));\n        }\n        return this.styleSheetContent;\n    }\n    static fromExtensionTheme(iconTheme, iconThemeLocation, extensionData) {\n        const id = extensionData.extensionId + '-' + iconTheme.id;\n        const label = iconTheme.label || path.basename(iconTheme.path);\n        const settingsId = iconTheme.id;\n        const themeData = ( new ProductIconThemeData(id, label, settingsId));\n        themeData.description = iconTheme.description;\n        themeData.location = iconThemeLocation;\n        themeData.extensionData = extensionData;\n        themeData.watch = iconTheme._watch;\n        themeData.isLoaded = false;\n        return themeData;\n    }\n    static createUnloadedTheme(id) {\n        const themeData = ( new ProductIconThemeData(id, '', '__' + id));\n        themeData.isLoaded = false;\n        themeData.extensionData = undefined;\n        themeData.watch = false;\n        return themeData;\n    }\n    static { this._defaultProductIconTheme = null; }\n    static get defaultTheme() {\n        let themeData = ProductIconThemeData._defaultProductIconTheme;\n        if (!themeData) {\n            themeData = ProductIconThemeData._defaultProductIconTheme = ( new ProductIconThemeData(DEFAULT_PRODUCT_ICON_THEME_ID, ( nls.localize('defaultTheme', 'Default')), ThemeSettingDefaults.PRODUCT_ICON_THEME));\n            themeData.isLoaded = true;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n        }\n        return themeData;\n    }\n    static fromStorageData(storageService) {\n        const input = storageService.get(ProductIconThemeData.STORAGE_KEY, 0 );\n        if (!input) {\n            return undefined;\n        }\n        try {\n            const data = JSON.parse(input);\n            const theme = ( new ProductIconThemeData('', '', ''));\n            for (const key in data) {\n                switch (key) {\n                    case 'id':\n                    case 'label':\n                    case 'description':\n                    case 'settingsId':\n                    case 'styleSheetContent':\n                    case 'watch':\n                        theme[key] = data[key];\n                        break;\n                    case 'location':\n                        break;\n                    case 'extensionData':\n                        theme.extensionData = ExtensionData.fromJSONObject(data.extensionData);\n                        break;\n                }\n            }\n            const { iconDefinitions, iconFontDefinitions } = data;\n            if (Array.isArray(iconDefinitions) && isObject(iconFontDefinitions)) {\n                const restoredIconDefinitions = ( new Map());\n                for (const entry of iconDefinitions) {\n                    const { id, fontCharacter, fontId } = entry;\n                    if (isString(id) && isString(fontCharacter)) {\n                        if (isString(fontId)) {\n                            const iconFontDefinition = IconFontDefinition.fromJSONObject(iconFontDefinitions[fontId]);\n                            if (iconFontDefinition) {\n                                restoredIconDefinitions.set(id, { fontCharacter, font: { id: fontId, definition: iconFontDefinition } });\n                            }\n                        }\n                        else {\n                            restoredIconDefinitions.set(id, { fontCharacter });\n                        }\n                    }\n                }\n                theme.iconThemeDocument = { iconDefinitions: restoredIconDefinitions };\n            }\n            return theme;\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    toStorage(storageService) {\n        const iconDefinitions = [];\n        const iconFontDefinitions = {};\n        for (const entry of this.iconThemeDocument.iconDefinitions.entries()) {\n            const font = entry[1].font;\n            iconDefinitions.push({ id: entry[0], fontCharacter: entry[1].fontCharacter, fontId: font?.id });\n            if (font && iconFontDefinitions[font.id] === undefined) {\n                iconFontDefinitions[font.id] = IconFontDefinition.toJSONObject(font.definition);\n            }\n        }\n        const data = JSON.stringify({\n            id: this.id,\n            label: this.label,\n            description: this.description,\n            settingsId: this.settingsId,\n            styleSheetContent: this.styleSheetContent,\n            watch: this.watch,\n            extensionData: ExtensionData.toJSONObject(this.extensionData),\n            iconDefinitions,\n            iconFontDefinitions\n        });\n        storageService.store(ProductIconThemeData.STORAGE_KEY, data, 0 , 1 );\n    }\n}\nfunction _loadProductIconThemeDocument(fileService, location, warnings) {\n    return fileService.readExtensionResource(location).then((content) => {\n        const parseErrors = [];\n        const contentValue = json.parse(content, parseErrors);\n        if (parseErrors.length > 0) {\n            return Promise.reject(( new Error(( nls.localize(\n                'error.cannotparseicontheme',\n                \"Problems parsing product icons file: {0}\",\n                ( parseErrors.map(e => getParseErrorMessage(e.error))).join(', ')\n            )))));\n        }\n        else if (json.getNodeType(contentValue) !== 'object') {\n            return Promise.reject(( new Error(( nls.localize(\n                'error.invalidformat',\n                \"Invalid format for product icons theme file: Object expected.\"\n            )))));\n        }\n        else if (!contentValue.iconDefinitions || !Array.isArray(contentValue.fonts) || !contentValue.fonts.length) {\n            return Promise.reject(( new Error(( nls.localize(\n                'error.missingProperties',\n                \"Invalid format for product icons theme file: Must contain iconDefinitions and fonts.\"\n            )))));\n        }\n        const iconThemeDocumentLocationDirname = resources.dirname(location);\n        const sanitizedFonts = ( new Map());\n        for (const font of contentValue.fonts) {\n            if (isString(font.id) && font.id.match(fontIdRegex)) {\n                const fontId = font.id;\n                let fontWeight = undefined;\n                if (isString(font.weight) && font.weight.match(fontWeightRegex)) {\n                    fontWeight = font.weight;\n                }\n                else {\n                    warnings.push(( nls.localize(\n                        'error.fontWeight',\n                        'Invalid font weight in font \\'{0}\\'. Ignoring setting.',\n                        font.id\n                    )));\n                }\n                let fontStyle = undefined;\n                if (isString(font.style) && font.style.match(fontStyleRegex)) {\n                    fontStyle = font.style;\n                }\n                else {\n                    warnings.push(( nls.localize(\n                        'error.fontStyle',\n                        'Invalid font style in font \\'{0}\\'. Ignoring setting.',\n                        font.id\n                    )));\n                }\n                const sanitizedSrc = [];\n                if (Array.isArray(font.src)) {\n                    for (const s of font.src) {\n                        if (isString(s.path) && isString(s.format) && s.format.match(fontFormatRegex)) {\n                            const iconFontLocation = resources.joinPath(iconThemeDocumentLocationDirname, s.path);\n                            sanitizedSrc.push({ location: iconFontLocation, format: s.format });\n                        }\n                        else {\n                            warnings.push(( nls.localize(\n                                'error.fontSrc',\n                                'Invalid font source in font \\'{0}\\'. Ignoring source.',\n                                font.id\n                            )));\n                        }\n                    }\n                }\n                if (sanitizedSrc.length) {\n                    sanitizedFonts.set(fontId, { weight: fontWeight, style: fontStyle, src: sanitizedSrc });\n                }\n                else {\n                    warnings.push(( nls.localize(\n                        'error.noFontSrc',\n                        'No valid font source in font \\'{0}\\'. Ignoring font definition.',\n                        font.id\n                    )));\n                }\n            }\n            else {\n                warnings.push(( nls.localize(\n                    'error.fontId',\n                    'Missing or invalid font id \\'{0}\\'. Skipping font definition.',\n                    font.id\n                )));\n            }\n        }\n        const iconDefinitions = ( new Map());\n        const primaryFontId = contentValue.fonts[0].id;\n        for (const iconId in contentValue.iconDefinitions) {\n            const definition = contentValue.iconDefinitions[iconId];\n            if (isString(definition.fontCharacter)) {\n                const fontId = definition.fontId ?? primaryFontId;\n                const fontDefinition = sanitizedFonts.get(fontId);\n                if (fontDefinition) {\n                    const font = { id: `pi-${fontId}`, definition: fontDefinition };\n                    iconDefinitions.set(iconId, { fontCharacter: definition.fontCharacter, font });\n                }\n                else {\n                    warnings.push(( nls.localize(\n                        'error.icon.font',\n                        'Skipping icon definition \\'{0}\\'. Unknown font.',\n                        iconId\n                    )));\n                }\n            }\n            else {\n                warnings.push(( nls.localize(\n                    'error.icon.fontCharacter',\n                    'Skipping icon definition \\'{0}\\'. Unknown fontCharacter.',\n                    iconId\n                )));\n            }\n        }\n        return { iconDefinitions };\n    });\n}\nconst iconRegistry = getIconRegistry();\nfunction _resolveIconDefinition(iconContribution, iconThemeDocument) {\n    const iconDefinitions = iconThemeDocument.iconDefinitions;\n    let definition = iconDefinitions.get(iconContribution.id);\n    let defaults = iconContribution.defaults;\n    while (!definition && ThemeIcon.isThemeIcon(defaults)) {\n        const ic = iconRegistry.getIcon(defaults.id);\n        if (ic) {\n            definition = iconDefinitions.get(ic.id);\n            defaults = ic.defaults;\n        }\n        else {\n            return undefined;\n        }\n    }\n    if (definition) {\n        return definition;\n    }\n    if (!ThemeIcon.isThemeIcon(defaults)) {\n        return defaults;\n    }\n    return undefined;\n}\nexport { DEFAULT_PRODUCT_ICON_THEME_ID, ProductIconThemeData };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as types from 'monaco-editor/esm/vs/base/common/types.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { ThemeSettingDefaults, ThemeSettings, ExtensionData, VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME, COLOR_THEME_LIGHT_INITIAL_COLORS, COLOR_THEME_DARK_INITIAL_COLORS } from '../common/workbenchThemeService.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport * as errors from 'monaco-editor/esm/vs/base/common/errors.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { ColorThemeData } from '../common/colorThemeData.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { registerFileIconThemeSchemas } from '../common/fileIconThemeSchema.js';\nimport { dispose } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { FileIconThemeData, FileIconThemeLoader } from './fileIconThemeData.js';\nimport { createStyleSheet } from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { IBrowserWorkbenchEnvironmentService } from '../../environment/browser/environmentService.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport * as resources from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { registerColorThemeSchemas } from '../common/colorThemeSchema.js';\nimport { getRemoteAuthority } from 'monaco-editor/esm/vs/platform/remote/common/remoteHosts.js';\nimport { IWorkbenchLayoutService } from '../../layout/browser/layoutService.js';\nimport { IExtensionResourceLoaderService } from '../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js';\nimport { ThemeRegistry, registerColorThemeExtensionPoint, registerFileIconThemeExtensionPoint, registerProductIconThemeExtensionPoint } from '../common/themeExtensionPoints.js';\nimport { ThemeConfiguration, updateColorThemeConfigurationSchemas, updateFileIconThemeConfigurationSchemas, updateProductIconThemeConfigurationSchemas } from '../common/themeConfiguration.js';\nimport { ProductIconThemeData, DEFAULT_PRODUCT_ICON_THEME_ID } from './productIconThemeData.js';\nimport { registerProductIconThemeSchemas } from '../common/productIconThemeSchema.js';\nimport { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';\nimport { isWeb } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { ColorScheme } from 'monaco-editor/esm/vs/platform/theme/common/theme.js';\nimport { IHostColorSchemeService } from '../common/hostColorSchemeService.js';\nimport { Sequencer, RunOnceScheduler } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { IUserDataInitializationService } from '../../userData/browser/userDataInit.js';\nimport { getIconsStyleSheet } from 'monaco-editor/esm/vs/platform/theme/browser/iconsStyleSheet.js';\nimport { getColorRegistry, asCssVariableName } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nconst PERSISTED_OS_COLOR_SCHEME = 'osColorScheme';\nconst PERSISTED_OS_COLOR_SCHEME_SCOPE = -1 ;\nconst defaultThemeExtensionId = 'vscode-theme-defaults';\nconst DEFAULT_FILE_ICON_THEME_ID = 'vscode.vscode-theme-seti-vs-seti';\nconst fileIconsEnabledClass = 'file-icons-enabled';\nconst colorThemeRulesClassName = 'contributedColorTheme';\nconst fileIconThemeRulesClassName = 'contributedFileIconTheme';\nconst productIconThemeRulesClassName = 'contributedProductIconTheme';\nconst themingRegistry = ( (Registry.as(Extensions.ThemingContribution)));\nfunction validateThemeId(theme) {\n    switch (theme) {\n        case VS_LIGHT_THEME: return `vs ${defaultThemeExtensionId}-themes-light_vs-json`;\n        case VS_DARK_THEME: return `vs-dark ${defaultThemeExtensionId}-themes-dark_vs-json`;\n        case VS_HC_THEME: return `hc-black ${defaultThemeExtensionId}-themes-hc_black-json`;\n        case VS_HC_LIGHT_THEME: return `hc-light ${defaultThemeExtensionId}-themes-hc_light-json`;\n    }\n    return theme;\n}\nconst colorThemesExtPoint = registerColorThemeExtensionPoint();\nconst fileIconThemesExtPoint = registerFileIconThemeExtensionPoint();\nconst productIconThemesExtPoint = registerProductIconThemeExtensionPoint();\nlet WorkbenchThemeService = class WorkbenchThemeService {\n    constructor(extensionService, storageService, configurationService, telemetryService, environmentService, fileService, extensionResourceLoaderService, layoutService, logService, hostColorService, userDataInitializationService, languageService) {\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.telemetryService = telemetryService;\n        this.environmentService = environmentService;\n        this.extensionResourceLoaderService = extensionResourceLoaderService;\n        this.logService = logService;\n        this.hostColorService = hostColorService;\n        this.hasDefaultUpdated = false;\n        this.themeExtensionsActivated = ( (new Map()));\n        this.container = layoutService.container;\n        this.settings = ( (new ThemeConfiguration(configurationService)));\n        this.colorThemeRegistry = ( (new ThemeRegistry(colorThemesExtPoint, ColorThemeData.fromExtensionTheme)));\n        this.colorThemeWatcher = ( (new ThemeFileWatcher(fileService, environmentService, this.reloadCurrentColorTheme.bind(this))));\n        this.onColorThemeChange = ( (new Emitter({ leakWarningThreshold: 400 })));\n        this.currentColorTheme = ColorThemeData.createUnloadedTheme('');\n        this.colorThemeSequencer = ( (new Sequencer()));\n        this.fileIconThemeWatcher = ( (new ThemeFileWatcher(\n            fileService,\n            environmentService,\n            this.reloadCurrentFileIconTheme.bind(this)\n        )));\n        this.fileIconThemeRegistry = ( (new ThemeRegistry(\n            fileIconThemesExtPoint,\n            FileIconThemeData.fromExtensionTheme,\n            true,\n            FileIconThemeData.noIconTheme\n        )));\n        this.fileIconThemeLoader = ( (new FileIconThemeLoader(extensionResourceLoaderService, languageService)));\n        this.onFileIconThemeChange = ( (new Emitter({ leakWarningThreshold: 400 })));\n        this.currentFileIconTheme = FileIconThemeData.createUnloadedTheme('');\n        this.fileIconThemeSequencer = ( (new Sequencer()));\n        this.productIconThemeWatcher = ( (new ThemeFileWatcher(\n            fileService,\n            environmentService,\n            this.reloadCurrentProductIconTheme.bind(this)\n        )));\n        this.productIconThemeRegistry = ( (new ThemeRegistry(\n            productIconThemesExtPoint,\n            ProductIconThemeData.fromExtensionTheme,\n            true,\n            ProductIconThemeData.defaultTheme\n        )));\n        this.onProductIconThemeChange = ( (new Emitter()));\n        this.currentProductIconTheme = ProductIconThemeData.createUnloadedTheme('');\n        this.productIconThemeSequencer = ( (new Sequencer()));\n        let themeData = ColorThemeData.fromStorageData(this.storageService);\n        const colorThemeSetting = this.settings.colorTheme;\n        if (themeData && colorThemeSetting !== themeData.settingsId && this.settings.isDefaultColorTheme()) {\n            this.hasDefaultUpdated = themeData.settingsId === ThemeSettingDefaults.COLOR_THEME_DARK_OLD || themeData.settingsId === ThemeSettingDefaults.COLOR_THEME_LIGHT_OLD;\n            themeData = undefined;\n        }\n        const preferredColorScheme = this.getPreferredColorScheme();\n        const defaultColorMap = colorThemeSetting === ThemeSettingDefaults.COLOR_THEME_LIGHT ? COLOR_THEME_LIGHT_INITIAL_COLORS : colorThemeSetting === ThemeSettingDefaults.COLOR_THEME_DARK ? COLOR_THEME_DARK_INITIAL_COLORS : undefined;\n        if (preferredColorScheme && themeData?.type !== preferredColorScheme && this.storageService.get(PERSISTED_OS_COLOR_SCHEME, PERSISTED_OS_COLOR_SCHEME_SCOPE) !== preferredColorScheme) {\n            themeData = ColorThemeData.createUnloadedThemeForThemeType(preferredColorScheme, undefined);\n        }\n        if (!themeData) {\n            const initialColorTheme = environmentService.options?.initialColorTheme;\n            if (initialColorTheme) {\n                themeData = ColorThemeData.createUnloadedThemeForThemeType(initialColorTheme.themeType, initialColorTheme.colors ?? defaultColorMap);\n            }\n        }\n        if (!themeData) {\n            themeData = ColorThemeData.createUnloadedThemeForThemeType(isWeb ? ColorScheme.LIGHT : ColorScheme.DARK, defaultColorMap);\n        }\n        themeData.setCustomizations(this.settings);\n        this.applyTheme(themeData, undefined, true);\n        const fileIconData = FileIconThemeData.fromStorageData(this.storageService);\n        if (fileIconData) {\n            this.applyAndSetFileIconTheme(fileIconData, true);\n        }\n        const productIconData = ProductIconThemeData.fromStorageData(this.storageService);\n        if (productIconData) {\n            this.applyAndSetProductIconTheme(productIconData, true);\n        }\n        Promise.all([extensionService.whenInstalledExtensionsRegistered(), userDataInitializationService.whenInitializationFinished()]).then(_ => {\n            this.installConfigurationListener();\n            this.installPreferredSchemeListener();\n            this.installRegistryListeners();\n            this.initialize().catch(errors.onUnexpectedError);\n        });\n        const codiconStyleSheet = createStyleSheet();\n        codiconStyleSheet.id = 'codiconStyles';\n        const iconsStyleSheet = getIconsStyleSheet(this);\n        function updateAll() {\n            codiconStyleSheet.textContent = iconsStyleSheet.getCSS();\n        }\n        const delayer = ( (new RunOnceScheduler(updateAll, 0)));\n        iconsStyleSheet.onDidChange(() => delayer.schedule());\n        delayer.schedule();\n    }\n    initialize() {\n        const extDevLocs = this.environmentService.extensionDevelopmentLocationURI;\n        const extDevLoc = extDevLocs && extDevLocs.length === 1 ? extDevLocs[0] : undefined;\n        const initializeColorTheme = async () => {\n            const devThemes = this.colorThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setColorTheme(devThemes[0].id, 8 );\n            }\n            const fallbackTheme = this.currentColorTheme.type === ColorScheme.LIGHT ? ThemeSettingDefaults.COLOR_THEME_LIGHT : ThemeSettingDefaults.COLOR_THEME_DARK;\n            const theme = this.colorThemeRegistry.findThemeBySettingsId(this.settings.colorTheme, fallbackTheme);\n            const preferredColorScheme = this.getPreferredColorScheme();\n            const prevScheme = this.storageService.get(PERSISTED_OS_COLOR_SCHEME, PERSISTED_OS_COLOR_SCHEME_SCOPE);\n            if (preferredColorScheme !== prevScheme) {\n                this.storageService.store(PERSISTED_OS_COLOR_SCHEME, preferredColorScheme, PERSISTED_OS_COLOR_SCHEME_SCOPE, 0 );\n                if (preferredColorScheme && theme?.type !== preferredColorScheme) {\n                    return this.applyPreferredColorTheme(preferredColorScheme);\n                }\n            }\n            return this.setColorTheme(theme && theme.id, undefined);\n        };\n        const initializeFileIconTheme = async () => {\n            const devThemes = this.fileIconThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setFileIconTheme(devThemes[0].id, 8 );\n            }\n            const theme = this.fileIconThemeRegistry.findThemeBySettingsId(this.settings.fileIconTheme);\n            return this.setFileIconTheme(theme ? theme.id : DEFAULT_FILE_ICON_THEME_ID, undefined);\n        };\n        const initializeProductIconTheme = async () => {\n            const devThemes = this.productIconThemeRegistry.findThemeByExtensionLocation(extDevLoc);\n            if (devThemes.length) {\n                return this.setProductIconTheme(devThemes[0].id, 8 );\n            }\n            const theme = this.productIconThemeRegistry.findThemeBySettingsId(this.settings.productIconTheme);\n            return this.setProductIconTheme(theme ? theme.id : DEFAULT_PRODUCT_ICON_THEME_ID, undefined);\n        };\n        return Promise.all([initializeColorTheme(), initializeFileIconTheme(), initializeProductIconTheme()]);\n    }\n    installConfigurationListener() {\n        this.configurationService.onDidChangeConfiguration(e => {\n            let lazyPreferredColorScheme = null;\n            const getPreferredColorScheme = () => {\n                if (lazyPreferredColorScheme === null) {\n                    lazyPreferredColorScheme = this.getPreferredColorScheme();\n                }\n                return lazyPreferredColorScheme;\n            };\n            if (e.affectsConfiguration(ThemeSettings.COLOR_THEME)) {\n                this.restoreColorTheme();\n            }\n            if (e.affectsConfiguration(ThemeSettings.DETECT_COLOR_SCHEME) || e.affectsConfiguration(ThemeSettings.DETECT_HC)) {\n                this.handlePreferredSchemeUpdated();\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_DARK_THEME) && getPreferredColorScheme() === ColorScheme.DARK) {\n                this.applyPreferredColorTheme(ColorScheme.DARK);\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_LIGHT_THEME) && getPreferredColorScheme() === ColorScheme.LIGHT) {\n                this.applyPreferredColorTheme(ColorScheme.LIGHT);\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_HC_DARK_THEME) && getPreferredColorScheme() === ColorScheme.HIGH_CONTRAST_DARK) {\n                this.applyPreferredColorTheme(ColorScheme.HIGH_CONTRAST_DARK);\n            }\n            if (e.affectsConfiguration(ThemeSettings.PREFERRED_HC_LIGHT_THEME) && getPreferredColorScheme() === ColorScheme.HIGH_CONTRAST_LIGHT) {\n                this.applyPreferredColorTheme(ColorScheme.HIGH_CONTRAST_LIGHT);\n            }\n            if (e.affectsConfiguration(ThemeSettings.FILE_ICON_THEME)) {\n                this.restoreFileIconTheme();\n            }\n            if (e.affectsConfiguration(ThemeSettings.PRODUCT_ICON_THEME)) {\n                this.restoreProductIconTheme();\n            }\n            if (this.currentColorTheme) {\n                let hasColorChanges = false;\n                if (e.affectsConfiguration(ThemeSettings.COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomColors(this.settings.colorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (e.affectsConfiguration(ThemeSettings.TOKEN_COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomTokenColors(this.settings.tokenColorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (e.affectsConfiguration(ThemeSettings.SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS)) {\n                    this.currentColorTheme.setCustomSemanticTokenColors(this.settings.semanticTokenColorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (hasColorChanges) {\n                    this.updateDynamicCSSRules(this.currentColorTheme);\n                    this.onColorThemeChange.fire(this.currentColorTheme);\n                }\n            }\n        });\n    }\n    installRegistryListeners() {\n        let prevColorId = undefined;\n        this.colorThemeRegistry.onDidChange(async (event) => {\n            updateColorThemeConfigurationSchemas(event.themes);\n            if (await this.restoreColorTheme()) {\n                if (this.currentColorTheme.settingsId === ThemeSettingDefaults.COLOR_THEME_DARK && !types.isUndefined(prevColorId) && (await this.colorThemeRegistry.findThemeById(prevColorId))) {\n                    await this.setColorTheme(prevColorId, 'auto');\n                    prevColorId = undefined;\n                }\n                else if (( (event.added.some(t => t.settingsId === this.currentColorTheme.settingsId)))) {\n                    await this.reloadCurrentColorTheme();\n                }\n            }\n            else if (( (event.removed.some(t => t.settingsId === this.currentColorTheme.settingsId)))) {\n                prevColorId = this.currentColorTheme.id;\n                const defaultTheme = this.colorThemeRegistry.findThemeBySettingsId(ThemeSettingDefaults.COLOR_THEME_DARK);\n                await this.setColorTheme(defaultTheme, 'auto');\n            }\n        });\n        let prevFileIconId = undefined;\n        this.fileIconThemeRegistry.onDidChange(async (event) => {\n            updateFileIconThemeConfigurationSchemas(event.themes);\n            if (await this.restoreFileIconTheme()) {\n                if (this.currentFileIconTheme.id === DEFAULT_FILE_ICON_THEME_ID && !types.isUndefined(prevFileIconId) && this.fileIconThemeRegistry.findThemeById(prevFileIconId)) {\n                    await this.setFileIconTheme(prevFileIconId, 'auto');\n                    prevFileIconId = undefined;\n                }\n                else if (( (event.added.some(t => t.settingsId === this.currentFileIconTheme.settingsId)))) {\n                    await this.reloadCurrentFileIconTheme();\n                }\n            }\n            else if (( (event.removed.some(t => t.settingsId === this.currentFileIconTheme.settingsId)))) {\n                prevFileIconId = this.currentFileIconTheme.id;\n                await this.setFileIconTheme(DEFAULT_FILE_ICON_THEME_ID, 'auto');\n            }\n        });\n        let prevProductIconId = undefined;\n        this.productIconThemeRegistry.onDidChange(async (event) => {\n            updateProductIconThemeConfigurationSchemas(event.themes);\n            if (await this.restoreProductIconTheme()) {\n                if (this.currentProductIconTheme.id === DEFAULT_PRODUCT_ICON_THEME_ID && !types.isUndefined(prevProductIconId) && this.productIconThemeRegistry.findThemeById(prevProductIconId)) {\n                    await this.setProductIconTheme(prevProductIconId, 'auto');\n                    prevProductIconId = undefined;\n                }\n                else if (( (event.added.some(t => t.settingsId === this.currentProductIconTheme.settingsId)))) {\n                    await this.reloadCurrentProductIconTheme();\n                }\n            }\n            else if (( (event.removed.some(t => t.settingsId === this.currentProductIconTheme.settingsId)))) {\n                prevProductIconId = this.currentProductIconTheme.id;\n                await this.setProductIconTheme(DEFAULT_PRODUCT_ICON_THEME_ID, 'auto');\n            }\n        });\n        return Promise.all([this.getColorThemes(), this.getFileIconThemes(), this.getProductIconThemes()]).then(([ct, fit, pit]) => {\n            updateColorThemeConfigurationSchemas(ct);\n            updateFileIconThemeConfigurationSchemas(fit);\n            updateProductIconThemeConfigurationSchemas(pit);\n        });\n    }\n    installPreferredSchemeListener() {\n        this.hostColorService.onDidChangeColorScheme(() => this.handlePreferredSchemeUpdated());\n    }\n    async handlePreferredSchemeUpdated() {\n        const scheme = this.getPreferredColorScheme();\n        const prevScheme = this.storageService.get(PERSISTED_OS_COLOR_SCHEME, PERSISTED_OS_COLOR_SCHEME_SCOPE);\n        if (scheme !== prevScheme) {\n            this.storageService.store(PERSISTED_OS_COLOR_SCHEME, scheme, PERSISTED_OS_COLOR_SCHEME_SCOPE, 1 );\n            if (scheme) {\n                if (!prevScheme) {\n                    this.themeSettingIdBeforeSchemeSwitch = this.settings.colorTheme;\n                }\n                return this.applyPreferredColorTheme(scheme);\n            }\n            else if (prevScheme && this.themeSettingIdBeforeSchemeSwitch) {\n                const theme = this.colorThemeRegistry.findThemeBySettingsId(this.themeSettingIdBeforeSchemeSwitch, undefined);\n                if (theme) {\n                    this.setColorTheme(theme.id, 'auto');\n                }\n            }\n        }\n        return undefined;\n    }\n    getPreferredColorScheme() {\n        if (this.configurationService.getValue(ThemeSettings.DETECT_HC) && this.hostColorService.highContrast) {\n            return this.hostColorService.dark ? ColorScheme.HIGH_CONTRAST_DARK : ColorScheme.HIGH_CONTRAST_LIGHT;\n        }\n        if (this.configurationService.getValue(ThemeSettings.DETECT_COLOR_SCHEME)) {\n            return this.hostColorService.dark ? ColorScheme.DARK : ColorScheme.LIGHT;\n        }\n        return undefined;\n    }\n    async applyPreferredColorTheme(type) {\n        let settingId;\n        switch (type) {\n            case ColorScheme.LIGHT:\n                settingId = ThemeSettings.PREFERRED_LIGHT_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_DARK:\n                settingId = ThemeSettings.PREFERRED_HC_DARK_THEME;\n                break;\n            case ColorScheme.HIGH_CONTRAST_LIGHT:\n                settingId = ThemeSettings.PREFERRED_HC_LIGHT_THEME;\n                break;\n            default:\n                settingId = ThemeSettings.PREFERRED_DARK_THEME;\n        }\n        const themeSettingId = this.configurationService.getValue(settingId);\n        if (themeSettingId && typeof themeSettingId === 'string') {\n            const theme = this.colorThemeRegistry.findThemeBySettingsId(themeSettingId, undefined);\n            if (theme) {\n                const configurationTarget = this.settings.findAutoConfigurationTarget(settingId);\n                return this.setColorTheme(theme.id, configurationTarget);\n            }\n        }\n        return null;\n    }\n    hasUpdatedDefaultThemes() {\n        return this.hasDefaultUpdated;\n    }\n    getColorTheme() {\n        return this.currentColorTheme;\n    }\n    async getColorThemes() {\n        return this.colorThemeRegistry.getThemes();\n    }\n    async getMarketplaceColorThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(resources.joinPath(extensionLocation, 'package.json'));\n                return this.colorThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    get onDidColorThemeChange() {\n        return this.onColorThemeChange.event;\n    }\n    setColorTheme(themeIdOrTheme, settingsTarget) {\n        return this.colorThemeSequencer.queue(async () => {\n            return this.internalSetColorTheme(themeIdOrTheme, settingsTarget);\n        });\n    }\n    async internalSetColorTheme(themeIdOrTheme, settingsTarget) {\n        if (!themeIdOrTheme) {\n            return null;\n        }\n        const themeId = types.isString(themeIdOrTheme) ? validateThemeId(themeIdOrTheme) : themeIdOrTheme.id;\n        if (this.currentColorTheme.isLoaded && themeId === this.currentColorTheme.id) {\n            if (settingsTarget !== 'preview') {\n                this.currentColorTheme.toStorage(this.storageService);\n            }\n            return this.settings.setColorTheme(this.currentColorTheme, settingsTarget);\n        }\n        let themeData = this.colorThemeRegistry.findThemeById(themeId);\n        if (!themeData) {\n            if (themeIdOrTheme instanceof ColorThemeData) {\n                themeData = themeIdOrTheme;\n            }\n            else {\n                return null;\n            }\n        }\n        try {\n            await themeData.ensureLoaded(this.extensionResourceLoaderService);\n            themeData.setCustomizations(this.settings);\n            return this.applyTheme(themeData, settingsTarget);\n        }\n        catch (error) {\n            throw new Error(nls.localize('error.cannotloadtheme', \"Unable to load {0}: {1}\", themeData.location?.toString(), error.message));\n        }\n    }\n    reloadCurrentColorTheme() {\n        return this.colorThemeSequencer.queue(async () => {\n            try {\n                const theme = this.colorThemeRegistry.findThemeBySettingsId(this.currentColorTheme.settingsId) || this.currentColorTheme;\n                await theme.reload(this.extensionResourceLoaderService);\n                theme.setCustomizations(this.settings);\n                await this.applyTheme(theme, undefined, false);\n            }\n            catch (error) {\n                this.logService.info('Unable to reload {0}: {1}', this.currentColorTheme.location?.toString());\n            }\n        });\n    }\n    async restoreColorTheme() {\n        return this.colorThemeSequencer.queue(async () => {\n            const settingId = this.settings.colorTheme;\n            const theme = this.colorThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentColorTheme.settingsId) {\n                    await this.internalSetColorTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentColorTheme) {\n                    await theme.ensureLoaded(this.extensionResourceLoaderService);\n                    theme.setCustomizations(this.settings);\n                    await this.applyTheme(theme, undefined, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    updateDynamicCSSRules(themeData) {\n        const cssRules = ( (new Set()));\n        const ruleCollector = {\n            addRule: (rule) => {\n                if (!( (cssRules.has(rule)))) {\n                    cssRules.add(rule);\n                }\n            }\n        };\n        ruleCollector.addRule(`.monaco-workbench { forced-color-adjust: none; }`);\n        themingRegistry.getThemingParticipants().forEach(p => p(themeData, ruleCollector, this.environmentService));\n        const colorVariables = [];\n        for (const item of getColorRegistry().getColors()) {\n            const color = themeData.getColor(item.id, true);\n            if (color) {\n                colorVariables.push(`${asCssVariableName(item.id)}: ${( ( color.toString()))};`);\n            }\n        }\n        ruleCollector.addRule(`.monaco-workbench { ${colorVariables.join('\\n')} }`);\n        _applyRules([...cssRules].join('\\n'), colorThemeRulesClassName);\n    }\n    applyTheme(newTheme, settingsTarget, silent = false) {\n        this.updateDynamicCSSRules(newTheme);\n        if (this.currentColorTheme.id) {\n            this.container.classList.remove(...this.currentColorTheme.classNames);\n        }\n        else {\n            this.container.classList.remove(VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME, VS_HC_LIGHT_THEME);\n        }\n        this.container.classList.add(...newTheme.classNames);\n        this.currentColorTheme.clearCaches();\n        this.currentColorTheme = newTheme;\n        if (!this.colorThemingParticipantChangeListener) {\n            this.colorThemingParticipantChangeListener = themingRegistry.onThemingParticipantAdded(_ => this.updateDynamicCSSRules(this.currentColorTheme));\n        }\n        this.colorThemeWatcher.update(newTheme);\n        this.sendTelemetry(newTheme.id, newTheme.extensionData, 'color');\n        if (silent) {\n            return Promise.resolve(null);\n        }\n        this.onColorThemeChange.fire(this.currentColorTheme);\n        if (newTheme.isLoaded && settingsTarget !== 'preview') {\n            newTheme.toStorage(this.storageService);\n        }\n        return this.settings.setColorTheme(this.currentColorTheme, settingsTarget);\n    }\n    sendTelemetry(themeId, themeData, themeType) {\n        if (themeData) {\n            const key = themeType + themeData.extensionId;\n            if (!this.themeExtensionsActivated.get(key)) {\n                this.telemetryService.publicLog2('activatePlugin', {\n                    id: themeData.extensionId,\n                    name: themeData.extensionName,\n                    isBuiltin: themeData.extensionIsBuiltin,\n                    publisherDisplayName: themeData.extensionPublisher,\n                    themeId: themeId\n                });\n                this.themeExtensionsActivated.set(key, true);\n            }\n        }\n    }\n    async getFileIconThemes() {\n        return this.fileIconThemeRegistry.getThemes();\n    }\n    getFileIconTheme() {\n        return this.currentFileIconTheme;\n    }\n    get onDidFileIconThemeChange() {\n        return this.onFileIconThemeChange.event;\n    }\n    async setFileIconTheme(iconThemeOrId, settingsTarget) {\n        return this.fileIconThemeSequencer.queue(async () => {\n            return this.internalSetFileIconTheme(iconThemeOrId, settingsTarget);\n        });\n    }\n    async internalSetFileIconTheme(iconThemeOrId, settingsTarget) {\n        if (iconThemeOrId === undefined) {\n            iconThemeOrId = '';\n        }\n        const themeId = types.isString(iconThemeOrId) ? iconThemeOrId : iconThemeOrId.id;\n        if (themeId !== this.currentFileIconTheme.id || !this.currentFileIconTheme.isLoaded) {\n            let newThemeData = this.fileIconThemeRegistry.findThemeById(themeId);\n            if (!newThemeData && iconThemeOrId instanceof FileIconThemeData) {\n                newThemeData = iconThemeOrId;\n            }\n            if (!newThemeData) {\n                newThemeData = FileIconThemeData.noIconTheme;\n            }\n            await newThemeData.ensureLoaded(this.fileIconThemeLoader);\n            this.applyAndSetFileIconTheme(newThemeData);\n        }\n        const themeData = this.currentFileIconTheme;\n        if (themeData.isLoaded && settingsTarget !== 'preview' && (!themeData.location || !getRemoteAuthority(themeData.location))) {\n            themeData.toStorage(this.storageService);\n        }\n        await this.settings.setFileIconTheme(this.currentFileIconTheme, settingsTarget);\n        return themeData;\n    }\n    async getMarketplaceFileIconThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(resources.joinPath(extensionLocation, 'package.json'));\n                return this.fileIconThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    async reloadCurrentFileIconTheme() {\n        return this.fileIconThemeSequencer.queue(async () => {\n            await this.currentFileIconTheme.reload(this.fileIconThemeLoader);\n            this.applyAndSetFileIconTheme(this.currentFileIconTheme);\n        });\n    }\n    async restoreFileIconTheme() {\n        return this.fileIconThemeSequencer.queue(async () => {\n            const settingId = this.settings.fileIconTheme;\n            const theme = this.fileIconThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentFileIconTheme.settingsId) {\n                    await this.internalSetFileIconTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentFileIconTheme) {\n                    await theme.ensureLoaded(this.fileIconThemeLoader);\n                    this.applyAndSetFileIconTheme(theme, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    applyAndSetFileIconTheme(iconThemeData, silent = false) {\n        this.currentFileIconTheme = iconThemeData;\n        _applyRules(iconThemeData.styleSheetContent, fileIconThemeRulesClassName);\n        if (iconThemeData.id) {\n            this.container.classList.add(fileIconsEnabledClass);\n        }\n        else {\n            this.container.classList.remove(fileIconsEnabledClass);\n        }\n        this.fileIconThemeWatcher.update(iconThemeData);\n        if (iconThemeData.id) {\n            this.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'fileIcon');\n        }\n        if (!silent) {\n            this.onFileIconThemeChange.fire(this.currentFileIconTheme);\n        }\n    }\n    async getProductIconThemes() {\n        return this.productIconThemeRegistry.getThemes();\n    }\n    getProductIconTheme() {\n        return this.currentProductIconTheme;\n    }\n    get onDidProductIconThemeChange() {\n        return this.onProductIconThemeChange.event;\n    }\n    async setProductIconTheme(iconThemeOrId, settingsTarget) {\n        return this.productIconThemeSequencer.queue(async () => {\n            return this.internalSetProductIconTheme(iconThemeOrId, settingsTarget);\n        });\n    }\n    async internalSetProductIconTheme(iconThemeOrId, settingsTarget) {\n        if (iconThemeOrId === undefined) {\n            iconThemeOrId = '';\n        }\n        const themeId = types.isString(iconThemeOrId) ? iconThemeOrId : iconThemeOrId.id;\n        if (themeId !== this.currentProductIconTheme.id || !this.currentProductIconTheme.isLoaded) {\n            let newThemeData = this.productIconThemeRegistry.findThemeById(themeId);\n            if (!newThemeData && iconThemeOrId instanceof ProductIconThemeData) {\n                newThemeData = iconThemeOrId;\n            }\n            if (!newThemeData) {\n                newThemeData = ProductIconThemeData.defaultTheme;\n            }\n            await newThemeData.ensureLoaded(this.extensionResourceLoaderService, this.logService);\n            this.applyAndSetProductIconTheme(newThemeData);\n        }\n        const themeData = this.currentProductIconTheme;\n        if (themeData.isLoaded && settingsTarget !== 'preview' && (!themeData.location || !getRemoteAuthority(themeData.location))) {\n            themeData.toStorage(this.storageService);\n        }\n        await this.settings.setProductIconTheme(this.currentProductIconTheme, settingsTarget);\n        return themeData;\n    }\n    async getMarketplaceProductIconThemes(publisher, name, version) {\n        const extensionLocation = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({ publisher, name, version }, 'extension');\n        if (extensionLocation) {\n            try {\n                const manifestContent = await this.extensionResourceLoaderService.readExtensionResource(resources.joinPath(extensionLocation, 'package.json'));\n                return this.productIconThemeRegistry.getMarketplaceThemes(JSON.parse(manifestContent), extensionLocation, ExtensionData.fromName(publisher, name));\n            }\n            catch (e) {\n                this.logService.error('Problem loading themes from marketplace', e);\n            }\n        }\n        return [];\n    }\n    async reloadCurrentProductIconTheme() {\n        return this.productIconThemeSequencer.queue(async () => {\n            await this.currentProductIconTheme.reload(this.extensionResourceLoaderService, this.logService);\n            this.applyAndSetProductIconTheme(this.currentProductIconTheme);\n        });\n    }\n    async restoreProductIconTheme() {\n        return this.productIconThemeSequencer.queue(async () => {\n            const settingId = this.settings.productIconTheme;\n            const theme = this.productIconThemeRegistry.findThemeBySettingsId(settingId);\n            if (theme) {\n                if (settingId !== this.currentProductIconTheme.settingsId) {\n                    await this.internalSetProductIconTheme(theme.id, undefined);\n                }\n                else if (theme !== this.currentProductIconTheme) {\n                    await theme.ensureLoaded(this.extensionResourceLoaderService, this.logService);\n                    this.applyAndSetProductIconTheme(theme, true);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    applyAndSetProductIconTheme(iconThemeData, silent = false) {\n        this.currentProductIconTheme = iconThemeData;\n        _applyRules(iconThemeData.styleSheetContent, productIconThemeRulesClassName);\n        this.productIconThemeWatcher.update(iconThemeData);\n        if (iconThemeData.id) {\n            this.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'productIcon');\n        }\n        if (!silent) {\n            this.onProductIconThemeChange.fire(this.currentProductIconTheme);\n        }\n    }\n};\nWorkbenchThemeService = ( (__decorate([\n    ( (__param(0, IExtensionService))),\n    ( (__param(1, IStorageService))),\n    ( (__param(2, IConfigurationService))),\n    ( (__param(3, ITelemetryService))),\n    ( (__param(4, IBrowserWorkbenchEnvironmentService))),\n    ( (__param(5, IFileService))),\n    ( (__param(6, IExtensionResourceLoaderService))),\n    ( (__param(7, IWorkbenchLayoutService))),\n    ( (__param(8, ILogService))),\n    ( (__param(9, IHostColorSchemeService))),\n    ( (__param(10, IUserDataInitializationService))),\n    ( (__param(11, ILanguageService)))\n], WorkbenchThemeService)));\nclass ThemeFileWatcher {\n    constructor(fileService, environmentService, onUpdate) {\n        this.fileService = fileService;\n        this.environmentService = environmentService;\n        this.onUpdate = onUpdate;\n    }\n    update(theme) {\n        if (!resources.isEqual(theme.location, this.watchedLocation)) {\n            this.dispose();\n            if (theme.location && (theme.watch || this.environmentService.isExtensionDevelopment)) {\n                this.watchedLocation = theme.location;\n                this.watcherDisposable = this.fileService.watch(theme.location);\n                this.fileService.onDidFilesChange(e => {\n                    if (this.watchedLocation && e.contains(this.watchedLocation, 0 )) {\n                        this.onUpdate();\n                    }\n                });\n            }\n        }\n    }\n    dispose() {\n        this.watcherDisposable = dispose(this.watcherDisposable);\n        this.fileChangeListener = dispose(this.fileChangeListener);\n        this.watchedLocation = undefined;\n    }\n}\nfunction _applyRules(styleSheetContent, rulesClassName) {\n    const themeStyles = document.head.getElementsByClassName(rulesClassName);\n    if (themeStyles.length === 0) {\n        const elStyle = document.createElement('style');\n        elStyle.type = 'text/css';\n        elStyle.className = rulesClassName;\n        elStyle.textContent = styleSheetContent;\n        document.head.appendChild(elStyle);\n    }\n    else {\n        themeStyles[0].textContent = styleSheetContent;\n    }\n}\nregisterColorThemeSchemas();\nregisterFileIconThemeSchemas();\nregisterProductIconThemeSchemas();\nexport { WorkbenchThemeService };\n","import '../missing-services.js';\nimport { WorkbenchThemeService } from '../vscode/vs/workbench/services/themes/browser/workbenchThemeService.js';\nimport { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nimport getServiceOverride$1 from './files.js';\nclass StandaloneWorkbenchThemeService extends WorkbenchThemeService {\n    registerEditorContainer() {\n        return {\n            dispose() { }\n        };\n    }\n    setTheme(themeName) {\n        void this.getColorThemes().then(themes => {\n            setTimeout(() => {\n                void this.setColorTheme(themes.find(theme => theme.settingsId === themeName) ?? themeName, 8 );\n            });\n        });\n    }\n}\nfunction getServiceOverride() {\n    return {\n        ...getServiceOverride$1(),\n        [( IThemeService.toString())]: new SyncDescriptor(StandaloneWorkbenchThemeService, [], false)\n    };\n}\nexport { getServiceOverride as default };\n","import { refineServiceDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';\nimport { isString, isBoolean } from 'monaco-editor/esm/vs/base/common/types.js';\nconst IWorkbenchThemeService = refineServiceDecorator(IThemeService);\nconst VS_LIGHT_THEME = 'vs';\nconst VS_DARK_THEME = 'vs-dark';\nconst VS_HC_THEME = 'hc-black';\nconst VS_HC_LIGHT_THEME = 'hc-light';\nconst THEME_SCOPE_OPEN_PAREN = '[';\nconst THEME_SCOPE_CLOSE_PAREN = ']';\nconst THEME_SCOPE_WILDCARD = '*';\nconst themeScopeRegex = /\\[(.+?)\\]/g;\nvar ThemeSettings;\n( (function(ThemeSettings) {\n    ThemeSettings[\"COLOR_THEME\"] = \"workbench.colorTheme\";\n    ThemeSettings[\"FILE_ICON_THEME\"] = \"workbench.iconTheme\";\n    ThemeSettings[\"PRODUCT_ICON_THEME\"] = \"workbench.productIconTheme\";\n    ThemeSettings[\"COLOR_CUSTOMIZATIONS\"] = \"workbench.colorCustomizations\";\n    ThemeSettings[\"TOKEN_COLOR_CUSTOMIZATIONS\"] = \"editor.tokenColorCustomizations\";\n    ThemeSettings[\"SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS\"] = \"editor.semanticTokenColorCustomizations\";\n    ThemeSettings[\"PREFERRED_DARK_THEME\"] = \"workbench.preferredDarkColorTheme\";\n    ThemeSettings[\"PREFERRED_LIGHT_THEME\"] = \"workbench.preferredLightColorTheme\";\n    ThemeSettings[\"PREFERRED_HC_DARK_THEME\"] = \"workbench.preferredHighContrastColorTheme\";\n    ThemeSettings[\"PREFERRED_HC_LIGHT_THEME\"] = \"workbench.preferredHighContrastLightColorTheme\";\n    ThemeSettings[\"DETECT_COLOR_SCHEME\"] = \"window.autoDetectColorScheme\";\n    ThemeSettings[\"DETECT_HC\"] = \"window.autoDetectHighContrast\";\n})(ThemeSettings || (ThemeSettings = {})));\nvar ThemeSettingDefaults;\n( (function(ThemeSettingDefaults) {\n    ThemeSettingDefaults[\"COLOR_THEME_DARK\"] = \"Default Dark Modern\";\n    ThemeSettingDefaults[\"COLOR_THEME_LIGHT\"] = \"Default Light Modern\";\n    ThemeSettingDefaults[\"COLOR_THEME_HC_DARK\"] = \"Default High Contrast\";\n    ThemeSettingDefaults[\"COLOR_THEME_HC_LIGHT\"] = \"Default High Contrast Light\";\n    ThemeSettingDefaults[\"COLOR_THEME_DARK_OLD\"] = \"Default Dark+\";\n    ThemeSettingDefaults[\"COLOR_THEME_LIGHT_OLD\"] = \"Default Light+\";\n    ThemeSettingDefaults[\"FILE_ICON_THEME\"] = \"vs-seti\";\n    ThemeSettingDefaults[\"PRODUCT_ICON_THEME\"] = \"Default\";\n})(ThemeSettingDefaults || (ThemeSettingDefaults = {})));\nconst COLOR_THEME_DARK_INITIAL_COLORS = {\n    'activityBar.background': '#181818',\n    'statusBar.background': '#181818',\n    'statusBar.noFolderBackground': '#1f1f1f',\n};\nconst COLOR_THEME_LIGHT_INITIAL_COLORS = {\n    'activityBar.background': '#f8f8f8',\n    'statusBar.background': '#f8f8f8',\n    'statusBar.noFolderBackground': '#f8f8f8'\n};\nvar ExtensionData;\n( (function(ExtensionData) {\n    function toJSONObject(d) {\n        return d && { _extensionId: d.extensionId, _extensionIsBuiltin: d.extensionIsBuiltin, _extensionName: d.extensionName, _extensionPublisher: d.extensionPublisher };\n    }\n    ExtensionData.toJSONObject = toJSONObject;\n    function fromJSONObject(o) {\n        if (o && isString(o._extensionId) && isBoolean(o._extensionIsBuiltin) && isString(o._extensionName) && isString(o._extensionPublisher)) {\n            return { extensionId: o._extensionId, extensionIsBuiltin: o._extensionIsBuiltin, extensionName: o._extensionName, extensionPublisher: o._extensionPublisher };\n        }\n        return undefined;\n    }\n    ExtensionData.fromJSONObject = fromJSONObject;\n    function fromName(publisher, name, isBuiltin = false) {\n        return { extensionPublisher: publisher, extensionId: `${publisher}.${name}`, extensionName: name, extensionIsBuiltin: isBuiltin };\n    }\n    ExtensionData.fromName = fromName;\n})(ExtensionData || (ExtensionData = {})));\nexport { COLOR_THEME_DARK_INITIAL_COLORS, COLOR_THEME_LIGHT_INITIAL_COLORS, ExtensionData, IWorkbenchThemeService, THEME_SCOPE_CLOSE_PAREN, THEME_SCOPE_OPEN_PAREN, THEME_SCOPE_WILDCARD, ThemeSettingDefaults, ThemeSettings, VS_DARK_THEME, VS_HC_LIGHT_THEME, VS_HC_THEME, VS_LIGHT_THEME, themeScopeRegex };\n"],"names":["settingToColorIdMapping","addSettingMapping","settingId","colorId","colorIds","push","convertSettings","oldSettings","result","rule","textMateRules","scope","settings","settingKey","key","mappings","colorHex","color","fromHex","colors","colorRegistry","editorColorRegistry","ansiColorMap","parse","content","filename","locationKeyName","len","length","pos","line","char","advancePosBy","by","charCodeAt","advancePosTo","to","skipWhitespace","chCode","advanceIfStartsWith","str","substr","advanceUntil","nextOccurence","indexOf","captureUntil","r","substring","state","cur","stateStack","objStack","curKey","pushState","newState","newCur","popState","fail","pop","msg","Error","dictState","newDict","newArr","arrState","leaveDict","leaveArray","acceptString","val","acceptReal","isNaN","acceptInteger","acceptDate","acceptData","acceptBool","parseOpenTag","isClosed","name","trim","parseTagValue","tag","replace","_","m0","String","fromCodePoint","parseInt","peekChCode","parseFloat","Date","test","_parse","createMatchers","selector","matchesName","results","tokenizer","input","regex","match","exec","next","res","newTokenizer","token","priority","charAt","console","log","matcher","parseConjunction","parseOperand","expressionToNegate","matcherInput","expressionInParents","matchers","max","i","Math","parseInnerExpression","isIdentifier","identifiers","min","as","ColorContribution","tokenGroupToScopesMap","comments","strings","keywords","numbers","types","functions","variables","ColorThemeData","this","STORAGE_KEY","constructor","id","label","settingsId","themeTokenColors","customTokenColors","colorMap","customColorMap","semanticTokenRules","customSemanticTokenRules","textMateThemingRules","undefined","tokenColorIndex","isLoaded","semanticHighlighting","customSemanticHighlighting","customSemanticHighlightingDeprecated","themeSemanticHighlighting","tokenColors","foreground","getColor","getDefault","background","normalizeColor","hasDefaultTokens","addRule","fontStyle","forEach","defaultThemeColors","type","useDefault","getTokenStyle","modifiers","language","definitions","bold","underline","strikethrough","italic","score","_processStyle","matchScore","style","definition","p","property","info","_processSemanticTokenRule","hasUndefinedStyleProperty","k","Number","MAX_VALUE","getTokenStylingDefaultRules","defaults","scopesToProbe","resolveScopes","tokenStyleValue","resolveTokenStyleValue","fromData","getTokenColorIndex","index","TokenColorIndex","add","defaultColor","tokenColorMap","asArray","getTokenStyleMetadata","typeWithLanguage","defaultLanguage","get","getTokenStylingRuleScope","resolveDefaultColor","scopes","themeTokenScopeMatchers","map","getScopeMatcher","customTokenScopeMatchers","fontStyleThemingRule","foregroundThemingRule","foregroundScore","fontStyleScore","findTokenStyleForScopeInScopes","scopeMatchers","themingRules","themingRule","fromSettings","defines","hasOwnProperty","setCustomizations","setCustomColors","colorCustomizations","setCustomTokenColors","tokenColorCustomizations","setCustomSemanticTokenColors","semanticTokenColorCustomizations","overwriteCustomColors","themeSpecificColors","getThemeSpecificColors","colorVal","addCustomTokenColors","themeSpecificTokenColors","semanticTokenColors","enabled","rules","readSemanticTokenRules","isThemeScope","isThemeScopeMatch","themeId","themeIdFirstChar","themeIdLastChar","themeIdPrefix","slice","themeIdInfix","themeIdSuffix","includes","startsWith","endsWith","scopedColors","Object","Array","isArray","themeScopeList","themeScope","scopedThemeSpecificColors","subkey","originalColors","overrideColors","concat","tokenStylingRuleSection","readSemanticTokenRule","e","tokenGroup","group","value","ensureLoaded","extensionResourceLoaderService","Promise","resolve","load","reload","location","clearCaches","_loadColorTheme","then","toStorage","storageService","colorMapData","Format","CSS","formatHexA","JSON","stringify","tc","toJSONObject","extensionData","watch","store","baseTheme","classNames","split","LIGHT","HIGH_CONTRAST_DARK","HIGH_CONTRAST_LIGHT","DARK","createUnloadedThemeForThemeType","themeType","createUnloadedTheme","themeData","createLoadedEmptyTheme","fromStorageData","data","theme","rulesData","d","fromJSONObject","fromExtensionTheme","colorThemeLocation","themeSelector","extensionId","path","toCSSSelector","description","_watch","async","themeLocation","resources","_loadSyntaxTokens","readExtensionResource","errors","contentValue","json","reject","nls","error","join","include","comment","toString","message","noMatch","_scope","nameMatcher","identifers","findInIdents","s","lastIndent","scopesAreMatching","lastScopeIndex","lastIdentifierIndex","thisScopeName","scopeName","ruleScope","rs","selectorString","parseTokenSelector","isSemanticTokenColorizationSetting","_lastColorId","_id2color","_color2id","create","upper","charCode","fromCharCode","fontIdRegex","fontStyleRegex","fontWeightRegex","fontSizeRegex","schema","allowComments","allowTrailingCommas","properties","fonts","items","pattern","patternErrorMessage","src","format","enum","required","weight","anyOf","iconDefinitions","$ref","folderExpanded","folder","file","folderNames","additionalProperties","folderNamesExpanded","fileExtensions","fileNames","languageIds","associations","size","iconPath","fontCharacter","fontColor","fontSize","fontId","light","highContrast","hidesExplorerArrows","showLanguageModeIcons","FileIconThemeData","hasFileIcons","hasFolderIcons","themeLoader","styleSheetContent","iconTheme","iconThemeLocation","_noIconTheme","noIconTheme","FileIconThemeLoader","fileService","languageService","loadIconThemeDocument","iconThemeDocument","processIconThemeDocument","iconThemeDocumentLocation","hasSpecificFileIcons","selectorByDefinitionId","coveredLanguages","iconThemeDocumentLocationDirname","resolvePath","collectSelectors","baseThemeClassName","addSelector","defId","list","qualifier","expanded","rootFolder","rootFolderExpanded","selectors","handleParentFolder","toLowerCase","escapeCSS","jsonc","languageId","segments","fileName","cssRules","fontSizes","Map","defaultFontSize","font","l","set","body","getRegisteredLanguageIds","icon","getIcon","dark","lastIndexOfSlash","lastIndexOf","parentFolder","window","escape","textMateScopes","textmateColorsSchemaId","textmateColorGroupSchemaId","textmateColorSchema","colorGroup","default","deprecationMessage","defaultSnippets","bodyText","colorThemeSchema","ThemeRegistry","themesExtPoint","idRequired","builtInTheme","onDidChangeEmitter","onDidChange","event","extensionThemes","initialize","setHandler","extensions","delta","previousIds","added","ext","fromName","publisher","isBuiltin","onThemes","extensionLocation","collector","removed","values","fire","themes","themeContributions","resultingThemes","warn","findThemeById","allThemes","getThemes","t","findThemeBySettingsId","defaultSettingsId","defaultTheme","findThemeByExtensionLocation","extLocation","filter","getMarketplaceThemes","manifest","contributes","Configuration","colorThemeSettingEnum","colorThemeSettingEnumItemLabels","colorThemeSettingEnumDescriptions","formatSettingAsLink","colorThemeSettingSchema","COLOR_THEME_LIGHT","COLOR_THEME_DARK","enumDescriptions","enumItemLabels","errorMessage","preferredDarkThemeSettingSchema","markdownDescription","DETECT_COLOR_SCHEME","preferredLightThemeSettingSchema","preferredHCDarkThemeSettingSchema","DETECT_HC","COLOR_THEME_HC_DARK","preferredHCLightThemeSettingSchema","COLOR_THEME_HC_LIGHT","detectColorSchemeSettingSchema","PREFERRED_DARK_THEME","PREFERRED_LIGHT_THEME","colorCustomizationsSchema","allOf","fileIconThemeSettingSchema","FILE_ICON_THEME","productIconThemeSettingSchema","PRODUCT_ICON_THEME","detectHCSchemeSettingSchema","PREFERRED_HC_DARK_THEME","PREFERRED_HC_LIGHT_THEME","themeSettingsConfiguration","order","COLOR_THEME","COLOR_CUSTOMIZATIONS","registerConfiguration","themeSettingsWindowConfiguration","tokenGroupSettings","themeSpecificSettingKey","tokenColorSchema","markdownDeprecationMessage","tokenColorCustomizationSchema","patternProperties","semanticTokenColorSchema","suggestSortText","semanticTokenColorCustomizationSchema","tokenColorCustomizationConfiguration","TOKEN_COLOR_CUSTOMIZATIONS","SEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS","updateColorThemeConfigurationSchemas","sort","a","b","localeCompare","splice","themeSpecificWorkbenchColors","themeSpecificSemanticTokenColors","workbenchColors","notifyConfigurationSchemaUpdated","updateFileIconThemeConfigurationSchemas","updateProductIconThemeConfigurationSchemas","ThemeConfiguration","configurationService","colorTheme","getValue","fileIconTheme","productIconTheme","setColorTheme","settingsTarget","writeConfiguration","setFileIconTheme","setProductIconTheme","isDefaultColorTheme","inspect","findAutoConfigurationTarget","workspaceFolderValue","workspaceValue","userRemote","updateValue","userValue","defaultValue","ProductIconThemeData","iconContribution","isThemeIcon","ic","_resolveIconDefinition","logService","warnings","parseErrors","sanitizedFonts","fontWeight","sanitizedSrc","iconFontLocation","primaryFontId","iconId","fontDefinition","_loadProductIconThemeDocument","_defaultProductIconTheme","iconFontDefinitions","restoredIconDefinitions","entry","iconFontDefinition","entries","PERSISTED_OS_COLOR_SCHEME","defaultThemeExtensionId","DEFAULT_FILE_ICON_THEME_ID","fileIconsEnabledClass","themingRegistry","ThemingContribution","colorThemesExtPoint","registerExtensionPoint","extensionPoint","jsonSchema","uiTheme","fileIconThemesExtPoint","productIconThemesExtPoint","WorkbenchThemeService","extensionService","telemetryService","environmentService","layoutService","hostColorService","userDataInitializationService","hasDefaultUpdated","themeExtensionsActivated","container","colorThemeRegistry","colorThemeWatcher","ThemeFileWatcher","reloadCurrentColorTheme","bind","onColorThemeChange","leakWarningThreshold","currentColorTheme","colorThemeSequencer","fileIconThemeWatcher","reloadCurrentFileIconTheme","fileIconThemeRegistry","fileIconThemeLoader","onFileIconThemeChange","currentFileIconTheme","fileIconThemeSequencer","productIconThemeWatcher","reloadCurrentProductIconTheme","productIconThemeRegistry","onProductIconThemeChange","currentProductIconTheme","productIconThemeSequencer","colorThemeSetting","COLOR_THEME_DARK_OLD","COLOR_THEME_LIGHT_OLD","preferredColorScheme","getPreferredColorScheme","defaultColorMap","initialColorTheme","options","applyTheme","fileIconData","applyAndSetFileIconTheme","productIconData","applyAndSetProductIconTheme","all","whenInstalledExtensionsRegistered","whenInitializationFinished","installConfigurationListener","installPreferredSchemeListener","installRegistryListeners","catch","codiconStyleSheet","iconsStyleSheet","delayer","textContent","getCSS","schedule","extDevLocs","extensionDevelopmentLocationURI","extDevLoc","devThemes","fallbackTheme","applyPreferredColorTheme","initializeColorTheme","initializeFileIconTheme","initializeProductIconTheme","onDidChangeConfiguration","lazyPreferredColorScheme","affectsConfiguration","restoreColorTheme","handlePreferredSchemeUpdated","restoreFileIconTheme","restoreProductIconTheme","hasColorChanges","updateDynamicCSSRules","prevColorId","prevFileIconId","prevProductIconId","some","getColorThemes","getFileIconThemes","getProductIconThemes","ct","fit","pit","onDidChangeColorScheme","scheme","prevScheme","themeSettingIdBeforeSchemeSwitch","themeSettingId","configurationTarget","hasUpdatedDefaultThemes","getColorTheme","getMarketplaceColorThemes","version","getExtensionGalleryResourceURL","manifestContent","onDidColorThemeChange","themeIdOrTheme","queue","internalSetColorTheme","validateThemeId","Set","ruleCollector","has","getThemingParticipants","colorVariables","item","getColors","_applyRules","newTheme","silent","classList","remove","colorThemingParticipantChangeListener","onThemingParticipantAdded","update","sendTelemetry","publicLog2","extensionName","extensionIsBuiltin","publisherDisplayName","extensionPublisher","getFileIconTheme","onDidFileIconThemeChange","iconThemeOrId","internalSetFileIconTheme","newThemeData","getMarketplaceFileIconThemes","iconThemeData","getProductIconTheme","onDidProductIconThemeChange","internalSetProductIconTheme","getMarketplaceProductIconThemes","onUpdate","watchedLocation","dispose","isExtensionDevelopment","watcherDisposable","onDidFilesChange","contains","fileChangeListener","rulesClassName","themeStyles","document","head","getElementsByClassName","elStyle","createElement","className","appendChild","schemaRegistry","JSONContribution","registerSchema","registerColorThemeSchemas","StandaloneWorkbenchThemeService","registerEditorContainer","setTheme","themeName","setTimeout","find","getServiceOverride","IWorkbenchThemeService","VS_LIGHT_THEME","VS_DARK_THEME","VS_HC_THEME","VS_HC_LIGHT_THEME","THEME_SCOPE_OPEN_PAREN","THEME_SCOPE_CLOSE_PAREN","THEME_SCOPE_WILDCARD","themeScopeRegex","ThemeSettings","ThemeSettingDefaults","COLOR_THEME_DARK_INITIAL_COLORS","COLOR_THEME_LIGHT_INITIAL_COLORS","ExtensionData","_extensionId","_extensionIsBuiltin","_extensionName","_extensionPublisher","o"],"sourceRoot":""}