{"version":3,"file":"178.bundle.js","mappings":"+RASO,MAAMA,UAAiC,KAC1C,WAAAC,GACIC,MAAM,CACFC,GAAIH,EAAyBI,GAC7BC,MAAO,CAAEC,MAAOC,EAAA,GAAa,CAAEC,IAAK,uBAAwBC,QAAS,CAAC,+DAAiE,8BAA+BC,SAAU,8BAChLC,kBAAcC,EACdC,WAAY,CACRC,QAAS,KACTC,IAAK,CAAED,QAAS,MAChBE,OAAQ,KAEZC,IAAI,GAEZ,CACA,GAAAC,CAAIC,GACA,MAAMC,EAAiF,aAAvED,EAASE,IAAI,MAAoBC,mBAAmB,eAAgC,gBAAiD,cAE/IC,GADW,IAASC,gBAAgBJ,GAE1C,IAASK,gBAAgBF,EAAUH,GAC/BG,GACA,QAAMhB,EAAA,GAAa,0BAA2B,oEAG9C,QAAMA,EAAA,GAAa,2BAA4B,kDAEvD,EAEJP,EAAyBI,GAAK,oCAC9B,QAAgBJ,G,wKCdhB,UACA,IAAI0B,EAA4B,MAC5B,OAAAC,GACIC,KAAKC,QAAQC,OACjB,CACA,WAAA7B,CAAY4B,EAASE,GACjBH,KAAKC,QAAUA,EACfD,KAAKG,mBAAqBA,EAC1BH,KAAKI,QAAU,CAAEC,KAAM,OAASC,WAAa,QAAS,cAAe,6BAA+BC,YAAa,kDACjHP,KAAKQ,oBAAsB,gCAC/B,CACA,sBAAAC,CAAuBC,EAAWC,EAAKC,GACnC,MAAMC,EAAKb,KAAKG,mBAAmBW,iBAAiBJ,GACpD,OAAIG,EACOE,EAAA,GAAeJ,EAAKE,EAAGG,gBAE3BD,EAAA,GAAeH,EAASF,EACnC,CACA,cAAAO,GACI,MAAMb,EAAUJ,KAAKC,QAAQiB,aACvBC,EAAU,GAuBhB,OAtBIf,EAAQX,IAAI,IACRW,EAAQX,IAAI,IACZ0B,EAAQC,KAAK,KAAqBC,oBAGlCF,EAAQC,KAAK,KAAqBE,oBAIlClB,EAAQX,IAAI,IACZ0B,EAAQC,KAAK,KAAqBG,gBAGlCJ,EAAQC,KAAK,KAAqBI,gBAGtCpB,EAAQX,IAAI,KACZ0B,EAAQC,KAAKpB,KAAKS,uBAAuBrC,EAAyBI,GAAI,KAAqBiD,kBAAmB,KAAqBC,wBAGnIP,EAAQC,KAAKpB,KAAKS,uBAAuBrC,EAAyBI,GAAI,KAAqBmD,mBAAoB,KAAqBC,yBAEjIT,EAAQU,KAAK,KACxB,GAEJ/B,GAA8B,OAAW,EACnC,OAAQ,EAAG,MACdA,GACH,MAAMgC,UAA4C,KAC9C,WAAAzD,GACIC,QACA0B,KAAK+B,UAAU,IAAwBC,kBAAkB,GAAI,UAAUC,MAAO1C,IAC1E,MAAM2C,EAAoB3C,EAASE,IAAI,KACjC0C,EAAwB5C,EAASE,IAAI,KACrC2C,EAAuB7C,EAASE,IAAI,MACpC4C,EAAiB9C,EAASE,IAAI,KACpC,IAAI6C,EAAaJ,EAAkBK,uBAAyBL,EAAkBM,uBACzEF,UACKD,EAAeI,eAAe,MACpCH,EAAaJ,EAAkBK,uBAEnCJ,EAAsBO,KAAKN,EAAqBO,eAAe7C,EAA2BwC,GAAY,IAE9G,EAEwB,IAASM,GAAG,IAAWC,WACjCC,8BAA8BhB,EAAqC,GACrF,MAAMiB,UAAwC,KAC1C,WAAA1E,GACIC,QACA0B,KAAKgD,SAAW,CACZ1C,WAAa,QAAS,sBAAuB,yBAA2B2C,SAAU,aAAc5C,KAAM,QAE1GL,KAAK+B,UAAU,KAAqBC,kBAAkB,GAAI,SAASzC,IAC/D,MAAM4C,EAAwB5C,EAASE,IAAI,KACrCyC,EAAoB3C,EAASE,IAAI,KACjCyD,EAAShB,EAAkBK,uBAAyBL,EAAkBM,uBACtEW,EAAqBD,EAAS,IAAqBzD,IAAIyD,IAASE,yBAAsBpE,OAAYA,EACxG,SAAKkE,IAAWC,IAGhBnD,KAAKgD,SAASC,SAAWC,GAAQG,YAAYC,sBAAmBtE,EAChEmD,EAAsBO,KAAK,CACvBlC,oBAAqB,gCACrBS,eAAc,IAAYkC,EAC1B,OAAApD,GACI,IAAqBN,IAAIyD,IAAShD,OACtC,EACAE,QAASJ,KAAKgD,WAEX,GAAI,GACZ,IAAkBO,eACrBvD,KAAK+B,UAAU,KAAqBC,kBAAkB,GAAI,mBAAmBzC,IACzE,MAAM4C,EAAwB5C,EAASE,IAAI,KAErC+D,EADqBjE,EAASE,IAAI,KACMgE,wBACxCC,EAAwBF,GAAoBG,kBAAe3E,EAC3D4E,EAAerE,EAASE,IAAI,KAClC,QAAI+D,EAAmBK,UAAUC,SAAS,+BAAiCJ,IAG3EvB,EAAsBO,KAAK,CACvBlC,oBAAqB,gCACrBS,eAAc,IAAYyC,EAC1B,OAAA3D,GACI6D,EAAaG,uBACjB,EACA3D,QAASJ,KAAKgD,WAEX,GAAI,IAEnB,EAEJ,MAAMgB,EAAmC,IAASpB,GAAG,IAAWC,WAChEmB,EAA+BlB,8BAA8BC,EAAiC,GAC9F,MAAMkB,UAA+C,KACjD,WAAA5F,GACIC,QACA0B,KAAK+B,UAAU,KAAqBC,kBAAkB,GAAI,iBAAiBzC,IACvE,MAAM4C,EAAwB5C,EAASE,IAAI,KACrCyE,EAAc3E,EAASE,IAAI,MAC3B4C,EAAiB9C,EAASE,IAAI,KAqEpC,OApEA,SAAS0E,IACL,MAAMC,GAAe,QAA2BF,GAChD,IAAKE,EACD,OAAO,EAGX,IAAIC,EACAC,EAFJjC,EAAeI,eAAe,0BAG9B,MAAM8B,EAAOL,EAAYM,gBAKzB,GAJID,aAAgB,OAChBF,EAAoBE,EAAKE,QAAQL,GACjCE,EAASC,EAAKD,aAEQtF,IAAtBqF,EACA,OAAO,EAEX,SAASK,IAEL,GADArC,EAAeI,eAAe,0BAC1B8B,QAA8BvF,IAAtBqF,EAAiC,CACzCE,EAAKI,WACL,IACIJ,EAAKK,SAAS,CAACP,GACnB,CACA,MAAQ,CACZ,CACJ,CACA,MAAMQ,EAAYT,EAAaS,QAAQ/F,SAASgG,WAChD,QAAKD,IAGL1C,EAAsBO,KAAK,CACvBzB,eAAgB,KACH,QACL,8BACA,kBACA4D,EACAT,EAAaW,QAGrB,OAAAhF,GACI2E,GACJ,EACA,IAAAM,GACST,IAGLG,IACAH,EAAKU,YACLC,EAAiBb,EAAmBC,EAAQ,QAC5CH,IACJ,EACA,QAAAgB,GACSZ,IAGLG,IACAH,EAAKa,gBACLF,EAAiBb,EAAmBC,EAAQ,YAC5CH,IACJ,EACA3D,oBAAqB,uCACrBJ,QAAS,CACLE,WAAa,QAAS,eAAgB,gCACtCD,KAAM,WAGP,EACX,CACO8D,EAAsB,GAC9B,MACP,EAEJH,EAA+BlB,8BAA8BmB,EAAwC,GACrG,MAAMoB,UAA4C,KAC9C,WAAAhH,GACIC,QACA0B,KAAK+B,UAAU,KAAyBC,kBAAkB,GAAI,QAAQzC,IACpCA,EAASE,IAAI,KACrBuF,QACf,MAEXhF,KAAK+B,UAAU,KAA6BC,kBAAkB,GAAI,YAAYzC,IAC5CA,EAASE,IAAI,KACrB0F,YACf,KAEf,EAGJ,SAASD,EAAiBI,EAAOhB,EAAQjE,GACrC,QAAcrB,IAAVsG,QAAkCtG,IAAXsF,EACvB,OAEJ,MAAMiB,EAASD,EAAQ,EACV,SAATjF,GAAmBkF,EAAS,GAAKjB,GACjC,QAAM,WAAWiB,EAAS,QAAQjB,KAEpB,aAATjE,GAAuBkF,EAAS,EAAI,IACzC,QAAM,WAAWA,EAAS,QAAQjB,IAG1C,CAbAN,EAA+BlB,8BAA8BuC,EAAqC,ICxOlG,E,QAAA,GADU,qOACJ,CAAC,G,0BCMP,MAAMG,UAA+B,KACjC,WAAAnH,GACIC,MAAM,CACFC,GAAI,oDACJE,MAAO,CAAEC,MAASC,EAAA,GAAa,yBAA0B,2CAA6CG,SAAU,2CAChHO,IAAI,EACJJ,WAAY,CAAC,CACLC,QAAS,KACTE,OAAQ,IACRqG,KAAM,MAEV,CACIvG,QAAS,KACTwG,MAAO,CAAExG,QAAS,MAClBE,OAAQ,OAGxB,CACA,SAAME,CAAIC,GACN,MAAMoG,EAAuBpG,EAASE,IAAI,MACpCmG,EAAuBrG,EAASE,IAAI,MACpCoG,EAA0BF,EAAqBE,0BACrDD,EAAqBE,YAAY,8BAA+BD,EAA0B,MAAQ,KAAM,IACxG,QAAMA,EAA0B,KAAqBE,yBAA2B,KAAqBC,wBACzG,EC3BJ,SAASC,IACL,MAAO,CACH,CAAG,IAAuBnB,YAAc,IAAI,IAAe,IAAuB,IAAI,GAE9F,EDyBA,QAAgBU,E","sources":["webpack://monaco-custom-bundle/./node_modules/monaco-editor/esm/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/accessibility/browser/accessibility.contribution.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.css.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/service-override/accessibility.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { alert } from '../../../../base/browser/ui/aria/aria.js';\nimport { TabFocus } from '../../../browser/config/tabFocus.js';\nimport * as nls from '../../../../nls.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nexport class ToggleTabFocusModeAction extends Action2 {\n    constructor() {\n        super({\n            id: ToggleTabFocusModeAction.ID,\n            title: { value: nls.localize({ key: 'toggle.tabMovesFocus', comment: ['Turn on/off use of tab key for moving focus around VS Code'] }, 'Toggle Tab Key Moves Focus'), original: 'Toggle Tab Key Moves Focus' },\n            precondition: undefined,\n            keybinding: {\n                primary: 2048 /* KeyMod.CtrlCmd */ | 43 /* KeyCode.KeyM */,\n                mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 43 /* KeyCode.KeyM */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            f1: true\n        });\n    }\n    run(accessor) {\n        const context = accessor.get(IContextKeyService).getContextKeyValue('focusedView') === 'terminal' ? \"terminalFocus\" /* TabFocusContext.Terminal */ : \"editorFocus\" /* TabFocusContext.Editor */;\n        const oldValue = TabFocus.getTabFocusMode(context);\n        const newValue = !oldValue;\n        TabFocus.setTabFocusMode(newValue, context);\n        if (newValue) {\n            alert(nls.localize('toggle.tabMovesFocus.on', \"Pressing Tab will now move focus to the next focusable element\"));\n        }\n        else {\n            alert(nls.localize('toggle.tabMovesFocus.off', \"Pressing Tab will now insert the tab character\"));\n        }\n    }\n}\nToggleTabFocusModeAction.ID = 'editor.action.toggleTabFocusMode';\nregisterAction2(ToggleTabFocusModeAction);\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';\nimport { AccessibilityHelpNLS } from 'monaco-editor/esm/vs/editor/common/standaloneStrings.js';\nimport { ToggleTabFocusModeAction } from 'monaco-editor/esm/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { registerAccessibilityConfiguration, AccessibilityHelpAction, AccessibleViewAction, AccessibleViewNextAction, AccessibleViewPreviousAction } from './accessibilityContribution.js';\nimport * as strings from 'monaco-editor/esm/vs/base/common/strings.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { Extensions } from '../../../common/contributions.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { NEW_UNTITLED_FILE_COMMAND_ID } from '../../files/browser/fileConstants.js';\nimport { ModesHoverController } from 'monaco-editor/esm/vs/editor/contrib/hover/browser/hover.js';\nimport { IContextViewService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';\nimport { EditorContextKeys } from 'monaco-editor/esm/vs/editor/common/editorContextKeys.js';\nimport { getNotificationFromContext } from '../../../browser/parts/notifications/notificationsCommands.js';\nimport { IListService, WorkbenchList } from 'monaco-editor/esm/vs/platform/list/browser/listService.js';\nimport { NotificationFocusedContext } from '../../../common/contextkeys.js';\nimport { IAccessibleViewService } from './accessibleView.js';\nimport { IHoverService } from '../../../services/hover/browser/hover.js';\nimport { alert } from 'monaco-editor/esm/vs/base/browser/ui/aria/aria.js';\nregisterAccessibilityConfiguration();\nlet AccessibilityHelpProvider = class AccessibilityHelpProvider {\n    onClose() {\n        this._editor.focus();\n    }\n    constructor(_editor, _keybindingService) {\n        this._editor = _editor;\n        this._keybindingService = _keybindingService;\n        this.options = { type: \"help\" , ariaLabel: ( localize('editor-help', \"editor accessibility help\")), readMoreUrl: 'https://go.microsoft.com/fwlink/?linkid=851010' };\n        this.verbositySettingKey = \"accessibility.verbosity.editor\" ;\n    }\n    _descriptionForCommand(commandId, msg, noKbMsg) {\n        const kb = this._keybindingService.lookupKeybinding(commandId);\n        if (kb) {\n            return strings.format(msg, kb.getAriaLabel());\n        }\n        return strings.format(noKbMsg, commandId);\n    }\n    provideContent() {\n        const options = this._editor.getOptions();\n        const content = [];\n        if (options.get(60 )) {\n            if (options.get(89 )) {\n                content.push(AccessibilityHelpNLS.readonlyDiffEditor);\n            }\n            else {\n                content.push(AccessibilityHelpNLS.editableDiffEditor);\n            }\n        }\n        else {\n            if (options.get(89 )) {\n                content.push(AccessibilityHelpNLS.readonlyEditor);\n            }\n            else {\n                content.push(AccessibilityHelpNLS.editableEditor);\n            }\n        }\n        if (options.get(141 )) {\n            content.push(this._descriptionForCommand(ToggleTabFocusModeAction.ID, AccessibilityHelpNLS.tabFocusModeOnMsg, AccessibilityHelpNLS.tabFocusModeOnMsgNoKb));\n        }\n        else {\n            content.push(this._descriptionForCommand(ToggleTabFocusModeAction.ID, AccessibilityHelpNLS.tabFocusModeOffMsg, AccessibilityHelpNLS.tabFocusModeOffMsgNoKb));\n        }\n        return content.join('\\n');\n    }\n};\nAccessibilityHelpProvider = ( __decorate([\n    ( __param(1, IKeybindingService))\n], AccessibilityHelpProvider));\nclass EditorAccessibilityHelpContribution extends Disposable {\n    constructor() {\n        super();\n        this._register(AccessibilityHelpAction.addImplementation(95, 'editor', async (accessor) => {\n            const codeEditorService = accessor.get(ICodeEditorService);\n            const accessibleViewService = accessor.get(IAccessibleViewService);\n            const instantiationService = accessor.get(IInstantiationService);\n            const commandService = accessor.get(ICommandService);\n            let codeEditor = codeEditorService.getActiveCodeEditor() || codeEditorService.getFocusedCodeEditor();\n            if (!codeEditor) {\n                await commandService.executeCommand(NEW_UNTITLED_FILE_COMMAND_ID);\n                codeEditor = codeEditorService.getActiveCodeEditor();\n            }\n            accessibleViewService.show(instantiationService.createInstance(AccessibilityHelpProvider, codeEditor));\n        }));\n    }\n}\nconst workbenchRegistry = ( Registry.as(Extensions.Workbench));\nworkbenchRegistry.registerWorkbenchContribution(EditorAccessibilityHelpContribution, 4 );\nclass HoverAccessibleViewContribution extends Disposable {\n    constructor() {\n        super();\n        this._options = {\n            ariaLabel: ( localize('hoverAccessibleView', \"Hover Accessible View\")), language: 'typescript', type: \"view\"\n        };\n        this._register(AccessibleViewAction.addImplementation(95, 'hover', accessor => {\n            const accessibleViewService = accessor.get(IAccessibleViewService);\n            const codeEditorService = accessor.get(ICodeEditorService);\n            const editor = codeEditorService.getActiveCodeEditor() || codeEditorService.getFocusedCodeEditor();\n            const editorHoverContent = editor ? ModesHoverController.get(editor)?.getWidgetContent() ?? undefined : undefined;\n            if (!editor || !editorHoverContent) {\n                return false;\n            }\n            this._options.language = editor?.getModel()?.getLanguageId() ?? undefined;\n            accessibleViewService.show({\n                verbositySettingKey: \"accessibility.verbosity.hover\" ,\n                provideContent() { return editorHoverContent; },\n                onClose() {\n                    ModesHoverController.get(editor)?.focus();\n                },\n                options: this._options\n            });\n            return true;\n        }, EditorContextKeys.hoverFocused));\n        this._register(AccessibleViewAction.addImplementation(90, 'extension-hover', accessor => {\n            const accessibleViewService = accessor.get(IAccessibleViewService);\n            const contextViewService = accessor.get(IContextViewService);\n            const contextViewElement = contextViewService.getContextViewElement();\n            const extensionHoverContent = contextViewElement?.textContent ?? undefined;\n            const hoverService = accessor.get(IHoverService);\n            if (contextViewElement.classList.contains('accessible-view-container') || !extensionHoverContent) {\n                return false;\n            }\n            accessibleViewService.show({\n                verbositySettingKey: \"accessibility.verbosity.hover\" ,\n                provideContent() { return extensionHoverContent; },\n                onClose() {\n                    hoverService.showAndFocusLastHover();\n                },\n                options: this._options\n            });\n            return true;\n        }));\n    }\n}\nconst workbenchContributionsRegistry = ( Registry.as(Extensions.Workbench));\nworkbenchContributionsRegistry.registerWorkbenchContribution(HoverAccessibleViewContribution, 4 );\nclass NotificationAccessibleViewContribution extends Disposable {\n    constructor() {\n        super();\n        this._register(AccessibleViewAction.addImplementation(90, 'notifications', accessor => {\n            const accessibleViewService = accessor.get(IAccessibleViewService);\n            const listService = accessor.get(IListService);\n            const commandService = accessor.get(ICommandService);\n            function renderAccessibleView() {\n                const notification = getNotificationFromContext(listService);\n                if (!notification) {\n                    return false;\n                }\n                commandService.executeCommand('notifications.showList');\n                let notificationIndex;\n                let length;\n                const list = listService.lastFocusedList;\n                if (list instanceof WorkbenchList) {\n                    notificationIndex = list.indexOf(notification);\n                    length = list.length;\n                }\n                if (notificationIndex === undefined) {\n                    return false;\n                }\n                function focusList() {\n                    commandService.executeCommand('notifications.showList');\n                    if (list && notificationIndex !== undefined) {\n                        list.domFocus();\n                        try {\n                            list.setFocus([notificationIndex]);\n                        }\n                        catch { }\n                    }\n                }\n                const message = ( notification.message.original.toString());\n                if (!message) {\n                    return false;\n                }\n                accessibleViewService.show({\n                    provideContent: () => {\n                        return ( localize(\n                            'notification.accessibleView',\n                            '{0} Source: {1}',\n                            message,\n                            notification.source\n                        ));\n                    },\n                    onClose() {\n                        focusList();\n                    },\n                    next() {\n                        if (!list) {\n                            return;\n                        }\n                        focusList();\n                        list.focusNext();\n                        alertFocusChange(notificationIndex, length, 'next');\n                        renderAccessibleView();\n                    },\n                    previous() {\n                        if (!list) {\n                            return;\n                        }\n                        focusList();\n                        list.focusPrevious();\n                        alertFocusChange(notificationIndex, length, 'previous');\n                        renderAccessibleView();\n                    },\n                    verbositySettingKey: \"accessibility.verbosity.notification\" ,\n                    options: {\n                        ariaLabel: ( localize('notification', \"Notification Accessible View\")),\n                        type: \"view\"\n                    }\n                });\n                return true;\n            }\n            return renderAccessibleView();\n        }, NotificationFocusedContext));\n    }\n}\nworkbenchContributionsRegistry.registerWorkbenchContribution(NotificationAccessibleViewContribution, 4 );\nclass AccessibleViewNavigatorContribution extends Disposable {\n    constructor() {\n        super();\n        this._register(AccessibleViewNextAction.addImplementation(95, 'next', accessor => {\n            const accessibleViewService = accessor.get(IAccessibleViewService);\n            accessibleViewService.next();\n            return true;\n        }));\n        this._register(AccessibleViewPreviousAction.addImplementation(95, 'previous', accessor => {\n            const accessibleViewService = accessor.get(IAccessibleViewService);\n            accessibleViewService.previous();\n            return true;\n        }));\n    }\n}\nworkbenchContributionsRegistry.registerWorkbenchContribution(AccessibleViewNavigatorContribution, 4 );\nfunction alertFocusChange(index, length, type) {\n    if (index === undefined || length === undefined) {\n        return;\n    }\n    const number = index + 1;\n    if (type === 'next' && number + 1 <= length) {\n        alert(`Focused ${number + 1} of ${length}`);\n    }\n    else if (type === 'previous' && number - 1 > 0) {\n        alert(`Focused ${number - 1} of ${length}`);\n    }\n    return;\n}\nexport { alertFocusChange };\n","import n from '../../../../../../../node_modules/rollup-plugin-styles/dist/runtime/inject-css.js';\nvar css = \".accessible-view{background-color:var(--vscode-editorWidget-background);border:2px solid var(--vscode-focusBorder);box-shadow:0 2px 8px var(--vscode-widget-shadow);color:var(--vscode-editorWidget-foreground);position:absolute}\";\nn(css,{});\nexport { css, css as default };\n","import './accessibility.css.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { IAccessibilityService } from 'monaco-editor/esm/vs/platform/accessibility/common/accessibility.js';\nimport { registerAction2, Action2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { accessibilityHelpIsShown } from '../../../accessibility/browser/accessibilityContribution.js';\nimport { alert } from 'monaco-editor/esm/vs/base/browser/ui/aria/aria.js';\nimport { AccessibilityHelpNLS } from 'monaco-editor/esm/vs/editor/common/standaloneStrings.js';\nclass ToggleScreenReaderMode extends Action2 {\n    constructor() {\n        super({\n            id: 'editor.action.toggleScreenReaderAccessibilityMode',\n            title: { value: ( nls.localize('toggleScreenReaderMode', \"Toggle Screen Reader Accessibility Mode\")), original: 'Toggle Screen Reader Accessibility Mode' },\n            f1: true,\n            keybinding: [{\n                    primary: 2048  | 35 ,\n                    weight: 200  + 10,\n                    when: accessibilityHelpIsShown\n                },\n                {\n                    primary: 512  | 59  | 1024 ,\n                    linux: { primary: 512  | 62  | 1024  },\n                    weight: 200  + 10,\n                }]\n        });\n    }\n    async run(accessor) {\n        const accessibiiltyService = accessor.get(IAccessibilityService);\n        const configurationService = accessor.get(IConfigurationService);\n        const isScreenReaderOptimized = accessibiiltyService.isScreenReaderOptimized();\n        configurationService.updateValue('editor.accessibilitySupport', isScreenReaderOptimized ? 'off' : 'on', 2 );\n        alert(isScreenReaderOptimized ? AccessibilityHelpNLS.screenReaderModeDisabled : AccessibilityHelpNLS.screenReaderModeEnabled);\n    }\n}\nregisterAction2(ToggleScreenReaderMode);\n","import '../missing-services.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nimport { IAccessibleViewService, AccessibleViewService } from '../vscode/vs/workbench/contrib/accessibility/browser/accessibleView.js';\nimport '../vscode/vs/workbench/contrib/accessibility/browser/accessibility.contribution.js';\nimport '../vscode/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.js';\nfunction getServiceOverride() {\n    return {\n        [( IAccessibleViewService.toString())]: new SyncDescriptor(AccessibleViewService, [], true)\n    };\n}\nexport { getServiceOverride as default };\n"],"names":["ToggleTabFocusModeAction","constructor","super","id","ID","title","value","nls","key","comment","original","precondition","undefined","keybinding","primary","mac","weight","f1","run","accessor","context","get","getContextKeyValue","newValue","getTabFocusMode","setTabFocusMode","AccessibilityHelpProvider","onClose","this","_editor","focus","_keybindingService","options","type","ariaLabel","readMoreUrl","verbositySettingKey","_descriptionForCommand","commandId","msg","noKbMsg","kb","lookupKeybinding","strings","getAriaLabel","provideContent","getOptions","content","push","readonlyDiffEditor","editableDiffEditor","readonlyEditor","editableEditor","tabFocusModeOnMsg","tabFocusModeOnMsgNoKb","tabFocusModeOffMsg","tabFocusModeOffMsgNoKb","join","EditorAccessibilityHelpContribution","_register","addImplementation","async","codeEditorService","accessibleViewService","instantiationService","commandService","codeEditor","getActiveCodeEditor","getFocusedCodeEditor","executeCommand","show","createInstance","as","Workbench","registerWorkbenchContribution","HoverAccessibleViewContribution","_options","language","editor","editorHoverContent","getWidgetContent","getModel","getLanguageId","hoverFocused","contextViewElement","getContextViewElement","extensionHoverContent","textContent","hoverService","classList","contains","showAndFocusLastHover","workbenchContributionsRegistry","NotificationAccessibleViewContribution","listService","renderAccessibleView","notification","notificationIndex","length","list","lastFocusedList","indexOf","focusList","domFocus","setFocus","message","toString","source","next","focusNext","alertFocusChange","previous","focusPrevious","AccessibleViewNavigatorContribution","index","number","ToggleScreenReaderMode","when","linux","accessibiiltyService","configurationService","isScreenReaderOptimized","updateValue","screenReaderModeDisabled","screenReaderModeEnabled","getServiceOverride"],"sourceRoot":""}