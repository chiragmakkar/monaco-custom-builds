{"version":3,"file":"700.bundle.js","mappings":"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","sources":["webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/configuration/common/configurationModels.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/configuration/common/configurationEditing.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/configuration/browser/configuration.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/configuration/browser/configurationService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/editor/common/services/textResourceConfigurationService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/platform/configuration/common/configurationRegistry.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/configuration/common/configurationCache.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/label/common/labelService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/workspaces/browser/workspaces.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/workspaces/browser/workspacesService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/api/common/configurationExtensionPoint.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/service-override/configuration.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/configuration/common/configuration.js"],"sourcesContent":["import { equals } from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { toValuesTree } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { Configuration as Configuration$1, ConfigurationModelParser, ConfigurationModel } from 'monaco-editor/esm/vs/platform/configuration/common/configurationModels.js';\nimport { isBoolean } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { distinct } from 'monaco-editor/esm/vs/base/common/arrays.js';\nclass WorkspaceConfigurationModelParser extends ConfigurationModelParser {\n    constructor(name) {\n        super(name);\n        this._folders = [];\n        this._transient = false;\n        this._settingsModelParser = ( new ConfigurationModelParser(name));\n        this._launchModel = ( new ConfigurationModel());\n        this._tasksModel = ( new ConfigurationModel());\n    }\n    get folders() {\n        return this._folders;\n    }\n    get transient() {\n        return this._transient;\n    }\n    get settingsModel() {\n        return this._settingsModelParser.configurationModel;\n    }\n    get launchModel() {\n        return this._launchModel;\n    }\n    get tasksModel() {\n        return this._tasksModel;\n    }\n    reparseWorkspaceSettings(configurationParseOptions) {\n        this._settingsModelParser.reparse(configurationParseOptions);\n    }\n    getRestrictedWorkspaceSettings() {\n        return this._settingsModelParser.restrictedConfigurations;\n    }\n    doParseRaw(raw, configurationParseOptions) {\n        this._folders = (raw['folders'] || []);\n        this._transient = isBoolean(raw['transient']) && raw['transient'];\n        this._settingsModelParser.parseRaw(raw['settings'], configurationParseOptions);\n        this._launchModel = this.createConfigurationModelFrom(raw, 'launch');\n        this._tasksModel = this.createConfigurationModelFrom(raw, 'tasks');\n        return super.doParseRaw(raw, configurationParseOptions);\n    }\n    createConfigurationModelFrom(raw, key) {\n        const data = raw[key];\n        if (data) {\n            const contents = toValuesTree(data, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n            const scopedContents = Object.create(null);\n            scopedContents[key] = contents;\n            const keys = ( ( Object.keys(data)).map(k => `${key}.${k}`));\n            return ( new ConfigurationModel(scopedContents, keys, []));\n        }\n        return ( new ConfigurationModel());\n    }\n}\nclass StandaloneConfigurationModelParser extends ConfigurationModelParser {\n    constructor(name, scope) {\n        super(name);\n        this.scope = scope;\n    }\n    doParseRaw(raw, configurationParseOptions) {\n        const contents = toValuesTree(raw, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n        const scopedContents = Object.create(null);\n        scopedContents[this.scope] = contents;\n        const keys = ( ( Object.keys(raw)).map(key => `${this.scope}.${key}`));\n        return { contents: scopedContents, keys, overrides: [] };\n    }\n}\nclass Configuration extends Configuration$1 {\n    constructor(defaults, policy, application, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource, _workspace) {\n        super(defaults, policy, application, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource);\n        this._workspace = _workspace;\n    }\n    getValue(key, overrides = {}) {\n        return super.getValue(key, overrides, this._workspace);\n    }\n    inspect(key, overrides = {}) {\n        return super.inspect(key, overrides, this._workspace);\n    }\n    keys() {\n        return ( super.keys(this._workspace));\n    }\n    compareAndDeleteFolderConfiguration(folder) {\n        if (this._workspace && this._workspace.folders.length > 0 && ( this._workspace.folders[0].uri.toString()) === ( folder.toString())) {\n            return { keys: [], overrides: [] };\n        }\n        return super.compareAndDeleteFolderConfiguration(folder);\n    }\n    compare(other) {\n        const compare = (fromKeys, toKeys, overrideIdentifier) => {\n            const keys = [];\n            keys.push(...toKeys.filter(key => fromKeys.indexOf(key) === -1));\n            keys.push(...fromKeys.filter(key => toKeys.indexOf(key) === -1));\n            keys.push(...fromKeys.filter(key => {\n                if (toKeys.indexOf(key) === -1) {\n                    return false;\n                }\n                if (!equals(this.getValue(key, { overrideIdentifier }), other.getValue(key, { overrideIdentifier }))) {\n                    return true;\n                }\n                return this._workspace && ( this._workspace.folders.some(\n                    folder => !equals(this.getValue(key, { resource: folder.uri, overrideIdentifier }), other.getValue(key, { resource: folder.uri, overrideIdentifier }))\n                ));\n            }));\n            return keys;\n        };\n        const keys = compare(this.allKeys(), other.allKeys());\n        const overrides = [];\n        const allOverrideIdentifiers = distinct([...this.allOverrideIdentifiers(), ...other.allOverrideIdentifiers()]);\n        for (const overrideIdentifier of allOverrideIdentifiers) {\n            const keys = compare(this.getAllKeysForOverrideIdentifier(overrideIdentifier), other.getAllKeysForOverrideIdentifier(overrideIdentifier), overrideIdentifier);\n            if (keys.length) {\n                overrides.push([overrideIdentifier, keys]);\n            }\n        }\n        return { keys, overrides };\n    }\n}\nexport { Configuration, StandaloneConfigurationModelParser, WorkspaceConfigurationModelParser };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as json from 'monaco-editor/esm/vs/base/common/json.js';\nimport { setProperty } from '../../../../base/common/jsonEdit.js';\nimport { Queue } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { TASKS_CONFIGURATION_KEY, LAUNCH_CONFIGURATION_KEY, TASKS_DEFAULT, FOLDER_SCOPES, FOLDER_SETTINGS_PATH, IWorkbenchConfigurationService, USER_STANDALONE_CONFIGURATIONS, WORKSPACE_STANDALONE_CONFIGURATIONS } from './configuration.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { ITextModelService } from 'monaco-editor/esm/vs/editor/common/services/resolverService.js';\nimport { Extensions, OVERRIDE_PROPERTY_REGEX, keyFromOverrideIdentifiers } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { IEditorService } from '../../editor/common/editorService.js';\nimport { Severity, INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { IPreferencesService } from '../../preferences/common/preferences.js';\nimport { withNullAsUndefined, withUndefinedAsNull } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';\nimport { Range } from 'monaco-editor/esm/vs/editor/common/core/range.js';\nimport { EditOperation } from 'monaco-editor/esm/vs/editor/common/core/editOperation.js';\nimport { Selection } from 'monaco-editor/esm/vs/editor/common/core/selection.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nimport { ErrorNoTelemetry } from 'monaco-editor/esm/vs/base/common/errors.js';\nclass ConfigurationEditingError extends ErrorNoTelemetry {\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nlet ConfigurationEditing = class ConfigurationEditing {\n    constructor(remoteSettingsResource, configurationService, contextService, userDataProfileService, userDataProfilesService, fileService, textModelResolverService, textFileService, notificationService, preferencesService, editorService, uriIdentityService) {\n        this.remoteSettingsResource = remoteSettingsResource;\n        this.configurationService = configurationService;\n        this.contextService = contextService;\n        this.userDataProfileService = userDataProfileService;\n        this.userDataProfilesService = userDataProfilesService;\n        this.fileService = fileService;\n        this.textModelResolverService = textModelResolverService;\n        this.textFileService = textFileService;\n        this.notificationService = notificationService;\n        this.preferencesService = preferencesService;\n        this.editorService = editorService;\n        this.uriIdentityService = uriIdentityService;\n        this.queue = ( new Queue());\n    }\n    async writeConfiguration(target, value, options = {}) {\n        const operation = this.getConfigurationEditOperation(target, value, options.scopes || {});\n        return this.queue.queue(async () => {\n            try {\n                await this.doWriteConfiguration(operation, options);\n            }\n            catch (error) {\n                if (options.donotNotifyError) {\n                    throw error;\n                }\n                await this.onError(error, operation, options.scopes);\n            }\n        });\n    }\n    async doWriteConfiguration(operation, options) {\n        await this.validate(operation.target, operation, !options.handleDirtyFile, options.scopes || {});\n        const resource = operation.resource;\n        const reference = await this.resolveModelReference(resource);\n        try {\n            const formattingOptions = this.getFormattingOptions(reference.object.textEditorModel);\n            await this.updateConfiguration(operation, reference.object.textEditorModel, formattingOptions, options);\n        }\n        finally {\n            reference.dispose();\n        }\n    }\n    async updateConfiguration(operation, model, formattingOptions, options) {\n        if (this.hasParseErrors(model.getValue(), operation)) {\n            throw this.toConfigurationEditingError(11 , operation.target, operation);\n        }\n        if (this.textFileService.isDirty(model.uri) && options.handleDirtyFile) {\n            switch (options.handleDirtyFile) {\n                case 'save':\n                    await this.save(model, operation);\n                    break;\n                case 'revert':\n                    await this.textFileService.revert(model.uri);\n                    break;\n            }\n        }\n        const edit = this.getEdits(operation, model.getValue(), formattingOptions)[0];\n        if (edit && this.applyEditsToBuffer(edit, model)) {\n            await this.save(model, operation);\n        }\n    }\n    async save(model, operation) {\n        try {\n            await this.textFileService.save(model.uri, { ignoreErrorHandler: true });\n        }\n        catch (error) {\n            if (error.fileOperationResult === 3 ) {\n                throw this.toConfigurationEditingError(10 , operation.target, operation);\n            }\n            throw new ConfigurationEditingError(nls.localize('fsError', \"Error while writing to {0}. {1}\", this.stringifyTarget(operation.target), error.message), 13 );\n        }\n    }\n    applyEditsToBuffer(edit, model) {\n        const startPosition = model.getPositionAt(edit.offset);\n        const endPosition = model.getPositionAt(edit.offset + edit.length);\n        const range = ( new Range(\n            startPosition.lineNumber,\n            startPosition.column,\n            endPosition.lineNumber,\n            endPosition.column\n        ));\n        const currentText = model.getValueInRange(range);\n        if (edit.content !== currentText) {\n            const editOperation = currentText ? EditOperation.replace(range, edit.content) : EditOperation.insert(startPosition, edit.content);\n            model.pushEditOperations([( new Selection(\n                startPosition.lineNumber,\n                startPosition.column,\n                startPosition.lineNumber,\n                startPosition.column\n            ))], [editOperation], () => []);\n            return true;\n        }\n        return false;\n    }\n    getEdits({ value, jsonPath }, modelContent, formattingOptions) {\n        if (jsonPath.length) {\n            return setProperty(modelContent, jsonPath, value, formattingOptions);\n        }\n        const content = JSON.stringify(value, null, formattingOptions.insertSpaces && formattingOptions.tabSize ? ' '.repeat(formattingOptions.tabSize) : '\\t');\n        return [{\n                content,\n                length: modelContent.length,\n                offset: 0\n            }];\n    }\n    getFormattingOptions(model) {\n        const { insertSpaces, tabSize } = model.getOptions();\n        const eol = model.getEOL();\n        return { insertSpaces, tabSize, eol };\n    }\n    async onError(error, operation, scopes) {\n        switch (error.code) {\n            case 11 :\n                this.onInvalidConfigurationError(error, operation);\n                break;\n            case 9 :\n                this.onConfigurationFileDirtyError(error, operation, scopes);\n                break;\n            case 10 :\n                return this.doWriteConfiguration(operation, { scopes, handleDirtyFile: 'revert' });\n            default:\n                this.notificationService.error(error.message);\n        }\n    }\n    onInvalidConfigurationError(error, operation) {\n        const openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY ? ( nls.localize('openTasksConfiguration', \"Open Tasks Configuration\"))\n            : operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY ? ( nls.localize('openLaunchConfiguration', \"Open Launch Configuration\"))\n                : null;\n        if (openStandAloneConfigurationActionLabel) {\n            this.notificationService.prompt(Severity.Error, error.message, [{\n                    label: openStandAloneConfigurationActionLabel,\n                    run: () => this.openFile(operation.resource)\n                }]);\n        }\n        else {\n            this.notificationService.prompt(Severity.Error, error.message, [{\n                    label: ( nls.localize('open', \"Open Settings\")),\n                    run: () => this.openSettings(operation)\n                }]);\n        }\n    }\n    onConfigurationFileDirtyError(error, operation, scopes) {\n        const openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY ? ( nls.localize('openTasksConfiguration', \"Open Tasks Configuration\"))\n            : operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY ? ( nls.localize('openLaunchConfiguration', \"Open Launch Configuration\"))\n                : null;\n        if (openStandAloneConfigurationActionLabel) {\n            this.notificationService.prompt(Severity.Error, error.message, [{\n                    label: ( nls.localize('saveAndRetry', \"Save and Retry\")),\n                    run: () => {\n                        const key = operation.key ? `${operation.workspaceStandAloneConfigurationKey}.${operation.key}` : operation.workspaceStandAloneConfigurationKey;\n                        this.writeConfiguration(operation.target, { key, value: operation.value }, { handleDirtyFile: 'save', scopes });\n                    }\n                },\n                {\n                    label: openStandAloneConfigurationActionLabel,\n                    run: () => this.openFile(operation.resource)\n                }]);\n        }\n        else {\n            this.notificationService.prompt(Severity.Error, error.message, [{\n                    label: ( nls.localize('saveAndRetry', \"Save and Retry\")),\n                    run: () => this.writeConfiguration(operation.target, { key: operation.key, value: operation.value }, { handleDirtyFile: 'save', scopes })\n                },\n                {\n                    label: ( nls.localize('open', \"Open Settings\")),\n                    run: () => this.openSettings(operation)\n                }]);\n        }\n    }\n    openSettings(operation) {\n        const options = { jsonEditor: true };\n        switch (operation.target) {\n            case 1 :\n                this.preferencesService.openUserSettings(options);\n                break;\n            case 2 :\n                this.preferencesService.openRemoteSettings(options);\n                break;\n            case 3 :\n                this.preferencesService.openWorkspaceSettings(options);\n                break;\n            case 4 :\n                if (operation.resource) {\n                    const workspaceFolder = this.contextService.getWorkspaceFolder(operation.resource);\n                    if (workspaceFolder) {\n                        this.preferencesService.openFolderSettings({ folderUri: workspaceFolder.uri, jsonEditor: true });\n                    }\n                }\n                break;\n        }\n    }\n    openFile(resource) {\n        this.editorService.openEditor({ resource, options: { pinned: true } });\n    }\n    toConfigurationEditingError(code, target, operation) {\n        const message = this.toErrorMessage(code, target, operation);\n        return ( new ConfigurationEditingError(message, code));\n    }\n    toErrorMessage(error, target, operation) {\n        switch (error) {\n            case 12 : return ( nls.localize(\n                'errorPolicyConfiguration',\n                \"Unable to write {0} because it is configured in system policy.\",\n                operation.key\n            ));\n            case 0 : return ( nls.localize(\n                'errorUnknownKey',\n                \"Unable to write to {0} because {1} is not a registered configuration.\",\n                this.stringifyTarget(target),\n                operation.key\n            ));\n            case 1 : return ( nls.localize(\n                'errorInvalidWorkspaceConfigurationApplication',\n                \"Unable to write {0} to Workspace Settings. This setting can be written only into User settings.\",\n                operation.key\n            ));\n            case 2 : return ( nls.localize(\n                'errorInvalidWorkspaceConfigurationMachine',\n                \"Unable to write {0} to Workspace Settings. This setting can be written only into User settings.\",\n                operation.key\n            ));\n            case 3 : return ( nls.localize(\n                'errorInvalidFolderConfiguration',\n                \"Unable to write to Folder Settings because {0} does not support the folder resource scope.\",\n                operation.key\n            ));\n            case 4 : return ( nls.localize(\n                'errorInvalidUserTarget',\n                \"Unable to write to User Settings because {0} does not support for global scope.\",\n                operation.key\n            ));\n            case 5 : return ( nls.localize(\n                'errorInvalidWorkspaceTarget',\n                \"Unable to write to Workspace Settings because {0} does not support for workspace scope in a multi folder workspace.\",\n                operation.key\n            ));\n            case 6 : return ( nls.localize(\n                'errorInvalidFolderTarget',\n                \"Unable to write to Folder Settings because no resource is provided.\"\n            ));\n            case 7 : return ( nls.localize(\n                'errorInvalidResourceLanguageConfiguration',\n                \"Unable to write to Language Settings because {0} is not a resource language setting.\",\n                operation.key\n            ));\n            case 8 : return ( nls.localize(\n                'errorNoWorkspaceOpened',\n                \"Unable to write to {0} because no workspace is opened. Please open a workspace first and try again.\",\n                this.stringifyTarget(target)\n            ));\n            case 11 : {\n                if (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorInvalidTaskConfiguration',\n                        \"Unable to write into the tasks configuration file. Please open it to correct errors/warnings in it and try again.\"\n                    ));\n                }\n                if (operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorInvalidLaunchConfiguration',\n                        \"Unable to write into the launch configuration file. Please open it to correct errors/warnings in it and try again.\"\n                    ));\n                }\n                switch (target) {\n                    case 1 :\n                        return ( nls.localize(\n                            'errorInvalidConfiguration',\n                            \"Unable to write into user settings. Please open the user settings to correct errors/warnings in it and try again.\"\n                        ));\n                    case 2 :\n                        return ( nls.localize(\n                            'errorInvalidRemoteConfiguration',\n                            \"Unable to write into remote user settings. Please open the remote user settings to correct errors/warnings in it and try again.\"\n                        ));\n                    case 3 :\n                        return ( nls.localize(\n                            'errorInvalidConfigurationWorkspace',\n                            \"Unable to write into workspace settings. Please open the workspace settings to correct errors/warnings in the file and try again.\"\n                        ));\n                    case 4 : {\n                        let workspaceFolderName = '<<unknown>>';\n                        if (operation.resource) {\n                            const folder = this.contextService.getWorkspaceFolder(operation.resource);\n                            if (folder) {\n                                workspaceFolderName = folder.name;\n                            }\n                        }\n                        return ( nls.localize(\n                            'errorInvalidConfigurationFolder',\n                            \"Unable to write into folder settings. Please open the '{0}' folder settings to correct errors/warnings in it and try again.\",\n                            workspaceFolderName\n                        ));\n                    }\n                    default:\n                        return '';\n                }\n            }\n            case 9 : {\n                if (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorTasksConfigurationFileDirty',\n                        \"Unable to write into tasks configuration file because the file has unsaved changes. Please save it first and then try again.\"\n                    ));\n                }\n                if (operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorLaunchConfigurationFileDirty',\n                        \"Unable to write into launch configuration file because the file has unsaved changes. Please save it first and then try again.\"\n                    ));\n                }\n                switch (target) {\n                    case 1 :\n                        return ( nls.localize(\n                            'errorConfigurationFileDirty',\n                            \"Unable to write into user settings because the file has unsaved changes. Please save the user settings file first and then try again.\"\n                        ));\n                    case 2 :\n                        return ( nls.localize(\n                            'errorRemoteConfigurationFileDirty',\n                            \"Unable to write into remote user settings because the file has unsaved changes. Please save the remote user settings file first and then try again.\"\n                        ));\n                    case 3 :\n                        return ( nls.localize(\n                            'errorConfigurationFileDirtyWorkspace',\n                            \"Unable to write into workspace settings because the file has unsaved changes. Please save the workspace settings file first and then try again.\"\n                        ));\n                    case 4 : {\n                        let workspaceFolderName = '<<unknown>>';\n                        if (operation.resource) {\n                            const folder = this.contextService.getWorkspaceFolder(operation.resource);\n                            if (folder) {\n                                workspaceFolderName = folder.name;\n                            }\n                        }\n                        return ( nls.localize(\n                            'errorConfigurationFileDirtyFolder',\n                            \"Unable to write into folder settings because the file has unsaved changes. Please save the '{0}' folder settings file first and then try again.\",\n                            workspaceFolderName\n                        ));\n                    }\n                    default:\n                        return '';\n                }\n            }\n            case 10 :\n                if (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorTasksConfigurationFileModifiedSince',\n                        \"Unable to write into tasks configuration file because the content of the file is newer.\"\n                    ));\n                }\n                if (operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY) {\n                    return ( nls.localize(\n                        'errorLaunchConfigurationFileModifiedSince',\n                        \"Unable to write into launch configuration file because the content of the file is newer.\"\n                    ));\n                }\n                switch (target) {\n                    case 1 :\n                        return ( nls.localize(\n                            'errorConfigurationFileModifiedSince',\n                            \"Unable to write into user settings because the content of the file is newer.\"\n                        ));\n                    case 2 :\n                        return ( nls.localize(\n                            'errorRemoteConfigurationFileModifiedSince',\n                            \"Unable to write into remote user settings because the content of the file is newer.\"\n                        ));\n                    case 3 :\n                        return ( nls.localize(\n                            'errorConfigurationFileModifiedSinceWorkspace',\n                            \"Unable to write into workspace settings because the content of the file is newer.\"\n                        ));\n                    case 4 :\n                        return ( nls.localize(\n                            'errorConfigurationFileModifiedSinceFolder',\n                            \"Unable to write into folder settings because the content of the file is newer.\"\n                        ));\n                }\n            case 13 : return ( nls.localize(\n                'errorUnknown',\n                \"Unable to write to {0} because of an internal error.\",\n                this.stringifyTarget(target)\n            ));\n        }\n    }\n    stringifyTarget(target) {\n        switch (target) {\n            case 1 :\n                return ( nls.localize('userTarget', \"User Settings\"));\n            case 2 :\n                return ( nls.localize('remoteUserTarget', \"Remote User Settings\"));\n            case 3 :\n                return ( nls.localize('workspaceTarget', \"Workspace Settings\"));\n            case 4 :\n                return ( nls.localize('folderTarget', \"Folder Settings\"));\n            default:\n                return '';\n        }\n    }\n    defaultResourceValue(resource) {\n        const basename = this.uriIdentityService.extUri.basename(resource);\n        const configurationValue = basename.substr(0, basename.length - this.uriIdentityService.extUri.extname(resource).length);\n        switch (configurationValue) {\n            case TASKS_CONFIGURATION_KEY: return TASKS_DEFAULT;\n            default: return '{}';\n        }\n    }\n    async resolveModelReference(resource) {\n        const exists = await this.fileService.exists(resource);\n        if (!exists) {\n            await this.textFileService.write(resource, this.defaultResourceValue(resource), { encoding: 'utf8' });\n        }\n        return this.textModelResolverService.createModelReference(resource);\n    }\n    hasParseErrors(content, operation) {\n        if (operation.workspaceStandAloneConfigurationKey && !operation.key) {\n            return false;\n        }\n        const parseErrors = [];\n        json.parse(content, parseErrors, { allowTrailingComma: true, allowEmptyContent: true });\n        return parseErrors.length > 0;\n    }\n    async validate(target, operation, checkDirty, overrides) {\n        if (this.configurationService.inspect(operation.key).policyValue !== undefined) {\n            throw this.toConfigurationEditingError(12 , target, operation);\n        }\n        const configurationProperties = ( Registry.as(Extensions.Configuration)).getConfigurationProperties();\n        const configurationScope = configurationProperties[operation.key]?.scope;\n        if (!operation.workspaceStandAloneConfigurationKey) {\n            const validKeys = ( this.configurationService.keys()).default;\n            if (validKeys.indexOf(operation.key) < 0 && !OVERRIDE_PROPERTY_REGEX.test(operation.key) && operation.value !== undefined) {\n                throw this.toConfigurationEditingError(0 , target, operation);\n            }\n        }\n        if (operation.workspaceStandAloneConfigurationKey) {\n            if ((operation.workspaceStandAloneConfigurationKey !== TASKS_CONFIGURATION_KEY) && ((target === 1  || target === 2) )) {\n                throw this.toConfigurationEditingError(4 , target, operation);\n            }\n        }\n        if (((target === 3  || target === 4) ) && this.contextService.getWorkbenchState() === 1 ) {\n            throw this.toConfigurationEditingError(8 , target, operation);\n        }\n        if (target === 3 ) {\n            if (!operation.workspaceStandAloneConfigurationKey && !OVERRIDE_PROPERTY_REGEX.test(operation.key)) {\n                if (configurationScope === 1 ) {\n                    throw this.toConfigurationEditingError(1 , target, operation);\n                }\n                if (configurationScope === 2 ) {\n                    throw this.toConfigurationEditingError(2 , target, operation);\n                }\n            }\n        }\n        if (target === 4 ) {\n            if (!operation.resource) {\n                throw this.toConfigurationEditingError(6 , target, operation);\n            }\n            if (!operation.workspaceStandAloneConfigurationKey && !OVERRIDE_PROPERTY_REGEX.test(operation.key)) {\n                if (configurationScope !== undefined && !FOLDER_SCOPES.includes(configurationScope)) {\n                    throw this.toConfigurationEditingError(3 , target, operation);\n                }\n            }\n        }\n        if (overrides.overrideIdentifiers?.length) {\n            if (configurationScope !== 5 ) {\n                throw this.toConfigurationEditingError(7 , target, operation);\n            }\n        }\n        if (!operation.resource) {\n            throw this.toConfigurationEditingError(6 , target, operation);\n        }\n        if (checkDirty && this.textFileService.isDirty(operation.resource)) {\n            throw this.toConfigurationEditingError(9 , target, operation);\n        }\n    }\n    getConfigurationEditOperation(target, config, overrides) {\n        if (config.key) {\n            const standaloneConfigurationMap = target === 1  ? USER_STANDALONE_CONFIGURATIONS : WORKSPACE_STANDALONE_CONFIGURATIONS;\n            const standaloneConfigurationKeys = ( Object.keys(standaloneConfigurationMap));\n            for (const key of standaloneConfigurationKeys) {\n                const resource = this.getConfigurationFileResource(target, key, standaloneConfigurationMap[key], overrides.resource, undefined);\n                if (config.key === key) {\n                    const jsonPath = this.isWorkspaceConfigurationResource(resource) ? [key] : [];\n                    return { key: jsonPath[jsonPath.length - 1], jsonPath, value: config.value, resource: withNullAsUndefined(resource), workspaceStandAloneConfigurationKey: key, target };\n                }\n                const keyPrefix = `${key}.`;\n                if (config.key.indexOf(keyPrefix) === 0) {\n                    const jsonPath = this.isWorkspaceConfigurationResource(resource) ? [key, config.key.substr(keyPrefix.length)] : [config.key.substr(keyPrefix.length)];\n                    return { key: jsonPath[jsonPath.length - 1], jsonPath, value: config.value, resource: withNullAsUndefined(resource), workspaceStandAloneConfigurationKey: key, target };\n                }\n            }\n        }\n        const key = config.key;\n        const configurationProperties = ( Registry.as(Extensions.Configuration)).getConfigurationProperties();\n        const configurationScope = configurationProperties[key]?.scope;\n        let jsonPath = overrides.overrideIdentifiers?.length ? [keyFromOverrideIdentifiers(overrides.overrideIdentifiers), key] : [key];\n        if (target === 1  || target === 2 ) {\n            return { key, jsonPath, value: config.value, resource: withNullAsUndefined(this.getConfigurationFileResource(target, key, '', null, configurationScope)), target };\n        }\n        const resource = this.getConfigurationFileResource(target, key, FOLDER_SETTINGS_PATH, overrides.resource, configurationScope);\n        if (this.isWorkspaceConfigurationResource(resource)) {\n            jsonPath = ['settings', ...jsonPath];\n        }\n        return { key, jsonPath, value: config.value, resource: withNullAsUndefined(resource), target };\n    }\n    isWorkspaceConfigurationResource(resource) {\n        const workspace = this.contextService.getWorkspace();\n        return !!(workspace.configuration && resource && workspace.configuration.fsPath === resource.fsPath);\n    }\n    getConfigurationFileResource(target, key, relativePath, resource, scope) {\n        if (target === 1 ) {\n            if (key === TASKS_CONFIGURATION_KEY) {\n                return this.userDataProfileService.currentProfile.tasksResource;\n            }\n            else {\n                if (!this.userDataProfileService.currentProfile.isDefault && this.configurationService.isSettingAppliedForAllProfiles(key)) {\n                    return this.userDataProfilesService.defaultProfile.settingsResource;\n                }\n                return this.userDataProfileService.currentProfile.settingsResource;\n            }\n        }\n        if (target === 2 ) {\n            return this.remoteSettingsResource;\n        }\n        const workbenchState = this.contextService.getWorkbenchState();\n        if (workbenchState !== 1 ) {\n            const workspace = this.contextService.getWorkspace();\n            if (target === 3 ) {\n                if (workbenchState === 3 ) {\n                    return withUndefinedAsNull(workspace.configuration);\n                }\n                if (workbenchState === 2 ) {\n                    return workspace.folders[0].toResource(relativePath);\n                }\n            }\n            if (target === 4 ) {\n                if (resource) {\n                    const folder = this.contextService.getWorkspaceFolder(resource);\n                    if (folder) {\n                        return folder.toResource(relativePath);\n                    }\n                }\n            }\n        }\n        return null;\n    }\n};\nConfigurationEditing = ( __decorate([\n    ( __param(1, IWorkbenchConfigurationService)),\n    ( __param(2, IWorkspaceContextService)),\n    ( __param(3, IUserDataProfileService)),\n    ( __param(4, IUserDataProfilesService)),\n    ( __param(5, IFileService)),\n    ( __param(6, ITextModelService)),\n    ( __param(7, ITextFileService)),\n    ( __param(8, INotificationService)),\n    ( __param(9, IPreferencesService)),\n    ( __param(10, IEditorService)),\n    ( __param(11, IUriIdentityService))\n], ConfigurationEditing));\nexport { ConfigurationEditing, ConfigurationEditingError };\n","import { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport * as errors from 'monaco-editor/esm/vs/base/common/errors.js';\nimport { Disposable, MutableDisposable, combinedDisposable, toDisposable, DisposableStore, dispose } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { RunOnceScheduler } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { whenProviderRegistered } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { UserSettings, ConfigurationModelParser, ConfigurationModel } from 'monaco-editor/esm/vs/platform/configuration/common/configurationModels.js';\nimport { WorkspaceConfigurationModelParser, StandaloneConfigurationModelParser } from '../common/configurationModels.js';\nimport { APPLY_ALL_PROFILES_SETTING, REMOTE_MACHINE_SCOPES, WORKSPACE_SCOPES, FOLDER_SCOPES, FOLDER_SETTINGS_NAME, TASKS_CONFIGURATION_KEY, LAUNCH_CONFIGURATION_KEY } from '../common/configuration.js';\nimport { Extensions, OVERRIDE_PROPERTY_REGEX } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { equals } from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { hash } from 'monaco-editor/esm/vs/base/common/hash.js';\nimport { joinPath } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { isEmptyObject, isObject } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { DefaultConfiguration as DefaultConfiguration$1 } from 'monaco-editor/esm/vs/platform/configuration/common/configurations.js';\nclass DefaultConfiguration extends DefaultConfiguration$1 {\n    static { this.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY = 'DefaultOverridesCacheExists'; }\n    constructor(configurationCache, environmentService) {\n        super();\n        this.configurationCache = configurationCache;\n        this.configurationRegistry = ( (Registry.as(Extensions.Configuration)));\n        this.cachedConfigurationDefaultsOverrides = {};\n        this.cacheKey = { type: 'defaults', key: 'configurationDefaultsOverrides' };\n        this.updateCache = false;\n        if (environmentService.options?.configurationDefaults) {\n            this.configurationRegistry.registerDefaultConfigurations([{ overrides: environmentService.options.configurationDefaults }]);\n        }\n    }\n    getConfigurationDefaultOverrides() {\n        return this.cachedConfigurationDefaultsOverrides;\n    }\n    async initialize() {\n        await this.initializeCachedConfigurationDefaultsOverrides();\n        return super.initialize();\n    }\n    reload() {\n        this.updateCache = true;\n        this.cachedConfigurationDefaultsOverrides = {};\n        this.updateCachedConfigurationDefaultsOverrides();\n        return super.reload();\n    }\n    hasCachedConfigurationDefaultsOverrides() {\n        return !isEmptyObject(this.cachedConfigurationDefaultsOverrides);\n    }\n    initializeCachedConfigurationDefaultsOverrides() {\n        if (!this.initiaizeCachedConfigurationDefaultsOverridesPromise) {\n            this.initiaizeCachedConfigurationDefaultsOverridesPromise = (async () => {\n                try {\n                    if (window.localStorage.getItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY)) {\n                        const content = await this.configurationCache.read(this.cacheKey);\n                        if (content) {\n                            this.cachedConfigurationDefaultsOverrides = JSON.parse(content);\n                        }\n                    }\n                }\n                catch (error) {  }\n                this.cachedConfigurationDefaultsOverrides = isObject(this.cachedConfigurationDefaultsOverrides) ? this.cachedConfigurationDefaultsOverrides : {};\n            })();\n        }\n        return this.initiaizeCachedConfigurationDefaultsOverridesPromise;\n    }\n    onDidUpdateConfiguration(properties, defaultsOverrides) {\n        super.onDidUpdateConfiguration(properties, defaultsOverrides);\n        if (defaultsOverrides) {\n            this.updateCachedConfigurationDefaultsOverrides();\n        }\n    }\n    async updateCachedConfigurationDefaultsOverrides() {\n        if (!this.updateCache) {\n            return;\n        }\n        const cachedConfigurationDefaultsOverrides = {};\n        const configurationDefaultsOverrides = this.configurationRegistry.getConfigurationDefaultsOverrides();\n        for (const [key, value] of configurationDefaultsOverrides) {\n            if (!OVERRIDE_PROPERTY_REGEX.test(key) && value.value !== undefined) {\n                cachedConfigurationDefaultsOverrides[key] = value.value;\n            }\n        }\n        try {\n            if (( (Object.keys(cachedConfigurationDefaultsOverrides))).length) {\n                window.localStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n                await this.configurationCache.write(this.cacheKey, JSON.stringify(cachedConfigurationDefaultsOverrides));\n            }\n            else {\n                window.localStorage.removeItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY);\n                await this.configurationCache.remove(this.cacheKey);\n            }\n        }\n        catch (error) {  }\n    }\n}\nclass ApplicationConfiguration extends UserSettings {\n    constructor(userDataProfilesService, fileService, uriIdentityService) {\n        super(userDataProfilesService.defaultProfile.settingsResource, { scopes: [1 ] }, uriIdentityService.extUri, fileService);\n        this._onDidChangeConfiguration = this._register(( (new Emitter())));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this._register(this.onDidChange(() => this.reloadConfigurationScheduler.schedule()));\n        this.reloadConfigurationScheduler = this._register(( (new RunOnceScheduler(\n            () => this.loadConfiguration().then(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)),\n            50\n        ))));\n    }\n    async initialize() {\n        return this.loadConfiguration();\n    }\n    async loadConfiguration() {\n        const model = await super.loadConfiguration();\n        const value = model.getValue(APPLY_ALL_PROFILES_SETTING);\n        const allProfilesSettings = Array.isArray(value) ? value : [];\n        return this.parseOptions.include || allProfilesSettings.length\n            ? this.reparse({ ...this.parseOptions, include: allProfilesSettings })\n            : model;\n    }\n}\nclass UserConfiguration extends Disposable {\n    get hasTasksLoaded() { return this.userConfiguration.value instanceof FileServiceBasedConfiguration; }\n    constructor(settingsResource, tasksResource, configurationParseOptions, fileService, uriIdentityService, logService) {\n        super();\n        this.settingsResource = settingsResource;\n        this.tasksResource = tasksResource;\n        this.configurationParseOptions = configurationParseOptions;\n        this.fileService = fileService;\n        this.uriIdentityService = uriIdentityService;\n        this.logService = logService;\n        this._onDidChangeConfiguration = this._register(( (new Emitter())));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this.userConfiguration = this._register(( (new MutableDisposable())));\n        this.userConfigurationChangeDisposable = this._register(( (new MutableDisposable())));\n        this.userConfiguration.value = ( (new UserSettings(\n            settingsResource,\n            this.configurationParseOptions,\n            uriIdentityService.extUri,\n            this.fileService\n        )));\n        this.userConfigurationChangeDisposable.value = this.userConfiguration.value.onDidChange(() => this.reloadConfigurationScheduler.schedule());\n        this.reloadConfigurationScheduler = this._register(( (new RunOnceScheduler(\n            () => this.userConfiguration.value.loadConfiguration().then(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)),\n            50\n        ))));\n    }\n    async reset(settingsResource, tasksResource, configurationParseOptions) {\n        this.settingsResource = settingsResource;\n        this.tasksResource = tasksResource;\n        this.configurationParseOptions = configurationParseOptions;\n        const folder = this.uriIdentityService.extUri.dirname(this.settingsResource);\n        const standAloneConfigurationResources = this.tasksResource ? [[TASKS_CONFIGURATION_KEY, this.tasksResource]] : [];\n        const fileServiceBasedConfiguration = ( (new FileServiceBasedConfiguration(\n             (folder.toString()),\n            this.settingsResource,\n            standAloneConfigurationResources,\n            this.configurationParseOptions,\n            this.fileService,\n            this.uriIdentityService,\n            this.logService\n        )));\n        const configurationModel = await fileServiceBasedConfiguration.loadConfiguration();\n        this.userConfiguration.value = fileServiceBasedConfiguration;\n        if (this.userConfigurationChangeDisposable.value) {\n            this.userConfigurationChangeDisposable.value = this.userConfiguration.value.onDidChange(() => this.reloadConfigurationScheduler.schedule());\n        }\n        return configurationModel;\n    }\n    async initialize() {\n        return this.userConfiguration.value.loadConfiguration();\n    }\n    async reload() {\n        if (this.hasTasksLoaded) {\n            return this.userConfiguration.value.loadConfiguration();\n        }\n        return this.reset(this.settingsResource, this.tasksResource, this.configurationParseOptions);\n    }\n    reparse(parseOptions) {\n        this.configurationParseOptions = { ...this.configurationParseOptions, ...parseOptions };\n        return this.userConfiguration.value.reparse(this.configurationParseOptions);\n    }\n    getRestrictedSettings() {\n        return this.userConfiguration.value.getRestrictedSettings();\n    }\n}\nclass FileServiceBasedConfiguration extends Disposable {\n    constructor(name, settingsResource, standAloneConfigurationResources, configurationParseOptions, fileService, uriIdentityService, logService) {\n        super();\n        this.settingsResource = settingsResource;\n        this.standAloneConfigurationResources = standAloneConfigurationResources;\n        this.fileService = fileService;\n        this.uriIdentityService = uriIdentityService;\n        this.logService = logService;\n        this._onDidChange = this._register(( (new Emitter())));\n        this.onDidChange = this._onDidChange.event;\n        this.allResources = [this.settingsResource, ...( (this.standAloneConfigurationResources.map(([, resource]) => resource)))];\n        this._register(combinedDisposable(...( (this.allResources.map(\n            resource => combinedDisposable(this.fileService.watch(uriIdentityService.extUri.dirname(resource)),\n            this.fileService.watch(resource))\n        )))));\n        this._folderSettingsModelParser = ( (new ConfigurationModelParser(name)));\n        this._folderSettingsParseOptions = configurationParseOptions;\n        this._standAloneConfigurations = [];\n        this._cache = ( (new ConfigurationModel()));\n        this._register(Event.debounce(Event.any(Event.filter(this.fileService.onDidFilesChange, e => this.handleFileChangesEvent(e)), Event.filter(this.fileService.onDidRunOperation, e => this.handleFileOperationEvent(e))), () => undefined, 100)(() => this._onDidChange.fire()));\n    }\n    async resolveContents() {\n        const resolveContents = async (resources) => {\n            return Promise.all(( (resources.map(async (resource) => {\n                try {\n                    const content = ( ((await this.fileService.readFile(resource)).value.toString()));\n                    return content;\n                }\n                catch (error) {\n                    this.logService.trace(`Error while resolving configuration file '${( ( resource.toString()))}': ${errors.getErrorMessage(error)}`);\n                    if (error.fileOperationResult !== 1\n                        && error.fileOperationResult !== 9 ) {\n                        this.logService.error(error);\n                    }\n                }\n                return '{}';\n            }))));\n        };\n        const [[settingsContent], standAloneConfigurationContents] = await Promise.all([\n            resolveContents([this.settingsResource]),\n            resolveContents(( (this.standAloneConfigurationResources.map(([, resource]) => resource)))),\n        ]);\n        return [settingsContent, ( (standAloneConfigurationContents.map(\n            (content, index) => ([this.standAloneConfigurationResources[index][0], content])\n        )))];\n    }\n    async loadConfiguration() {\n        const [settingsContent, standAloneConfigurationContents] = await this.resolveContents();\n        this._standAloneConfigurations = [];\n        this._folderSettingsModelParser.parse('', this._folderSettingsParseOptions);\n        if (settingsContent !== undefined) {\n            this._folderSettingsModelParser.parse(settingsContent, this._folderSettingsParseOptions);\n        }\n        for (let index = 0; index < standAloneConfigurationContents.length; index++) {\n            const contents = standAloneConfigurationContents[index][1];\n            if (contents !== undefined) {\n                const standAloneConfigurationModelParser = ( (new StandaloneConfigurationModelParser(\n                     (this.standAloneConfigurationResources[index][1].toString()),\n                    this.standAloneConfigurationResources[index][0]\n                )));\n                standAloneConfigurationModelParser.parse(contents);\n                this._standAloneConfigurations.push(standAloneConfigurationModelParser.configurationModel);\n            }\n        }\n        this.consolidate();\n        return this._cache;\n    }\n    getRestrictedSettings() {\n        return this._folderSettingsModelParser.restrictedConfigurations;\n    }\n    reparse(configurationParseOptions) {\n        const oldContents = this._folderSettingsModelParser.configurationModel.contents;\n        this._folderSettingsParseOptions = configurationParseOptions;\n        this._folderSettingsModelParser.reparse(this._folderSettingsParseOptions);\n        if (!equals(oldContents, this._folderSettingsModelParser.configurationModel.contents)) {\n            this.consolidate();\n        }\n        return this._cache;\n    }\n    consolidate() {\n        this._cache = this._folderSettingsModelParser.configurationModel.merge(...this._standAloneConfigurations);\n    }\n    handleFileChangesEvent(event) {\n        if (( (this.allResources.some(resource => event.contains(resource))))) {\n            return true;\n        }\n        if (( (this.allResources.some(\n            resource => event.contains(this.uriIdentityService.extUri.dirname(resource), 2 )\n        )))) {\n            return true;\n        }\n        return false;\n    }\n    handleFileOperationEvent(event) {\n        if ((event.isOperation(0 ) || event.isOperation(3 ) || event.isOperation(1 ) || event.isOperation(4 ))\n            && ( (this.allResources.some(\n            resource => this.uriIdentityService.extUri.isEqual(event.resource, resource)\n        )))) {\n            return true;\n        }\n        if (event.isOperation(1 ) && ( (this.allResources.some(\n            resource => this.uriIdentityService.extUri.isEqual(event.resource, this.uriIdentityService.extUri.dirname(resource))\n        )))) {\n            return true;\n        }\n        return false;\n    }\n}\nclass RemoteUserConfiguration extends Disposable {\n    constructor(remoteAuthority, configurationCache, fileService, uriIdentityService, remoteAgentService) {\n        super();\n        this._userConfigurationInitializationPromise = null;\n        this._onDidChangeConfiguration = this._register(( (new Emitter())));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this._onDidInitialize = this._register(( (new Emitter())));\n        this.onDidInitialize = this._onDidInitialize.event;\n        this._fileService = fileService;\n        this._userConfiguration = this._cachedConfiguration = ( (new CachedRemoteUserConfiguration(remoteAuthority, configurationCache, { scopes: REMOTE_MACHINE_SCOPES })));\n        remoteAgentService.getEnvironment().then(async (environment) => {\n            if (environment) {\n                const userConfiguration = this._register(( (new FileServiceBasedRemoteUserConfiguration(\n                    environment.settingsPath,\n                    { scopes: REMOTE_MACHINE_SCOPES },\n                    this._fileService,\n                    uriIdentityService\n                ))));\n                this._register(userConfiguration.onDidChangeConfiguration(configurationModel => this.onDidUserConfigurationChange(configurationModel)));\n                this._userConfigurationInitializationPromise = userConfiguration.initialize();\n                const configurationModel = await this._userConfigurationInitializationPromise;\n                this._userConfiguration.dispose();\n                this._userConfiguration = userConfiguration;\n                this.onDidUserConfigurationChange(configurationModel);\n                this._onDidInitialize.fire(configurationModel);\n            }\n        });\n    }\n    async initialize() {\n        if (this._userConfiguration instanceof FileServiceBasedRemoteUserConfiguration) {\n            return this._userConfiguration.initialize();\n        }\n        let configurationModel = await this._userConfiguration.initialize();\n        if (this._userConfigurationInitializationPromise) {\n            configurationModel = await this._userConfigurationInitializationPromise;\n            this._userConfigurationInitializationPromise = null;\n        }\n        return configurationModel;\n    }\n    reload() {\n        return this._userConfiguration.reload();\n    }\n    reparse() {\n        return this._userConfiguration.reparse({ scopes: REMOTE_MACHINE_SCOPES });\n    }\n    getRestrictedSettings() {\n        return this._userConfiguration.getRestrictedSettings();\n    }\n    onDidUserConfigurationChange(configurationModel) {\n        this.updateCache();\n        this._onDidChangeConfiguration.fire(configurationModel);\n    }\n    async updateCache() {\n        if (this._userConfiguration instanceof FileServiceBasedRemoteUserConfiguration) {\n            let content;\n            try {\n                content = await this._userConfiguration.resolveContent();\n            }\n            catch (error) {\n                if (error.fileOperationResult !== 1 ) {\n                    return;\n                }\n            }\n            await this._cachedConfiguration.updateConfiguration(content);\n        }\n    }\n}\nclass FileServiceBasedRemoteUserConfiguration extends Disposable {\n    constructor(configurationResource, configurationParseOptions, fileService, uriIdentityService) {\n        super();\n        this.configurationResource = configurationResource;\n        this.fileService = fileService;\n        this.uriIdentityService = uriIdentityService;\n        this._onDidChangeConfiguration = this._register(( (new Emitter())));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this.fileWatcherDisposable = Disposable.None;\n        this.directoryWatcherDisposable = Disposable.None;\n        this.parser = ( (new ConfigurationModelParser( (this.configurationResource.toString()))));\n        this.parseOptions = configurationParseOptions;\n        this._register(fileService.onDidFilesChange(e => this.handleFileChangesEvent(e)));\n        this._register(fileService.onDidRunOperation(e => this.handleFileOperationEvent(e)));\n        this.reloadConfigurationScheduler = this._register(( (new RunOnceScheduler(\n            () => this.reload().then(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)),\n            50\n        ))));\n        this._register(toDisposable(() => {\n            this.stopWatchingResource();\n            this.stopWatchingDirectory();\n        }));\n    }\n    watchResource() {\n        this.fileWatcherDisposable = this.fileService.watch(this.configurationResource);\n    }\n    stopWatchingResource() {\n        this.fileWatcherDisposable.dispose();\n        this.fileWatcherDisposable = Disposable.None;\n    }\n    watchDirectory() {\n        const directory = this.uriIdentityService.extUri.dirname(this.configurationResource);\n        this.directoryWatcherDisposable = this.fileService.watch(directory);\n    }\n    stopWatchingDirectory() {\n        this.directoryWatcherDisposable.dispose();\n        this.directoryWatcherDisposable = Disposable.None;\n    }\n    async initialize() {\n        const exists = await this.fileService.exists(this.configurationResource);\n        this.onResourceExists(exists);\n        return this.reload();\n    }\n    async resolveContent() {\n        const content = await this.fileService.readFile(this.configurationResource);\n        return (\n             (content.value.toString())\n        );\n    }\n    async reload() {\n        try {\n            const content = await this.resolveContent();\n            this.parser.parse(content, this.parseOptions);\n            return this.parser.configurationModel;\n        }\n        catch (e) {\n            return (\n                 (new ConfigurationModel())\n            );\n        }\n    }\n    reparse(configurationParseOptions) {\n        this.parseOptions = configurationParseOptions;\n        this.parser.reparse(this.parseOptions);\n        return this.parser.configurationModel;\n    }\n    getRestrictedSettings() {\n        return this.parser.restrictedConfigurations;\n    }\n    handleFileChangesEvent(event) {\n        let affectedByChanges = event.contains(this.configurationResource, 0 );\n        if (event.contains(this.configurationResource, 1 )) {\n            affectedByChanges = true;\n            this.onResourceExists(true);\n        }\n        else if (event.contains(this.configurationResource, 2 )) {\n            affectedByChanges = true;\n            this.onResourceExists(false);\n        }\n        if (affectedByChanges) {\n            this.reloadConfigurationScheduler.schedule();\n        }\n    }\n    handleFileOperationEvent(event) {\n        if ((event.isOperation(0 ) || event.isOperation(3 ) || event.isOperation(1 ) || event.isOperation(4 ))\n            && this.uriIdentityService.extUri.isEqual(event.resource, this.configurationResource)) {\n            this.reloadConfigurationScheduler.schedule();\n        }\n    }\n    onResourceExists(exists) {\n        if (exists) {\n            this.stopWatchingDirectory();\n            this.watchResource();\n        }\n        else {\n            this.stopWatchingResource();\n            this.watchDirectory();\n        }\n    }\n}\nclass CachedRemoteUserConfiguration extends Disposable {\n    constructor(remoteAuthority, configurationCache, configurationParseOptions) {\n        super();\n        this.configurationCache = configurationCache;\n        this._onDidChange = this._register(( (new Emitter())));\n        this.onDidChange = this._onDidChange.event;\n        this.key = { type: 'user', key: remoteAuthority };\n        this.parser = ( (new ConfigurationModelParser('CachedRemoteUserConfiguration')));\n        this.parseOptions = configurationParseOptions;\n        this.configurationModel = ( (new ConfigurationModel()));\n    }\n    getConfigurationModel() {\n        return this.configurationModel;\n    }\n    initialize() {\n        return this.reload();\n    }\n    reparse(configurationParseOptions) {\n        this.parseOptions = configurationParseOptions;\n        this.parser.reparse(this.parseOptions);\n        this.configurationModel = this.parser.configurationModel;\n        return this.configurationModel;\n    }\n    getRestrictedSettings() {\n        return this.parser.restrictedConfigurations;\n    }\n    async reload() {\n        try {\n            const content = await this.configurationCache.read(this.key);\n            const parsed = JSON.parse(content);\n            if (parsed.content) {\n                this.parser.parse(parsed.content, this.parseOptions);\n                this.configurationModel = this.parser.configurationModel;\n            }\n        }\n        catch (e) {  }\n        return this.configurationModel;\n    }\n    async updateConfiguration(content) {\n        if (content) {\n            return this.configurationCache.write(this.key, JSON.stringify({ content }));\n        }\n        else {\n            return this.configurationCache.remove(this.key);\n        }\n    }\n}\nclass WorkspaceConfiguration extends Disposable {\n    get initialized() { return this._initialized; }\n    constructor(configurationCache, fileService, uriIdentityService, logService) {\n        super();\n        this.configurationCache = configurationCache;\n        this.fileService = fileService;\n        this.uriIdentityService = uriIdentityService;\n        this.logService = logService;\n        this._workspaceConfigurationDisposables = this._register(( (new DisposableStore())));\n        this._workspaceIdentifier = null;\n        this._isWorkspaceTrusted = false;\n        this._onDidUpdateConfiguration = this._register(( (new Emitter())));\n        this.onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;\n        this._initialized = false;\n        this.fileService = fileService;\n        this._workspaceConfiguration = this._cachedConfiguration = ( (new CachedWorkspaceConfiguration(configurationCache)));\n    }\n    async initialize(workspaceIdentifier, workspaceTrusted) {\n        this._workspaceIdentifier = workspaceIdentifier;\n        this._isWorkspaceTrusted = workspaceTrusted;\n        if (!this._initialized) {\n            if (this.configurationCache.needsCaching(this._workspaceIdentifier.configPath)) {\n                this._workspaceConfiguration = this._cachedConfiguration;\n                this.waitAndInitialize(this._workspaceIdentifier);\n            }\n            else {\n                this.doInitialize(( (new FileServiceBasedWorkspaceConfiguration(this.fileService, this.uriIdentityService, this.logService))));\n            }\n        }\n        await this.reload();\n    }\n    async reload() {\n        if (this._workspaceIdentifier) {\n            await this._workspaceConfiguration.load(this._workspaceIdentifier, { scopes: WORKSPACE_SCOPES, skipRestricted: this.isUntrusted() });\n        }\n    }\n    getFolders() {\n        return this._workspaceConfiguration.getFolders();\n    }\n    setFolders(folders, jsonEditingService) {\n        if (this._workspaceIdentifier) {\n            return jsonEditingService.write(this._workspaceIdentifier.configPath, [{ path: ['folders'], value: folders }], true)\n                .then(() => this.reload());\n        }\n        return Promise.resolve();\n    }\n    isTransient() {\n        return this._workspaceConfiguration.isTransient();\n    }\n    getConfiguration() {\n        return this._workspaceConfiguration.getWorkspaceSettings();\n    }\n    updateWorkspaceTrust(trusted) {\n        this._isWorkspaceTrusted = trusted;\n        return this.reparseWorkspaceSettings();\n    }\n    reparseWorkspaceSettings() {\n        this._workspaceConfiguration.reparseWorkspaceSettings({ scopes: WORKSPACE_SCOPES, skipRestricted: this.isUntrusted() });\n        return this.getConfiguration();\n    }\n    getRestrictedSettings() {\n        return this._workspaceConfiguration.getRestrictedSettings();\n    }\n    async waitAndInitialize(workspaceIdentifier) {\n        await whenProviderRegistered(workspaceIdentifier.configPath, this.fileService);\n        if (!(this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration)) {\n            const fileServiceBasedWorkspaceConfiguration = this._register(( (new FileServiceBasedWorkspaceConfiguration(this.fileService, this.uriIdentityService, this.logService))));\n            await fileServiceBasedWorkspaceConfiguration.load(workspaceIdentifier, { scopes: WORKSPACE_SCOPES, skipRestricted: this.isUntrusted() });\n            this.doInitialize(fileServiceBasedWorkspaceConfiguration);\n            this.onDidWorkspaceConfigurationChange(false, true);\n        }\n    }\n    doInitialize(fileServiceBasedWorkspaceConfiguration) {\n        this._workspaceConfigurationDisposables.clear();\n        this._workspaceConfiguration = this._workspaceConfigurationDisposables.add(fileServiceBasedWorkspaceConfiguration);\n        this._workspaceConfigurationDisposables.add(this._workspaceConfiguration.onDidChange(e => this.onDidWorkspaceConfigurationChange(true, false)));\n        this._initialized = true;\n    }\n    isUntrusted() {\n        return !this._isWorkspaceTrusted;\n    }\n    async onDidWorkspaceConfigurationChange(reload, fromCache) {\n        if (reload) {\n            await this.reload();\n        }\n        this.updateCache();\n        this._onDidUpdateConfiguration.fire(fromCache);\n    }\n    async updateCache() {\n        if (this._workspaceIdentifier && this.configurationCache.needsCaching(this._workspaceIdentifier.configPath) && this._workspaceConfiguration instanceof FileServiceBasedWorkspaceConfiguration) {\n            const content = await this._workspaceConfiguration.resolveContent(this._workspaceIdentifier);\n            await this._cachedConfiguration.updateWorkspace(this._workspaceIdentifier, content);\n        }\n    }\n}\nclass FileServiceBasedWorkspaceConfiguration extends Disposable {\n    constructor(fileService, uriIdentityService, logService) {\n        super();\n        this.fileService = fileService;\n        this.logService = logService;\n        this._workspaceIdentifier = null;\n        this._onDidChange = this._register(( (new Emitter())));\n        this.onDidChange = this._onDidChange.event;\n        this.workspaceConfigurationModelParser = ( (new WorkspaceConfigurationModelParser('')));\n        this.workspaceSettings = ( (new ConfigurationModel()));\n        this._register(Event.any(Event.filter(this.fileService.onDidFilesChange, e => !!this._workspaceIdentifier && e.contains(this._workspaceIdentifier.configPath)), Event.filter(this.fileService.onDidRunOperation, e => !!this._workspaceIdentifier && (e.isOperation(0 ) || e.isOperation(3 ) || e.isOperation(1 ) || e.isOperation(4 )) && uriIdentityService.extUri.isEqual(e.resource, this._workspaceIdentifier.configPath)))(() => this.reloadConfigurationScheduler.schedule()));\n        this.reloadConfigurationScheduler = this._register(( (new RunOnceScheduler(() => this._onDidChange.fire(), 50))));\n        this.workspaceConfigWatcher = this._register(this.watchWorkspaceConfigurationFile());\n    }\n    get workspaceIdentifier() {\n        return this._workspaceIdentifier;\n    }\n    async resolveContent(workspaceIdentifier) {\n        const content = await this.fileService.readFile(workspaceIdentifier.configPath);\n        return (\n             (content.value.toString())\n        );\n    }\n    async load(workspaceIdentifier, configurationParseOptions) {\n        if (!this._workspaceIdentifier || this._workspaceIdentifier.id !== workspaceIdentifier.id) {\n            this._workspaceIdentifier = workspaceIdentifier;\n            this.workspaceConfigurationModelParser = ( (new WorkspaceConfigurationModelParser(this._workspaceIdentifier.id)));\n            dispose(this.workspaceConfigWatcher);\n            this.workspaceConfigWatcher = this._register(this.watchWorkspaceConfigurationFile());\n        }\n        let contents = '';\n        try {\n            contents = await this.resolveContent(this._workspaceIdentifier);\n        }\n        catch (error) {\n            const exists = await this.fileService.exists(this._workspaceIdentifier.configPath);\n            if (exists) {\n                this.logService.error(error);\n            }\n        }\n        this.workspaceConfigurationModelParser.parse(contents, configurationParseOptions);\n        this.consolidate();\n    }\n    getConfigurationModel() {\n        return this.workspaceConfigurationModelParser.configurationModel;\n    }\n    getFolders() {\n        return this.workspaceConfigurationModelParser.folders;\n    }\n    isTransient() {\n        return this.workspaceConfigurationModelParser.transient;\n    }\n    getWorkspaceSettings() {\n        return this.workspaceSettings;\n    }\n    reparseWorkspaceSettings(configurationParseOptions) {\n        this.workspaceConfigurationModelParser.reparseWorkspaceSettings(configurationParseOptions);\n        this.consolidate();\n        return this.getWorkspaceSettings();\n    }\n    getRestrictedSettings() {\n        return this.workspaceConfigurationModelParser.getRestrictedWorkspaceSettings();\n    }\n    consolidate() {\n        this.workspaceSettings = this.workspaceConfigurationModelParser.settingsModel.merge(this.workspaceConfigurationModelParser.launchModel, this.workspaceConfigurationModelParser.tasksModel);\n    }\n    watchWorkspaceConfigurationFile() {\n        return this._workspaceIdentifier ? this.fileService.watch(this._workspaceIdentifier.configPath) : Disposable.None;\n    }\n}\nclass CachedWorkspaceConfiguration {\n    constructor(configurationCache) {\n        this.configurationCache = configurationCache;\n        this.onDidChange = Event.None;\n        this.workspaceConfigurationModelParser = ( (new WorkspaceConfigurationModelParser('')));\n        this.workspaceSettings = ( (new ConfigurationModel()));\n    }\n    async load(workspaceIdentifier, configurationParseOptions) {\n        try {\n            const key = this.getKey(workspaceIdentifier);\n            const contents = await this.configurationCache.read(key);\n            const parsed = JSON.parse(contents);\n            if (parsed.content) {\n                this.workspaceConfigurationModelParser = ( (new WorkspaceConfigurationModelParser(key.key)));\n                this.workspaceConfigurationModelParser.parse(parsed.content, configurationParseOptions);\n                this.consolidate();\n            }\n        }\n        catch (e) {\n        }\n    }\n    get workspaceIdentifier() {\n        return null;\n    }\n    getConfigurationModel() {\n        return this.workspaceConfigurationModelParser.configurationModel;\n    }\n    getFolders() {\n        return this.workspaceConfigurationModelParser.folders;\n    }\n    isTransient() {\n        return this.workspaceConfigurationModelParser.transient;\n    }\n    getWorkspaceSettings() {\n        return this.workspaceSettings;\n    }\n    reparseWorkspaceSettings(configurationParseOptions) {\n        this.workspaceConfigurationModelParser.reparseWorkspaceSettings(configurationParseOptions);\n        this.consolidate();\n        return this.getWorkspaceSettings();\n    }\n    getRestrictedSettings() {\n        return this.workspaceConfigurationModelParser.getRestrictedWorkspaceSettings();\n    }\n    consolidate() {\n        this.workspaceSettings = this.workspaceConfigurationModelParser.settingsModel.merge(this.workspaceConfigurationModelParser.launchModel, this.workspaceConfigurationModelParser.tasksModel);\n    }\n    async updateWorkspace(workspaceIdentifier, content) {\n        try {\n            const key = this.getKey(workspaceIdentifier);\n            if (content) {\n                await this.configurationCache.write(key, JSON.stringify({ content }));\n            }\n            else {\n                await this.configurationCache.remove(key);\n            }\n        }\n        catch (error) {\n        }\n    }\n    getKey(workspaceIdentifier) {\n        return {\n            type: 'workspaces',\n            key: workspaceIdentifier.id\n        };\n    }\n}\nclass CachedFolderConfiguration {\n    constructor(folder, configFolderRelativePath, configurationParseOptions, configurationCache) {\n        this.configurationCache = configurationCache;\n        this.onDidChange = Event.None;\n        this.key = { type: 'folder', key: ( (hash(( (joinPath(folder, configFolderRelativePath).toString()))).toString(16))) };\n        this._folderSettingsModelParser = ( (new ConfigurationModelParser('CachedFolderConfiguration')));\n        this._folderSettingsParseOptions = configurationParseOptions;\n        this._standAloneConfigurations = [];\n        this.configurationModel = ( (new ConfigurationModel()));\n    }\n    async loadConfiguration() {\n        try {\n            const contents = await this.configurationCache.read(this.key);\n            const { content: configurationContents } = JSON.parse(( (contents.toString())));\n            if (configurationContents) {\n                for (const key of ( (Object.keys(configurationContents)))) {\n                    if (key === FOLDER_SETTINGS_NAME) {\n                        this._folderSettingsModelParser.parse(configurationContents[key], this._folderSettingsParseOptions);\n                    }\n                    else {\n                        const standAloneConfigurationModelParser = ( (new StandaloneConfigurationModelParser(key, key)));\n                        standAloneConfigurationModelParser.parse(configurationContents[key]);\n                        this._standAloneConfigurations.push(standAloneConfigurationModelParser.configurationModel);\n                    }\n                }\n            }\n            this.consolidate();\n        }\n        catch (e) {\n        }\n        return this.configurationModel;\n    }\n    async updateConfiguration(settingsContent, standAloneConfigurationContents) {\n        const content = {};\n        if (settingsContent) {\n            content[FOLDER_SETTINGS_NAME] = settingsContent;\n        }\n        standAloneConfigurationContents.forEach(([key, contents]) => {\n            if (contents) {\n                content[key] = contents;\n            }\n        });\n        if (( (Object.keys(content))).length) {\n            await this.configurationCache.write(this.key, JSON.stringify({ content }));\n        }\n        else {\n            await this.configurationCache.remove(this.key);\n        }\n    }\n    getRestrictedSettings() {\n        return this._folderSettingsModelParser.restrictedConfigurations;\n    }\n    reparse(configurationParseOptions) {\n        this._folderSettingsParseOptions = configurationParseOptions;\n        this._folderSettingsModelParser.reparse(this._folderSettingsParseOptions);\n        this.consolidate();\n        return this.configurationModel;\n    }\n    consolidate() {\n        this.configurationModel = this._folderSettingsModelParser.configurationModel.merge(...this._standAloneConfigurations);\n    }\n    getUnsupportedKeys() {\n        return [];\n    }\n}\nclass FolderConfiguration extends Disposable {\n    constructor(useCache, workspaceFolder, configFolderRelativePath, workbenchState, workspaceTrusted, fileService, uriIdentityService, logService, configurationCache) {\n        super();\n        this.workspaceFolder = workspaceFolder;\n        this.workbenchState = workbenchState;\n        this.workspaceTrusted = workspaceTrusted;\n        this.configurationCache = configurationCache;\n        this._onDidChange = this._register(( (new Emitter())));\n        this.onDidChange = this._onDidChange.event;\n        this.scopes = 3  === this.workbenchState ? FOLDER_SCOPES : WORKSPACE_SCOPES;\n        this.configurationFolder = uriIdentityService.extUri.joinPath(workspaceFolder.uri, configFolderRelativePath);\n        this.cachedFolderConfiguration = ( (new CachedFolderConfiguration(\n            workspaceFolder.uri,\n            configFolderRelativePath,\n            { scopes: this.scopes, skipRestricted: this.isUntrusted() },\n            configurationCache\n        )));\n        if (useCache && this.configurationCache.needsCaching(workspaceFolder.uri)) {\n            this.folderConfiguration = this.cachedFolderConfiguration;\n            whenProviderRegistered(workspaceFolder.uri, fileService)\n                .then(() => {\n                this.folderConfiguration = this._register(this.createFileServiceBasedConfiguration(fileService, uriIdentityService, logService));\n                this._register(this.folderConfiguration.onDidChange(e => this.onDidFolderConfigurationChange()));\n                this.onDidFolderConfigurationChange();\n            });\n        }\n        else {\n            this.folderConfiguration = this._register(this.createFileServiceBasedConfiguration(fileService, uriIdentityService, logService));\n            this._register(this.folderConfiguration.onDidChange(e => this.onDidFolderConfigurationChange()));\n        }\n    }\n    loadConfiguration() {\n        return this.folderConfiguration.loadConfiguration();\n    }\n    updateWorkspaceTrust(trusted) {\n        this.workspaceTrusted = trusted;\n        return this.reparse();\n    }\n    reparse() {\n        const configurationModel = this.folderConfiguration.reparse({ scopes: this.scopes, skipRestricted: this.isUntrusted() });\n        this.updateCache();\n        return configurationModel;\n    }\n    getRestrictedSettings() {\n        return this.folderConfiguration.getRestrictedSettings();\n    }\n    isUntrusted() {\n        return !this.workspaceTrusted;\n    }\n    onDidFolderConfigurationChange() {\n        this.updateCache();\n        this._onDidChange.fire();\n    }\n    createFileServiceBasedConfiguration(fileService, uriIdentityService, logService) {\n        const settingsResource = uriIdentityService.extUri.joinPath(this.configurationFolder, `${FOLDER_SETTINGS_NAME}.json`);\n        const standAloneConfigurationResources = ( ([TASKS_CONFIGURATION_KEY, LAUNCH_CONFIGURATION_KEY].map(\n            name => ([name, uriIdentityService.extUri.joinPath(this.configurationFolder, `${name}.json`)])\n        )));\n        return (\n             (new FileServiceBasedConfiguration(\n                 (this.configurationFolder.toString()),\n                settingsResource,\n                standAloneConfigurationResources,\n                { scopes: this.scopes, skipRestricted: this.isUntrusted() },\n                fileService,\n                uriIdentityService,\n                logService\n            ))\n        );\n    }\n    async updateCache() {\n        if (this.configurationCache.needsCaching(this.configurationFolder) && this.folderConfiguration instanceof FileServiceBasedConfiguration) {\n            const [settingsContent, standAloneConfigurationContents] = await this.folderConfiguration.resolveContents();\n            this.cachedFolderConfiguration.updateConfiguration(settingsContent, standAloneConfigurationContents);\n        }\n    }\n}\nexport { ApplicationConfiguration, DefaultConfiguration, FolderConfiguration, RemoteUserConfiguration, UserConfiguration, WorkspaceConfiguration };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { Event, Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { ResourceMap } from 'monaco-editor/esm/vs/base/common/map.js';\nimport { equals } from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Delayer, Barrier, Queue, Promises, runWhenIdle } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { Extensions as Extensions$2 } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { IWorkspaceContextService, isWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceFolder, toWorkspaceFolder, Workspace as Workspace$1 } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { ConfigurationModel, mergeChanges, ConfigurationChangeEvent } from 'monaco-editor/esm/vs/platform/configuration/common/configurationModels.js';\nimport { isConfigurationOverrides, isConfigurationUpdateOverrides, ConfigurationTargetToString } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { NullPolicyConfiguration, PolicyConfiguration } from 'monaco-editor/esm/vs/platform/configuration/common/configurations.js';\nimport { Configuration } from '../common/configurationModels.js';\nimport { APPLY_ALL_PROFILES_SETTING, defaultSettingsSchemaId, userSettingsSchemaId, profileSettingsSchemaId, machineSettingsSchemaId, workspaceSettingsSchemaId, folderSettingsSchemaId, FOLDER_CONFIG_FOLDER_NAME, LOCAL_MACHINE_SCOPES, LOCAL_MACHINE_PROFILE_SCOPES, PROFILE_SCOPES } from '../common/configuration.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { applicationSettings, windowSettings, resourceSettings, allSettings, machineSettings, machineOverridableSettings, OVERRIDE_PROPERTY_PATTERN, resourceLanguageSettingsSchemaId, configurationDefaultsSchemaId, Extensions, keyFromOverrideIdentifiers } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { isStoredWorkspaceFolder, toWorkspaceFolders, getStoredWorkspaceFolder } from '../../../../platform/workspaces/common/workspaces.js';\nimport { ConfigurationEditing } from '../common/configurationEditing.js';\nimport { DefaultConfiguration, UserConfiguration, RemoteUserConfiguration, WorkspaceConfiguration, ApplicationConfiguration, FolderConfiguration } from './configuration.js';\nimport { mark } from 'monaco-editor/esm/vs/base/common/performance.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { Extensions as Extensions$1 } from '../../../common/contributions.js';\nimport { ILifecycleService } from '../../lifecycle/common/lifecycle.js';\nimport { toErrorMessage } from 'monaco-editor/esm/vs/base/common/errorMessage.js';\nimport { IWorkspaceTrustManagementService } from 'monaco-editor/esm/vs/platform/workspace/common/workspaceTrust.js';\nimport { distinct, delta } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IWorkbenchAssignmentService } from '../../assignment/common/assignmentService.js';\nimport { isUndefined } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { NullPolicyService } from 'monaco-editor/esm/vs/platform/policy/common/policy.js';\nimport { IJSONEditingService } from '../common/jsonEditing.js';\nimport { workbenchConfigurationNodeBase } from '../../../common/configuration.js';\nfunction getLocalUserConfigurationScopes(userDataProfile, hasRemote) {\n    return userDataProfile.isDefault\n        ? hasRemote ? LOCAL_MACHINE_SCOPES : undefined\n        : hasRemote ? LOCAL_MACHINE_PROFILE_SCOPES : PROFILE_SCOPES;\n}\nclass Workspace extends Workspace$1 {\n    constructor() {\n        super(...arguments);\n        this.initialized = false;\n    }\n}\nclass WorkspaceService extends Disposable {\n    get restrictedSettings() { return this._restrictedSettings; }\n    constructor({ remoteAuthority, configurationCache }, environmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService) {\n        super();\n        this.userDataProfileService = userDataProfileService;\n        this.userDataProfilesService = userDataProfilesService;\n        this.fileService = fileService;\n        this.remoteAgentService = remoteAgentService;\n        this.uriIdentityService = uriIdentityService;\n        this.logService = logService;\n        this.initialized = false;\n        this.applicationConfiguration = null;\n        this.remoteUserConfiguration = null;\n        this._onDidChangeConfiguration = this._register(( (new Emitter())));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this._onWillChangeWorkspaceFolders = this._register(( (new Emitter())));\n        this.onWillChangeWorkspaceFolders = this._onWillChangeWorkspaceFolders.event;\n        this._onDidChangeWorkspaceFolders = this._register(( (new Emitter())));\n        this.onDidChangeWorkspaceFolders = this._onDidChangeWorkspaceFolders.event;\n        this._onDidChangeWorkspaceName = this._register(( (new Emitter())));\n        this.onDidChangeWorkspaceName = this._onDidChangeWorkspaceName.event;\n        this._onDidChangeWorkbenchState = this._register(( (new Emitter())));\n        this.onDidChangeWorkbenchState = this._onDidChangeWorkbenchState.event;\n        this.isWorkspaceTrusted = true;\n        this._restrictedSettings = { default: [] };\n        this._onDidChangeRestrictedSettings = this._register(( (new Emitter())));\n        this.onDidChangeRestrictedSettings = this._onDidChangeRestrictedSettings.event;\n        this.configurationRegistry = ( (Registry.as(Extensions.Configuration)));\n        this.initRemoteUserConfigurationBarrier = ( (new Barrier()));\n        this.completeWorkspaceBarrier = ( (new Barrier()));\n        this.defaultConfiguration = this._register(( (new DefaultConfiguration(configurationCache, environmentService))));\n        this.policyConfiguration = policyService instanceof NullPolicyService ? ( (new NullPolicyConfiguration())) : this._register(( (new PolicyConfiguration(this.defaultConfiguration, policyService, logService))));\n        this.configurationCache = configurationCache;\n        this._configuration = ( (new Configuration(\n            this.defaultConfiguration.configurationModel,\n            this.policyConfiguration.configurationModel,\n             (new ConfigurationModel()),\n             (new ConfigurationModel()),\n             (new ConfigurationModel()),\n             (new ConfigurationModel()),\n             (new ResourceMap()),\n             (new ConfigurationModel()),\n             (new ResourceMap()),\n            this.workspace\n        )));\n        this.applicationConfigurationDisposables = this._register(( (new DisposableStore())));\n        this.createApplicationConfiguration();\n        this.localUserConfiguration = this._register(( (new UserConfiguration(\n            userDataProfileService.currentProfile.settingsResource,\n            userDataProfileService.currentProfile.tasksResource,\n            { scopes: getLocalUserConfigurationScopes(userDataProfileService.currentProfile, !!remoteAuthority) },\n            fileService,\n            uriIdentityService,\n            logService\n        ))));\n        this.cachedFolderConfigs = ( (new ResourceMap()));\n        this._register(this.localUserConfiguration.onDidChangeConfiguration(userConfiguration => this.onLocalUserConfigurationChanged(userConfiguration)));\n        if (remoteAuthority) {\n            const remoteUserConfiguration = this.remoteUserConfiguration = this._register(( (new RemoteUserConfiguration(\n                remoteAuthority,\n                configurationCache,\n                fileService,\n                uriIdentityService,\n                remoteAgentService\n            ))));\n            this._register(remoteUserConfiguration.onDidInitialize(remoteUserConfigurationModel => {\n                this._register(remoteUserConfiguration.onDidChangeConfiguration(remoteUserConfigurationModel => this.onRemoteUserConfigurationChanged(remoteUserConfigurationModel)));\n                this.onRemoteUserConfigurationChanged(remoteUserConfigurationModel);\n                this.initRemoteUserConfigurationBarrier.open();\n            }));\n        }\n        else {\n            this.initRemoteUserConfigurationBarrier.open();\n        }\n        this.workspaceConfiguration = this._register(( (new WorkspaceConfiguration(configurationCache, fileService, uriIdentityService, logService))));\n        this._register(this.workspaceConfiguration.onDidUpdateConfiguration(fromCache => {\n            this.onWorkspaceConfigurationChanged(fromCache).then(() => {\n                this.workspace.initialized = this.workspaceConfiguration.initialized;\n                this.checkAndMarkWorkspaceComplete(fromCache);\n            });\n        }));\n        this._register(this.defaultConfiguration.onDidChangeConfiguration(({ properties, defaults }) => this.onDefaultConfigurationChanged(defaults, properties)));\n        this._register(this.policyConfiguration.onDidChangeConfiguration(configurationModel => this.onPolicyConfigurationChanged(configurationModel)));\n        this._register(userDataProfileService.onDidChangeCurrentProfile(e => this.onUserDataProfileChanged(e)));\n        this.workspaceEditingQueue = ( (new Queue()));\n    }\n    createApplicationConfiguration() {\n        this.applicationConfigurationDisposables.clear();\n        if (this.userDataProfileService.currentProfile.isDefault || this.userDataProfileService.currentProfile.useDefaultFlags?.settings) {\n            this.applicationConfiguration = null;\n        }\n        else {\n            this.applicationConfiguration = this.applicationConfigurationDisposables.add(this._register(( (new ApplicationConfiguration(this.userDataProfilesService, this.fileService, this.uriIdentityService)))));\n            this.applicationConfigurationDisposables.add(this.applicationConfiguration.onDidChangeConfiguration(configurationModel => this.onApplicationConfigurationChanged(configurationModel)));\n        }\n    }\n    async getCompleteWorkspace() {\n        await this.completeWorkspaceBarrier.wait();\n        return this.getWorkspace();\n    }\n    getWorkspace() {\n        return this.workspace;\n    }\n    getWorkbenchState() {\n        if (this.workspace.configuration) {\n            return 3 ;\n        }\n        if (this.workspace.folders.length === 1) {\n            return 2 ;\n        }\n        return 1 ;\n    }\n    getWorkspaceFolder(resource) {\n        return this.workspace.getFolder(resource);\n    }\n    addFolders(foldersToAdd, index) {\n        return this.updateFolders(foldersToAdd, [], index);\n    }\n    removeFolders(foldersToRemove) {\n        return this.updateFolders([], foldersToRemove);\n    }\n    async updateFolders(foldersToAdd, foldersToRemove, index) {\n        return this.workspaceEditingQueue.queue(() => this.doUpdateFolders(foldersToAdd, foldersToRemove, index));\n    }\n    isInsideWorkspace(resource) {\n        return !!this.getWorkspaceFolder(resource);\n    }\n    isCurrentWorkspace(workspaceIdOrFolder) {\n        switch (this.getWorkbenchState()) {\n            case 2 : {\n                let folderUri = undefined;\n                if (URI.isUri(workspaceIdOrFolder)) {\n                    folderUri = workspaceIdOrFolder;\n                }\n                else if (isSingleFolderWorkspaceIdentifier(workspaceIdOrFolder)) {\n                    folderUri = workspaceIdOrFolder.uri;\n                }\n                return URI.isUri(folderUri) && this.uriIdentityService.extUri.isEqual(folderUri, this.workspace.folders[0].uri);\n            }\n            case 3 :\n                return isWorkspaceIdentifier(workspaceIdOrFolder) && this.workspace.id === workspaceIdOrFolder.id;\n        }\n        return false;\n    }\n    async doUpdateFolders(foldersToAdd, foldersToRemove, index) {\n        if (this.getWorkbenchState() !== 3 ) {\n            return Promise.resolve(undefined);\n        }\n        if (foldersToAdd.length + foldersToRemove.length === 0) {\n            return Promise.resolve(undefined);\n        }\n        let foldersHaveChanged = false;\n        let currentWorkspaceFolders = this.getWorkspace().folders;\n        let newStoredFolders = ( (currentWorkspaceFolders.map(f => f.raw))).filter((folder, index) => {\n            if (!isStoredWorkspaceFolder(folder)) {\n                return true;\n            }\n            return !this.contains(foldersToRemove, currentWorkspaceFolders[index].uri);\n        });\n        foldersHaveChanged = currentWorkspaceFolders.length !== newStoredFolders.length;\n        if (foldersToAdd.length) {\n            const workspaceConfigPath = this.getWorkspace().configuration;\n            const workspaceConfigFolder = this.uriIdentityService.extUri.dirname(workspaceConfigPath);\n            currentWorkspaceFolders = toWorkspaceFolders(newStoredFolders, workspaceConfigPath, this.uriIdentityService.extUri);\n            const currentWorkspaceFolderUris = ( (currentWorkspaceFolders.map(folder => folder.uri)));\n            const storedFoldersToAdd = [];\n            for (const folderToAdd of foldersToAdd) {\n                const folderURI = folderToAdd.uri;\n                if (this.contains(currentWorkspaceFolderUris, folderURI)) {\n                    continue;\n                }\n                try {\n                    const result = await this.fileService.stat(folderURI);\n                    if (!result.isDirectory) {\n                        continue;\n                    }\n                }\n                catch (e) {  }\n                storedFoldersToAdd.push(getStoredWorkspaceFolder(folderURI, false, folderToAdd.name, workspaceConfigFolder, this.uriIdentityService.extUri));\n            }\n            if (storedFoldersToAdd.length > 0) {\n                foldersHaveChanged = true;\n                if (typeof index === 'number' && index >= 0 && index < newStoredFolders.length) {\n                    newStoredFolders = newStoredFolders.slice(0);\n                    newStoredFolders.splice(index, 0, ...storedFoldersToAdd);\n                }\n                else {\n                    newStoredFolders = [...newStoredFolders, ...storedFoldersToAdd];\n                }\n            }\n        }\n        if (foldersHaveChanged) {\n            return this.setFolders(newStoredFolders);\n        }\n        return Promise.resolve(undefined);\n    }\n    async setFolders(folders) {\n        if (!this.instantiationService) {\n            throw new Error('Cannot update workspace folders because workspace service is not yet ready to accept writes.');\n        }\n        await this.instantiationService.invokeFunction(accessor => this.workspaceConfiguration.setFolders(folders, accessor.get(IJSONEditingService)));\n        return this.onWorkspaceConfigurationChanged(false);\n    }\n    contains(resources, toCheck) {\n        return (\n             (resources.some(resource => this.uriIdentityService.extUri.isEqual(resource, toCheck)))\n        );\n    }\n    getConfigurationData() {\n        return this._configuration.toData();\n    }\n    getValue(arg1, arg2) {\n        const section = typeof arg1 === 'string' ? arg1 : undefined;\n        const overrides = isConfigurationOverrides(arg1) ? arg1 : isConfigurationOverrides(arg2) ? arg2 : undefined;\n        return this._configuration.getValue(section, overrides);\n    }\n    async updateValue(key, value, arg3, arg4, options) {\n        const overrides = isConfigurationUpdateOverrides(arg3) ? arg3\n            : isConfigurationOverrides(arg3) ? { resource: arg3.resource, overrideIdentifiers: arg3.overrideIdentifier ? [arg3.overrideIdentifier] : undefined } : undefined;\n        const target = overrides ? arg4 : arg3;\n        const targets = target ? [target] : [];\n        if (overrides?.overrideIdentifiers) {\n            overrides.overrideIdentifiers = distinct(overrides.overrideIdentifiers);\n            overrides.overrideIdentifiers = overrides.overrideIdentifiers.length ? overrides.overrideIdentifiers : undefined;\n        }\n        if (!targets.length) {\n            if (overrides?.overrideIdentifiers && overrides.overrideIdentifiers.length > 1) {\n                throw new Error('Configuration Target is required while updating the value for multiple override identifiers');\n            }\n            const inspect = this.inspect(key, { resource: overrides?.resource, overrideIdentifier: overrides?.overrideIdentifiers ? overrides.overrideIdentifiers[0] : undefined });\n            targets.push(...this.deriveConfigurationTargets(key, value, inspect));\n            if (equals(value, inspect.defaultValue) && targets.length === 1 && ((targets[0] === 2  || targets[0] === 3) )) {\n                value = undefined;\n            }\n        }\n        await Promises.settled(( (targets.map(\n            target => this.writeConfigurationValue(key, value, target, overrides, options)\n        ))));\n    }\n    async reloadConfiguration(target) {\n        if (target === undefined) {\n            this.reloadDefaultConfiguration();\n            const application = await this.reloadApplicationConfiguration(true);\n            const { local, remote } = await this.reloadUserConfiguration();\n            await this.reloadWorkspaceConfiguration();\n            await this.loadConfiguration(application, local, remote, true);\n            return;\n        }\n        if (isWorkspaceFolder(target)) {\n            await this.reloadWorkspaceFolderConfiguration(target);\n            return;\n        }\n        switch (target) {\n            case 7 :\n                this.reloadDefaultConfiguration();\n                return;\n            case 2 : {\n                const { local, remote } = await this.reloadUserConfiguration();\n                await this.loadConfiguration(this._configuration.applicationConfiguration, local, remote, true);\n                return;\n            }\n            case 3 :\n                await this.reloadLocalUserConfiguration();\n                return;\n            case 4 :\n                await this.reloadRemoteUserConfiguration();\n                return;\n            case 5 :\n            case 6 :\n                await this.reloadWorkspaceConfiguration();\n                return;\n        }\n    }\n    hasCachedConfigurationDefaultsOverrides() {\n        return this.defaultConfiguration.hasCachedConfigurationDefaultsOverrides();\n    }\n    inspect(key, overrides) {\n        return this._configuration.inspect(key, overrides);\n    }\n    keys() {\n        return (\n             (this._configuration.keys())\n        );\n    }\n    async whenRemoteConfigurationLoaded() {\n        await this.initRemoteUserConfigurationBarrier.wait();\n    }\n    async initialize(arg) {\n        mark('code/willInitWorkspaceService');\n        const trigger = this.initialized;\n        this.initialized = false;\n        const workspace = await this.createWorkspace(arg);\n        await this.updateWorkspaceAndInitializeConfiguration(workspace, trigger);\n        this.checkAndMarkWorkspaceComplete(false);\n        mark('code/didInitWorkspaceService');\n    }\n    updateWorkspaceTrust(trusted) {\n        if (this.isWorkspaceTrusted !== trusted) {\n            this.isWorkspaceTrusted = trusted;\n            const data = this._configuration.toData();\n            const folderConfigurationModels = [];\n            for (const folder of this.workspace.folders) {\n                const folderConfiguration = this.cachedFolderConfigs.get(folder.uri);\n                let configurationModel;\n                if (folderConfiguration) {\n                    configurationModel = folderConfiguration.updateWorkspaceTrust(this.isWorkspaceTrusted);\n                    this._configuration.updateFolderConfiguration(folder.uri, configurationModel);\n                }\n                folderConfigurationModels.push(configurationModel);\n            }\n            if (this.getWorkbenchState() === 2 ) {\n                if (folderConfigurationModels[0]) {\n                    this._configuration.updateWorkspaceConfiguration(folderConfigurationModels[0]);\n                }\n            }\n            else {\n                this._configuration.updateWorkspaceConfiguration(this.workspaceConfiguration.updateWorkspaceTrust(this.isWorkspaceTrusted));\n            }\n            this.updateRestrictedSettings();\n            let keys = [];\n            if (this.restrictedSettings.userLocal) {\n                keys.push(...this.restrictedSettings.userLocal);\n            }\n            if (this.restrictedSettings.userRemote) {\n                keys.push(...this.restrictedSettings.userRemote);\n            }\n            if (this.restrictedSettings.workspace) {\n                keys.push(...this.restrictedSettings.workspace);\n            }\n            this.restrictedSettings.workspaceFolder?.forEach((value) => keys.push(...value));\n            keys = distinct(keys);\n            if (keys.length) {\n                this.triggerConfigurationChange({ keys, overrides: [] }, { data, workspace: this.workspace }, 5 );\n            }\n        }\n    }\n    acquireInstantiationService(instantiationService) {\n        this.instantiationService = instantiationService;\n    }\n    isSettingAppliedForAllProfiles(key) {\n        if (this.configurationRegistry.getConfigurationProperties()[key]?.scope === 1 ) {\n            return true;\n        }\n        const allProfilesSettings = this.getValue(APPLY_ALL_PROFILES_SETTING) ?? [];\n        return Array.isArray(allProfilesSettings) && allProfilesSettings.includes(key);\n    }\n    async createWorkspace(arg) {\n        if (isWorkspaceIdentifier(arg)) {\n            return this.createMultiFolderWorkspace(arg);\n        }\n        if (isSingleFolderWorkspaceIdentifier(arg)) {\n            return this.createSingleFolderWorkspace(arg);\n        }\n        return this.createEmptyWorkspace(arg);\n    }\n    async createMultiFolderWorkspace(workspaceIdentifier) {\n        await this.workspaceConfiguration.initialize({ id: workspaceIdentifier.id, configPath: workspaceIdentifier.configPath }, this.isWorkspaceTrusted);\n        const workspaceConfigPath = workspaceIdentifier.configPath;\n        const workspaceFolders = toWorkspaceFolders(this.workspaceConfiguration.getFolders(), workspaceConfigPath, this.uriIdentityService.extUri);\n        const workspaceId = workspaceIdentifier.id;\n        const workspace = ( (new Workspace(\n            workspaceId,\n            workspaceFolders,\n            this.workspaceConfiguration.isTransient(),\n            workspaceConfigPath,\n            uri => this.uriIdentityService.extUri.ignorePathCasing(uri)\n        )));\n        workspace.initialized = this.workspaceConfiguration.initialized;\n        return workspace;\n    }\n    createSingleFolderWorkspace(singleFolderWorkspaceIdentifier) {\n        const workspace = ( (new Workspace(\n            singleFolderWorkspaceIdentifier.id,\n            [toWorkspaceFolder(singleFolderWorkspaceIdentifier.uri)],\n            false,\n            null,\n            uri => this.uriIdentityService.extUri.ignorePathCasing(uri)\n        )));\n        workspace.initialized = true;\n        return workspace;\n    }\n    createEmptyWorkspace(emptyWorkspaceIdentifier) {\n        const workspace = ( (new Workspace(\n            emptyWorkspaceIdentifier.id,\n            [],\n            false,\n            null,\n            uri => this.uriIdentityService.extUri.ignorePathCasing(uri)\n        )));\n        workspace.initialized = true;\n        return Promise.resolve(workspace);\n    }\n    checkAndMarkWorkspaceComplete(fromCache) {\n        if (!this.completeWorkspaceBarrier.isOpen() && this.workspace.initialized) {\n            this.completeWorkspaceBarrier.open();\n            this.validateWorkspaceFoldersAndReload(fromCache);\n        }\n    }\n    async updateWorkspaceAndInitializeConfiguration(workspace, trigger) {\n        const hasWorkspaceBefore = !!this.workspace;\n        let previousState;\n        let previousWorkspacePath;\n        let previousFolders = [];\n        if (hasWorkspaceBefore) {\n            previousState = this.getWorkbenchState();\n            previousWorkspacePath = this.workspace.configuration ? this.workspace.configuration.fsPath : undefined;\n            previousFolders = this.workspace.folders;\n            this.workspace.update(workspace);\n        }\n        else {\n            this.workspace = workspace;\n        }\n        await this.initializeConfiguration(trigger);\n        if (hasWorkspaceBefore) {\n            const newState = this.getWorkbenchState();\n            if (previousState && newState !== previousState) {\n                this._onDidChangeWorkbenchState.fire(newState);\n            }\n            const newWorkspacePath = this.workspace.configuration ? this.workspace.configuration.fsPath : undefined;\n            if (previousWorkspacePath && newWorkspacePath !== previousWorkspacePath || newState !== previousState) {\n                this._onDidChangeWorkspaceName.fire();\n            }\n            const folderChanges = this.compareFolders(previousFolders, this.workspace.folders);\n            if (folderChanges && (folderChanges.added.length || folderChanges.removed.length || folderChanges.changed.length)) {\n                await this.handleWillChangeWorkspaceFolders(folderChanges, false);\n                this._onDidChangeWorkspaceFolders.fire(folderChanges);\n            }\n        }\n        if (!this.localUserConfiguration.hasTasksLoaded) {\n            this._register(runWhenIdle(() => this.reloadLocalUserConfiguration()));\n        }\n    }\n    compareFolders(currentFolders, newFolders) {\n        const result = { added: [], removed: [], changed: [] };\n        result.added = newFolders.filter(newFolder => !( (currentFolders.some(\n            currentFolder => ( (newFolder.uri.toString())) === ( (currentFolder.uri.toString()))\n        ))));\n        for (let currentIndex = 0; currentIndex < currentFolders.length; currentIndex++) {\n            const currentFolder = currentFolders[currentIndex];\n            let newIndex = 0;\n            for (newIndex = 0; newIndex < newFolders.length && ( (currentFolder.uri.toString())) !== ( (newFolders[newIndex].uri.toString())); newIndex++) { }\n            if (newIndex < newFolders.length) {\n                if (currentIndex !== newIndex || currentFolder.name !== newFolders[newIndex].name) {\n                    result.changed.push(currentFolder);\n                }\n            }\n            else {\n                result.removed.push(currentFolder);\n            }\n        }\n        return result;\n    }\n    async initializeConfiguration(trigger) {\n        await this.defaultConfiguration.initialize();\n        const initPolicyConfigurationPromise = this.policyConfiguration.initialize();\n        const initApplicationConfigurationPromise = this.applicationConfiguration ? this.applicationConfiguration.initialize() : Promise.resolve(( (new ConfigurationModel())));\n        const initUserConfiguration = async () => {\n            mark('code/willInitUserConfiguration');\n            const result = await Promise.all([this.localUserConfiguration.initialize(), this.remoteUserConfiguration ? this.remoteUserConfiguration.initialize() : Promise.resolve(( (new ConfigurationModel())))]);\n            if (this.applicationConfiguration) {\n                const applicationConfigurationModel = await initApplicationConfigurationPromise;\n                result[0] = this.localUserConfiguration.reparse({ exclude: applicationConfigurationModel.getValue(APPLY_ALL_PROFILES_SETTING) });\n            }\n            mark('code/didInitUserConfiguration');\n            return result;\n        };\n        const [, application, [local, remote]] = await Promise.all([\n            initPolicyConfigurationPromise,\n            initApplicationConfigurationPromise,\n            initUserConfiguration()\n        ]);\n        mark('code/willInitWorkspaceConfiguration');\n        await this.loadConfiguration(application, local, remote, trigger);\n        mark('code/didInitWorkspaceConfiguration');\n    }\n    reloadDefaultConfiguration() {\n        this.onDefaultConfigurationChanged(this.defaultConfiguration.reload());\n    }\n    async reloadApplicationConfiguration(donotTrigger) {\n        if (!this.applicationConfiguration) {\n            return (\n                 (new ConfigurationModel())\n            );\n        }\n        const model = await this.applicationConfiguration.loadConfiguration();\n        if (!donotTrigger) {\n            this.onApplicationConfigurationChanged(model);\n        }\n        return model;\n    }\n    async reloadUserConfiguration() {\n        const [local, remote] = await Promise.all([this.reloadLocalUserConfiguration(true), this.reloadRemoteUserConfiguration(true)]);\n        return { local, remote };\n    }\n    async reloadLocalUserConfiguration(donotTrigger) {\n        const model = await this.localUserConfiguration.reload();\n        if (!donotTrigger) {\n            this.onLocalUserConfigurationChanged(model);\n        }\n        return model;\n    }\n    async reloadRemoteUserConfiguration(donotTrigger) {\n        if (this.remoteUserConfiguration) {\n            const model = await this.remoteUserConfiguration.reload();\n            if (!donotTrigger) {\n                this.onRemoteUserConfigurationChanged(model);\n            }\n            return model;\n        }\n        return (\n             (new ConfigurationModel())\n        );\n    }\n    async reloadWorkspaceConfiguration() {\n        const workbenchState = this.getWorkbenchState();\n        if (workbenchState === 2 ) {\n            return this.onWorkspaceFolderConfigurationChanged(this.workspace.folders[0]);\n        }\n        if (workbenchState === 3 ) {\n            return this.workspaceConfiguration.reload().then(() => this.onWorkspaceConfigurationChanged(false));\n        }\n    }\n    reloadWorkspaceFolderConfiguration(folder) {\n        return this.onWorkspaceFolderConfigurationChanged(folder);\n    }\n    async loadConfiguration(applicationConfigurationModel, userConfigurationModel, remoteUserConfigurationModel, trigger) {\n        this.cachedFolderConfigs = ( (new ResourceMap()));\n        const folders = this.workspace.folders;\n        const folderConfigurations = await this.loadFolderConfigurations(folders);\n        const workspaceConfiguration = this.getWorkspaceConfigurationModel(folderConfigurations);\n        const folderConfigurationModels = ( (new ResourceMap()));\n        folderConfigurations.forEach((folderConfiguration, index) => folderConfigurationModels.set(folders[index].uri, folderConfiguration));\n        const currentConfiguration = this._configuration;\n        this._configuration = ( (new Configuration(\n            this.defaultConfiguration.configurationModel,\n            this.policyConfiguration.configurationModel,\n            applicationConfigurationModel,\n            userConfigurationModel,\n            remoteUserConfigurationModel,\n            workspaceConfiguration,\n            folderConfigurationModels,\n             (new ConfigurationModel()),\n             (new ResourceMap()),\n            this.workspace\n        )));\n        this.initialized = true;\n        if (trigger) {\n            const change = this._configuration.compare(currentConfiguration);\n            this.triggerConfigurationChange(change, { data: currentConfiguration.toData(), workspace: this.workspace }, 5 );\n        }\n        this.updateRestrictedSettings();\n    }\n    getWorkspaceConfigurationModel(folderConfigurations) {\n        switch (this.getWorkbenchState()) {\n            case 2 :\n                return folderConfigurations[0];\n            case 3 :\n                return this.workspaceConfiguration.getConfiguration();\n            default:\n                return (\n                     (new ConfigurationModel())\n                );\n        }\n    }\n    onUserDataProfileChanged(e) {\n        e.join((async () => {\n            const promises = [];\n            promises.push(this.localUserConfiguration.reset(e.profile.settingsResource, e.profile.tasksResource, { scopes: getLocalUserConfigurationScopes(e.profile, !!this.remoteUserConfiguration) }));\n            if (e.previous.isDefault !== e.profile.isDefault\n                || !!e.previous.useDefaultFlags?.settings !== !!e.profile.useDefaultFlags?.settings) {\n                this.createApplicationConfiguration();\n                if (this.applicationConfiguration) {\n                    promises.push(this.reloadApplicationConfiguration(true));\n                }\n            }\n            let [localUser, application] = await Promise.all(promises);\n            application = application ?? this._configuration.applicationConfiguration;\n            if (this.applicationConfiguration) {\n                localUser = this.localUserConfiguration.reparse({ exclude: application.getValue(APPLY_ALL_PROFILES_SETTING) });\n            }\n            await this.loadConfiguration(application, localUser, this._configuration.remoteUserConfiguration, true);\n        })());\n    }\n    onDefaultConfigurationChanged(configurationModel, properties) {\n        if (this.workspace) {\n            const previousData = this._configuration.toData();\n            const change = this._configuration.compareAndUpdateDefaultConfiguration(configurationModel, properties);\n            if (this.applicationConfiguration) {\n                this._configuration.updateApplicationConfiguration(this.applicationConfiguration.reparse());\n            }\n            if (this.remoteUserConfiguration) {\n                this._configuration.updateLocalUserConfiguration(this.localUserConfiguration.reparse());\n                this._configuration.updateRemoteUserConfiguration(this.remoteUserConfiguration.reparse());\n            }\n            if (this.getWorkbenchState() === 2 ) {\n                const folderConfiguration = this.cachedFolderConfigs.get(this.workspace.folders[0].uri);\n                if (folderConfiguration) {\n                    this._configuration.updateWorkspaceConfiguration(folderConfiguration.reparse());\n                    this._configuration.updateFolderConfiguration(this.workspace.folders[0].uri, folderConfiguration.reparse());\n                }\n            }\n            else {\n                this._configuration.updateWorkspaceConfiguration(this.workspaceConfiguration.reparseWorkspaceSettings());\n                for (const folder of this.workspace.folders) {\n                    const folderConfiguration = this.cachedFolderConfigs.get(folder.uri);\n                    if (folderConfiguration) {\n                        this._configuration.updateFolderConfiguration(folder.uri, folderConfiguration.reparse());\n                    }\n                }\n            }\n            this.triggerConfigurationChange(change, { data: previousData, workspace: this.workspace }, 7 );\n            this.updateRestrictedSettings();\n        }\n    }\n    onPolicyConfigurationChanged(policyConfiguration) {\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const change = this._configuration.compareAndUpdatePolicyConfiguration(policyConfiguration);\n        this.triggerConfigurationChange(change, previous, 7 );\n    }\n    onApplicationConfigurationChanged(applicationConfiguration) {\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const previousAllProfilesSettings = this._configuration.applicationConfiguration.getValue(APPLY_ALL_PROFILES_SETTING) ?? [];\n        const change = this._configuration.compareAndUpdateApplicationConfiguration(applicationConfiguration);\n        const currentAllProfilesSettings = this.getValue(APPLY_ALL_PROFILES_SETTING) ?? [];\n        const configurationProperties = this.configurationRegistry.getConfigurationProperties();\n        const changedKeys = [];\n        for (const changedKey of change.keys) {\n            if (configurationProperties[changedKey]?.scope === 1 ) {\n                changedKeys.push(changedKey);\n                if (changedKey === APPLY_ALL_PROFILES_SETTING) {\n                    for (const previousAllProfileSetting of previousAllProfilesSettings) {\n                        if (!currentAllProfilesSettings.includes(previousAllProfileSetting)) {\n                            changedKeys.push(previousAllProfileSetting);\n                        }\n                    }\n                    for (const currentAllProfileSetting of currentAllProfilesSettings) {\n                        if (!previousAllProfilesSettings.includes(currentAllProfileSetting)) {\n                            changedKeys.push(currentAllProfileSetting);\n                        }\n                    }\n                }\n            }\n            else if (currentAllProfilesSettings.includes(changedKey)) {\n                changedKeys.push(changedKey);\n            }\n        }\n        change.keys = changedKeys;\n        if (change.keys.includes(APPLY_ALL_PROFILES_SETTING)) {\n            this._configuration.updateLocalUserConfiguration(this.localUserConfiguration.reparse({ exclude: currentAllProfilesSettings }));\n        }\n        this.triggerConfigurationChange(change, previous, 2 );\n    }\n    onLocalUserConfigurationChanged(userConfiguration) {\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const change = this._configuration.compareAndUpdateLocalUserConfiguration(userConfiguration);\n        this.triggerConfigurationChange(change, previous, 2 );\n    }\n    onRemoteUserConfigurationChanged(userConfiguration) {\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const change = this._configuration.compareAndUpdateRemoteUserConfiguration(userConfiguration);\n        this.triggerConfigurationChange(change, previous, 2 );\n    }\n    async onWorkspaceConfigurationChanged(fromCache) {\n        if (this.workspace && this.workspace.configuration) {\n            let newFolders = toWorkspaceFolders(this.workspaceConfiguration.getFolders(), this.workspace.configuration, this.uriIdentityService.extUri);\n            if (this.workspace.initialized) {\n                const { added, removed, changed } = this.compareFolders(this.workspace.folders, newFolders);\n                if (added.length || removed.length || changed.length) {\n                    newFolders = await this.toValidWorkspaceFolders(newFolders);\n                }\n                else {\n                    newFolders = this.workspace.folders;\n                }\n            }\n            await this.updateWorkspaceConfiguration(newFolders, this.workspaceConfiguration.getConfiguration(), fromCache);\n        }\n    }\n    updateRestrictedSettings() {\n        const changed = [];\n        const allProperties = this.configurationRegistry.getConfigurationProperties();\n        const defaultRestrictedSettings = ( (Object.keys(allProperties))).filter(key => allProperties[key].restricted).sort((a, b) => a.localeCompare(b));\n        const defaultDelta = delta(defaultRestrictedSettings, this._restrictedSettings.default, (a, b) => a.localeCompare(b));\n        changed.push(...defaultDelta.added, ...defaultDelta.removed);\n        const application = (this.applicationConfiguration?.getRestrictedSettings() || []).sort((a, b) => a.localeCompare(b));\n        const applicationDelta = delta(application, this._restrictedSettings.application || [], (a, b) => a.localeCompare(b));\n        changed.push(...applicationDelta.added, ...applicationDelta.removed);\n        const userLocal = this.localUserConfiguration.getRestrictedSettings().sort((a, b) => a.localeCompare(b));\n        const userLocalDelta = delta(userLocal, this._restrictedSettings.userLocal || [], (a, b) => a.localeCompare(b));\n        changed.push(...userLocalDelta.added, ...userLocalDelta.removed);\n        const userRemote = (this.remoteUserConfiguration?.getRestrictedSettings() || []).sort((a, b) => a.localeCompare(b));\n        const userRemoteDelta = delta(userRemote, this._restrictedSettings.userRemote || [], (a, b) => a.localeCompare(b));\n        changed.push(...userRemoteDelta.added, ...userRemoteDelta.removed);\n        const workspaceFolderMap = ( (new ResourceMap()));\n        for (const workspaceFolder of this.workspace.folders) {\n            const cachedFolderConfig = this.cachedFolderConfigs.get(workspaceFolder.uri);\n            const folderRestrictedSettings = (cachedFolderConfig?.getRestrictedSettings() || []).sort((a, b) => a.localeCompare(b));\n            if (folderRestrictedSettings.length) {\n                workspaceFolderMap.set(workspaceFolder.uri, folderRestrictedSettings);\n            }\n            const previous = this._restrictedSettings.workspaceFolder?.get(workspaceFolder.uri) || [];\n            const workspaceFolderDelta = delta(folderRestrictedSettings, previous, (a, b) => a.localeCompare(b));\n            changed.push(...workspaceFolderDelta.added, ...workspaceFolderDelta.removed);\n        }\n        const workspace = this.getWorkbenchState() === 3  ? this.workspaceConfiguration.getRestrictedSettings().sort((a, b) => a.localeCompare(b))\n            : this.workspace.folders[0] ? (workspaceFolderMap.get(this.workspace.folders[0].uri) || []) : [];\n        const workspaceDelta = delta(workspace, this._restrictedSettings.workspace || [], (a, b) => a.localeCompare(b));\n        changed.push(...workspaceDelta.added, ...workspaceDelta.removed);\n        if (changed.length) {\n            this._restrictedSettings = {\n                default: defaultRestrictedSettings,\n                application: application.length ? application : undefined,\n                userLocal: userLocal.length ? userLocal : undefined,\n                userRemote: userRemote.length ? userRemote : undefined,\n                workspace: workspace.length ? workspace : undefined,\n                workspaceFolder: workspaceFolderMap.size ? workspaceFolderMap : undefined,\n            };\n            this._onDidChangeRestrictedSettings.fire(this.restrictedSettings);\n        }\n    }\n    async updateWorkspaceConfiguration(workspaceFolders, configuration, fromCache) {\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const change = this._configuration.compareAndUpdateWorkspaceConfiguration(configuration);\n        const changes = this.compareFolders(this.workspace.folders, workspaceFolders);\n        if (changes.added.length || changes.removed.length || changes.changed.length) {\n            this.workspace.folders = workspaceFolders;\n            const change = await this.onFoldersChanged();\n            await this.handleWillChangeWorkspaceFolders(changes, fromCache);\n            this.triggerConfigurationChange(change, previous, 6 );\n            this._onDidChangeWorkspaceFolders.fire(changes);\n        }\n        else {\n            this.triggerConfigurationChange(change, previous, 5 );\n        }\n        this.updateRestrictedSettings();\n    }\n    async handleWillChangeWorkspaceFolders(changes, fromCache) {\n        const joiners = [];\n        this._onWillChangeWorkspaceFolders.fire({\n            join(updateWorkspaceTrustStatePromise) {\n                joiners.push(updateWorkspaceTrustStatePromise);\n            },\n            changes,\n            fromCache\n        });\n        try {\n            await Promises.settled(joiners);\n        }\n        catch (error) {  }\n    }\n    async onWorkspaceFolderConfigurationChanged(folder) {\n        const [folderConfiguration] = await this.loadFolderConfigurations([folder]);\n        const previous = { data: this._configuration.toData(), workspace: this.workspace };\n        const folderConfigurationChange = this._configuration.compareAndUpdateFolderConfiguration(folder.uri, folderConfiguration);\n        if (this.getWorkbenchState() === 2 ) {\n            const workspaceConfigurationChange = this._configuration.compareAndUpdateWorkspaceConfiguration(folderConfiguration);\n            this.triggerConfigurationChange(mergeChanges(folderConfigurationChange, workspaceConfigurationChange), previous, 5 );\n        }\n        else {\n            this.triggerConfigurationChange(folderConfigurationChange, previous, 6 );\n        }\n        this.updateRestrictedSettings();\n    }\n    async onFoldersChanged() {\n        const changes = [];\n        for (const key of ( (this.cachedFolderConfigs.keys()))) {\n            if (!this.workspace.folders.filter(folder => ( (folder.uri.toString())) === ( (key.toString())))[0]) {\n                const folderConfiguration = this.cachedFolderConfigs.get(key);\n                folderConfiguration.dispose();\n                this.cachedFolderConfigs.delete(key);\n                changes.push(this._configuration.compareAndDeleteFolderConfiguration(key));\n            }\n        }\n        const toInitialize = this.workspace.folders.filter(folder => !( (this.cachedFolderConfigs.has(folder.uri))));\n        if (toInitialize.length) {\n            const folderConfigurations = await this.loadFolderConfigurations(toInitialize);\n            folderConfigurations.forEach((folderConfiguration, index) => {\n                changes.push(this._configuration.compareAndUpdateFolderConfiguration(toInitialize[index].uri, folderConfiguration));\n            });\n        }\n        return mergeChanges(...changes);\n    }\n    loadFolderConfigurations(folders) {\n        return Promise.all([...( (folders.map(folder => {\n                let folderConfiguration = this.cachedFolderConfigs.get(folder.uri);\n                if (!folderConfiguration) {\n                    folderConfiguration = ( (new FolderConfiguration(\n                        !this.initialized,\n                        folder,\n                        FOLDER_CONFIG_FOLDER_NAME,\n                        this.getWorkbenchState(),\n                        this.isWorkspaceTrusted,\n                        this.fileService,\n                        this.uriIdentityService,\n                        this.logService,\n                        this.configurationCache\n                    )));\n                    this._register(folderConfiguration.onDidChange(() => this.onWorkspaceFolderConfigurationChanged(folder)));\n                    this.cachedFolderConfigs.set(folder.uri, this._register(folderConfiguration));\n                }\n                return folderConfiguration.loadConfiguration();\n            })))]);\n    }\n    async validateWorkspaceFoldersAndReload(fromCache) {\n        const validWorkspaceFolders = await this.toValidWorkspaceFolders(this.workspace.folders);\n        const { removed } = this.compareFolders(this.workspace.folders, validWorkspaceFolders);\n        if (removed.length) {\n            await this.updateWorkspaceConfiguration(validWorkspaceFolders, this.workspaceConfiguration.getConfiguration(), fromCache);\n        }\n    }\n    async toValidWorkspaceFolders(workspaceFolders) {\n        const validWorkspaceFolders = [];\n        for (const workspaceFolder of workspaceFolders) {\n            try {\n                const result = await this.fileService.stat(workspaceFolder.uri);\n                if (!result.isDirectory) {\n                    continue;\n                }\n            }\n            catch (e) {\n                this.logService.warn(`Ignoring the error while validating workspace folder ${( ( workspaceFolder.uri.toString()))} - ${toErrorMessage(e)}`);\n            }\n            validWorkspaceFolders.push(workspaceFolder);\n        }\n        return validWorkspaceFolders;\n    }\n    async writeConfigurationValue(key, value, target, overrides, options) {\n        if (!this.instantiationService) {\n            throw new Error('Cannot write configuration because the configuration service is not yet ready to accept writes.');\n        }\n        if (target === 7 ) {\n            throw new Error('Invalid configuration target');\n        }\n        if (target === 8 ) {\n            const previous = { data: this._configuration.toData(), workspace: this.workspace };\n            this._configuration.updateValue(key, value, overrides);\n            this.triggerConfigurationChange({ keys: overrides?.overrideIdentifiers?.length ? [keyFromOverrideIdentifiers(overrides.overrideIdentifiers), key] : [key], overrides: overrides?.overrideIdentifiers?.length ? ( (overrides.overrideIdentifiers.map(overrideIdentifier => ([overrideIdentifier, [key]])))) : [] }, previous, target);\n            return;\n        }\n        const editableConfigurationTarget = this.toEditableConfigurationTarget(target, key);\n        if (!editableConfigurationTarget) {\n            throw new Error('Invalid configuration target');\n        }\n        if (editableConfigurationTarget === 2  && !this.remoteUserConfiguration) {\n            throw new Error('Invalid configuration target');\n        }\n        this.configurationEditing = this.configurationEditing ?? this.instantiationService.createInstance(ConfigurationEditing, (await this.remoteAgentService.getEnvironment())?.settingsPath ?? null);\n        await this.configurationEditing.writeConfiguration(editableConfigurationTarget, { key, value }, { scopes: overrides, ...options });\n        switch (editableConfigurationTarget) {\n            case 1 :\n                if (this.applicationConfiguration && this.isSettingAppliedForAllProfiles(key)) {\n                    await this.reloadApplicationConfiguration();\n                }\n                else {\n                    await this.reloadLocalUserConfiguration();\n                }\n                return;\n            case 2 :\n                return this.reloadRemoteUserConfiguration().then(() => undefined);\n            case 3 :\n                return this.reloadWorkspaceConfiguration();\n            case 4 : {\n                const workspaceFolder = overrides && overrides.resource ? this.workspace.getFolder(overrides.resource) : null;\n                if (workspaceFolder) {\n                    return this.reloadWorkspaceFolderConfiguration(workspaceFolder);\n                }\n            }\n        }\n    }\n    deriveConfigurationTargets(key, value, inspect) {\n        if (equals(value, inspect.value)) {\n            return [];\n        }\n        const definedTargets = [];\n        if (inspect.workspaceFolderValue !== undefined) {\n            definedTargets.push(6 );\n        }\n        if (inspect.workspaceValue !== undefined) {\n            definedTargets.push(5 );\n        }\n        if (inspect.userRemoteValue !== undefined) {\n            definedTargets.push(4 );\n        }\n        if (inspect.userLocalValue !== undefined) {\n            definedTargets.push(3 );\n        }\n        if (value === undefined) {\n            return definedTargets;\n        }\n        return [definedTargets[0] || 2 ];\n    }\n    triggerConfigurationChange(change, previous, target) {\n        if (change.keys.length) {\n            if (target !== 7 ) {\n                this.logService.debug(`Configuration keys changed in ${ConfigurationTargetToString(target)} target`, ...change.keys);\n            }\n            const configurationChangeEvent = ( (new ConfigurationChangeEvent(change, previous, this._configuration, this.workspace)));\n            configurationChangeEvent.source = target;\n            configurationChangeEvent.sourceConfig = this.getTargetConfiguration(target);\n            this._onDidChangeConfiguration.fire(configurationChangeEvent);\n        }\n    }\n    getTargetConfiguration(target) {\n        switch (target) {\n            case 7 :\n                return this._configuration.defaults.contents;\n            case 2 :\n                return this._configuration.userConfiguration.contents;\n            case 5 :\n                return this._configuration.workspaceConfiguration.contents;\n        }\n        return {};\n    }\n    toEditableConfigurationTarget(target, key) {\n        if (target === 2 ) {\n            if (this.remoteUserConfiguration) {\n                const scope = this.configurationRegistry.getConfigurationProperties()[key]?.scope;\n                if (scope === 2  || scope === 6 ) {\n                    return 2 ;\n                }\n                if (this.inspect(key).userRemoteValue !== undefined) {\n                    return 2 ;\n                }\n            }\n            return 1 ;\n        }\n        if (target === 3 ) {\n            return 1 ;\n        }\n        if (target === 4 ) {\n            return 2 ;\n        }\n        if (target === 5 ) {\n            return 3 ;\n        }\n        if (target === 6 ) {\n            return 4 ;\n        }\n        return null;\n    }\n}\nlet RegisterConfigurationSchemasContribution = class RegisterConfigurationSchemasContribution extends Disposable {\n    constructor(workspaceContextService, environmentService, workspaceTrustManagementService, extensionService, lifecycleService) {\n        super();\n        this.workspaceContextService = workspaceContextService;\n        this.environmentService = environmentService;\n        this.workspaceTrustManagementService = workspaceTrustManagementService;\n        extensionService.whenInstalledExtensionsRegistered().then(() => {\n            this.registerConfigurationSchemas();\n            const configurationRegistry = ( (Registry.as(Extensions.Configuration)));\n            const delayer = this._register(( (new Delayer(50))));\n            this._register(Event.any(configurationRegistry.onDidUpdateConfiguration, configurationRegistry.onDidSchemaChange, workspaceTrustManagementService.onDidChangeTrust)(() => delayer.trigger(() => this.registerConfigurationSchemas(), lifecycleService.phase === 4  ? undefined : 2500 )));\n        });\n    }\n    registerConfigurationSchemas() {\n        const allSettingsSchema = {\n            properties: allSettings.properties,\n            patternProperties: allSettings.patternProperties,\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        const userSettingsSchema = this.environmentService.remoteAuthority ?\n            {\n                properties: Object.assign({}, applicationSettings.properties, windowSettings.properties, resourceSettings.properties),\n                patternProperties: allSettings.patternProperties,\n                additionalProperties: true,\n                allowTrailingCommas: true,\n                allowComments: true\n            }\n            : allSettingsSchema;\n        const profileSettingsSchema = {\n            properties: Object.assign({}, machineSettings.properties, machineOverridableSettings.properties, windowSettings.properties, resourceSettings.properties),\n            patternProperties: allSettings.patternProperties,\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        const machineSettingsSchema = {\n            properties: Object.assign({}, machineSettings.properties, machineOverridableSettings.properties, windowSettings.properties, resourceSettings.properties),\n            patternProperties: allSettings.patternProperties,\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        const workspaceSettingsSchema = {\n            properties: Object.assign({}, this.checkAndFilterPropertiesRequiringTrust(machineOverridableSettings.properties), this.checkAndFilterPropertiesRequiringTrust(windowSettings.properties), this.checkAndFilterPropertiesRequiringTrust(resourceSettings.properties)),\n            patternProperties: allSettings.patternProperties,\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        const defaultSettingsSchema = {\n            properties: ( (Object.keys(allSettings.properties))).reduce((result, key) => {\n                result[key] = Object.assign({ deprecationMessage: undefined }, allSettings.properties[key]);\n                return result;\n            }, {}),\n            patternProperties: ( (Object.keys(allSettings.patternProperties))).reduce((result, key) => {\n                result[key] = Object.assign({ deprecationMessage: undefined }, allSettings.patternProperties[key]);\n                return result;\n            }, {}),\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        const folderSettingsSchema = 3  === this.workspaceContextService.getWorkbenchState() ?\n            {\n                properties: Object.assign({}, this.checkAndFilterPropertiesRequiringTrust(machineOverridableSettings.properties), this.checkAndFilterPropertiesRequiringTrust(resourceSettings.properties)),\n                patternProperties: allSettings.patternProperties,\n                additionalProperties: true,\n                allowTrailingCommas: true,\n                allowComments: true\n            } : workspaceSettingsSchema;\n        const configDefaultsSchema = {\n            type: 'object',\n            description: ( (localize(\n                'configurationDefaults.description',\n                'Contribute defaults for configurations'\n            ))),\n            properties: Object.assign({}, machineOverridableSettings.properties, windowSettings.properties, resourceSettings.properties),\n            patternProperties: {\n                [OVERRIDE_PROPERTY_PATTERN]: {\n                    type: 'object',\n                    default: {},\n                    $ref: resourceLanguageSettingsSchemaId,\n                }\n            },\n            additionalProperties: false\n        };\n        this.registerSchemas({\n            defaultSettingsSchema,\n            userSettingsSchema,\n            profileSettingsSchema,\n            machineSettingsSchema,\n            workspaceSettingsSchema,\n            folderSettingsSchema,\n            configDefaultsSchema,\n        });\n    }\n    registerSchemas(schemas) {\n        const jsonRegistry = ( (Registry.as(Extensions$2.JSONContribution)));\n        jsonRegistry.registerSchema(defaultSettingsSchemaId, schemas.defaultSettingsSchema);\n        jsonRegistry.registerSchema(userSettingsSchemaId, schemas.userSettingsSchema);\n        jsonRegistry.registerSchema(profileSettingsSchemaId, schemas.profileSettingsSchema);\n        jsonRegistry.registerSchema(machineSettingsSchemaId, schemas.machineSettingsSchema);\n        jsonRegistry.registerSchema(workspaceSettingsSchemaId, schemas.workspaceSettingsSchema);\n        jsonRegistry.registerSchema(folderSettingsSchemaId, schemas.folderSettingsSchema);\n        jsonRegistry.registerSchema(configurationDefaultsSchemaId, schemas.configDefaultsSchema);\n    }\n    checkAndFilterPropertiesRequiringTrust(properties) {\n        if (this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n            return properties;\n        }\n        const result = {};\n        Object.entries(properties).forEach(([key, value]) => {\n            if (!value.restricted) {\n                result[key] = value;\n            }\n        });\n        return result;\n    }\n};\nRegisterConfigurationSchemasContribution = ( (__decorate([\n    ( (__param(0, IWorkspaceContextService))),\n    ( (__param(1, IWorkbenchEnvironmentService))),\n    ( (__param(2, IWorkspaceTrustManagementService))),\n    ( (__param(3, IExtensionService))),\n    ( (__param(4, ILifecycleService)))\n], RegisterConfigurationSchemasContribution)));\nlet UpdateExperimentalSettingsDefaults = class UpdateExperimentalSettingsDefaults extends Disposable {\n    constructor(workbenchAssignmentService) {\n        super();\n        this.workbenchAssignmentService = workbenchAssignmentService;\n        this.processedExperimentalSettings = ( (new Set()));\n        this.configurationRegistry = ( (Registry.as(Extensions.Configuration)));\n        this.processExperimentalSettings(( (Object.keys(this.configurationRegistry.getConfigurationProperties()))));\n        this._register(this.configurationRegistry.onDidUpdateConfiguration(({ properties }) => this.processExperimentalSettings(properties)));\n    }\n    async processExperimentalSettings(properties) {\n        const overrides = {};\n        const allProperties = this.configurationRegistry.getConfigurationProperties();\n        for (const property of properties) {\n            const schema = allProperties[property];\n            if (!schema?.tags?.includes('experimental')) {\n                continue;\n            }\n            if (( (this.processedExperimentalSettings.has(property)))) {\n                continue;\n            }\n            this.processedExperimentalSettings.add(property);\n            try {\n                const value = await this.workbenchAssignmentService.getTreatment(`config.${property}`);\n                if (!isUndefined(value) && !equals(value, schema.default)) {\n                    overrides[property] = value;\n                }\n            }\n            catch (error) {  }\n        }\n        if (( (Object.keys(overrides))).length) {\n            this.configurationRegistry.registerDefaultConfigurations([{ overrides, source: ( (localize('experimental', \"Experiments\"))) }]);\n        }\n    }\n};\nUpdateExperimentalSettingsDefaults = ( (__decorate([\n    ( (__param(0, IWorkbenchAssignmentService)))\n], UpdateExperimentalSettingsDefaults)));\nconst workbenchContributionsRegistry = ( (Registry.as(Extensions$1.Workbench)));\nworkbenchContributionsRegistry.registerWorkbenchContribution(RegisterConfigurationSchemasContribution, 3 );\nworkbenchContributionsRegistry.registerWorkbenchContribution(UpdateExperimentalSettingsDefaults, 3 );\nconst configurationRegistry = ( (Registry.as(Extensions.Configuration)));\nconfigurationRegistry.registerConfiguration({\n    ...workbenchConfigurationNodeBase,\n    properties: {\n        [APPLY_ALL_PROFILES_SETTING]: {\n            'type': 'array',\n            description: ( (localize(\n                'setting description',\n                \"Configure settings to be applied for all profiles.\"\n            ))),\n            'default': [],\n            'scope': 1 ,\n            additionalProperties: true,\n            uniqueItems: true,\n        }\n    }\n});\nexport { WorkspaceService };\n","import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { Position } from 'monaco-editor/esm/vs/editor/common/core/position.js';\nimport { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';\nimport { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nlet TextResourceConfigurationService = class TextResourceConfigurationService extends Disposable {\n    constructor(configurationService, modelService, languageService) {\n        super();\n        this.configurationService = configurationService;\n        this.modelService = modelService;\n        this.languageService = languageService;\n        this._onDidChangeConfiguration = this._register(( new Emitter()));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this._register(this.configurationService.onDidChangeConfiguration(e => this._onDidChangeConfiguration.fire(this.toResourceConfigurationChangeEvent(e))));\n    }\n    getValue(resource, arg2, arg3) {\n        if (typeof arg3 === 'string') {\n            return this._getValue(resource, Position.isIPosition(arg2) ? arg2 : null, arg3);\n        }\n        return this._getValue(resource, null, typeof arg2 === 'string' ? arg2 : undefined);\n    }\n    updateValue(resource, key, value, configurationTarget) {\n        const language = this.getLanguage(resource, null);\n        const configurationValue = this.configurationService.inspect(key, { resource, overrideIdentifier: language });\n        if (configurationTarget === undefined) {\n            configurationTarget = this.deriveConfigurationTarget(configurationValue, language);\n        }\n        switch (configurationTarget) {\n            case 8 :\n                return this._updateValue(key, value, configurationTarget, configurationValue.memory?.override, resource, language);\n            case 6 :\n                return this._updateValue(key, value, configurationTarget, configurationValue.workspaceFolder?.override, resource, language);\n            case 5 :\n                return this._updateValue(key, value, configurationTarget, configurationValue.workspace?.override, resource, language);\n            case 4 :\n                return this._updateValue(key, value, configurationTarget, configurationValue.userRemote?.override, resource, language);\n            default:\n                return this._updateValue(key, value, configurationTarget, configurationValue.userLocal?.override, resource, language);\n        }\n    }\n    _updateValue(key, value, configurationTarget, overriddenValue, resource, language) {\n        if (language && overriddenValue !== undefined) {\n            return this.configurationService.updateValue(key, value, { resource, overrideIdentifier: language }, configurationTarget);\n        }\n        else {\n            return this.configurationService.updateValue(key, value, { resource }, configurationTarget);\n        }\n    }\n    deriveConfigurationTarget(configurationValue, language) {\n        if (language) {\n            if (configurationValue.memory?.override !== undefined) {\n                return 8 ;\n            }\n            if (configurationValue.workspaceFolder?.override !== undefined) {\n                return 6 ;\n            }\n            if (configurationValue.workspace?.override !== undefined) {\n                return 5 ;\n            }\n            if (configurationValue.userRemote?.override !== undefined) {\n                return 4 ;\n            }\n            if (configurationValue.userLocal?.override !== undefined) {\n                return 3 ;\n            }\n        }\n        if (configurationValue.memory?.value !== undefined) {\n            return 8 ;\n        }\n        if (configurationValue.workspaceFolder?.value !== undefined) {\n            return 6 ;\n        }\n        if (configurationValue.workspace?.value !== undefined) {\n            return 5 ;\n        }\n        if (configurationValue.userRemote?.value !== undefined) {\n            return 4 ;\n        }\n        return 3 ;\n    }\n    _getValue(resource, position, section) {\n        const language = resource ? this.getLanguage(resource, position) : undefined;\n        if (typeof section === 'undefined') {\n            return this.configurationService.getValue({ resource, overrideIdentifier: language });\n        }\n        return this.configurationService.getValue(section, { resource, overrideIdentifier: language });\n    }\n    inspect(resource, position, section) {\n        const language = resource ? this.getLanguage(resource, position) : undefined;\n        return this.configurationService.inspect(section, { resource, overrideIdentifier: language });\n    }\n    getLanguage(resource, position) {\n        const model = this.modelService.getModel(resource);\n        if (model) {\n            return position ? model.getLanguageIdAtPosition(position.lineNumber, position.column) : model.getLanguageId();\n        }\n        return this.languageService.guessLanguageIdByFilepathOrFirstLine(resource);\n    }\n    toResourceConfigurationChangeEvent(configurationChangeEvent) {\n        return {\n            affectedKeys: configurationChangeEvent.affectedKeys,\n            affectsConfiguration: (resource, configuration) => {\n                const overrideIdentifier = resource ? this.getLanguage(resource, null) : undefined;\n                return configurationChangeEvent.affectsConfiguration(configuration, { resource, overrideIdentifier });\n            }\n        };\n    }\n};\nTextResourceConfigurationService = ( __decorate([\n    ( __param(0, IConfigurationService)),\n    ( __param(1, IModelService)),\n    ( __param(2, ILanguageService))\n], TextResourceConfigurationService));\nexport { TextResourceConfigurationService };\n","var ConfigurationScope;\n( (function(ConfigurationScope) {\n    ConfigurationScope[ConfigurationScope[\"APPLICATION\"] = 1] = \"APPLICATION\";\n    ConfigurationScope[ConfigurationScope[\"MACHINE\"] = 2] = \"MACHINE\";\n    ConfigurationScope[ConfigurationScope[\"WINDOW\"] = 3] = \"WINDOW\";\n    ConfigurationScope[ConfigurationScope[\"RESOURCE\"] = 4] = \"RESOURCE\";\n    ConfigurationScope[ConfigurationScope[\"LANGUAGE_OVERRIDABLE\"] = 5] = \"LANGUAGE_OVERRIDABLE\";\n    ConfigurationScope[ConfigurationScope[\"MACHINE_OVERRIDABLE\"] = 6] = \"MACHINE_OVERRIDABLE\";\n})(ConfigurationScope || (ConfigurationScope = {})));\nexport { ConfigurationScope };\n","import { joinPath } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { VSBuffer } from 'monaco-editor/esm/vs/base/common/buffer.js';\nimport { Queue } from 'monaco-editor/esm/vs/base/common/async.js';\nclass ConfigurationCache {\n    constructor(donotCacheResourcesWithSchemes, environmentService, fileService) {\n        this.donotCacheResourcesWithSchemes = donotCacheResourcesWithSchemes;\n        this.fileService = fileService;\n        this.cachedConfigurations = ( new Map());\n        this.cacheHome = environmentService.cacheHome;\n    }\n    needsCaching(resource) {\n        return !this.donotCacheResourcesWithSchemes.includes(resource.scheme);\n    }\n    read(key) {\n        return this.getCachedConfiguration(key).read();\n    }\n    write(key, content) {\n        return this.getCachedConfiguration(key).save(content);\n    }\n    remove(key) {\n        return this.getCachedConfiguration(key).remove();\n    }\n    getCachedConfiguration({ type, key }) {\n        const k = `${type}:${key}`;\n        let cachedConfiguration = this.cachedConfigurations.get(k);\n        if (!cachedConfiguration) {\n            cachedConfiguration = ( new CachedConfiguration({ type, key }, this.cacheHome, this.fileService));\n            this.cachedConfigurations.set(k, cachedConfiguration);\n        }\n        return cachedConfiguration;\n    }\n}\nclass CachedConfiguration {\n    constructor({ type, key }, cacheHome, fileService) {\n        this.fileService = fileService;\n        this.cachedConfigurationFolderResource = joinPath(cacheHome, 'CachedConfigurations', type, key);\n        this.cachedConfigurationFileResource = joinPath(this.cachedConfigurationFolderResource, type === 'workspaces' ? 'workspace.json' : 'configuration.json');\n        this.queue = ( new Queue());\n    }\n    async read() {\n        try {\n            const content = await this.fileService.readFile(this.cachedConfigurationFileResource);\n            return ( content.value.toString());\n        }\n        catch (e) {\n            return '';\n        }\n    }\n    async save(content) {\n        const created = await this.createCachedFolder();\n        if (created) {\n            await this.queue.queue(async () => {\n                await this.fileService.writeFile(this.cachedConfigurationFileResource, VSBuffer.fromString(content));\n            });\n        }\n    }\n    async remove() {\n        try {\n            await this.queue.queue(() => this.fileService.del(this.cachedConfigurationFolderResource, { recursive: true, useTrash: false }));\n        }\n        catch (error) {\n            if (error.fileOperationResult !== 1 ) {\n                throw error;\n            }\n        }\n    }\n    async createCachedFolder() {\n        if (await this.fileService.exists(this.cachedConfigurationFolderResource)) {\n            return true;\n        }\n        try {\n            await this.fileService.createFolder(this.cachedConfigurationFolderResource);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    }\n}\nexport { ConfigurationCache };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { dispose, Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { sep, posix, win32 } from 'monaco-editor/esm/vs/base/common/path.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Extensions } from '../../../common/contributions.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { isWorkspace, toWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, isUntitledWorkspace, isTemporaryWorkspace, WORKSPACE_EXTENSION, IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { basenameOrAuthority, basename, joinPath, dirname } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { getPathLabel, tildify } from 'monaco-editor/esm/vs/base/common/labels.js';\nimport { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';\nimport { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';\nimport { match } from 'monaco-editor/esm/vs/base/common/glob.js';\nimport { ILifecycleService } from '../../lifecycle/common/lifecycle.js';\nimport { IPathService } from '../../path/common/pathService.js';\nimport { isProposedApiEnabled } from '../../extensions/common/extensions.js';\nimport { OS } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { Memento } from '../../../common/memento.js';\nimport { firstOrDefault } from 'monaco-editor/esm/vs/base/common/arrays.js';\nconst resourceLabelFormattersExtPoint = ( ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'resourceLabelFormatters',\n    jsonSchema: {\n        description: ( localize(\n            'vscode.extension.contributes.resourceLabelFormatters',\n            'Contributes resource label formatting rules.'\n        )),\n        type: 'array',\n        items: {\n            type: 'object',\n            required: ['scheme', 'formatting'],\n            properties: {\n                scheme: {\n                    type: 'string',\n                    description: ( localize(\n                        'vscode.extension.contributes.resourceLabelFormatters.scheme',\n                        'URI scheme on which to match the formatter on. For example \"file\". Simple glob patterns are supported.'\n                    )),\n                },\n                authority: {\n                    type: 'string',\n                    description: ( localize(\n                        'vscode.extension.contributes.resourceLabelFormatters.authority',\n                        'URI authority on which to match the formatter on. Simple glob patterns are supported.'\n                    )),\n                },\n                formatting: {\n                    description: ( localize(\n                        'vscode.extension.contributes.resourceLabelFormatters.formatting',\n                        \"Rules for formatting uri resource labels.\"\n                    )),\n                    type: 'object',\n                    properties: {\n                        label: {\n                            type: 'string',\n                            description: ( localize(\n                                'vscode.extension.contributes.resourceLabelFormatters.label',\n                                \"Label rules to display. For example: myLabel:/${path}. ${path}, ${scheme}, ${authority} and ${authoritySuffix} are supported as variables.\"\n                            ))\n                        },\n                        separator: {\n                            type: 'string',\n                            description: ( localize(\n                                'vscode.extension.contributes.resourceLabelFormatters.separator',\n                                \"Separator to be used in the uri label display. '/' or '\\' as an example.\"\n                            ))\n                        },\n                        stripPathStartingSeparator: {\n                            type: 'boolean',\n                            description: ( localize(\n                                'vscode.extension.contributes.resourceLabelFormatters.stripPathStartingSeparator',\n                                \"Controls whether `${path}` substitutions should have starting separator characters stripped.\"\n                            ))\n                        },\n                        tildify: {\n                            type: 'boolean',\n                            description: ( localize(\n                                'vscode.extension.contributes.resourceLabelFormatters.tildify',\n                                \"Controls if the start of the uri label should be tildified when possible.\"\n                            ))\n                        },\n                        workspaceSuffix: {\n                            type: 'string',\n                            description: ( localize(\n                                'vscode.extension.contributes.resourceLabelFormatters.formatting.workspaceSuffix',\n                                \"Suffix appended to the workspace label.\"\n                            ))\n                        }\n                    }\n                }\n            }\n        }\n    }\n}));\nconst sepRegexp = /\\//g;\nconst labelMatchingRegexp = /\\$\\{(scheme|authoritySuffix|authority|path|(query)\\.(.+?))\\}/g;\nfunction hasDriveLetterIgnorePlatform(path) {\n    return !!(path && path[2] === ':');\n}\nlet ResourceLabelFormattersHandler = class ResourceLabelFormattersHandler {\n    constructor(labelService) {\n        this.formattersDisposables = ( new Map());\n        resourceLabelFormattersExtPoint.setHandler((extensions, delta) => {\n            for (const added of delta.added) {\n                for (const untrustedFormatter of added.value) {\n                    const formatter = { ...untrustedFormatter };\n                    if (typeof formatter.formatting.label !== 'string') {\n                        formatter.formatting.label = '${authority}${path}';\n                    }\n                    if (typeof formatter.formatting.separator !== `string`) {\n                        formatter.formatting.separator = sep;\n                    }\n                    if (!isProposedApiEnabled(added.description, 'contribLabelFormatterWorkspaceTooltip') && formatter.formatting.workspaceTooltip) {\n                        formatter.formatting.workspaceTooltip = undefined;\n                    }\n                    this.formattersDisposables.set(formatter, labelService.registerFormatter(formatter));\n                }\n            }\n            for (const removed of delta.removed) {\n                for (const formatter of removed.value) {\n                    dispose(this.formattersDisposables.get(formatter));\n                }\n            }\n        });\n    }\n};\nResourceLabelFormattersHandler = ( __decorate([\n    ( __param(0, ILabelService))\n], ResourceLabelFormattersHandler));\n( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(ResourceLabelFormattersHandler, 3 );\nconst FORMATTER_CACHE_SIZE = 50;\nlet LabelService = class LabelService extends Disposable {\n    constructor(environmentService, contextService, pathService, remoteAgentService, storageService, lifecycleService) {\n        super();\n        this.environmentService = environmentService;\n        this.contextService = contextService;\n        this.pathService = pathService;\n        this.remoteAgentService = remoteAgentService;\n        this._onDidChangeFormatters = this._register(( new Emitter({ leakWarningThreshold: 400 })));\n        this.onDidChangeFormatters = this._onDidChangeFormatters.event;\n        this.os = OS;\n        this.userHome = pathService.defaultUriScheme === Schemas.file ? this.pathService.userHome({ preferLocal: true }) : undefined;\n        const memento = this.storedFormattersMemento = ( new Memento('cachedResourceLabelFormatters2', storageService));\n        this.storedFormatters = memento.getMemento(0 , 1 );\n        this.formatters = this.storedFormatters?.formatters?.slice() || [];\n        this.resolveRemoteEnvironment();\n    }\n    async resolveRemoteEnvironment() {\n        const env = await this.remoteAgentService.getEnvironment();\n        this.os = env?.os ?? OS;\n        this.userHome = await this.pathService.userHome();\n    }\n    findFormatting(resource) {\n        let bestResult;\n        for (const formatter of this.formatters) {\n            if (formatter.scheme === resource.scheme) {\n                if (!formatter.authority && (!bestResult || formatter.priority)) {\n                    bestResult = formatter;\n                    continue;\n                }\n                if (!formatter.authority) {\n                    continue;\n                }\n                if (match(formatter.authority.toLowerCase(), resource.authority.toLowerCase()) &&\n                    (!bestResult ||\n                        !bestResult.authority ||\n                        formatter.authority.length > bestResult.authority.length ||\n                        ((formatter.authority.length === bestResult.authority.length) && formatter.priority))) {\n                    bestResult = formatter;\n                }\n            }\n        }\n        return bestResult ? bestResult.formatting : undefined;\n    }\n    getUriLabel(resource, options = {}) {\n        let formatting = this.findFormatting(resource);\n        if (formatting && options.separator) {\n            formatting = { ...formatting, separator: options.separator };\n        }\n        const label = this.doGetUriLabel(resource, formatting, options);\n        if (!formatting && options.separator) {\n            return label.replace(sepRegexp, options.separator);\n        }\n        return label;\n    }\n    doGetUriLabel(resource, formatting, options = {}) {\n        if (!formatting) {\n            return getPathLabel(resource, {\n                os: this.os,\n                tildify: this.userHome ? { userHome: this.userHome } : undefined,\n                relative: options.relative ? {\n                    noPrefix: options.noPrefix,\n                    getWorkspace: () => this.contextService.getWorkspace(),\n                    getWorkspaceFolder: resource => this.contextService.getWorkspaceFolder(resource)\n                } : undefined\n            });\n        }\n        if (options.relative && this.contextService) {\n            let folder = this.contextService.getWorkspaceFolder(resource);\n            if (!folder) {\n                const workspace = this.contextService.getWorkspace();\n                const firstFolder = firstOrDefault(workspace.folders);\n                if (firstFolder && resource.scheme !== firstFolder.uri.scheme && resource.path.startsWith(posix.sep)) {\n                    folder = this.contextService.getWorkspaceFolder(firstFolder.uri.with({ path: resource.path }));\n                }\n            }\n            if (folder) {\n                const folderLabel = this.formatUri(folder.uri, formatting, options.noPrefix);\n                let relativeLabel = this.formatUri(resource, formatting, options.noPrefix);\n                let overlap = 0;\n                while (relativeLabel[overlap] && relativeLabel[overlap] === folderLabel[overlap]) {\n                    overlap++;\n                }\n                if (!relativeLabel[overlap] || relativeLabel[overlap] === formatting.separator) {\n                    relativeLabel = relativeLabel.substring(1 + overlap);\n                }\n                else if (overlap === folderLabel.length && folder.uri.path === posix.sep) {\n                    relativeLabel = relativeLabel.substring(overlap);\n                }\n                const hasMultipleRoots = this.contextService.getWorkspace().folders.length > 1;\n                if (hasMultipleRoots && !options.noPrefix) {\n                    const rootName = folder?.name ?? basenameOrAuthority(folder.uri);\n                    relativeLabel = relativeLabel ? `${rootName} • ${relativeLabel}` : rootName;\n                }\n                return relativeLabel;\n            }\n        }\n        return this.formatUri(resource, formatting, options.noPrefix);\n    }\n    getUriBasenameLabel(resource) {\n        const formatting = this.findFormatting(resource);\n        const label = this.doGetUriLabel(resource, formatting);\n        let pathLib;\n        if (formatting?.separator === win32.sep) {\n            pathLib = win32;\n        }\n        else if (formatting?.separator === posix.sep) {\n            pathLib = posix;\n        }\n        else {\n            pathLib = ((this.os === 1) ) ? win32 : posix;\n        }\n        return pathLib.basename(label);\n    }\n    getWorkspaceLabel(workspace, options) {\n        if (isWorkspace(workspace)) {\n            const identifier = toWorkspaceIdentifier(workspace);\n            if (isSingleFolderWorkspaceIdentifier(identifier) || isWorkspaceIdentifier(identifier)) {\n                return this.getWorkspaceLabel(identifier, options);\n            }\n            return '';\n        }\n        if (URI.isUri(workspace)) {\n            return this.doGetSingleFolderWorkspaceLabel(workspace, options);\n        }\n        if (isSingleFolderWorkspaceIdentifier(workspace)) {\n            return this.doGetSingleFolderWorkspaceLabel(workspace.uri, options);\n        }\n        if (isWorkspaceIdentifier(workspace)) {\n            return this.doGetWorkspaceLabel(workspace.configPath, options);\n        }\n        return '';\n    }\n    doGetWorkspaceLabel(workspaceUri, options) {\n        if (isUntitledWorkspace(workspaceUri, this.environmentService)) {\n            return ( localize('untitledWorkspace', \"Untitled (Workspace)\"));\n        }\n        if (isTemporaryWorkspace(workspaceUri)) {\n            return ( localize('temporaryWorkspace', \"Workspace\"));\n        }\n        let filename = basename(workspaceUri);\n        if (filename.endsWith(WORKSPACE_EXTENSION)) {\n            filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n        }\n        let label;\n        switch (options?.verbose) {\n            case 0 :\n                label = filename;\n                break;\n            case 2 :\n                label = ( localize(\n                    'workspaceNameVerbose',\n                    \"{0} (Workspace)\",\n                    this.getUriLabel(joinPath(dirname(workspaceUri), filename))\n                ));\n                break;\n            case 1 :\n            default:\n                label = ( localize('workspaceName', \"{0} (Workspace)\", filename));\n                break;\n        }\n        if (options?.verbose === 0 ) {\n            return label;\n        }\n        return this.appendWorkspaceSuffix(label, workspaceUri);\n    }\n    doGetSingleFolderWorkspaceLabel(folderUri, options) {\n        let label;\n        switch (options?.verbose) {\n            case 2 :\n                label = this.getUriLabel(folderUri);\n                break;\n            case 0 :\n            case 1 :\n            default:\n                label = basename(folderUri) || posix.sep;\n                break;\n        }\n        if (options?.verbose === 0 ) {\n            return label;\n        }\n        return this.appendWorkspaceSuffix(label, folderUri);\n    }\n    getSeparator(scheme, authority) {\n        const formatter = this.findFormatting(( URI.from({ scheme, authority })));\n        return formatter?.separator || posix.sep;\n    }\n    getHostLabel(scheme, authority) {\n        const formatter = this.findFormatting(( URI.from({ scheme, authority })));\n        return formatter?.workspaceSuffix || authority || '';\n    }\n    getHostTooltip(scheme, authority) {\n        const formatter = this.findFormatting(( URI.from({ scheme, authority })));\n        return formatter?.workspaceTooltip;\n    }\n    registerCachedFormatter(formatter) {\n        const list = this.storedFormatters.formatters ??= [];\n        let replace = list.findIndex(f => f.scheme === formatter.scheme && f.authority === formatter.authority);\n        if (replace === -1 && list.length >= FORMATTER_CACHE_SIZE) {\n            replace = FORMATTER_CACHE_SIZE - 1;\n        }\n        if (replace === -1) {\n            list.unshift(formatter);\n        }\n        else {\n            for (let i = replace; i > 0; i--) {\n                list[i] = list[i - 1];\n            }\n            list[0] = formatter;\n        }\n        this.storedFormattersMemento.saveMemento();\n        return this.registerFormatter(formatter);\n    }\n    registerFormatter(formatter) {\n        this.formatters.push(formatter);\n        this._onDidChangeFormatters.fire({ scheme: formatter.scheme });\n        return {\n            dispose: () => {\n                this.formatters = this.formatters.filter(f => f !== formatter);\n                this._onDidChangeFormatters.fire({ scheme: formatter.scheme });\n            }\n        };\n    }\n    formatUri(resource, formatting, forceNoTildify) {\n        let label = formatting.label.replace(labelMatchingRegexp, (match, token, qsToken, qsValue) => {\n            switch (token) {\n                case 'scheme': return resource.scheme;\n                case 'authority': return resource.authority;\n                case 'authoritySuffix': {\n                    const i = resource.authority.indexOf('+');\n                    return i === -1 ? resource.authority : resource.authority.slice(i + 1);\n                }\n                case 'path':\n                    return formatting.stripPathStartingSeparator\n                        ? resource.path.slice(resource.path[0] === formatting.separator ? 1 : 0)\n                        : resource.path;\n                default: {\n                    if (qsToken === 'query') {\n                        const { query } = resource;\n                        if (query && query[0] === '{' && query[query.length - 1] === '}') {\n                            try {\n                                return JSON.parse(query)[qsValue] || '';\n                            }\n                            catch { }\n                        }\n                    }\n                    return '';\n                }\n            }\n        });\n        if (formatting.normalizeDriveLetter && hasDriveLetterIgnorePlatform(label)) {\n            label = label.charAt(1).toUpperCase() + label.substr(2);\n        }\n        if (formatting.tildify && !forceNoTildify) {\n            if (this.userHome) {\n                label = tildify(label, this.userHome.fsPath, this.os);\n            }\n        }\n        if (formatting.authorityPrefix && resource.authority) {\n            label = formatting.authorityPrefix + label;\n        }\n        return label.replace(sepRegexp, formatting.separator);\n    }\n    appendWorkspaceSuffix(label, uri) {\n        const formatting = this.findFormatting(uri);\n        const suffix = formatting && (typeof formatting.workspaceSuffix === 'string') ? formatting.workspaceSuffix : undefined;\n        return suffix ? `${label} [${suffix}]` : label;\n    }\n};\nLabelService = ( __decorate([\n    ( __param(0, IWorkbenchEnvironmentService)),\n    ( __param(1, IWorkspaceContextService)),\n    ( __param(2, IPathService)),\n    ( __param(3, IRemoteAgentService)),\n    ( __param(4, IStorageService)),\n    ( __param(5, ILifecycleService))\n], LabelService));\nexport { LabelService };\n","import { hash } from 'monaco-editor/esm/vs/base/common/hash.js';\nfunction getWorkspaceIdentifier(workspaceUri) {\n    return {\n        id: getWorkspaceId(workspaceUri),\n        configPath: workspaceUri\n    };\n}\nfunction getWorkspaceId(uri) {\n    return ( hash(( uri.toString())).toString(16));\n}\nexport { getWorkspaceIdentifier };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { restoreRecentlyOpened, isRecentFolder, isRecentWorkspace, isRecentFile, toStoreData, getStoredWorkspaceFolder } from '../../../../platform/workspaces/common/workspaces.js';\nimport { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { isTemporaryWorkspace, WORKSPACE_EXTENSION, IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { getWorkspaceIdentifier } from './workspaces.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { joinPath } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { VSBuffer } from 'monaco-editor/esm/vs/base/common/buffer.js';\nimport { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nlet BrowserWorkspacesService = class BrowserWorkspacesService extends Disposable {\n    static { this.RECENTLY_OPENED_KEY = 'recently.opened'; }\n    constructor(storageService, contextService, logService, fileService, environmentService, uriIdentityService) {\n        super();\n        this.storageService = storageService;\n        this.contextService = contextService;\n        this.logService = logService;\n        this.fileService = fileService;\n        this.environmentService = environmentService;\n        this.uriIdentityService = uriIdentityService;\n        this._onRecentlyOpenedChange = this._register(( new Emitter()));\n        this.onDidChangeRecentlyOpened = this._onRecentlyOpenedChange.event;\n        this.addWorkspaceToRecentlyOpened();\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.storageService.onDidChangeValue(e => this.onDidChangeStorage(e)));\n        this._register(this.contextService.onDidChangeWorkspaceFolders(e => this.onDidChangeWorkspaceFolders(e)));\n    }\n    onDidChangeStorage(e) {\n        if (e.key === BrowserWorkspacesService.RECENTLY_OPENED_KEY && e.scope === -1 ) {\n            this._onRecentlyOpenedChange.fire();\n        }\n    }\n    onDidChangeWorkspaceFolders(e) {\n        if (!isTemporaryWorkspace(this.contextService.getWorkspace())) {\n            return;\n        }\n        for (const folder of e.added) {\n            this.addRecentlyOpened([{ folderUri: folder.uri }]);\n        }\n    }\n    addWorkspaceToRecentlyOpened() {\n        const workspace = this.contextService.getWorkspace();\n        const remoteAuthority = this.environmentService.remoteAuthority;\n        switch (this.contextService.getWorkbenchState()) {\n            case 2 :\n                this.addRecentlyOpened([{ folderUri: workspace.folders[0].uri, remoteAuthority }]);\n                break;\n            case 3 :\n                this.addRecentlyOpened([{ workspace: { id: workspace.id, configPath: workspace.configuration }, remoteAuthority }]);\n                break;\n        }\n    }\n    async getRecentlyOpened() {\n        const recentlyOpenedRaw = this.storageService.get(BrowserWorkspacesService.RECENTLY_OPENED_KEY, -1 );\n        if (recentlyOpenedRaw) {\n            const recentlyOpened = restoreRecentlyOpened(JSON.parse(recentlyOpenedRaw), this.logService);\n            recentlyOpened.workspaces = recentlyOpened.workspaces.filter(recent => {\n                if (isRecentFolder(recent) && recent.folderUri.scheme === Schemas.file && !isTemporaryWorkspace(this.contextService.getWorkspace())) {\n                    return false;\n                }\n                if (isRecentWorkspace(recent) && isTemporaryWorkspace(recent.workspace.configPath)) {\n                    return false;\n                }\n                return true;\n            });\n            return recentlyOpened;\n        }\n        return { workspaces: [], files: [] };\n    }\n    async addRecentlyOpened(recents) {\n        const recentlyOpened = await this.getRecentlyOpened();\n        for (const recent of recents) {\n            if (isRecentFile(recent)) {\n                this.doRemoveRecentlyOpened(recentlyOpened, [recent.fileUri]);\n                recentlyOpened.files.unshift(recent);\n            }\n            else if (isRecentFolder(recent)) {\n                this.doRemoveRecentlyOpened(recentlyOpened, [recent.folderUri]);\n                recentlyOpened.workspaces.unshift(recent);\n            }\n            else {\n                this.doRemoveRecentlyOpened(recentlyOpened, [recent.workspace.configPath]);\n                recentlyOpened.workspaces.unshift(recent);\n            }\n        }\n        return this.saveRecentlyOpened(recentlyOpened);\n    }\n    async removeRecentlyOpened(paths) {\n        const recentlyOpened = await this.getRecentlyOpened();\n        this.doRemoveRecentlyOpened(recentlyOpened, paths);\n        return this.saveRecentlyOpened(recentlyOpened);\n    }\n    doRemoveRecentlyOpened(recentlyOpened, paths) {\n        recentlyOpened.files = recentlyOpened.files.filter(file => {\n            return !( paths.some(path => ( path.toString()) === ( file.fileUri.toString())));\n        });\n        recentlyOpened.workspaces = recentlyOpened.workspaces.filter(workspace => {\n            return !( paths.some(path => ( path.toString()) === (isRecentFolder(workspace) ? ( workspace.folderUri.toString()) : ( workspace.workspace.configPath.toString()))));\n        });\n    }\n    async saveRecentlyOpened(data) {\n        return this.storageService.store(BrowserWorkspacesService.RECENTLY_OPENED_KEY, JSON.stringify(toStoreData(data)), -1 , 0 );\n    }\n    async clearRecentlyOpened() {\n        this.storageService.remove(BrowserWorkspacesService.RECENTLY_OPENED_KEY, -1 );\n    }\n    async enterWorkspace(workspaceUri) {\n        return { workspace: await this.getWorkspaceIdentifier(workspaceUri) };\n    }\n    async createUntitledWorkspace(folders, remoteAuthority) {\n        const randomId = ( (Date.now() + Math.round(Math.random() * 1000)).toString());\n        const newUntitledWorkspacePath = joinPath(this.environmentService.untitledWorkspacesHome, `Untitled-${randomId}.${WORKSPACE_EXTENSION}`);\n        const storedWorkspaceFolder = [];\n        if (folders) {\n            for (const folder of folders) {\n                storedWorkspaceFolder.push(getStoredWorkspaceFolder(folder.uri, true, folder.name, this.environmentService.untitledWorkspacesHome, this.uriIdentityService.extUri));\n            }\n        }\n        const storedWorkspace = { folders: storedWorkspaceFolder, remoteAuthority };\n        await this.fileService.writeFile(newUntitledWorkspacePath, VSBuffer.fromString(JSON.stringify(storedWorkspace, null, '\\t')));\n        return this.getWorkspaceIdentifier(newUntitledWorkspacePath);\n    }\n    async deleteUntitledWorkspace(workspace) {\n        try {\n            await this.fileService.del(workspace.configPath);\n        }\n        catch (error) {\n            if (error.fileOperationResult !== 1 ) {\n                throw error;\n            }\n        }\n    }\n    async getWorkspaceIdentifier(workspaceUri) {\n        return getWorkspaceIdentifier(workspaceUri);\n    }\n    async getDirtyWorkspaces() {\n        return [];\n    }\n};\nBrowserWorkspacesService = ( __decorate([\n    ( __param(0, IStorageService)),\n    ( __param(1, IWorkspaceContextService)),\n    ( __param(2, ILogService)),\n    ( __param(3, IFileService)),\n    ( __param(4, IWorkbenchEnvironmentService)),\n    ( __param(5, IUriIdentityService))\n], BrowserWorkspacesService));\nexport { BrowserWorkspacesService };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { WORKSPACE_FILTER, hasWorkspaceFileExtension, WORKSPACE_EXTENSION, isSavedWorkspace, isUntitledWorkspace, toWorkspaceIdentifier, isWorkspaceIdentifier, IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { IJSONEditingService } from '../../configuration/common/jsonEditing.js';\nimport { rewriteWorkspaceFileForNewLocation, IWorkspacesService } from '../../../../platform/workspaces/common/workspaces.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { firstOrDefault, distinct } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { joinPath, basename, isEqualAuthority, isEqual, removeTrailingPathSeparator } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { Severity, INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport '../../../../../../override/vs/platform/dialogs/common/dialogs.js';\nimport { mnemonicButtonLabel } from 'monaco-editor/esm/vs/base/common/labels.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nimport { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';\nimport { IWorkspaceTrustManagementService } from 'monaco-editor/esm/vs/platform/workspace/common/workspaceTrust.js';\nimport { IWorkbenchConfigurationService } from '../../configuration/common/configuration.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IFileDialogService, IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nlet AbstractWorkspaceEditingService = class AbstractWorkspaceEditingService {\n    constructor(jsonEditingService, contextService, configurationService, notificationService, commandService, fileService, textFileService, workspacesService, environmentService, fileDialogService, dialogService, hostService, uriIdentityService, workspaceTrustManagementService, userDataProfilesService, userDataProfileService) {\n        this.jsonEditingService = jsonEditingService;\n        this.contextService = contextService;\n        this.configurationService = configurationService;\n        this.notificationService = notificationService;\n        this.commandService = commandService;\n        this.fileService = fileService;\n        this.textFileService = textFileService;\n        this.workspacesService = workspacesService;\n        this.environmentService = environmentService;\n        this.fileDialogService = fileDialogService;\n        this.dialogService = dialogService;\n        this.hostService = hostService;\n        this.uriIdentityService = uriIdentityService;\n        this.workspaceTrustManagementService = workspaceTrustManagementService;\n        this.userDataProfilesService = userDataProfilesService;\n        this.userDataProfileService = userDataProfileService;\n    }\n    async pickNewWorkspacePath() {\n        const availableFileSystems = [Schemas.file];\n        if (this.environmentService.remoteAuthority) {\n            availableFileSystems.unshift(Schemas.vscodeRemote);\n        }\n        let workspacePath = await this.fileDialogService.showSaveDialog({\n            saveLabel: mnemonicButtonLabel(( localize('save', \"Save\"))),\n            title: ( localize('saveWorkspace', \"Save Workspace\")),\n            filters: WORKSPACE_FILTER,\n            defaultUri: joinPath(await this.fileDialogService.defaultWorkspacePath(), this.getNewWorkspaceName()),\n            availableFileSystems\n        });\n        if (!workspacePath) {\n            return;\n        }\n        if (!hasWorkspaceFileExtension(workspacePath)) {\n            workspacePath = workspacePath.with({ path: `${workspacePath.path}.${WORKSPACE_EXTENSION}` });\n        }\n        return workspacePath;\n    }\n    getNewWorkspaceName() {\n        const configPathURI = this.getCurrentWorkspaceIdentifier()?.configPath;\n        if (configPathURI && isSavedWorkspace(configPathURI, this.environmentService)) {\n            return basename(configPathURI);\n        }\n        const folder = firstOrDefault(this.contextService.getWorkspace().folders);\n        if (folder) {\n            return `${basename(folder.uri)}.${WORKSPACE_EXTENSION}`;\n        }\n        return `workspace.${WORKSPACE_EXTENSION}`;\n    }\n    async updateFolders(index, deleteCount, foldersToAddCandidates, donotNotifyError) {\n        const folders = this.contextService.getWorkspace().folders;\n        let foldersToDelete = [];\n        if (typeof deleteCount === 'number') {\n            foldersToDelete = ( folders.slice(index, index + deleteCount).map(folder => folder.uri));\n        }\n        let foldersToAdd = [];\n        if (Array.isArray(foldersToAddCandidates)) {\n            foldersToAdd = ( foldersToAddCandidates.map(\n                folderToAdd => ({ uri: removeTrailingPathSeparator(folderToAdd.uri), name: folderToAdd.name })\n            ));\n        }\n        const wantsToDelete = foldersToDelete.length > 0;\n        const wantsToAdd = foldersToAdd.length > 0;\n        if (!wantsToAdd && !wantsToDelete) {\n            return;\n        }\n        if (wantsToAdd && !wantsToDelete) {\n            return this.doAddFolders(foldersToAdd, index, donotNotifyError);\n        }\n        if (wantsToDelete && !wantsToAdd) {\n            return this.removeFolders(foldersToDelete);\n        }\n        else {\n            if (this.includesSingleFolderWorkspace(foldersToDelete)) {\n                return this.createAndEnterWorkspace(foldersToAdd);\n            }\n            if (this.contextService.getWorkbenchState() !== 3 ) {\n                return this.doAddFolders(foldersToAdd, index, donotNotifyError);\n            }\n            return this.doUpdateFolders(foldersToAdd, foldersToDelete, index, donotNotifyError);\n        }\n    }\n    async doUpdateFolders(foldersToAdd, foldersToDelete, index, donotNotifyError = false) {\n        try {\n            await this.contextService.updateFolders(foldersToAdd, foldersToDelete, index);\n        }\n        catch (error) {\n            if (donotNotifyError) {\n                throw error;\n            }\n            this.handleWorkspaceConfigurationEditingError(error);\n        }\n    }\n    addFolders(foldersToAddCandidates, donotNotifyError = false) {\n        const foldersToAdd = ( foldersToAddCandidates.map(\n            folderToAdd => ({ uri: removeTrailingPathSeparator(folderToAdd.uri), name: folderToAdd.name })\n        ));\n        return this.doAddFolders(foldersToAdd, undefined, donotNotifyError);\n    }\n    async doAddFolders(foldersToAdd, index, donotNotifyError = false) {\n        const state = this.contextService.getWorkbenchState();\n        const remoteAuthority = this.environmentService.remoteAuthority;\n        if (remoteAuthority) {\n            foldersToAdd = foldersToAdd.filter(folder => folder.uri.scheme !== Schemas.file && (folder.uri.scheme !== Schemas.vscodeRemote || isEqualAuthority(folder.uri.authority, remoteAuthority)));\n        }\n        if (state !== 3 ) {\n            let newWorkspaceFolders = ( this.contextService.getWorkspace().folders.map(folder => ({ uri: folder.uri })));\n            newWorkspaceFolders.splice(typeof index === 'number' ? index : newWorkspaceFolders.length, 0, ...foldersToAdd);\n            newWorkspaceFolders = distinct(newWorkspaceFolders, folder => this.uriIdentityService.extUri.getComparisonKey(folder.uri));\n            if (state === 1  && newWorkspaceFolders.length === 0 || state === 2  && newWorkspaceFolders.length === 1) {\n                return;\n            }\n            return this.createAndEnterWorkspace(newWorkspaceFolders);\n        }\n        try {\n            await this.contextService.addFolders(foldersToAdd, index);\n        }\n        catch (error) {\n            if (donotNotifyError) {\n                throw error;\n            }\n            this.handleWorkspaceConfigurationEditingError(error);\n        }\n    }\n    async removeFolders(foldersToRemove, donotNotifyError = false) {\n        if (this.includesSingleFolderWorkspace(foldersToRemove)) {\n            return this.createAndEnterWorkspace([]);\n        }\n        try {\n            await this.contextService.removeFolders(foldersToRemove);\n        }\n        catch (error) {\n            if (donotNotifyError) {\n                throw error;\n            }\n            this.handleWorkspaceConfigurationEditingError(error);\n        }\n    }\n    includesSingleFolderWorkspace(folders) {\n        if (this.contextService.getWorkbenchState() === 2 ) {\n            const workspaceFolder = this.contextService.getWorkspace().folders[0];\n            return ( folders.some(\n                folder => this.uriIdentityService.extUri.isEqual(folder, workspaceFolder.uri)\n            ));\n        }\n        return false;\n    }\n    async createAndEnterWorkspace(folders, path) {\n        if (path && !(await this.isValidTargetWorkspacePath(path))) {\n            return;\n        }\n        const remoteAuthority = this.environmentService.remoteAuthority;\n        const untitledWorkspace = await this.workspacesService.createUntitledWorkspace(folders, remoteAuthority);\n        if (path) {\n            try {\n                await this.saveWorkspaceAs(untitledWorkspace, path);\n            }\n            finally {\n                await this.workspacesService.deleteUntitledWorkspace(untitledWorkspace);\n            }\n        }\n        else {\n            path = untitledWorkspace.configPath;\n            if (!this.userDataProfileService.currentProfile.isDefault) {\n                await this.userDataProfilesService.setProfileForWorkspace(untitledWorkspace, this.userDataProfileService.currentProfile);\n            }\n        }\n        return this.enterWorkspace(path);\n    }\n    async saveAndEnterWorkspace(workspaceUri) {\n        const workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n        if (!workspaceIdentifier) {\n            return;\n        }\n        if (isEqual(workspaceIdentifier.configPath, workspaceUri)) {\n            return this.saveWorkspace(workspaceIdentifier);\n        }\n        if (!(await this.isValidTargetWorkspacePath(workspaceUri))) {\n            return;\n        }\n        await this.saveWorkspaceAs(workspaceIdentifier, workspaceUri);\n        return this.enterWorkspace(workspaceUri);\n    }\n    async isValidTargetWorkspacePath(workspaceUri) {\n        return true;\n    }\n    async saveWorkspaceAs(workspace, targetConfigPathURI) {\n        const configPathURI = workspace.configPath;\n        const isNotUntitledWorkspace = !isUntitledWorkspace(targetConfigPathURI, this.environmentService);\n        if (isNotUntitledWorkspace && !this.userDataProfileService.currentProfile.isDefault) {\n            const newWorkspace = await this.workspacesService.getWorkspaceIdentifier(targetConfigPathURI);\n            await this.userDataProfilesService.setProfileForWorkspace(newWorkspace, this.userDataProfileService.currentProfile);\n        }\n        if (this.uriIdentityService.extUri.isEqual(configPathURI, targetConfigPathURI)) {\n            return;\n        }\n        const isFromUntitledWorkspace = isUntitledWorkspace(configPathURI, this.environmentService);\n        const raw = await this.fileService.readFile(configPathURI);\n        const newRawWorkspaceContents = rewriteWorkspaceFileForNewLocation(( raw.value.toString()), configPathURI, isFromUntitledWorkspace, targetConfigPathURI, this.uriIdentityService.extUri);\n        await this.textFileService.create([{ resource: targetConfigPathURI, value: newRawWorkspaceContents, options: { overwrite: true } }]);\n        await this.trustWorkspaceConfiguration(targetConfigPathURI);\n    }\n    async saveWorkspace(workspace) {\n        const configPathURI = workspace.configPath;\n        const existingModel = this.textFileService.files.get(configPathURI);\n        if (existingModel) {\n            await existingModel.save({ force: true, reason: 1  });\n            return;\n        }\n        const workspaceFileExists = await this.fileService.exists(configPathURI);\n        if (workspaceFileExists) {\n            return;\n        }\n        const newWorkspace = { folders: [] };\n        const newRawWorkspaceContents = rewriteWorkspaceFileForNewLocation(JSON.stringify(newWorkspace, null, '\\t'), configPathURI, false, configPathURI, this.uriIdentityService.extUri);\n        await this.textFileService.create([{ resource: configPathURI, value: newRawWorkspaceContents }]);\n    }\n    handleWorkspaceConfigurationEditingError(error) {\n        switch (error.code) {\n            case 0 :\n                this.onInvalidWorkspaceConfigurationFileError();\n                break;\n            default:\n                this.notificationService.error(error.message);\n        }\n    }\n    onInvalidWorkspaceConfigurationFileError() {\n        const message = ( localize(\n            'errorInvalidTaskConfiguration',\n            \"Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again.\"\n        ));\n        this.askToOpenWorkspaceConfigurationFile(message);\n    }\n    askToOpenWorkspaceConfigurationFile(message) {\n        this.notificationService.prompt(Severity.Error, message, [{\n                label: ( localize('openWorkspaceConfigurationFile', \"Open Workspace Configuration\")),\n                run: () => this.commandService.executeCommand('workbench.action.openWorkspaceConfigFile')\n            }]);\n    }\n    async doEnterWorkspace(workspaceUri) {\n        if (!!this.environmentService.extensionTestsLocationURI) {\n            throw new Error('Entering a new workspace is not possible in tests.');\n        }\n        const workspace = await this.workspacesService.getWorkspaceIdentifier(workspaceUri);\n        if (this.contextService.getWorkbenchState() === 2 ) {\n            await this.migrateWorkspaceSettings(workspace);\n        }\n        await this.configurationService.initialize(workspace);\n        return this.workspacesService.enterWorkspace(workspaceUri);\n    }\n    migrateWorkspaceSettings(toWorkspace) {\n        return this.doCopyWorkspaceSettings(toWorkspace, setting => setting.scope === 3 );\n    }\n    copyWorkspaceSettings(toWorkspace) {\n        return this.doCopyWorkspaceSettings(toWorkspace);\n    }\n    doCopyWorkspaceSettings(toWorkspace, filter) {\n        const configurationProperties = ( Registry.as(Extensions.Configuration)).getConfigurationProperties();\n        const targetWorkspaceConfiguration = {};\n        for (const key of ( this.configurationService.keys()).workspace) {\n            if (configurationProperties[key]) {\n                if (filter && !filter(configurationProperties[key])) {\n                    continue;\n                }\n                targetWorkspaceConfiguration[key] = this.configurationService.inspect(key).workspaceValue;\n            }\n        }\n        return this.jsonEditingService.write(toWorkspace.configPath, [{ path: ['settings'], value: targetWorkspaceConfiguration }], true);\n    }\n    async trustWorkspaceConfiguration(configPathURI) {\n        if (this.contextService.getWorkbenchState() !== 1  && this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n            await this.workspaceTrustManagementService.setUrisTrust([configPathURI], true);\n        }\n    }\n    getCurrentWorkspaceIdentifier() {\n        const identifier = toWorkspaceIdentifier(this.contextService.getWorkspace());\n        if (isWorkspaceIdentifier(identifier)) {\n            return identifier;\n        }\n        return undefined;\n    }\n};\nAbstractWorkspaceEditingService = ( __decorate([\n    ( __param(0, IJSONEditingService)),\n    ( __param(1, IWorkspaceContextService)),\n    ( __param(2, IWorkbenchConfigurationService)),\n    ( __param(3, INotificationService)),\n    ( __param(4, ICommandService)),\n    ( __param(5, IFileService)),\n    ( __param(6, ITextFileService)),\n    ( __param(7, IWorkspacesService)),\n    ( __param(8, IWorkbenchEnvironmentService)),\n    ( __param(9, IFileDialogService)),\n    ( __param(10, IDialogService)),\n    ( __param(11, IHostService)),\n    ( __param(12, IUriIdentityService)),\n    ( __param(13, IWorkspaceTrustManagementService)),\n    ( __param(14, IUserDataProfilesService)),\n    ( __param(15, IUserDataProfileService))\n], AbstractWorkspaceEditingService));\nexport { AbstractWorkspaceEditingService };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as objects from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { ExtensionsRegistry } from '../../services/extensions/common/extensionsRegistry.js';\nimport { Extensions as Extensions$1, configurationDefaultsSchemaId, OVERRIDE_PROPERTY_REGEX, validateProperty } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { workspaceSettingsSchemaId, launchSchemaId, tasksSchemaId } from '../../services/configuration/common/configuration.js';\nimport { isObject } from 'monaco-editor/esm/vs/base/common/types.js';\nimport { ExtensionIdentifierMap } from 'monaco-editor/esm/vs/platform/extensions/common/extensions.js';\nconst jsonRegistry = ( Registry.as(Extensions.JSONContribution));\nconst configurationRegistry = ( Registry.as(Extensions$1.Configuration));\nconst configurationEntrySchema = {\n    type: 'object',\n    defaultSnippets: [{ body: { title: '', properties: {} } }],\n    properties: {\n        title: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.configuration.title',\n                'A title for the current category of settings. This label will be rendered in the Settings editor as a subheading. If the title is the same as the extension display name, then the category will be grouped under the main extension heading.'\n            )),\n            type: 'string'\n        },\n        order: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.configuration.order',\n                'When specified, gives the order of this category of settings relative to other categories.'\n            )),\n            type: 'integer'\n        },\n        properties: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.configuration.properties',\n                'Description of the configuration properties.'\n            )),\n            type: 'object',\n            propertyNames: {\n                pattern: '\\\\S+',\n                patternErrorMessage: ( nls.localize(\n                    'vscode.extension.contributes.configuration.property.empty',\n                    'Property should not be empty.'\n                )),\n            },\n            additionalProperties: {\n                anyOf: [\n                    {\n                        title: ( nls.localize(\n                            'vscode.extension.contributes.configuration.properties.schema',\n                            'Schema of the configuration property.'\n                        )),\n                        $ref: 'http://json-schema.org/draft-07/schema#'\n                    },\n                    {\n                        type: 'object',\n                        properties: {\n                            scope: {\n                                type: 'string',\n                                enum: ['application', 'machine', 'window', 'resource', 'language-overridable', 'machine-overridable'],\n                                default: 'window',\n                                enumDescriptions: [\n                                    ( nls.localize(\n                                        'scope.application.description',\n                                        \"Configuration that can be configured only in the user settings.\"\n                                    )),\n                                    ( nls.localize(\n                                        'scope.machine.description',\n                                        \"Configuration that can be configured only in the user settings or only in the remote settings.\"\n                                    )),\n                                    ( nls.localize(\n                                        'scope.window.description',\n                                        \"Configuration that can be configured in the user, remote or workspace settings.\"\n                                    )),\n                                    ( nls.localize(\n                                        'scope.resource.description',\n                                        \"Configuration that can be configured in the user, remote, workspace or folder settings.\"\n                                    )),\n                                    ( nls.localize(\n                                        'scope.language-overridable.description',\n                                        \"Resource configuration that can be configured in language specific settings.\"\n                                    )),\n                                    ( nls.localize(\n                                        'scope.machine-overridable.description',\n                                        \"Machine configuration that can be configured also in workspace or folder settings.\"\n                                    ))\n                                ],\n                                markdownDescription: ( nls.localize(\n                                    'scope.description',\n                                    \"Scope in which the configuration is applicable. Available scopes are `application`, `machine`, `window`, `resource`, and `machine-overridable`.\"\n                                ))\n                            },\n                            enumDescriptions: {\n                                type: 'array',\n                                items: {\n                                    type: 'string',\n                                },\n                                description: ( nls.localize('scope.enumDescriptions', 'Descriptions for enum values'))\n                            },\n                            markdownEnumDescriptions: {\n                                type: 'array',\n                                items: {\n                                    type: 'string',\n                                },\n                                description: ( nls.localize(\n                                    'scope.markdownEnumDescriptions',\n                                    'Descriptions for enum values in the markdown format.'\n                                ))\n                            },\n                            enumItemLabels: {\n                                type: 'array',\n                                items: {\n                                    type: 'string'\n                                },\n                                markdownDescription: ( nls.localize(\n                                    'scope.enumItemLabels',\n                                    'Labels for enum values to be displayed in the Settings editor. When specified, the {0} values still show after the labels, but less prominently.',\n                                    '`enum`'\n                                ))\n                            },\n                            markdownDescription: {\n                                type: 'string',\n                                description: ( nls.localize('scope.markdownDescription', 'The description in the markdown format.'))\n                            },\n                            deprecationMessage: {\n                                type: 'string',\n                                description: ( nls.localize(\n                                    'scope.deprecationMessage',\n                                    'If set, the property is marked as deprecated and the given message is shown as an explanation.'\n                                ))\n                            },\n                            markdownDeprecationMessage: {\n                                type: 'string',\n                                description: ( nls.localize(\n                                    'scope.markdownDeprecationMessage',\n                                    'If set, the property is marked as deprecated and the given message is shown as an explanation in the markdown format.'\n                                ))\n                            },\n                            editPresentation: {\n                                type: 'string',\n                                enum: ['singlelineText', 'multilineText'],\n                                enumDescriptions: [\n                                    ( nls.localize(\n                                        'scope.singlelineText.description',\n                                        'The value will be shown in an inputbox.'\n                                    )),\n                                    ( nls.localize(\n                                        'scope.multilineText.description',\n                                        'The value will be shown in a textarea.'\n                                    ))\n                                ],\n                                default: 'singlelineText',\n                                description: ( nls.localize(\n                                    'scope.editPresentation',\n                                    'When specified, controls the presentation format of the string setting.'\n                                ))\n                            },\n                            order: {\n                                type: 'integer',\n                                description: ( nls.localize(\n                                    'scope.order',\n                                    'When specified, gives the order of this setting relative to other settings within the same category. Settings with an order property will be placed before settings without this property set.'\n                                ))\n                            },\n                            ignoreSync: {\n                                type: 'boolean',\n                                description: ( nls.localize(\n                                    'scope.ignoreSync',\n                                    'When enabled, Settings Sync will not sync the user value of this configuration by default.'\n                                ))\n                            },\n                        }\n                    }\n                ]\n            }\n        }\n    }\n};\nlet _configDelta;\nconst defaultConfigurationExtPoint = ( ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'configurationDefaults',\n    jsonSchema: {\n        $ref: configurationDefaultsSchemaId,\n    }\n}));\ndefaultConfigurationExtPoint.setHandler((extensions, { added, removed }) => {\n    if (_configDelta) {\n        configurationRegistry.deltaConfiguration(_configDelta);\n    }\n    const configNow = _configDelta = {};\n    queueMicrotask(() => {\n        if (_configDelta === configNow) {\n            configurationRegistry.deltaConfiguration(_configDelta);\n            _configDelta = undefined;\n        }\n    });\n    if (removed.length) {\n        const removedDefaultConfigurations = ( removed.map(\n            extension => ({ overrides: objects.deepClone(extension.value), source: { id: extension.description.identifier.value, displayName: extension.description.displayName } })\n        ));\n        _configDelta.removedDefaults = removedDefaultConfigurations;\n    }\n    if (added.length) {\n        const registeredProperties = configurationRegistry.getConfigurationProperties();\n        const allowedScopes = [6 , 3 , 4 , 5 ];\n        const addedDefaultConfigurations = ( added.map(extension => {\n            const overrides = objects.deepClone(extension.value);\n            for (const key of ( Object.keys(overrides))) {\n                if (!OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    const registeredPropertyScheme = registeredProperties[key];\n                    if (registeredPropertyScheme?.scope && !allowedScopes.includes(registeredPropertyScheme.scope)) {\n                        extension.collector.warn(( nls.localize(\n                            'config.property.defaultConfiguration.warning',\n                            \"Cannot register configuration defaults for '{0}'. Only defaults for machine-overridable, window, resource and language overridable scoped settings are supported.\",\n                            key\n                        )));\n                        delete overrides[key];\n                    }\n                }\n            }\n            return { overrides, source: { id: extension.description.identifier.value, displayName: extension.description.displayName } };\n        }));\n        _configDelta.addedDefaults = addedDefaultConfigurations;\n    }\n});\nconst configurationExtPoint = ( ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'configuration',\n    deps: [defaultConfigurationExtPoint],\n    jsonSchema: {\n        description: ( nls.localize(\n            'vscode.extension.contributes.configuration',\n            'Contributes configuration settings.'\n        )),\n        oneOf: [\n            configurationEntrySchema,\n            {\n                type: 'array',\n                items: configurationEntrySchema\n            }\n        ]\n    }\n}));\nconst extensionConfigurations = ( new ExtensionIdentifierMap());\nconfigurationExtPoint.setHandler((extensions, { added, removed }) => {\n    _configDelta ??= {};\n    if (removed.length) {\n        const removedConfigurations = [];\n        for (const extension of removed) {\n            removedConfigurations.push(...(extensionConfigurations.get(extension.description.identifier) || []));\n            extensionConfigurations.delete(extension.description.identifier);\n        }\n        _configDelta.removedConfigurations = removedConfigurations;\n    }\n    const seenProperties = ( new Set());\n    function handleConfiguration(node, extension) {\n        const configurations = [];\n        const configuration = objects.deepClone(node);\n        if (configuration.title && (typeof configuration.title !== 'string')) {\n            extension.collector.error(( nls.localize('invalid.title', \"'configuration.title' must be a string\")));\n        }\n        validateProperties(configuration, extension);\n        configuration.id = node.id || extension.description.identifier.value;\n        configuration.extensionInfo = { id: extension.description.identifier.value, displayName: extension.description.displayName };\n        configuration.restrictedProperties = extension.description.capabilities?.untrustedWorkspaces?.supported === 'limited' ? extension.description.capabilities?.untrustedWorkspaces.restrictedConfigurations : undefined;\n        configuration.title = configuration.title || extension.description.displayName || extension.description.identifier.value;\n        configurations.push(configuration);\n        return configurations;\n    }\n    function validateProperties(configuration, extension) {\n        const properties = configuration.properties;\n        if (properties) {\n            if (typeof properties !== 'object') {\n                extension.collector.error(( nls.localize('invalid.properties', \"'configuration.properties' must be an object\")));\n                configuration.properties = {};\n            }\n            for (const key in properties) {\n                const propertyConfiguration = properties[key];\n                const message = validateProperty(key, propertyConfiguration);\n                if (message) {\n                    delete properties[key];\n                    extension.collector.warn(message);\n                    continue;\n                }\n                if (( seenProperties.has(key))) {\n                    delete properties[key];\n                    extension.collector.warn(( nls.localize(\n                        'config.property.duplicate',\n                        \"Cannot register '{0}'. This property is already registered.\",\n                        key\n                    )));\n                    continue;\n                }\n                if (!isObject(propertyConfiguration)) {\n                    delete properties[key];\n                    extension.collector.error(( nls.localize(\n                        'invalid.property',\n                        \"configuration.properties property '{0}' must be an object\",\n                        key\n                    )));\n                    continue;\n                }\n                seenProperties.add(key);\n                if (propertyConfiguration.scope) {\n                    if (( propertyConfiguration.scope.toString()) === 'application') {\n                        propertyConfiguration.scope = 1 ;\n                    }\n                    else if (( propertyConfiguration.scope.toString()) === 'machine') {\n                        propertyConfiguration.scope = 2 ;\n                    }\n                    else if (( propertyConfiguration.scope.toString()) === 'resource') {\n                        propertyConfiguration.scope = 4 ;\n                    }\n                    else if (( propertyConfiguration.scope.toString()) === 'machine-overridable') {\n                        propertyConfiguration.scope = 6 ;\n                    }\n                    else if (( propertyConfiguration.scope.toString()) === 'language-overridable') {\n                        propertyConfiguration.scope = 5 ;\n                    }\n                    else {\n                        propertyConfiguration.scope = 3 ;\n                    }\n                }\n                else {\n                    propertyConfiguration.scope = 3 ;\n                }\n            }\n        }\n        const subNodes = configuration.allOf;\n        if (subNodes) {\n            extension.collector.error(( nls.localize(\n                'invalid.allOf',\n                \"'configuration.allOf' is deprecated and should no longer be used. Instead, pass multiple configuration sections as an array to the 'configuration' contribution point.\"\n            )));\n            for (const node of subNodes) {\n                validateProperties(node, extension);\n            }\n        }\n    }\n    if (added.length) {\n        const addedConfigurations = [];\n        for (const extension of added) {\n            const configurations = [];\n            const value = extension.value;\n            if (Array.isArray(value)) {\n                value.forEach(v => configurations.push(...handleConfiguration(v, extension)));\n            }\n            else {\n                configurations.push(...handleConfiguration(value, extension));\n            }\n            extensionConfigurations.set(extension.description.identifier, configurations);\n            addedConfigurations.push(...configurations);\n        }\n        _configDelta.addedConfigurations = addedConfigurations;\n    }\n    configurationRegistry.deltaConfiguration(_configDelta);\n    _configDelta = undefined;\n});\njsonRegistry.registerSchema('vscode://schemas/workspaceConfig', {\n    allowComments: true,\n    allowTrailingCommas: true,\n    default: {\n        folders: [\n            {\n                path: ''\n            }\n        ],\n        settings: {}\n    },\n    required: ['folders'],\n    properties: {\n        'folders': {\n            minItems: 0,\n            uniqueItems: true,\n            description: ( nls.localize(\n                'workspaceConfig.folders.description',\n                \"List of folders to be loaded in the workspace.\"\n            )),\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { path: '$1' } }],\n                oneOf: [{\n                        properties: {\n                            path: {\n                                type: 'string',\n                                description: ( nls.localize(\n                                    'workspaceConfig.path.description',\n                                    \"A file path. e.g. `/root/folderA` or `./folderA` for a relative path that will be resolved against the location of the workspace file.\"\n                                ))\n                            },\n                            name: {\n                                type: 'string',\n                                description: ( nls.localize('workspaceConfig.name.description', \"An optional name for the folder. \"))\n                            }\n                        },\n                        required: ['path']\n                    }, {\n                        properties: {\n                            uri: {\n                                type: 'string',\n                                description: ( nls.localize('workspaceConfig.uri.description', \"URI of the folder\"))\n                            },\n                            name: {\n                                type: 'string',\n                                description: ( nls.localize('workspaceConfig.name.description', \"An optional name for the folder. \"))\n                            }\n                        },\n                        required: ['uri']\n                    }]\n            }\n        },\n        'settings': {\n            type: 'object',\n            default: {},\n            description: ( nls.localize('workspaceConfig.settings.description', \"Workspace settings\")),\n            $ref: workspaceSettingsSchemaId\n        },\n        'launch': {\n            type: 'object',\n            default: { configurations: [], compounds: [] },\n            description: ( nls.localize('workspaceConfig.launch.description', \"Workspace launch configurations\")),\n            $ref: launchSchemaId\n        },\n        'tasks': {\n            type: 'object',\n            default: { version: '2.0.0', tasks: [] },\n            description: ( nls.localize('workspaceConfig.tasks.description', \"Workspace task configurations\")),\n            $ref: tasksSchemaId\n        },\n        'extensions': {\n            type: 'object',\n            default: {},\n            description: ( nls.localize('workspaceConfig.extensions.description', \"Workspace extensions\")),\n            $ref: 'vscode://schemas/extensions'\n        },\n        'remoteAuthority': {\n            type: 'string',\n            doNotSuggest: true,\n            description: ( nls.localize(\n                'workspaceConfig.remoteAuthority',\n                \"The remote server where the workspace is located.\"\n            )),\n        },\n        'transient': {\n            type: 'boolean',\n            doNotSuggest: true,\n            description: ( nls.localize(\n                'workspaceConfig.transient',\n                \"A transient workspace will disappear when restarting or reloading.\"\n            )),\n        }\n    },\n    errorMessage: ( nls.localize('unknownWorkspaceProperty', \"Unknown workspace configuration property\"))\n});\n","import { __decorate, __param } from '../node_modules/tslib/tslib.es6.js';\nimport '../missing-services.js';\nimport { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';\nimport { WorkspaceService } from '../vscode/vs/workbench/services/configuration/browser/configurationService.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { ITextResourceConfigurationService } from 'monaco-editor/esm/vs/editor/common/services/textResourceConfiguration.js';\nimport { TextResourceConfigurationService } from '../vscode/vs/editor/common/services/textResourceConfigurationService.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nexport { ConfigurationScope } from '../vscode/vs/platform/configuration/common/configurationRegistry.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { VSBuffer } from 'monaco-editor/esm/vs/base/common/buffer.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nimport { IPolicyService } from 'monaco-editor/esm/vs/platform/policy/common/policy.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { IUserDataProfileService } from '../vscode/vs/workbench/services/userDataProfile/common/userDataProfile.js';\nimport { IRemoteAgentService } from '../vscode/vs/workbench/services/remote/common/remoteAgentService.js';\nimport { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';\nimport { ConfigurationCache } from '../vscode/vs/workbench/services/configuration/common/configurationCache.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nimport { IWorkbenchEnvironmentService } from '../vscode/vs/workbench/services/environment/common/environmentService.js';\nimport { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';\nimport { LabelService } from '../vscode/vs/workbench/services/label/common/labelService.js';\nimport { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';\nimport { generateUuid } from 'monaco-editor/esm/vs/base/common/uuid.js';\nimport { IWorkspacesService } from '../vscode/vs/platform/workspaces/common/workspaces.js';\nimport { BrowserWorkspacesService } from '../vscode/vs/workbench/services/workspaces/browser/workspacesService.js';\nimport { IWorkspaceEditingService } from '../vscode/vs/workbench/services/workspaces/common/workspaceEditing.js';\nimport { AbstractWorkspaceEditingService } from '../vscode/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport '../vscode/vs/workbench/api/common/configurationExtensionPoint.js';\nimport getServiceOverride$1 from './files.js';\nimport { memoizedConstructor, unsupported } from '../tools.js';\nimport { registerServiceInitializePreParticipant } from '../lifecycle.js';\nasync function updateUserConfiguration(configurationJson) {\n    const userDataProfilesService = StandaloneServices.get(IUserDataProfilesService);\n    await StandaloneServices.get(IFileService).writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(configurationJson));\n}\nasync function getUserConfiguration() {\n    const userDataProfilesService = StandaloneServices.get(IUserDataProfilesService);\n    return ( (await StandaloneServices.get(IFileService).readFile(userDataProfilesService.defaultProfile.settingsResource)).value.toString());\n}\nfunction onUserConfigurationChange(callback) {\n    const userDataProfilesService = StandaloneServices.get(IUserDataProfilesService);\n    return StandaloneServices.get(IFileService).onDidFilesChange(e => {\n        if (e.affects(userDataProfilesService.defaultProfile.settingsResource)) {\n            callback();\n        }\n    });\n}\nconst configurationRegistry = ( Registry.as(Extensions.Configuration));\nlet InjectedConfigurationService = class InjectedConfigurationService extends WorkspaceService {\n    constructor(workbenchEnvironmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService) {\n        const configurationCache = new ConfigurationCache([Schemas.file, Schemas.vscodeUserData, Schemas.tmp], workbenchEnvironmentService, fileService);\n        super({ configurationCache }, workbenchEnvironmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService);\n    }\n};\nInjectedConfigurationService = __decorate([\n    ( __param(0, IWorkbenchEnvironmentService)),\n    ( __param(1, IUserDataProfileService)),\n    ( __param(2, IUserDataProfilesService)),\n    ( __param(3, IFileService)),\n    ( __param(4, IRemoteAgentService)),\n    ( __param(5, IUriIdentityService)),\n    ( __param(6, ILogService)),\n    ( __param(7, IPolicyService))\n], InjectedConfigurationService);\nclass MonacoWorkspaceEditingService extends AbstractWorkspaceEditingService {\n    constructor() {\n        super(...arguments);\n        this.enterWorkspace = unsupported;\n    }\n}\nlet _defaultWorkspaceUri = URI.file('/workspace');\nregisterServiceInitializePreParticipant(async (accessor) => {\n    const workspaceService = accessor.get(IWorkspaceContextService);\n    workspaceService.acquireInstantiationService(accessor.get(IInstantiationService));\n    const configPath = _defaultWorkspaceUri.with({ path: '/workspace.code-workspace' });\n    try {\n        const fileService = accessor.get(IFileService);\n        await fileService.createFolder(_defaultWorkspaceUri);\n        await fileService.writeFile(configPath, VSBuffer.fromString(JSON.stringify({\n            folders: [\n                {\n                    path: _defaultWorkspaceUri.path\n                }\n            ]\n        })));\n    }\n    catch (err) {\n    }\n    await workspaceService.initialize({\n        id: generateUuid(),\n        configPath\n    });\n});\nconst MemoizedInjectedConfigurationService = memoizedConstructor(InjectedConfigurationService);\nfunction getServiceOverride(defaultWorkspaceUri) {\n    _defaultWorkspaceUri = defaultWorkspaceUri;\n    return {\n        ...getServiceOverride$1(),\n        [( ILabelService.toString())]: new SyncDescriptor(LabelService, undefined, true),\n        [( IConfigurationService.toString())]: new SyncDescriptor(MemoizedInjectedConfigurationService, [], true),\n        [( IWorkspaceContextService.toString())]: new SyncDescriptor(MemoizedInjectedConfigurationService, [], true),\n        [( ITextResourceConfigurationService.toString())]: new SyncDescriptor(TextResourceConfigurationService, [], true),\n        [( IWorkspaceEditingService.toString())]: new SyncDescriptor(MonacoWorkspaceEditingService, [], true),\n        [( IWorkspacesService.toString())]: new SyncDescriptor(BrowserWorkspacesService, undefined, true)\n    };\n}\nexport { configurationRegistry, getServiceOverride as default, getUserConfiguration, onUserConfigurationChange, updateUserConfiguration };\n","import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { refineServiceDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nconst FOLDER_CONFIG_FOLDER_NAME = '.vscode';\nconst FOLDER_SETTINGS_NAME = 'settings';\nconst FOLDER_SETTINGS_PATH = `${FOLDER_CONFIG_FOLDER_NAME}/${FOLDER_SETTINGS_NAME}.json`;\nconst defaultSettingsSchemaId = 'vscode://schemas/settings/default';\nconst userSettingsSchemaId = 'vscode://schemas/settings/user';\nconst profileSettingsSchemaId = 'vscode://schemas/settings/profile';\nconst machineSettingsSchemaId = 'vscode://schemas/settings/machine';\nconst workspaceSettingsSchemaId = 'vscode://schemas/settings/workspace';\nconst folderSettingsSchemaId = 'vscode://schemas/settings/folder';\nconst launchSchemaId = 'vscode://schemas/launch';\nconst tasksSchemaId = 'vscode://schemas/tasks';\nconst APPLICATION_SCOPES = [1 ];\nconst PROFILE_SCOPES = [2 , 3 , 4 , 5 , 6 ];\nconst LOCAL_MACHINE_PROFILE_SCOPES = [3 , 4 , 5 ];\nconst LOCAL_MACHINE_SCOPES = [1 , ...LOCAL_MACHINE_PROFILE_SCOPES];\nconst REMOTE_MACHINE_SCOPES = [2 , 3 , 4 , 5 , 6 ];\nconst WORKSPACE_SCOPES = [3 , 4 , 5 , 6 ];\nconst FOLDER_SCOPES = [4 , 5 , 6 ];\nconst TASKS_CONFIGURATION_KEY = 'tasks';\nconst LAUNCH_CONFIGURATION_KEY = 'launch';\nconst WORKSPACE_STANDALONE_CONFIGURATIONS = Object.create(null);\nWORKSPACE_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${TASKS_CONFIGURATION_KEY}.json`;\nWORKSPACE_STANDALONE_CONFIGURATIONS[LAUNCH_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${LAUNCH_CONFIGURATION_KEY}.json`;\nconst USER_STANDALONE_CONFIGURATIONS = Object.create(null);\nUSER_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${TASKS_CONFIGURATION_KEY}.json`;\nconst IWorkbenchConfigurationService = refineServiceDecorator(IConfigurationService);\nconst TASKS_DEFAULT = '{\\n\\t\\\"version\\\": \\\"2.0.0\\\",\\n\\t\\\"tasks\\\": []\\n}';\nconst APPLY_ALL_PROFILES_SETTING = 'workbench.settings.applyToAllProfiles';\nexport { APPLICATION_SCOPES, APPLY_ALL_PROFILES_SETTING, FOLDER_CONFIG_FOLDER_NAME, FOLDER_SCOPES, FOLDER_SETTINGS_NAME, FOLDER_SETTINGS_PATH, IWorkbenchConfigurationService, LAUNCH_CONFIGURATION_KEY, LOCAL_MACHINE_PROFILE_SCOPES, LOCAL_MACHINE_SCOPES, PROFILE_SCOPES, REMOTE_MACHINE_SCOPES, TASKS_CONFIGURATION_KEY, TASKS_DEFAULT, USER_STANDALONE_CONFIGURATIONS, WORKSPACE_SCOPES, WORKSPACE_STANDALONE_CONFIGURATIONS, defaultSettingsSchemaId, folderSettingsSchemaId, launchSchemaId, machineSettingsSchemaId, profileSettingsSchemaId, tasksSchemaId, userSettingsSchemaId, workspaceSettingsSchemaId };\n"],"names":["WorkspaceConfigurationModelParser","constructor","name","super","this","_folders","_transient","_settingsModelParser","_launchModel","_tasksModel","folders","transient","settingsModel","configurationModel","launchModel","tasksModel","reparseWorkspaceSettings","configurationParseOptions","reparse","getRestrictedWorkspaceSettings","restrictedConfigurations","doParseRaw","raw","parseRaw","createConfigurationModelFrom","key","data","contents","message","console","error","_name","scopedContents","Object","create","keys","map","k","StandaloneConfigurationModelParser","scope","overrides","Configuration","defaults","policy","application","localUser","remoteUser","workspaceConfiguration","memoryConfiguration","memoryConfigurationByResource","_workspace","getValue","inspect","compareAndDeleteFolderConfiguration","folder","length","uri","toString","compare","other","fromKeys","toKeys","overrideIdentifier","push","filter","indexOf","some","resource","allKeys","allOverrideIdentifiers","getAllKeysForOverrideIdentifier","ConfigurationEditingError","code","ConfigurationEditing","remoteSettingsResource","configurationService","contextService","userDataProfileService","userDataProfilesService","fileService","textModelResolverService","textFileService","notificationService","preferencesService","editorService","uriIdentityService","queue","writeConfiguration","target","value","options","operation","getConfigurationEditOperation","scopes","async","doWriteConfiguration","donotNotifyError","onError","validate","handleDirtyFile","reference","resolveModelReference","formattingOptions","getFormattingOptions","object","textEditorModel","updateConfiguration","dispose","model","hasParseErrors","toConfigurationEditingError","isDirty","save","revert","edit","getEdits","applyEditsToBuffer","ignoreErrorHandler","fileOperationResult","nls","stringifyTarget","startPosition","getPositionAt","offset","endPosition","range","lineNumber","column","currentText","getValueInRange","content","editOperation","replace","insert","pushEditOperations","jsonPath","modelContent","JSON","stringify","insertSpaces","tabSize","repeat","getOptions","eol","getEOL","onInvalidConfigurationError","onConfigurationFileDirtyError","openStandAloneConfigurationActionLabel","workspaceStandAloneConfigurationKey","prompt","Error","label","run","openFile","openSettings","jsonEditor","openUserSettings","openRemoteSettings","openWorkspaceSettings","workspaceFolder","getWorkspaceFolder","openFolderSettings","folderUri","openEditor","pinned","toErrorMessage","workspaceFolderName","defaultResourceValue","basename","extUri","substr","extname","exists","write","encoding","createModelReference","parseErrors","json","allowTrailingComma","allowEmptyContent","checkDirty","undefined","policyValue","configurationProperties","as","getConfigurationProperties","configurationScope","default","test","getWorkbenchState","includes","overrideIdentifiers","config","standaloneConfigurationMap","standaloneConfigurationKeys","getConfigurationFileResource","isWorkspaceConfigurationResource","keyPrefix","workspace","getWorkspace","configuration","fsPath","relativePath","currentProfile","tasksResource","isDefault","isSettingAppliedForAllProfiles","defaultProfile","settingsResource","workbenchState","toResource","DefaultConfiguration","DEFAULT_OVERRIDES_CACHE_EXISTS_KEY","configurationCache","environmentService","configurationRegistry","cachedConfigurationDefaultsOverrides","cacheKey","type","updateCache","configurationDefaults","registerDefaultConfigurations","getConfigurationDefaultOverrides","initialize","initializeCachedConfigurationDefaultsOverrides","reload","updateCachedConfigurationDefaultsOverrides","hasCachedConfigurationDefaultsOverrides","initiaizeCachedConfigurationDefaultsOverridesPromise","window","localStorage","getItem","read","parse","onDidUpdateConfiguration","properties","defaultsOverrides","configurationDefaultsOverrides","getConfigurationDefaultsOverrides","setItem","removeItem","remove","ApplicationConfiguration","_onDidChangeConfiguration","_register","onDidChangeConfiguration","event","onDidChange","reloadConfigurationScheduler","schedule","loadConfiguration","then","fire","allProfilesSettings","Array","isArray","parseOptions","include","UserConfiguration","hasTasksLoaded","userConfiguration","FileServiceBasedConfiguration","logService","userConfigurationChangeDisposable","reset","dirname","standAloneConfigurationResources","fileServiceBasedConfiguration","getRestrictedSettings","_onDidChange","allResources","watch","_folderSettingsModelParser","_folderSettingsParseOptions","_standAloneConfigurations","_cache","debounce","any","onDidFilesChange","e","handleFileChangesEvent","onDidRunOperation","handleFileOperationEvent","resolveContents","resources","Promise","all","readFile","trace","errors","settingsContent","standAloneConfigurationContents","index","standAloneConfigurationModelParser","consolidate","oldContents","merge","contains","isOperation","isEqual","RemoteUserConfiguration","remoteAuthority","remoteAgentService","_userConfigurationInitializationPromise","_onDidInitialize","onDidInitialize","_fileService","_userConfiguration","_cachedConfiguration","CachedRemoteUserConfiguration","getEnvironment","environment","FileServiceBasedRemoteUserConfiguration","settingsPath","onDidUserConfigurationChange","resolveContent","configurationResource","fileWatcherDisposable","None","directoryWatcherDisposable","parser","stopWatchingResource","stopWatchingDirectory","watchResource","watchDirectory","directory","onResourceExists","affectedByChanges","getConfigurationModel","parsed","WorkspaceConfiguration","initialized","_initialized","_workspaceConfigurationDisposables","_workspaceIdentifier","_isWorkspaceTrusted","_onDidUpdateConfiguration","_workspaceConfiguration","CachedWorkspaceConfiguration","workspaceIdentifier","workspaceTrusted","needsCaching","configPath","waitAndInitialize","doInitialize","FileServiceBasedWorkspaceConfiguration","load","skipRestricted","isUntrusted","getFolders","setFolders","jsonEditingService","path","resolve","isTransient","getConfiguration","getWorkspaceSettings","updateWorkspaceTrust","trusted","fileServiceBasedWorkspaceConfiguration","onDidWorkspaceConfigurationChange","clear","add","fromCache","updateWorkspace","workspaceConfigurationModelParser","workspaceSettings","workspaceConfigWatcher","watchWorkspaceConfigurationFile","id","getKey","CachedFolderConfiguration","configFolderRelativePath","hash","configurationContents","forEach","getUnsupportedKeys","FolderConfiguration","useCache","configurationFolder","joinPath","cachedFolderConfiguration","folderConfiguration","createFileServiceBasedConfiguration","onDidFolderConfigurationChange","getLocalUserConfigurationScopes","userDataProfile","hasRemote","Workspace","arguments","WorkspaceService","restrictedSettings","_restrictedSettings","policyService","applicationConfiguration","remoteUserConfiguration","_onWillChangeWorkspaceFolders","onWillChangeWorkspaceFolders","_onDidChangeWorkspaceFolders","onDidChangeWorkspaceFolders","_onDidChangeWorkspaceName","onDidChangeWorkspaceName","_onDidChangeWorkbenchState","onDidChangeWorkbenchState","isWorkspaceTrusted","_onDidChangeRestrictedSettings","onDidChangeRestrictedSettings","initRemoteUserConfigurationBarrier","completeWorkspaceBarrier","defaultConfiguration","policyConfiguration","_configuration","applicationConfigurationDisposables","createApplicationConfiguration","localUserConfiguration","cachedFolderConfigs","onLocalUserConfigurationChanged","remoteUserConfigurationModel","onRemoteUserConfigurationChanged","open","onWorkspaceConfigurationChanged","checkAndMarkWorkspaceComplete","onDefaultConfigurationChanged","onPolicyConfigurationChanged","onDidChangeCurrentProfile","onUserDataProfileChanged","workspaceEditingQueue","useDefaultFlags","settings","onApplicationConfigurationChanged","getCompleteWorkspace","wait","getFolder","addFolders","foldersToAdd","updateFolders","removeFolders","foldersToRemove","doUpdateFolders","isInsideWorkspace","isCurrentWorkspace","workspaceIdOrFolder","isUri","foldersHaveChanged","currentWorkspaceFolders","newStoredFolders","f","workspaceConfigPath","workspaceConfigFolder","currentWorkspaceFolderUris","storedFoldersToAdd","folderToAdd","folderURI","stat","isDirectory","slice","splice","instantiationService","invokeFunction","accessor","get","toCheck","getConfigurationData","toData","arg1","arg2","section","updateValue","arg3","arg4","targets","deriveConfigurationTargets","defaultValue","settled","writeConfigurationValue","reloadConfiguration","reloadDefaultConfiguration","reloadApplicationConfiguration","local","remote","reloadUserConfiguration","reloadWorkspaceConfiguration","reloadWorkspaceFolderConfiguration","reloadLocalUserConfiguration","reloadRemoteUserConfiguration","whenRemoteConfigurationLoaded","arg","trigger","createWorkspace","updateWorkspaceAndInitializeConfiguration","folderConfigurationModels","updateFolderConfiguration","updateWorkspaceConfiguration","updateRestrictedSettings","userLocal","userRemote","triggerConfigurationChange","acquireInstantiationService","createMultiFolderWorkspace","createSingleFolderWorkspace","createEmptyWorkspace","workspaceFolders","workspaceId","ignorePathCasing","singleFolderWorkspaceIdentifier","emptyWorkspaceIdentifier","isOpen","validateWorkspaceFoldersAndReload","hasWorkspaceBefore","previousState","previousWorkspacePath","previousFolders","update","initializeConfiguration","newState","newWorkspacePath","folderChanges","compareFolders","added","removed","changed","handleWillChangeWorkspaceFolders","currentFolders","newFolders","result","newFolder","currentFolder","currentIndex","newIndex","initPolicyConfigurationPromise","initApplicationConfigurationPromise","applicationConfigurationModel","exclude","initUserConfiguration","donotTrigger","onWorkspaceFolderConfigurationChanged","userConfigurationModel","folderConfigurations","loadFolderConfigurations","getWorkspaceConfigurationModel","set","currentConfiguration","change","join","promises","profile","previous","previousData","compareAndUpdateDefaultConfiguration","updateApplicationConfiguration","updateLocalUserConfiguration","updateRemoteUserConfiguration","compareAndUpdatePolicyConfiguration","previousAllProfilesSettings","compareAndUpdateApplicationConfiguration","currentAllProfilesSettings","changedKeys","changedKey","previousAllProfileSetting","currentAllProfileSetting","compareAndUpdateLocalUserConfiguration","compareAndUpdateRemoteUserConfiguration","toValidWorkspaceFolders","allProperties","defaultRestrictedSettings","restricted","sort","a","b","localeCompare","defaultDelta","applicationDelta","userLocalDelta","userRemoteDelta","workspaceFolderMap","cachedFolderConfig","folderRestrictedSettings","workspaceFolderDelta","workspaceDelta","size","compareAndUpdateWorkspaceConfiguration","changes","onFoldersChanged","joiners","updateWorkspaceTrustStatePromise","folderConfigurationChange","compareAndUpdateFolderConfiguration","workspaceConfigurationChange","delete","toInitialize","has","validWorkspaceFolders","warn","editableConfigurationTarget","toEditableConfigurationTarget","configurationEditing","createInstance","definedTargets","workspaceFolderValue","workspaceValue","userRemoteValue","userLocalValue","debug","configurationChangeEvent","source","sourceConfig","getTargetConfiguration","RegisterConfigurationSchemasContribution","workspaceContextService","workspaceTrustManagementService","extensionService","lifecycleService","whenInstalledExtensionsRegistered","registerConfigurationSchemas","delayer","onDidSchemaChange","onDidChangeTrust","phase","allSettingsSchema","patternProperties","additionalProperties","allowTrailingCommas","allowComments","userSettingsSchema","assign","profileSettingsSchema","machineSettingsSchema","workspaceSettingsSchema","checkAndFilterPropertiesRequiringTrust","defaultSettingsSchema","reduce","deprecationMessage","folderSettingsSchema","configDefaultsSchema","description","$ref","registerSchemas","schemas","jsonRegistry","JSONContribution","registerSchema","entries","UpdateExperimentalSettingsDefaults","workbenchAssignmentService","processedExperimentalSettings","Set","processExperimentalSettings","property","schema","tags","getTreatment","workbenchContributionsRegistry","Workbench","registerWorkbenchContribution","registerConfiguration","uniqueItems","TextResourceConfigurationService","modelService","languageService","toResourceConfigurationChangeEvent","_getValue","isIPosition","configurationTarget","language","getLanguage","configurationValue","deriveConfigurationTarget","_updateValue","memory","override","overriddenValue","position","getModel","getLanguageIdAtPosition","getLanguageId","guessLanguageIdByFilepathOrFirstLine","affectedKeys","affectsConfiguration","ConfigurationScope","ConfigurationCache","donotCacheResourcesWithSchemes","cachedConfigurations","Map","cacheHome","scheme","getCachedConfiguration","cachedConfiguration","CachedConfiguration","cachedConfigurationFolderResource","cachedConfigurationFileResource","createCachedFolder","writeFile","fromString","del","recursive","useTrash","createFolder","resourceLabelFormattersExtPoint","registerExtensionPoint","extensionPoint","jsonSchema","items","required","authority","formatting","separator","stripPathStartingSeparator","tildify","workspaceSuffix","sepRegexp","labelMatchingRegexp","ResourceLabelFormattersHandler","labelService","formattersDisposables","setHandler","extensions","delta","untrustedFormatter","formatter","workspaceTooltip","registerFormatter","LabelService","pathService","storageService","_onDidChangeFormatters","leakWarningThreshold","onDidChangeFormatters","os","OS","userHome","defaultUriScheme","file","preferLocal","memento","storedFormattersMemento","storedFormatters","getMemento","formatters","resolveRemoteEnvironment","env","findFormatting","bestResult","priority","toLowerCase","getUriLabel","doGetUriLabel","relative","noPrefix","firstFolder","startsWith","sep","with","folderLabel","formatUri","relativeLabel","overlap","substring","rootName","getUriBasenameLabel","pathLib","getWorkspaceLabel","identifier","doGetSingleFolderWorkspaceLabel","doGetWorkspaceLabel","workspaceUri","filename","endsWith","verbose","appendWorkspaceSuffix","getSeparator","from","getHostLabel","getHostTooltip","registerCachedFormatter","list","findIndex","FORMATTER_CACHE_SIZE","unshift","i","saveMemento","forceNoTildify","match","token","qsToken","qsValue","query","normalizeDriveLetter","hasDriveLetterIgnorePlatform","charAt","toUpperCase","authorityPrefix","suffix","getWorkspaceId","BrowserWorkspacesService","RECENTLY_OPENED_KEY","_onRecentlyOpenedChange","onDidChangeRecentlyOpened","addWorkspaceToRecentlyOpened","registerListeners","onDidChangeValue","onDidChangeStorage","addRecentlyOpened","getRecentlyOpened","recentlyOpenedRaw","recentlyOpened","workspaces","recent","files","recents","doRemoveRecentlyOpened","fileUri","saveRecentlyOpened","removeRecentlyOpened","paths","store","clearRecentlyOpened","enterWorkspace","getWorkspaceIdentifier","createUntitledWorkspace","randomId","Date","now","Math","round","random","newUntitledWorkspacePath","untitledWorkspacesHome","storedWorkspaceFolder","storedWorkspace","deleteUntitledWorkspace","getDirtyWorkspaces","AbstractWorkspaceEditingService","commandService","workspacesService","fileDialogService","dialogService","hostService","pickNewWorkspacePath","availableFileSystems","vscodeRemote","workspacePath","showSaveDialog","saveLabel","title","filters","defaultUri","defaultWorkspacePath","getNewWorkspaceName","configPathURI","getCurrentWorkspaceIdentifier","deleteCount","foldersToAddCandidates","foldersToDelete","wantsToDelete","wantsToAdd","doAddFolders","includesSingleFolderWorkspace","createAndEnterWorkspace","handleWorkspaceConfigurationEditingError","state","newWorkspaceFolders","getComparisonKey","isValidTargetWorkspacePath","untitledWorkspace","saveWorkspaceAs","setProfileForWorkspace","saveAndEnterWorkspace","saveWorkspace","targetConfigPathURI","newWorkspace","isFromUntitledWorkspace","newRawWorkspaceContents","overwrite","trustWorkspaceConfiguration","existingModel","force","reason","onInvalidWorkspaceConfigurationFileError","askToOpenWorkspaceConfigurationFile","executeCommand","doEnterWorkspace","extensionTestsLocationURI","migrateWorkspaceSettings","toWorkspace","doCopyWorkspaceSettings","setting","copyWorkspaceSettings","targetWorkspaceConfiguration","setUrisTrust","configurationEntrySchema","defaultSnippets","body","order","propertyNames","pattern","patternErrorMessage","anyOf","enum","enumDescriptions","markdownDescription","markdownEnumDescriptions","enumItemLabels","markdownDeprecationMessage","editPresentation","ignoreSync","_configDelta","defaultConfigurationExtPoint","deltaConfiguration","configNow","queueMicrotask","removedDefaultConfigurations","extension","objects","displayName","removedDefaults","registeredProperties","allowedScopes","addedDefaultConfigurations","registeredPropertyScheme","collector","addedDefaults","configurationExtPoint","deps","oneOf","extensionConfigurations","removedConfigurations","seenProperties","handleConfiguration","node","configurations","validateProperties","extensionInfo","restrictedProperties","capabilities","untrustedWorkspaces","supported","propertyConfiguration","subNodes","allOf","addedConfigurations","v","minItems","compounds","version","tasks","doNotSuggest","errorMessage","updateUserConfiguration","configurationJson","getUserConfiguration","onUserConfigurationChange","callback","affects","InjectedConfigurationService","workbenchEnvironmentService","vscodeUserData","tmp","MonacoWorkspaceEditingService","_defaultWorkspaceUri","workspaceService","err","MemoizedInjectedConfigurationService","getServiceOverride","defaultWorkspaceUri","FOLDER_CONFIG_FOLDER_NAME","FOLDER_SETTINGS_NAME","FOLDER_SETTINGS_PATH","defaultSettingsSchemaId","userSettingsSchemaId","profileSettingsSchemaId","machineSettingsSchemaId","workspaceSettingsSchemaId","folderSettingsSchemaId","launchSchemaId","tasksSchemaId","APPLICATION_SCOPES","PROFILE_SCOPES","LOCAL_MACHINE_PROFILE_SCOPES","LOCAL_MACHINE_SCOPES","REMOTE_MACHINE_SCOPES","WORKSPACE_SCOPES","FOLDER_SCOPES","TASKS_CONFIGURATION_KEY","LAUNCH_CONFIGURATION_KEY","WORKSPACE_STANDALONE_CONFIGURATIONS","USER_STANDALONE_CONFIGURATIONS","IWorkbenchConfigurationService","TASKS_DEFAULT","APPLY_ALL_PROFILES_SETTING"],"sourceRoot":""}