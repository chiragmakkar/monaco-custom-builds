{"version":3,"file":"95.bundle.js","mappings":"0VAEA,MAAMA,EACF,qBAAOC,CAAeC,GAClBA,EAAQA,EAAMC,cAAcC,OAC5B,IAIIC,EAkCAC,EAtCAC,GAAO,EACPC,GAAQ,EACRC,GAAM,EACNC,GAAO,EAEX,GACIL,GAAkB,EACd,eAAeM,KAAKT,KACpBK,GAAO,EACPL,EAAQA,EAAMU,OAAO,GACrBP,GAAkB,GAElB,gBAAgBM,KAAKT,KACrBM,GAAQ,EACRN,EAAQA,EAAMU,OAAO,GACrBP,GAAkB,GAElB,cAAcM,KAAKT,KACnBO,GAAM,EACNP,EAAQA,EAAMU,OAAO,GACrBP,GAAkB,GAElB,eAAeM,KAAKT,KACpBQ,GAAO,EACPR,EAAQA,EAAMU,OAAO,GACrBP,GAAkB,GAElB,cAAcM,KAAKT,KACnBQ,GAAO,EACPR,EAAQA,EAAMU,OAAO,GACrBP,GAAkB,GAElB,cAAcM,KAAKT,KACnBQ,GAAO,EACPR,EAAQA,EAAMU,OAAO,GACrBP,GAAkB,SAEjBA,GAET,MAAMQ,EAAgBX,EAAMY,QAAQ,KASpC,OARID,EAAgB,GAChBP,EAAMJ,EAAMa,UAAU,EAAGF,GACzBX,EAAQA,EAAMa,UAAUF,KAGxBP,EAAMJ,EACNA,EAAQ,IAEL,CACHc,QAASd,EACTK,OACAC,QACAC,MACAC,OACAJ,MAER,CACA,iBAAOW,CAAWf,GACd,MAAMgB,EAAOC,KAAKlB,eAAeC,GAC3BkB,EAAgBF,EAAKZ,IAAIe,MAAM,kBACrC,GAAID,EAAe,CACf,MAAME,EAAcF,EAAc,GAC5BG,EAAW,KAAcC,gBAAgBF,GAC/C,MAAO,CAAC,IAAM,KAAcJ,EAAKX,KAAMW,EAAKV,MAAOU,EAAKT,IAAKS,EAAKR,KAAMa,GAAYL,EAAKF,QAC7F,CACA,MAAMS,EAAU,KAAaC,iBAAiBR,EAAKZ,KACnD,MAAO,CAAC,IAAM,KAAaY,EAAKX,KAAMW,EAAKV,MAAOU,EAAKT,IAAKS,EAAKR,KAAMe,GAAWP,EAAKF,QAC3F,CACA,sBAAOW,CAAgBzB,GACnB,IAAKA,EACD,OAAO,KAEX,MAAM0B,EAAS,GACf,IAAIC,EACJ,KAAO3B,EAAM4B,OAAS,IACjBD,EAAO3B,GAASiB,KAAKF,WAAWf,GACjC0B,EAAOG,KAAKF,GAEhB,OAAQD,EAAOE,OAAS,EAAI,IAAM,KAAWF,GAAW,IAC5D,E,8PC1EJ,MAAMI,EAAW,CACb,CACI1B,IAAK,iBACL2B,GAAI,KAAOC,eACXC,aAAe,QAAS,uBAAwB,uBAChDC,kBAAkB,GAEtB,CACI9B,IAAK,WACL2B,GAAI,KAAOI,gBACXF,aAAe,QAAS,iBAAkB,8BAC1CC,kBAAkB,GAEtB,CACI9B,IAAK,eACL2B,GAAI,KAAOK,YACXH,aAAe,QAAS,oBAAqB,0BAEjD,CACI7B,IAAK,mBACL2B,GAAI,KAAOM,eACXJ,aAAe,QAAS,uBAAwB,6CAEpD,CACI7B,IAAK,iBACL2B,GAAI,KAAOO,cACXL,aAAe,QAAS,sBAAuB,4BAEnD,CACI7B,IAAK,sBACL2B,GAAI,KAAOQ,kBACXN,aAAe,QACX,4BACA,iDAGR,CACI7B,IAAK,uBACL2B,GAAI,KAAOS,mBACXP,aAAe,QAAS,2BAA4B,8CACpDQ,SAAU,oBAEd,CACIrC,IAAK,mBACL2B,GAAI,KAAOW,gBACXT,aAAe,QAAS,wBAAyB,mCAErD,CACI7B,IAAK,yBACL2B,GAAI,KAAOY,qBACXV,aAAe,QACX,6BACA,qDAEJQ,SAAU,oBAEd,CACIrC,IAAK,uBACL2B,GAAI,KAAOa,mBACXX,aAAe,QAAS,yBAA0B,iCAEtD,CACI7B,IAAK,6BACL2B,GAAI,KAAOc,wBACXZ,aAAe,QACX,gCACA,wDAEJQ,SAAU,oBAEd,CACIrC,IAAK,0BACL2B,GAAI,KAAOe,sBACXb,aAAe,QAAS,8BAA+B,0CAE3D,CACI7B,IAAK,0BACL2B,GAAI,KAAOgB,sBACXd,aAAe,QAAS,8BAA+B,0CAE3D,CACI7B,IAAK,gBACL2B,GAAI,KAAOiB,aACXf,aAAe,QAAS,qBAAsB,2BAElD,CACI7B,IAAK,eACL2B,GAAI,KAAOkB,gBACXhB,aAAe,QAAS,aAAc,8CACtCQ,SAAU,qBACVP,kBAAkB,GAEtB,CACI9B,IAAK,oBACL2B,GAAI,KAAOmB,YACXjB,aAAe,QAAS,YAAa,iDAEzC,CACI7B,IAAK,YACL2B,GAAI,KAAOoB,SACXlB,aAAe,QAAS,iBAAkB,kCAE9C,CACI7B,IAAK,oBACL2B,GAAI,KAAOqB,iBACXnB,aAAe,QAAS,yBAA0B,4BAEtD,CACI7B,IAAK,4BACL2B,GAAI,KAAOsB,mBACXpB,aAAe,QACX,6BACA,mDAGR,CACI7B,IAAK,6BACL2B,GAAI,KAAOuB,yBACXrB,aAAe,QACX,8BACA,oDAGR,CACI7B,IAAK,4BACL2B,GAAI,KAAOwB,wBACXtB,aAAe,QACX,6BACA,mDAGR,CACI7B,IAAK,mBACL2B,GAAI,KAAOyB,iBACXvB,aAAe,QAAS,oBAAqB,0CAEjD,CACI7B,IAAK,4BACL2B,GAAI,KAAO0B,6BACXxB,aAAe,QACX,iCACA,+CAEJC,kBAAkB,GAEtB,CACI9B,IAAK,aACL2B,GAAI,KAAO2B,UACXzB,aAAe,QAAS,iBAAkB,oCAE9C,CACI7B,IAAK,oBACL2B,GAAI,KAAO4B,gBACX1B,aAAe,QAAS,mBAAoB,2CAEhD,CACI7B,IAAK,iCACL2B,GAAI,KAAO6B,qBACX3B,aAAe,QAAS,8BAA+B,0CACvDQ,SAAU,mCAEd,CACIrC,IAAK,+BACL2B,GAAI,KAAO8B,mBACX5B,aAAe,QAAS,sBAAuB,8CAEnD,CACI7B,IAAK,iCACL2B,GAAI,KAAO+B,qBACX7B,aAAe,QACX,wBACA,6FAEJC,kBAAkB,GAEtB,CACI9B,IAAK,2CACL2B,GAAI,KAAOgC,+BACX9B,aAAe,QACX,wBACA,6FAEJC,kBAAkB,EAClBO,SAAU,sCAEd,CACIrC,IAAK,uCACL2B,GAAI,KAAOiC,0BACX/B,aAAe,QACX,6BACA,gIAEJQ,SAAU,6BAEd,CACIrC,IAAK,yBACL2B,GAAI,KAAOkC,aACXhC,aAAe,QAAS,gBAAiB,uCAE7C,CACI7B,IAAK,2BACL2B,GAAI,KAAOmC,eACXjC,aAAe,QACX,kBACA,sFAEJC,kBAAkB,GAEtB,CACI9B,IAAK,yCACL2B,GAAI,KAAOoC,4BACXlC,aAAe,QACX,yBACA,wIAEJQ,SAAU,6BAEd,CACIrC,IAAK,mBACL2B,GAAI,KAAOqC,gBACXnC,aAAe,QAAS,mBAAoB,0CAEhD,CACI7B,IAAK,wBACL2B,GAAI,KAAOsC,qBACXpC,aAAe,QAAS,wBAAyB,gDACjDQ,SAAU,wBAEd,CACIrC,IAAK,sBACL2B,GAAI,KAAOuC,kBACXrC,aAAe,QAAS,sBAAuB,6CAEnD,CACI7B,IAAK,wBACL2B,GAAI,KAAOwC,oBACXtC,aAAe,QAAS,wBAAyB,iDAErD,CACI7B,IAAK,sBACL2B,GAAI,KAAOyC,mBACXvC,aAAe,QAAS,sBAAuB,6CAEnD,CACI7B,IAAK,yBACL2B,GAAI,KAAO0C,qBACXxC,aAAe,QAAS,yBAA0B,gDAEtD,CACI7B,IAAK,uBACL2B,GAAI,KAAO2C,SACXzC,aAAe,QAAS,uBAAwB,mCAEpD,CACI7B,IAAK,sBACL2B,GAAI,KAAO4C,eACX1C,aAAe,QACX,4BACA,qDAGR,CACI7B,IAAK,oBACL2B,GAAI,KAAO6C,iBACX3C,aAAe,QAAS,yBAA0B,+BAEtD,CACI7B,IAAK,iBACL2B,GAAI,KAAO8C,cACX5C,aAAe,QAAS,qBAAsB,iCAElD,CACI7B,IAAK,wBACL2B,GAAI,KAAO+C,oBACX7C,aAAe,QAAS,uBAAwB,wCAEpD,CACI7B,IAAK,qBACL2B,GAAI,KAAOgD,cACX9C,aAAe,QAAS,qBAAsB,qCAElD,CACI7B,IAAK,2BACL2B,GAAI,KAAOiD,mBACX/C,aAAe,QAAS,0BAA2B,2CAEvD,CACI7B,IAAK,yBACL2B,GAAI,KAAOkD,iBACXhD,aAAe,QAAS,wBAAyB,yCAErD,CACI7B,IAAK,eACL2B,GAAI,KAAOmD,QACXjD,aAAe,QACX,eACA,sEAEJC,kBAAkB,GAEtB,CACI9B,IAAK,kBACL2B,GAAI,KAAOoD,eACXlD,aAAe,QAAS,kBAAmB,6BAE/C,CACI7B,IAAK,aACL2B,GAAI,KAAOqD,aACXnD,aAAe,QAAS,cAAe,mDACvCQ,SAAU,oBAEd,CACIrC,IAAK,mCACL2B,GAAI,KAAOsD,yBACXpD,aAAe,QACX,4BACA,2DAEJC,kBAAkB,EAClBO,SAAU,8BAEd,CACIrC,IAAK,iBACL2B,GAAI,KAAOuD,cACXrD,aAAe,QAAS,gBAAiB,2DACzCQ,SAAU,4BAEd,CACIrC,IAAK,4BACL2B,GAAI,KAAOwD,wBACXtD,aAAe,QACX,0BACA,oDAGR,CACI7B,IAAK,2BACL2B,GAAI,KAAOyD,wBACXvD,aAAe,QAAS,0BAA2B,0CACnDQ,SAAU,4BAGlB,IAAIgD,GACF,SAAUA,GACR,SAASC,EAAWC,GAChB,MAA+B,iBAAjBA,EAAKC,OACvB,CAEA,SAASC,EAAgBF,EAAMG,GAC3B,MAA4B,iBAAjBH,EAAKC,SACZE,EAAUC,OAAQ,QACd,gBACA,2DACA,aAEG,GAEPJ,EAAKpF,KAA2B,iBAAboF,EAAKpF,KACxBuF,EAAUC,OAAQ,QACd,YACA,4DACA,SAEG,GAEPJ,EAAKK,MAA6B,iBAAdL,EAAKK,MACzBF,EAAUC,OAAQ,QACd,YACA,4DACA,UAEG,IAEPJ,EAAKM,OAA+B,iBAAfN,EAAKM,QAC1BH,EAAUC,OAAQ,QACd,YACA,4DACA,WAEG,EAGf,CAEA,SAASG,EAAmBP,EAAMG,GAC9B,MAA4B,iBAAjBH,EAAKQ,SACZL,EAAUC,OAAQ,QACd,gBACA,2DACA,aAEG,GAEPJ,EAAKK,MAA6B,iBAAdL,EAAKK,MACzBF,EAAUC,OAAQ,QACd,YACA,4DACA,UAEG,IAEPJ,EAAKM,OAA+B,iBAAfN,EAAKM,QAC1BH,EAAUC,OAAQ,QACd,YACA,4DACA,WAEG,EAGf,CA/DAN,EAAOC,WAAaA,EAoCpBD,EAAOI,gBAAkBA,EA4BzBJ,EAAOS,mBAAqBA,EAoB5BT,EAAOW,aAnBP,SAAsBC,EAAOP,GACzB,IAAKQ,MAAMC,QAAQF,GAEf,OADAP,EAAUC,OAAQ,QAAS,eAAgB,oCACpC,EAEX,IAAK,MAAMJ,KAAQU,EACf,GAAIX,EAAWC,IACX,IAAKE,EAAgBF,EAAMG,GACvB,OAAO,OAIX,IAAKI,EAAmBP,EAAMG,GAC1B,OAAO,EAInB,OAAO,CACX,EAyBAL,EAAOe,eAvBP,SAAwBL,EAASL,GAC7B,MAAuB,iBAAZK,GACPL,EAAUC,OAAQ,QAAS,UAAW,qCAC/B,GAEe,iBAAfI,EAAQpE,IACf+D,EAAUC,OAAQ,QACd,gBACA,2DACA,QAEG,GAEkB,iBAAlBI,EAAQM,QACfX,EAAUC,OAAQ,QACd,gBACA,2DACA,WAEG,EAGf,EAEA,MAAMW,EAAW,CACbC,KAAM,SACNC,SAAU,CAAC,WACXC,WAAY,CACRjB,QAAS,CACL3D,aAAe,QACX,gDACA,gGAEJ0E,KAAM,UAEVpG,IAAK,CACD0B,aAAe,QACX,4CACA,2GAEJ0E,KAAM,UAEVX,KAAM,CACF/D,aAAe,QACX,6CACA,kDAEJ0E,KAAM,UAEVV,MAAO,CACHhE,aAAe,QACX,8CACA,sCAEJ0E,KAAM,YAIZG,EAAc,CAChBH,KAAM,SACNC,SAAU,CAAC,WACXC,WAAY,CACRV,QAAS,CACLlE,aAAe,QACX,gDACA,sDAEJ0E,KAAM,UAEVX,KAAM,CACF/D,aAAe,QACX,6CACA,kDAEJ0E,KAAM,UAEVV,MAAO,CACHhE,aAAe,QACX,8CACA,sCAEJ0E,KAAM,YAIZR,EAAU,CACZQ,KAAM,SACNC,SAAU,CAAC,KAAM,SACjBC,WAAY,CACR9E,GAAI,CACAE,aAAe,QACX,0CACA,mDAEJ0E,KAAM,UAEVF,MAAO,CACHxE,aAAe,QACX,6CACA,2DAEJ0E,KAAM,UAEVI,KAAM,CACF9E,aAAe,QACX,CAAE7B,IAAK,4CAA6C4G,QAAS,CAAC,0EAC9D,0LAEJC,MAAO,CAAC,CACAN,KAAM,UAEV,CACIA,KAAM,SACNE,WAAY,CACRK,MAAO,CACHjF,aAAe,QACX,kDACA,wCAEJ0E,KAAM,UAEVQ,KAAM,CACFlF,aAAe,QACX,iDACA,uCAEJ0E,KAAM,gBAyFlC,SAASS,EAAuBC,EAAWvB,EAAWwB,GAClD,YAAyB,IAAdD,GACPvB,EAAUC,OAAQ,QACd,wBACA,uEACAuB,KAEG,GAEmB,iBAAdD,IAA0B,QAAoBA,IAC1DvB,EAAUC,OAAQ,QACd,gBACA,2DACAuB,KAEG,GAEmB,iBAAdD,KAA2B,QAAoBA,EAAUE,aAAa,QAAoBF,EAAUG,SAChH1B,EAAUC,OAAQ,QACd,iBACA,wEACA,GAAGuB,UACH,GAAGA,gBAEA,EAGf,CA7GA7B,EAAOgC,kBAAoB,CACvBxF,aAAe,QACX,qCACA,wCAEJ0E,KAAM,SACNE,YAAY,QAAM/E,GAAU4F,GAAQA,EAAKtH,MAAKsH,IAAQ,CAClDC,oBAAqBD,EAAKjF,UAAa,QACnC,WACA,6DACAiF,EAAKjF,SACLiF,EAAKzF,aACJyF,EAAKzF,YACV0E,KAAM,QACNN,OAAiC,IAA1BqB,EAAKxF,iBAA6BwE,EAAW,CAAEkB,MAAO,CAAClB,EAAUI,QAE5Ee,qBAAsB,CAClB5F,YAAa,UACb0E,KAAM,QACNN,MAAO,CAAEuB,MAAO,CAAClB,EAAUI,MAGnCrB,EAAOqC,qBAAuB,CAC1B7F,aAAe,QACX,wCACA,2CAEJ0E,KAAM,QACNN,MAAOF,GAqCXV,EAAOsC,eAnCP,SAAwBnC,EAASE,GAC7B,OAAKF,GAID,QAAoBA,EAAQA,UAC5BE,EAAUC,OAAQ,QACd,gBACA,2DACA,aAEG,MAENqB,EAAuBxB,EAAQoC,MAAOlC,EAAW,UAGlDF,EAAQqC,aAAeb,EAAuBxB,EAAQqC,WAAYnC,EAAW,gBAG7EF,EAAQsC,YAA4C,iBAAvBtC,EAAQsC,YACrCpC,EAAUC,OAAQ,QACd,YACA,4DACA,iBAEG,GAEPH,EAAQuC,WAAaf,EAAuBxB,EAAQuC,SAAUrC,EAAW,cASjF,SAAqBiB,EAAMjB,GACvB,YAAoB,IAATiB,IAGS,iBAATA,IAGmB,iBAAdA,EAAKI,MAA2C,iBAAfJ,EAAKG,QAGtDpB,EAAUC,OAAQ,QACd,UACA,iGAEG,IACX,CArBSqC,CAAYxC,EAAQmB,KAAMjB,MA5B3BA,EAAUC,OAAQ,QAAS,WAAY,+BAChC,EA+Bf,EA8CA,MAAMsC,EAAc,CAChB1B,KAAM,SACNC,SAAU,CAAC,UAAW,SACtBC,WAAY,CACRjB,QAAS,CACL3D,aAAe,QACX,mDACA,wCAEJ0E,KAAM,UAEVqB,MAAO,CACH/F,aAAe,QACX,iDACA,uDAEJ0E,KAAM,UAEVsB,WAAY,CACRN,qBAAuB,QACnB,sDACA,yKAEJhB,KAAM,UAEVwB,SAAU,CACNlG,aAAe,QACX,oDACA,wEAEJ0E,KAAM,UAEVuB,WAAY,CACRjG,aAAe,QACX,wDACA,yLAEJ0E,KAAM,UAEVI,KAAM,CACF9E,aAAe,QACX,CAAE7B,IAAK,gDAAiD4G,QAAS,CAAC,0EAClE,0LAEJC,MAAO,CAAC,CACAN,KAAM,UAEV,CACIA,KAAM,SACNE,WAAY,CACRK,MAAO,CACHjF,aAAe,QACX,sDACA,wCAEJ0E,KAAM,UAEVQ,KAAM,CACFlF,aAAe,QACX,qDACA,uCAEJ0E,KAAM,gBAOlClB,EAAO6C,qBAAuB,CAC1BrG,aAAe,QACX,wCACA,gDAEJ2F,MAAO,CACHS,EACA,CACI1B,KAAM,QACNN,MAAOgC,IAItB,CA9ZD,CA8ZG5C,IAAWA,EAAS,CAAC,IACxB,MAAM8C,EAAwB,IAAM,KAC9BC,EAA2B,KAAmBC,uBAAuB,CACvEC,eAAgB,WAChBC,WAAYlD,EAAO6C,qBACnBM,0BAA2B,CAACC,EAAUC,KAClC,IAAK,MAAMC,KAAWF,EACdE,EAAQnD,SACRkD,EAAOjH,KAAK,aAAakH,EAAQnD,UAEzC,IAGR4C,EAAuBQ,YAAWC,IAC9B,SAASC,EAAcC,EAAqBC,GACxC,IAAK3D,EAAOsC,eAAeoB,EAAqBC,EAAUtD,WACtD,OAEJ,MAAM,KAAEiB,EAAI,WAAEmB,EAAU,SAAEC,EAAQ,MAAEH,EAAK,WAAEC,EAAU,QAAErC,GAAYuD,EACnE,IAAIE,EACAtC,IAEIsC,EADgB,iBAATtC,EACQ,KAAUuC,WAAWvC,IAAS,CAAEI,KAAMoC,EAAA,GAAmBH,EAAUnH,YAAYuH,kBAAmBzC,GAAOG,MAAOqC,EAAA,GAAmBH,EAAUnH,YAAYuH,kBAAmBzC,IAG5K,CACXI,KAAMoC,EAAA,GAAmBH,EAAUnH,YAAYuH,kBAAmBzC,EAAKI,MACvED,MAAOqC,EAAA,GAAmBH,EAAUnH,YAAYuH,kBAAmBzC,EAAKG,SAIpF,MAAMuC,EAAc,KAAaC,WAAW9D,GACxC6D,IACIA,EAAYE,OACZP,EAAUtD,UAAU8D,MAAO,QACvB,OACA,gDACAT,EAAoBvD,QACpB6D,EAAYE,OAAO3B,MACnByB,EAAYE,OAAO5H,KAIvBqH,EAAUtD,UAAU8D,MAAO,QAAS,OAAQ,mCAAoCT,EAAoBvD,WAG5G2C,EAAsBsB,IAAI,KAAaC,WAAW,CAC9C/H,GAAI6D,EACJoC,QACA2B,OAAQ,CAAE5H,GAAIqH,EAAUnH,YAAY8H,WAAWvC,MAAOQ,MAAOoB,EAAUnH,YAAY+H,aAAeZ,EAAUnH,YAAYgI,MACxHhC,aACAiC,QAASlC,EACTG,WACAgC,aAAc,KAAeC,YAAYlC,GACzCnB,KAAMsC,IAEd,CACAd,EAAsB8B,QACtB,IAAK,MAAMjB,KAAaH,EAAY,CAChC,MAAM,MAAEzB,GAAU4B,EAClB,GAAI9C,MAAMC,QAAQiB,GACd,IAAK,MAAM5B,KAAW4B,EAClB0B,EAActD,EAASwD,QAI3BF,EAAc1B,EAAO4B,EAE7B,KAEJ,MAAMkB,EAAY,IAAMC,IAClBC,EAA2B,KAAmB/B,uBAAuB,CACvEC,eAAgB,WAChBC,WAAYlD,EAAOqC,uBAEvB0C,EAAuBxB,YAAWC,IAC9BqB,EAAUD,QACV,IAAK,MAAMjB,KAAaH,EAAY,CAChC,MAAM,MAAEzB,EAAK,UAAE1B,GAAcsD,EAC7B,IAAK,MAAO,CAAEqB,KAAgBC,OAAOC,QAAQnD,GAAQ,CACjD,IAAK/B,EAAOe,eAAeiE,EAAa3E,GACpC,SAEJ,IAAK2E,EAAY1I,GAAI,CACjB+D,EAAU8E,MAAO,QACb,uBACA,0CACAH,EAAY1I,KAEhB,QACJ,CACA,GAAMuI,EAAUO,IAAIJ,EAAY1I,IAAM,CAClC+D,EAAU8D,MAAO,QACb,yBACA,uDACAa,EAAY1I,KAEhB,QACJ,CACA,IAAK0I,EAAYhE,MAAO,CACpBX,EAAU8E,MAAO,QACb,0BACA,qCACAH,EAAYhE,QAEhB,QACJ,CACA,IAAI4C,EACAoB,EAAY1D,OAERsC,EAD4B,iBAArBoB,EAAY1D,KACJ,KAAUuC,WAAWmB,EAAY1D,OAAS,CAAEI,KAAMoC,EAAA,GAAmBH,EAAUnH,YAAYuH,kBAAmBiB,EAAY1D,OAG1H,CACXI,KAAMoC,EAAA,GAAmBH,EAAUnH,YAAYuH,kBAAmBiB,EAAY1D,KAAKI,MACnFD,MAAOqC,EAAA,GAAmBH,EAAUnH,YAAYuH,kBAAmBiB,EAAY1D,KAAKG,SAIhG,MAAMvB,EAAO,CACT5D,GAAI,KAAO+I,IAAI,OAAOL,EAAY1I,MAClC0E,MAAOgE,EAAYhE,MACnBM,KAAMsC,GAEViB,EAAUS,IAAIN,EAAY1I,GAAI4D,EAClC,CACJ,KAEJ,MAAMqF,EAAiB,IAAMT,IAAMzI,EAASmJ,KAAIvD,GAAQ,CAAEA,EAAKtH,IAAKsH,MAC9DwD,EAAqB,IAAM,KAC3BC,EAAoB,IAAMZ,IACF,KAAmB9B,uBAAuB,CACpEC,eAAgB,QAChBC,WAAYlD,EAAOgC,kBACnB2D,KAAM,CAACZ,KAESxB,YAAWC,IAC3BiC,EAAmBb,QACnBc,EAAkBd,QAClB,IAAK,MAAMjB,KAAaH,EAAY,CAChC,MAAM,MAAEzB,EAAK,UAAE1B,GAAcsD,EAC7B,IAAK,MAAMiC,KAASX,OAAOC,QAAQnD,GAAQ,CACvC,IAAK/B,EAAOW,aAAaiF,EAAM,GAAIvF,GAC/B,SAEJ,IAAI4B,EAAOsD,EAAeM,IAAID,EAAM,IACpC,IAAK3D,EAAM,CACP,MAAMvB,EAAUmE,EAAUgB,IAAID,EAAM,IAChClF,IACAuB,EAAO,CACHtH,IAAKiL,EAAM,GACXtJ,GAAIoE,EAAQpE,GACZE,YAAa,IAGzB,CACA,GAAKyF,EAGL,IAAIA,EAAKjF,WAAa,QAAqB2G,EAAUnH,YAAayF,EAAKjF,UAUvE,IAAK,MAAMiE,KAAY2E,EAAM,GAAI,CAC7B,IAAI1F,EACJ,GAAIF,EAAOC,WAAWgB,GAAW,CAC7B,MAAMd,EAAU,KAAa8D,WAAWhD,EAASd,SAC3CrF,EAAMmG,EAASnG,KAAO,KAAamJ,WAAWhD,EAASnG,WAAQgL,EACrE,IAAK3F,EAAS,CACVE,EAAUC,OAAQ,QACd,kBACA,uFACAW,EAASd,UAEb,QACJ,CACIc,EAASnG,MAAQA,GACjBuF,EAAU8E,MAAO,QACb,qBACA,4FACAlE,EAASnG,MAGbmG,EAASd,UAAYc,EAASnG,KAC9BuF,EAAU8D,MAAO,QACb,eACA,qEAGRjE,EAAO,CAAEC,UAASrF,MAAK0F,WAAOsF,EAAWC,WAAOD,EAAWvF,UAAMuF,EACrE,KACK,CACD,IAA8B,IAA1B7D,EAAKxF,iBAA4B,CACjC4D,EAAUC,OAAQ,QACd,+BACA,kFAEJ,QACJ,CACA,MAAMI,EAAUmE,EAAUgB,IAAI5E,EAASP,SACvC,IAAKA,EAAS,CACVL,EAAUC,OAAQ,QACd,kBACA,uFACAW,EAASP,UAEb,QACJ,CACA,IAAIsF,EAAuBN,EAAkBG,IAAI5D,EAAK3F,GAAGA,IAKzD,GAJK0J,IACDA,EAAuB,IAAMC,IAC7BP,EAAkBJ,IAAIrD,EAAK3F,GAAGA,GAAI0J,IAEhCA,EAAqBZ,IAAI1E,EAAQpE,GAAGA,IAAM,CAC5C+D,EAAU8E,MAAO,QACb,wBACA,+DACAlE,EAASP,QACTkF,EAAM,KAEV,QACJ,CACAI,EAAqB5B,IAAI1D,EAAQpE,GAAGA,IACpC4D,EAAO,CAAEQ,QAASA,EAAQpE,GAAIgF,KAAMZ,EAAQY,KAAMiB,MAAO7B,EAAQM,MAAOR,WAAOsF,EAAWC,WAAOD,EAAWvF,UAAMuF,EACtH,CACA,GAAI7E,EAAST,MAAO,CAChB,MAAM0F,EAAMjF,EAAST,MAAM2F,YAAY,KACnCD,EAAM,GACNhG,EAAKM,MAAQS,EAAST,MAAMvF,OAAO,EAAGiL,GACtChG,EAAK6F,MAAQK,OAAOnF,EAAST,MAAMvF,OAAOiL,EAAM,UAAOJ,GAGvD5F,EAAKM,MAAQS,EAAST,KAE9B,CACAN,EAAKK,KAAO,KAAeoE,YAAY1D,EAASV,MAChDkF,EAAmBrB,IAAI,KAAaiC,eAAepE,EAAK3F,GAAI4D,GAChE,MAnFIG,EAAUC,OAAQ,QACd,sBACA,kNACAsF,EAAM,GACN3D,EAAKjF,SACL2G,EAAUnH,YAAY8H,WAAWvC,OA+E7C,CACJ,K,0BCl/BJ,MAAMuE,EACF,0BAAOC,CAAoBC,EAAKtG,GAC5B,IAAKA,EAAKuG,mBACN,OAEJ,MAAMC,EAA6BC,KAAKC,UAAU1G,EAAKuG,mBAAmBI,wBAyClF,IAA2BC,EAxCnBN,EAAIO,MAAM,YAwCSD,EAxCqBJ,EAA6B,IAyCrEI,EAAI3K,OAzCsE,GA0CnE2K,EAAO,IAAMjG,MA1CsD,GA0CrCiG,EAAI3K,QAAS6K,KAAK,KAEpDF,iBA3CH,MAAMG,EAAuB/G,EAAKK,KAAOoG,KAAKC,UAAU1G,EAAKK,KAAK2G,aAAe,GAC3EC,EAAyBR,KAAKC,UAAU1G,EAAKC,SAC/C8G,EAAqB9K,OAAS,GAC9BqK,EAAIO,MAAM,GAAGI,MACbX,EAAIY,YACJZ,EAAIO,MAAM,gDAAgDE,MAG1DT,EAAIO,MAAM,GAAGI,KAEbjH,EAAKmH,cACLb,EAAIO,MAAM,KACVP,EAAIY,YACJZ,EAAIO,MAAM,gDAAgDJ,KAAKC,UAAU1G,EAAKmH,iBAElFb,EAAIO,MAAM,KACd,CACA,6BAAOO,CAAuB/M,GAC1B,MAAMgN,EAAa,QAAShN,GAA8B,iBAAdA,EAAMI,IAC5CN,EAAiB2B,gBAAgBzB,EAAMI,KACvC,KACA4F,EAAO,SAAUhG,GAA+B,iBAAfA,EAAMgG,KACvC,KAAeoE,YAAYpK,EAAMgG,WACjCuF,EAON,MAAO,CACHyB,aACApH,QARY,YAAa5F,GAAkC,iBAAlBA,EAAM4F,QAC7C5F,EAAM4F,QACN,KAOFkH,YANgB,SAAU9M,QAA+B,IAAfA,EAAMiN,KAC9CjN,EAAMiN,UACN1B,EAKFvF,OACAkH,WAAY,QAASlN,GAA8B,iBAAdA,EAAMI,IAAmBJ,EAAMI,SAAMmL,EAElF,EAQJ,MAAM4B,EACF,WAAAC,GACInM,KAAKoM,OAAS,GACdpM,KAAKqM,aAAe,EACxB,CACA,KAAAd,CAAMD,GACFtL,KAAKqM,cAAgBf,CACzB,CACA,SAAAM,CAAUN,EAAM,IACZtL,KAAKoM,OAAOxL,KAAKZ,KAAKqM,aAAef,GACrCtL,KAAKqM,aAAe,EACxB,CACA,QAAAC,GAEI,OADAtM,KAAK4L,YACE5L,KAAKoM,OAAOZ,KAAK,KAC5B,E,4BCyBJ,MAAMe,GAAiB,CACnB7G,KAAM,SACN8G,QAAS,CAAE7H,QAAS,GAAIxF,IAAK,IAC7ByG,WAAY,CACRjB,QAAS,CACL3D,YAAeyL,EAAA,GACX,mDACA,kEAEJ/G,KAAM,UAEVsG,KAAM,CACFhL,YAAeyL,EAAA,GACX,gDACA,iDAGRtN,IAAK,CACD6B,YAAeyL,EAAA,GACX,+CACA,sHAEJ/G,KAAM,UAEVgH,IAAK,CACD1L,YAAeyL,EAAA,GACX,+CACA,qCAEJ/G,KAAM,UAEViH,MAAO,CACH3L,YAAeyL,EAAA,GACX,iDACA,uCAEJ/G,KAAM,UAEVkH,IAAK,CACD5L,YAAeyL,EAAA,GACX,+CACA,yCAEJ/G,KAAM,UAEVX,KAAM,CACF/D,YAAeyL,EAAA,GACX,gDACA,qCAEJ/G,KAAM,YAIZmH,GAAwB,KAAmBrF,uBAAuB,CACpEC,eAAgB,cAChB0C,KAAM,CAAC5C,GACPG,WAAY,CACR1G,YAAeyL,EAAA,GAAa,2CAA4C,4BACxE9F,MAAO,CACH4F,GACA,CACI7G,KAAM,QACNN,MAAOmH,QAKjBO,GAA6B,CAC/B,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,KAEEC,GAAwB,IAAMzD,IACpCyD,GAAsBjD,IAAI,GAAK,IAC/BiD,GAAsBjD,IAAI,GAAK,IAC/BiD,GAAsBjD,IAAI,GAAK,IAC/BiD,GAAsBjD,IAAI,GAAK,IAC/BiD,GAAsBjD,IAAI,GAAK,IAC/BiD,GAAsBjD,IAAI,IAAM,IAChCiD,GAAsBjD,IAAI,IAAM,IAChCiD,GAAsBjD,IAAI,IAAM,IAChCiD,GAAsBjD,IAAI,IAAM,IAChCiD,GAAsBjD,IAAI,IAAM,IAChC,IAAIkD,GAA6B,MAAMA,UAAmC,IACtE,WAAAb,CAAYc,EAAmBC,EAAgBC,EAAkBC,EAAqBC,EAAwBC,EAAaC,EAAkBC,EAAaC,EAAoBC,EAAYC,GACtLC,MAAMX,EAAmBC,EAAgBC,EAAkBC,EAAqBM,GAChF1N,KAAKsN,YAAcA,EACnBtN,KAAK2N,sBAAwBA,EAC7B3N,KAAK6N,eAAiB,GACtB7N,KAAK8N,4BAA8Bb,EAAkBc,UAAU,eAAe,GAC9E/N,KAAKgO,cAAgB,IAAMC,GAC3BjO,KAAKkO,8BACLlO,KAAKmO,gBAAkBnO,KAAK2N,sBAAsBS,oBAClDpO,KAAK2N,sBAAsBU,2BAA0B,KACjDrO,KAAKmO,gBAAkBnO,KAAK2N,sBAAsBS,oBAClDpO,KAAKsO,gBAAgB,IAEzBtO,KAAKuO,gBAAkB,KACvBvO,KAAKwO,gBAAkBxO,KAAKyO,UAAU,IAAMC,GAAgBrB,EAAwBI,EAAoBD,EAAaE,IACrH1N,KAAKwO,gBAAgBG,aAAaC,MAAK,KAC/B5O,KAAKwO,gBAAgBK,YAAYlO,QACjCX,KAAKsO,gBACT,IAEJtO,KAAKyO,UAAUzO,KAAKwO,gBAAgBM,aAAY,KAC5CpB,EAAWqB,MAAM,4BACjB/O,KAAKsO,gBAAgB,KAEzBzB,GAAoB9E,YAAYC,IAC5B,MAAM6G,EAAc,GACpB,IAAK,MAAM1G,KAAaH,EACpBhI,KAAKgP,qCAAqC7G,EAAUnH,YAAY8H,WAAYX,EAAUnH,YAAYiO,UAAW9G,EAAU5B,MAAO4B,EAAUtD,UAAWgK,GAEvJ,IAAoBK,wBAAwBL,GAC5C7O,KAAKsO,gBAAgB,IAEzBtO,KAAKkO,8BACLlO,KAAKyO,UAAUlB,EAAiB4B,yBAAwB,IAAMnP,KAAKkO,iCACnElO,KAAKyO,UAAUW,EAAA,GAA0BC,OAAQD,EAAA,GAAcE,UAAWC,IACtEvP,KAAK8N,4BAA4BhE,IAAIyF,EAAEC,aACvC,MAAMC,EAAW,IAAM,KAAsBF,GAC7CvP,KAAK0P,KAAK,gCAA+B,QAAmBH,MAC5DvP,KAAK0P,KAAK,gCAA+B,QAA2BD,MACvCzP,KAAK2P,UAAUF,EAAUA,EAASG,SAE3DH,EAASI,iBAEb7P,KAAK8N,4BAA4BhE,KAAI,EAAM,KAE/C9J,KAAKyO,UAAUW,EAAA,GAA0BC,OAAQD,EAAA,GAAcU,QAASP,IACpEvP,KAAK8N,4BAA4BhE,IAAIyF,EAAEC,aACvC,MAAMC,EAAW,IAAM,KAAsBF,GAChBvP,KAAK+P,wBAAwBN,EAAUA,EAASG,SAEzEH,EAASI,iBAEb7P,KAAK8N,4BAA4BhE,KAAI,EAAM,KAE/C9J,KAAKyO,UAAUuB,EAAA,IAA8B,KACzC,MAAMC,EAAWC,UAAUD,SACM,IAA7B,IAAgBA,WAGhBD,EAAA,KACAC,GAAUE,KAAK,CAAC,WAGhBF,GAAUG,SAEdpQ,KAAKuO,gBAAkB,KACvBvO,KAAKqQ,wBAAwBC,OAAM,IAE3C,CACA,0BAAAC,CAA2BC,GACvBxQ,KAAK6N,eAAejN,KAAK4P,GACrBA,EAAa1B,aACb9O,KAAKyO,UAAU+B,EAAa1B,aAAY,IAAM9O,KAAKkO,iCAEvDlO,KAAKkO,6BACT,CACA,2BAAAA,GACIlO,KAAKgO,cAAcyC,aAAazQ,KAAK6N,eAAe6C,SAAQC,GAAKA,EAAEC,uBACvE,CACA,gBAAAC,CAAiB9E,GACb,OAAO,KAA0B+E,QAAQ,EAAAC,GAAIhF,EAAWtL,QAASC,GACzDA,aAAiB,KACR,KAAa4L,SAAS5L,EAAMJ,SAEhC,KAAcgM,SAAS5L,EAAMN,aACpC,QACV,CACA,wBAAA4Q,CAAyB/F,GACrB,OAASA,EAAmBgG,oBAAoBjH,KAAI2G,GAAKA,GAAK,WAAWnF,KAAK,IAClF,CACA,yBAAA0F,CAA0BC,EAAQpS,EAAOqS,GACrC,MACMC,EAAW,GAAGtS,EAAMuS,SADR,GAC4B,WAC9C,GAAmC,IAA/BF,EAAoBzQ,OAIxB,IAAK,MAAMsK,KAAsBmG,EAEzBD,EAAOvQ,KAAK,GAAGyQ,IAAWrR,KAAKgR,yBAAyB/F,GAAoBqG,SARlE,GAQsF,aALpGH,EAAOvQ,KAAK,GAAGyQ,IAAW,eAAeC,SAH3B,GAG+C,OAQrE,CACA,+BAAAC,GACI,MAAMC,EAAe,IAAM/G,IACrB5C,EAAS,GACfA,EAAOjH,KAAK,+CACZ,IAAK,MAAM8D,KAAQ,IAAoB+M,wBAAyB,CAC5D,IAAK/M,EAAKqH,WACN,SAEJ,MAAMhN,EAAQiB,KAAK6Q,iBAAiBnM,EAAKqH,YACzC,GAAMyF,EAAa5H,IAAI7K,GACnB,SAEJyS,EAAa5I,IAAI7J,GACjB,MAAMqS,EAAsBpR,KAAKmO,gBAAgBuD,kBAAkBhN,EAAKqH,YACxE/L,KAAKkR,0BAA0BrJ,EAAQ9I,EAAOqS,EAClD,CACAvJ,EAAOjH,KAAK,4CACZ,IAAK,MAAM8D,KAAQ1E,KAAKwO,gBAAgBK,YAAa,CACjD,IAAKnK,EAAKqH,WACN,SAEJ,MAAMhN,EAAQ2F,EAAKuH,YAAc,qDACjC,GAAMuF,EAAa5H,IAAI7K,GACnB,SAEJyS,EAAa5I,IAAI7J,GACjB,MAAMqS,EAAsBpR,KAAKmO,gBAAgBuD,kBAAkBhN,EAAKqH,YACxE/L,KAAKkR,0BAA0BrJ,EAAQ9I,EAAOqS,EAClD,CACA,OAAOvJ,EAAO2D,KAAK,KACvB,CACA,cAAAmG,GACI,MAAMC,EAAazG,KAAKC,UAAUpL,KAAK2N,sBAAsBkE,2BAA4B,KAAM,MACzFC,EAAa9R,KAAKmO,gBAAgB4D,gBAGxC,MAAO,iBAAiBH,QAFI5R,KAAKuR,wCAEkCO,sBADhD3G,KAAKC,UAAUpL,KAAK2N,sBAAsBqE,wBAAyB,KAAM,OAEhG,CACA,kBAAAC,GACI,MAAMtJ,EAAO,CACTuJ,OAAQlS,KAAK2N,sBAAsBkE,2BACnCM,WAAYnS,KAAK2N,sBAAsBqE,yBAE3C,OAAO7G,KAAKC,UAAUzC,EAAM,KAAM,KACtC,CACA,sBAAAyJ,GACI,OAAOpS,KAAKwO,gBAAgBK,YAAYlO,MAC5C,CACA,cAAA2N,GACItO,KAAKuO,gBAAkB,KACvBvO,KAAKqQ,wBAAwBC,MACjC,CACA,sBAAA+B,GACI,OAAOrS,KAAKsS,4BAA4BtS,KAAKwO,gBAAgBK,aAAa,EAC9E,CACA,YAAA0D,GACI,IAAKvS,KAAKuO,gBAAiB,CACvB,MAAMiE,EAAWxS,KAAKyS,wBAAwB,IAAoBhB,yBAAyB,GACrFiB,EAAY1S,KAAKqS,yBACvBrS,KAAKuO,gBAAkB,IAAM,IAAmBiE,EAAUE,GAAYpH,GAAQtL,KAAK0P,KAAKpE,IAC5F,CACA,OAAOtL,KAAKuO,eAChB,CACA,iBAAAoE,GACI,OAAO3S,KAAKsN,YAAYsF,QAC5B,CACA,uBAAAH,CAAwBrN,EAAOyN,GAC3B,MAAMhL,EAAS,GACf,IAAIiL,EAAY,EAChB,IAAK,MAAMpO,KAAQU,EAAO,CACtB,MAAML,EAAOL,EAAKK,WAAQuF,EACpByB,EAAarH,EAAKqH,WACxB,GAAKA,EAWA,CACD,GAAI/L,KAAK+S,wBAAwBhH,GAC7B,SAEJ,MAAMqF,EAAsBpR,KAAKmO,gBAAgBuD,kBAAkB3F,GACnE,IAAK,IAAIiH,EAAI5B,EAAoBzQ,OAAS,EAAGqS,GAAK,EAAGA,IAAK,CACtD,MAAM/H,EAAqBmG,EAAoB4B,GAC/CnL,EAAOiL,KAAe,IAAM,IACxB7H,EACAvG,EAAKC,QACLD,EAAKmH,YACL9G,EACA8N,EACAnO,EAAKuO,YACLvO,EAAKwO,mBAEb,CACJ,MA3BIrL,EAAOiL,KAAe,IAAM,SACxBxI,EACA5F,EAAKC,QACLD,EAAKmH,YACL9G,EACA8N,EACAnO,EAAKuO,YACLvO,EAAKwO,mBAqBjB,CACA,OAAOrL,CACX,CACA,2BAAAyK,CAA4BlN,EAAOyN,GAC/B,MAAMhL,EAAS,GACf,IAAIiL,EAAY,EAChB,IAAK,MAAMpO,KAAQU,EAAO,CACtB,MAAML,EAAOL,EAAKK,WAAQuF,EAC1B,GAAK5F,EAAKqH,WAGL,CACD,MAAMqF,EAAsBpR,KAAKmO,gBAAgBuD,kBAAkBhN,EAAKqH,YACxE,IAAK,MAAMd,KAAsBmG,EAC7BvJ,EAAOiL,KAAe,IAAM,IACxB7H,EACAvG,EAAKC,QACLD,EAAKmH,YACL9G,EACA8N,EACA,MACA,EAGZ,MAfIhL,EAAOiL,KAAe,IAAM,SAAuBxI,EAAW5F,EAAKC,QAASD,EAAKmH,YAAa9G,EAAM8N,EAAW,MAAM,EAgB7H,CACA,OAAOhL,CACX,CACA,uBAAAkL,CAAwBhH,GACpB,GAAiC,IAA7B,IAAgBkE,SAChB,OAAO,EAEX,GAAiC,IAA7B,IAAgBA,UAAmBD,EAAA,KACnC,OAAO,EAEX,IAAK,MAAMtP,KAASqL,EAAWtL,OAAQ,CACnC,KAAKC,EAAMyS,SAAYzS,EAAM0S,QAAW1S,EAAM2S,SAAY3S,EAAM4S,UAC5D,SAEJ,MAAMC,EAAgB,KACtB,IAAIC,EAAoB,EAaxB,GAZI9S,EAAMyS,UACNK,GAAqB,MAErB9S,EAAM4S,WACNE,GAAqB,MAErB9S,EAAM0S,SACNI,GAAqB,KAErB9S,EAAM2S,SAAkB,IAAP,EAAAtC,KACjByC,GAAqB,KAEmB,OAAvCA,EAAoBD,GAAqC,CAC1D,GAAI7S,aAAiB,OAAsC,KAAnBA,EAAMN,UAAuC,KAAnBM,EAAMN,UACpE,OAAO,EAEX,GAAIM,aAAiB,OAAoC,KAAlBA,EAAMJ,SAAqC,KAAlBI,EAAMJ,SAClE,OAAO,CAEf,CACA,GAA4C,OAAvCkT,EAAoBD,GAA0B,CAC/C,GAAI7S,aAAiB,MAAmBA,EAAMN,UAAY,IAAOM,EAAMN,UAAY,GAC/E,OAAO,EAEX,GAAIM,aAAiB,MAAkBA,EAAMJ,SAAW,IAAOI,EAAMJ,SAAW,GAC5E,OAAO,CAEf,CACJ,CACA,OAAO,CACX,CACA,iBAAAoR,CAAkB+B,GACd,OAAOzT,KAAKmO,gBAAgBuD,kBAAkB+B,EAClD,CACA,oBAAAC,CAAqBC,GAEjB,OADA3T,KAAK2N,sBAAsBiG,+BAA+BD,GACnD3T,KAAKmO,gBAAgBuF,qBAAqBC,EACrD,CACA,kBAAAE,CAAmBC,GACf,MAAM/H,EAAalN,EAAiB2B,gBAAgBsT,GACpD,OAAQ/H,EAAa/L,KAAKmO,gBAAgBuD,kBAAkB3F,GAAc,EAC9E,CACA,oCAAAiD,CAAqCiE,EAAahE,EAAWJ,EAAahK,EAAWgD,GACjF,GAAIxC,MAAMC,QAAQuJ,GACd,IAAK,IAAImE,EAAI,EAAGe,EAAMlF,EAAYlO,OAAQqS,EAAIe,EAAKf,IAC/ChT,KAAKgU,kBAAkBf,EAAahE,EAAW+D,EAAI,EAAGnE,EAAYmE,GAAInO,EAAWgD,QAIrF7H,KAAKgU,kBAAkBf,EAAahE,EAAW,EAAGJ,EAAahK,EAAWgD,EAElF,CACA,iBAAAmM,CAAkBf,EAAahE,EAAWvE,EAAKmE,EAAahK,EAAWgD,GACnE,MAAMoM,EAAU,GAChB,GAncR,SAAsCC,EAAYD,GAC9C,OAAKC,EAI6B,iBAAvBA,EAAWvP,SAClBsP,EAAQrT,KAAO6L,EAAA,GACX,gBACA,2DACA,aAEG,GAEPyH,EAAW/U,KAAiC,iBAAnB+U,EAAW/U,KACpC8U,EAAQrT,KAAO6L,EAAA,GACX,YACA,4DACA,SAEG,GAEPyH,EAAWnP,MAAmC,iBAApBmP,EAAWnP,MACrCkP,EAAQrT,KAAO6L,EAAA,GACX,YACA,4DACA,UAEG,GAEPyH,EAAWxH,KAAiC,iBAAnBwH,EAAWxH,KACpCuH,EAAQrT,KAAO6L,EAAA,GACX,YACA,4DACA,SAEG,GAEPyH,EAAWvH,OAAqC,iBAArBuH,EAAWvH,OACtCsH,EAAQrT,KAAO6L,EAAA,GACX,YACA,4DACA,WAEG,IAEPyH,EAAWtH,KAAiC,iBAAnBsH,EAAWtH,MACpCqH,EAAQrT,KAAO6L,EAAA,GACX,YACA,4DACA,SAEG,IAjDPwH,EAAQrT,KAAO6L,EAAA,GAAa,WAAY,+BACjC,EAmDf,CA6YY0H,CAA6BtF,EAAaoF,GAAU,CACpD,MAAMG,EAAOpU,KAAKqU,eAAepB,EAAahE,EAAWvE,IAAOmE,GAC5DuF,GACAvM,EAAOjH,KAAKwT,EAEpB,CACIH,EAAQtT,OAAS,GACjBkE,EAAUC,MAAQ2H,EAAA,GACd,sBACA,iCACAI,GAAoB7D,KACpBiL,EAAQzI,KAAK,OAGzB,CACA,4BAAO8I,CAAsBnV,EAAKuN,EAAKC,EAAOC,GAC1C,GAAW,IAAP,EAAAmE,IAAanE,GACb,GAAIA,EACA,OAAOA,OAGV,GAAW,IAAP,EAAAmE,IACL,GAAIrE,EACA,OAAOA,OAIX,GAAIC,EACA,OAAOA,EAGf,OAAOxN,CACX,CACA,cAAAkV,CAAepB,EAAahE,EAAWvE,EAAK6J,GACxC,MAAM,QAAE5P,EAAO,KAAEqH,EAAI,KAAEjH,EAAI,IAAE5F,EAAG,IAAEuN,EAAG,MAAEC,EAAK,IAAEC,GAAQ2H,EAChDxI,EAAaiB,EAA2BsH,sBAAsBnV,EAAKuN,EAAKC,EAAOC,GACrF,IAAKb,EACD,OAEJ,IAAIyI,EAEAA,EADAvF,EACS,IAAOvE,EAGP,IAAOA,EAEpB,MAAM+J,EAAgB,KAAahM,WAAW9D,GACxCuE,EAAeuL,GAAiBA,EAAcvL,aACpD,IAAIwL,EAmBJ,OAlBI3P,GAAQmE,EACRwL,EAAa,KAAeC,IAAIzL,EAAc,KAAeC,YAAYpE,IAEpEA,EACL2P,EAAW,KAAevL,YAAYpE,GAEjCmE,IACLwL,EAAWxL,GAEF,CACTpI,GAAI6D,EACJqH,OACAjH,KAAM2P,EACNF,OAAQA,EACRzI,WAAYlN,EAAiB2B,gBAAgBuL,GAC7CkH,YAAaA,EAAY1M,MACzB2M,mBAAoBjE,EAG5B,CACA,4BAAA2F,GACI,MAAMC,EAAW7U,KAAKuS,eAChBuC,EAAqBD,EAASpD,wBAC9BsD,EAAgBF,EAASG,0BAC/B,OAAQhI,EAA2BiI,uBAAuBH,GACpD,OACA9H,EAA2BkI,yBAAyBH,EAC9D,CACA,6BAAOE,CAAuBH,GAC1B,MAAM9J,EAAM,IAAMkB,EAClBlB,EAAIY,UAAU,KACd,MAAMuJ,EAAYL,EAAmBnU,OAAS,EAW9C,OAVAmU,EAAmBM,SAAQ,CAACC,EAAGC,KAC3BxK,EAAaC,oBAAoBC,EAAKqK,GAClCC,IAAUH,EACVnK,EAAIY,UAAU,KAGdZ,EAAIY,WACR,IAEJZ,EAAIY,UAAU,KACLZ,EAAIsB,UACjB,CACA,+BAAO4I,CAAyBH,GAC5B,MACMQ,GADkB,IAAAC,GAAsBT,GACfU,OAAOjK,KAAK,WAC3C,MAAO,MAAUiB,EAAA,GAAa,kBAAmB,uCAA0C,UAAY8I,CAC3G,CACA,8BAAAG,CAA+BC,GAC3B,GAAIA,EAAMtC,SAAWsC,EAAMxC,SAAWwC,EAAMvC,OACxC,OAAO,EAEX,MAAMwC,EAAO,KAAcC,OAAOF,EAAMC,MACxC,IAAkD,IAA9C9I,GAA2BnN,QAAQiW,GACnC,OAAID,EAAMrV,UAAY,KAA2BsV,OAG7C,MAAeD,EAAMrV,UAAYyM,GAAsB1C,IAAIuL,IAMnE,IAAiB,IADD,KAA2BA,GAEvC,OAAO,EAEX,MAAME,EAAU9V,KAAK2N,sBAAsBqE,wBAC3C,IAAK8D,EACD,OAAO,EAEX,MAAMC,EAAUD,EAAQH,EAAMC,MAC9B,QAAKG,MAGAA,EAAQxP,OAAS,KAAK/G,KAAKuW,EAAQxP,OAI5C,GAEJyG,IAA+B,OAAW,EACpC,OAAQ,EAAG,OACX,OAAQ,EAAG,MACX,OAAQ,EAAG,OACX,OAAQ,EAAG,OACX,OAAQ,EAAG,QACX,OAAQ,EAAG,MACX,OAAQ,EAAG,OACX,OAAQ,EAAG,OACX,OAAQ,EAAG,OACX,OAAQ,EAAG,OACX,OAAQ,GAAI,MACfA,IACH,MAAM0B,WAAwB,KAC1B,eAAIG,GAAgB,OAAO7O,KAAKgW,YAAc,CAC9C,WAAA7J,CAAYkB,EAAwBI,EAAoBD,EAAaE,GACjEE,QACA5N,KAAKqN,uBAAyBA,EAC9BrN,KAAKyN,mBAAqBA,EAC1BzN,KAAKwN,YAAcA,EACnBxN,KAAKiW,gBAAkB,GACvBjW,KAAKgW,aAAe,GACpBhW,KAAKkW,iBAAmBlW,KAAKyO,UAAU,IAAM,MAC7CzO,KAAKmW,aAAenW,KAAKyO,UAAU,IAAM,MACzCzO,KAAK8O,YAAc9O,KAAKmW,aAAaR,MACrC3V,KAAKoW,QACLpW,KAAKqW,6BAA+BrW,KAAKyO,UAAU,IAAM,MAAiB,IAAMzO,KAAKsW,SAAS1H,MAAK2H,IAC3FA,GACAvW,KAAKmW,aAAa7F,MACtB,KACA,KACJtQ,KAAKyO,UAAU,KAAM+H,OAAOxW,KAAKwN,YAAYiJ,kBAAkBlH,GAAKA,EAAEmH,SAAS1W,KAAKqN,uBAAuBsJ,eAAeC,sBAA3G,EAAiI,KAC5IlJ,EAAWqB,MAAM,4BACjB/O,KAAKqW,6BAA6BQ,UAAU,KAEhD7W,KAAKyO,UAAUzO,KAAKwN,YAAYsJ,mBAAmBvH,IAC3B,IAAhBA,EAAEwH,WAAsBxH,EAAEyH,SAAS1K,aAAkBtM,KAAKqN,uBAAuBsJ,eAAeC,oBAAoBtK,aACpHoB,EAAWqB,MAAM,4BACjB/O,KAAKqW,6BAA6BQ,WACtC,KAEJ7W,KAAKyO,UAAUpB,EAAuB4J,2BAA0B1H,IACvDvP,KAAKyN,mBAAmByJ,OAAOC,QAAQ5H,EAAE6H,SAASR,oBAAqBrH,EAAE8H,QAAQT,sBAClFrH,EAAE/D,KAAKxL,KAAKsX,4BAChB,IAER,CACA,+BAAMA,GACFtX,KAAKoW,QACLpW,KAAKqW,6BAA6BQ,UACtC,CACA,KAAAT,GACIpW,KAAKkW,iBAAiB9M,QACtBpJ,KAAKkW,iBAAiBtN,IAAI5I,KAAKwN,YAAY4I,OAAM,QAAQpW,KAAKqN,uBAAuBsJ,eAAeC,uBACpG5W,KAAKkW,iBAAiBtN,IAAI5I,KAAKwN,YAAY4I,MAAMpW,KAAKqN,uBAAuBsJ,eAAeC,qBAChG,CACA,gBAAMjI,SACI3O,KAAKsW,QACf,CACA,YAAMA,GACF,MAAMiB,QAAuBvX,KAAKwX,sBAClC,OAAIC,EAAA,GAAezX,KAAKiW,gBAAiBsB,KAGzCvX,KAAKiW,gBAAkBsB,EACvBvX,KAAKgW,aAAiBhW,KAAKiW,gBAAgBjM,KAAKqL,GAAMvK,EAAagB,uBAAuBuJ,MACnF,EACX,CACA,yBAAMmC,GACF,IACI,MAAME,QAAgB1X,KAAKwN,YAAYmK,SAAS3X,KAAKqN,uBAAuBsJ,eAAeC,qBACrFrQ,GAAQ,QAAQmR,EAAQnR,MAAM+F,YACpC,OAAOjH,MAAMC,QAAQiB,GACfA,EAAMiQ,QAAOoB,GAAKA,GAAkB,iBAANA,IAC9B,EACV,CACA,MAAOrI,GACH,MAAO,EACX,CACJ,EAEJ,MAAMtB,UACOjO,KAAK6X,SAAW,8BAAgC,CACzD,WAAA1L,GACInM,KAAK8X,gBAAkB,GACvB9X,KAAK+X,aAAe,GACpB/X,KAAKgY,oBAAsB,GAC3BhY,KAAKiY,yBAA2B,GAChCjY,KAAKwE,OAAS,CACV1D,GAAImN,GAAsB4J,SAC1BnS,KAAM,QACNqB,MAAS0F,EAAA,GAAa,yBAA0B,6BAChDyL,qBAAqB,EACrBC,eAAe,EACfC,YAAa,CACT,mBAAsB,CAClB,KAAQ,QACR,MAAS,CACL,KAAQ,SACR,WAAc,CACV,OAAU,CACN,KAAQ,mCACR,QAAW,CAAC,CAAC,EAAG,CAAC,IAErB,KAAQ,CACJ,KAAQ,SACR,QAAW,OAK3B,aAAgB,CACZ,KAAQ,SACR,KAAQpY,KAAK+X,aACb,iBAAoB/X,KAAKiY,yBACzB,YAAiBxL,EAAA,GAAa,2BAA4B,mCAE9D,YAAe,CACX,MAAS,CACL,CACI4L,KAAM,8BAEV,CACI,KAAQ,SACR,KAAQrY,KAAKgY,oBACb,iBAAoBhY,KAAKiY,yBACzB,YAAiBxL,EAAA,GACb,kCACA,wDAGR,CACI,KAAQ,YAIpB,gBAAmB,CACf,MAASzM,KAAK8X,kBAGtB1S,MAAO,CACH,SAAY,CAAC,OACb,KAAQ,SACR,gBAAmB,CAAC,CAAE,KAAQ,CAAE,IAAO,KAAM,QAAW,KAAM,KAAQ,QACtE,WAAc,CACV,IAAO,CACH,KAAQ,SACR,YAAiBqH,EAAA,GAAa,uBAAwB,6CAE1D,QAAW,CACP,MAAS,CACL,CACI,GAAM,CACF,KAAQ,SAEZ,KAAQ,CACJ,IAAO,CACH,KAAQ,SAEZ,aAAkBA,EAAA,GACd,8BACA,mKACA,WAGR,KAAQ,CACJ,KAAQ,8BAGhB,CACI,KAAQ,+BAIpB,KAAQ,CACJ,KAAQ,SACR,YAAiBA,EAAA,GAAa,wBAAyB,sCAE3D,KAAQ,CACJ,YAAiBA,EAAA,GAAa,wBAAyB,kDAG/D,KAAQ,kCAGhBzM,KAAKsY,eAAmB,IAASC,GAAG,IAAWC,kBAC/CxY,KAAKsY,eAAeG,eAAexK,GAAsB4J,SAAU7X,KAAKwE,OAC5E,CACA,YAAAiM,CAAaiI,GACT1Y,KAAK8X,gBAAgBnX,OAAS,EAC9BX,KAAK+X,aAAapX,OAAS,EAC3BX,KAAKgY,oBAAoBrX,OAAS,EAClCX,KAAKiY,yBAAyBtX,OAAS,EACvC,MAAMgY,EAAgB,IAAMlO,IACtBmO,EAAkB,CAACC,EAAW7X,KAC3B,KAAKxB,KAAKqZ,IACJF,EAAc/O,IAAIiP,KACrBF,EAAc/P,IAAIiQ,GAClB7Y,KAAK+X,aAAanX,KAAKiY,GACvB7Y,KAAKiY,yBAAyBrX,KAAKI,GACnChB,KAAKgY,oBAAoBpX,KAAK,IAAIiY,KAE1C,EAEEC,EAAc,IAAiBC,cACrC,IAAK,MAAOF,EAAWlU,KAAYmU,EAAa,CAC5C,MAAME,EAAqBrU,EAAQ3D,YAEnC,GADA4X,EAAgBC,EAAWG,EAAqBA,EAAmBhY,iBAAcsJ,IAC5E0O,IAAuBA,EAAmBhN,MAA2C,IAAnCgN,EAAmBhN,KAAKrL,SAAiBqY,EAAmBhN,KAAK,GAAGxH,OACvH,SAEJ,MAAMyU,EAAaD,EAAmBhN,KAAK,GAAGxH,OACxC0U,OAAkE,IAA1CF,EAAmBhN,KAAK,GAAGmN,YACjDH,EAAmBhN,KAAK,GAAGmN,WAC5B9T,MAAMC,QAAQ2T,EAAWtT,WAAasT,EAAWtT,SAAShF,OAAS,EACpEyY,EAAW,CACb,GAAM,CACF,SAAY,CAAC,WACb,WAAc,CACV,QAAW,CAAE,MAASP,KAG9B,KAAQ,CACJ,SAAY,GAAGQ,OAAOH,EAAe,CAAC,QAAU,IAChD,WAAc,CACV,KAAQD,KAIpBjZ,KAAK8X,gBAAgBlX,KAAKwY,EAC9B,CACA,MAAME,EAAe,KAAaP,cAClC,IAAK,MAAMF,KAAeS,EAAaC,OACnCX,EAAgBC,GAEpB7Y,KAAK8X,gBAAgBlX,QAAQ8X,GAC7B1Y,KAAKsY,eAAekB,oBAAoBvL,GAAsB4J,SAClE,E,wCChzBJ,MAAM4B,GACF,WAAAtN,CAAY+F,EAAQwH,EAAkBC,EAAiBC,GACnD5Z,KAAKkS,OAASA,EACdlS,KAAK0Z,iBAAmBA,EACxB1Z,KAAK8V,QA3Cb,SAA4B+D,GACxB,MAAM/D,EAAU+D,EACVC,EAAM,CAAC,EACb,IAAK,MAAM3a,KAAO2W,EAAS,CACvB,MAAMjO,EAASiO,EAAQ3W,GACvB,GAAI0I,EAAOlH,OAAQ,CACf,MAAM4F,EAAQsB,EAAO,GACfkS,EAAYlS,EAAO,GACnBmS,EAAYnS,EAAO,GACnBoS,EAAiBpS,EAAO,GACxBqS,EAAOtP,OAAO/C,EAAO,IACrBsS,EAAyB,IAAlBtS,EAAOlH,OAAekH,EAAO,QAAKyC,EAC/CwP,EAAI3a,GAAO,CACP,MAASoH,EACT,KAAQ4T,EACR,UAAaJ,EACb,UAAaC,EACb,eAAkBC,EAClB,gBAA0B,EAAPC,GAAY,EAC/B,oBAA8B,EAAPA,GAAY,EACnC,oBAA8B,EAAPA,GAAY,EACnC,yBAAmC,EAAPA,GAAY,EAEhD,MAEIJ,EAAI3a,GAAO,CACP,MAAS,GACT,gBAAkB,EAClB,UAAa,GACb,oBAAsB,EACtB,UAAa,GACb,oBAAsB,EACtB,eAAkB,GAClB,yBAA2B,EAGvC,CACA,OAAO2a,CACX,CAKuBM,CAAmBT,GAClC3Z,KAAK4Z,uBAAyBA,EAC9B5Z,KAAKkS,OAAO0H,uBAAyBA,CACzC,CACA,wCAAOS,CAAkCnI,EAAQ3L,EAAOqT,GACpD,MAAMU,EAAqB,IAAMb,GAAWvH,EAAQ,GAAI,CAAC,GAAG,GAE5D,OADAoI,EAAmBxE,QAAUvP,EACtB+T,CACX,CACA,MAAAC,CAAOC,GACHxa,KAAKkS,OAASsI,EAAMtI,OACpBlS,KAAK0Z,iBAAmBc,EAAMd,iBAC9B1Z,KAAK8V,QAAU0E,EAAM1E,QACrB9V,KAAK4Z,qBAAuBY,EAAMZ,qBAClC5Z,KAAKkS,OAAO0H,qBAAuBY,EAAMZ,oBAC7C,CACA,QAAAa,CAASD,GACL,IAAIE,EAAQ,EACZ,IAAK,MAAMvb,KAAOqb,EAAO,CACrB,GAAI,OAAsB,cAARrb,GAA+B,SAARA,GACrC,SAEJ,GAAI,OAAoB,cAARA,GAA+B,WAARA,GACnC,SAEJ,MAAMwb,EAAiB3a,KAAK8V,QAAQ3W,QACbmL,IAAnBqQ,IACAD,GAAS,GAEb,MAAME,EAAeJ,EAAMrb,GACvBwb,GAAkBC,GAAgBD,EAAepU,QAAUqU,EAAarU,QACxEmU,GAAS,EAEjB,CACA,OAAOA,CACX,CACA,KAAAG,CAAML,GACF,OAAIxa,KAAK4Z,uBAAyBY,EAAMZ,uBAGpC,OAAoB5Z,KAAKkS,WAAY,OAAoBsI,EAAMtI,SAG5DlS,KAAK8a,WAAWN,EAAM1E,QACjC,CACA,UAAAgF,CAAWN,GACP,IAAK,MAAMrb,KAAOqb,EAAO,CACrB,GAAI,OAAsB,cAARrb,GAA+B,SAARA,GACrC,SAEJ,QAA0BmL,IAAtBtK,KAAK8V,QAAQ3W,GACb,OAAO,EAEX,MAAMwb,EAAiB3a,KAAK8V,QAAQ3W,GAC9Byb,EAAeJ,EAAMrb,GAC3B,GAAIwb,EAAepU,QAAUqU,EAAarU,MACtC,OAAO,CAEf,CACA,OAAO,CACX,E,gBC/FJ,MAAM,GAA0B,IAASgS,GAAG,MAAWwC,eACjDC,GAAwB,CAC1B,GAAM,WACN,MAAS,GACT,KAAQ,SACR,MAAWvO,EAAA,GAAa,6BAA8B,YACtD,WAAc,CACV,oBAAqB,CACjBwO,MAAO,EACPvV,KAAM,SACNwV,KAAM,CAAC,OAAQ,WACf1O,QAAS,OACT9F,oBAAuB+F,EAAA,GACnB,WACA,mGAEJ0O,SAAiB,IAAP,EAAApK,IAAoB,IAAP,EAAAA,IAE3B,6BAA8B,CAC1BkK,MAAO,EACPvV,KAAM,UACN8G,SAAS,EACT9F,oBAAuB+F,EAAA,GACnB,oBACA,sEAEJ0O,SAAiB,IAAP,EAAApK,MAItB,GAAsBqK,sBAAsBJ,ICxC5C,MAAMK,GACF,WAAAlP,CAAYmP,GACRtb,KAAKub,QAAUD,EACftb,KAAKwb,OAAS,IAAMlS,GACxB,CACA,aAAAyI,GACI,OAAO/R,KAAKub,QAAQxJ,eACxB,CACA,oBAAA2B,CAAqBC,GACjB,OAAO3T,KAAKub,QAAQ7H,qBAAqBC,EAC7C,CACA,iBAAAjC,CAAkB3F,GACd,MAAM0P,EAAW1P,EAAW2P,cACtBC,EAAW3b,KAAKwb,OAAOnR,IAAIoR,GACjC,IAAKE,EAAU,CACX,MAAMC,EAAI5b,KAAKub,QAAQ7J,kBAAkB3F,GAEzC,OADA/L,KAAKwb,OAAO1R,IAAI2R,EAAUG,GACnBA,CACX,CACA,OAAOD,CACX,E,eCfJ,MAAME,WAAwC,KAC1C,WAAA1P,CAAY2P,EAAQrb,GAChBmN,MAAM,EAAInN,GACVT,KAAK+b,QAAUD,CACnB,CACA,SAAAE,CAAUtb,GACN,OAAIA,EAAMub,0BACC,GAEJjc,KAAK+b,QAAQG,qBAAqBxb,EAAMJ,QACnD,CACA,wBAAA6b,CAAyBzb,GACrB,OAAIA,EAAMub,0BACC,GAEF,KAAa3P,SAAS5L,EAAMJ,QACzC,CACA,UAAA8b,GACI,OAAO,KAAgBtL,QAAQ9Q,KAAKqc,IAAKrc,KAAKsc,SAAUvQ,GAAe/L,KAAKmc,yBAAyBpQ,IACzG,CACA,aAAAwQ,CAAc7b,GACV,OAAIA,EAAMub,0BACC,GAEJjc,KAAK+b,QAAQS,uBAAuB9b,EAAMJ,QACrD,CACA,uBAAAmc,CAAwB/b,GACpB,OAAOV,KAAK+b,QAAQW,oCAAoChc,EAC5D,CACA,qBAAAic,CAAsBjc,GAClB,GAAIA,EAAMub,0BACN,MAAO,GAEX,MAAMpU,EAAS7H,KAAK+b,QAAQa,+BAA+Blc,EAAMJ,SACjE,OAAQuH,EAASA,EAAO7I,cAAgB6I,CAC5C,CACA,UAAAgV,CAAWnc,GACP,OAAOV,KAAK8c,YAAYpc,EAAMJ,QAClC,CACA,WAAAwc,CAAYxc,GACR,OAAgB,KAAZA,GACe,KAAZA,GACY,KAAZA,GACY,KAAZA,GAGWN,KAAK+b,QAAQS,uBAAuBlc,KAC5BN,KAAK+b,QAAQa,+BAA+Btc,EAE1E,CACA,iBAAAyc,CAAkBrc,GACd,GAAIA,EAAMsc,gBACN,OAAO,KAEX,IAAInV,EAAS,GAcb,OAbInH,EAAM2S,UACNxL,GAAU,SAEVnH,EAAM4S,WACNzL,GAAU,UAEVnH,EAAM0S,SACNvL,GAAU,QAEVnH,EAAMyS,UACNtL,GAAU,SAEdA,GAAY,KAAayE,SAAS5L,EAAMJ,SACjCuH,CACX,CACA,+BAAAoV,CAAgCvc,GAC5B,OAAsB,IAAlBA,EAAMJ,SAAmBI,EAAM4S,UAAa5S,EAAM0S,QAAW1S,EAAMyS,QAGjD,IAAlBzS,EAAMJ,SAAmBI,EAAM2S,SAAY3S,EAAM0S,QAAW1S,EAAMyS,QAGhD,IAAlBzS,EAAMJ,SAAmBI,EAAM2S,SAAY3S,EAAM4S,UAAa5S,EAAMyS,QAGlD,KAAlBzS,EAAMJ,SAAoBI,EAAM2S,SAAY3S,EAAM4S,UAAa5S,EAAM0S,OAGlE,KAFI,OAHA,MAHA,QAHA,MAYf,CACA,0BAAO8J,CAAoBxc,EAAOoV,GAC9B,OAAKA,EAGDpV,EAAM2S,SAAW3S,EAAM4S,UAAY5S,EAAM0S,OAClC0C,EAAQmE,eAEfvZ,EAAM2S,SAAW3S,EAAM0S,OAChB0C,EAAQkE,UAEftZ,EAAM4S,SACCwC,EAAQiE,UAEZjE,EAAQvP,MAXJ,IAYf,CACA,sBAAO4W,CAAgBzc,EAAOoV,GAC1B,MAAMsH,EAAOpd,KAAKkd,oBAAoBxc,EAAOoV,GAC7C,OAAa,OAATsH,GAAiC,IAAhBA,EAAKzc,OACf,QAEJ,KAAOyc,EAAO,IACzB,EAEJ,MAAMC,GACF,WAAAlR,CAAYmR,EAAeC,EAAaC,GACpCxd,KAAKsd,cAAgBA,EACrBtd,KAAKwd,mBAAqBA,EAC1Bxd,KAAKyd,gBAAkB,GACvBzd,KAAK0d,mBAAqB,GAC1B1d,KAAKyd,gBAAkB,GACvBzd,KAAK2d,eAAiB,GACtB3d,KAAKyd,gBAAgB,GAAQ,KAAanR,SAAS,GACnD,IAAK,IAAIlM,EAAW,EAAIA,EAAW,IAAMA,IAAY,CACjD,MAAMwd,EAAmB,KAA2Bxd,IAC1B,IAAtBwd,IACA5d,KAAK0d,mBAAmBtd,GAAYwd,EACpC5d,KAAKyd,gBAAgBG,GAAsB,KAAatR,SAASsR,GACjE5d,KAAK2d,eAAeC,IAAoB,EAEhD,CACA,MAAMC,EAAiB,GACvB,IAAIC,GAAkB,EACtB9d,KAAK+d,UAAY,GACjB,IAAK,MAAMC,KAAWT,EAClB,GAAIA,EAAYU,eAAeD,GAAU,CACrC,MAAM5d,EAAW,KAAcyV,OAAOmI,GACtC,GAAiB,IAAb5d,EACA,SAEJ,MAAM+R,EAAaoL,EAAYS,GACzBJ,EAAmB,KAA2Bxd,GACpD,IAA0B,IAAtBwd,EAA0B,CAC1B,MAAMtd,EAAU,KAAoC6R,EAAWgI,OAAS,EACxE,GAAgB,IAAZ7Z,GAAkBsd,IAAqBtd,EACvC,SAEJ,GAAiB,MAAbF,EACA,QAER,CACA,MAAMmG,EAAQ4L,EAAW5L,MACnBwT,EAAY5H,EAAW4H,UACvBC,EAAY7H,EAAW6H,UACvBC,EAAiB9H,EAAW8H,eAC5B3Z,EAAU,KAAoC6R,EAAWgI,OAAS,EAClErE,EAAU,CACZ1V,SAAUA,EACVE,QAASA,EACTiG,MAAOA,EACPwT,UAAWA,EACXC,UAAWA,EACXC,eAAgBA,GAIpB,GAFAja,KAAK+d,UAAU3d,GAAY0V,EAC3B9V,KAAK0d,mBAAmBtd,GAAYE,EACpB,IAAZA,EACA,SAGJ,GADAN,KAAK2d,eAAerd,IAAW,EACV,IAAjBiG,EAAM5F,OACNX,KAAKyd,gBAAgBnd,GAAW,UAE/B,GAAIiG,EAAM5F,OAAS,EACpBX,KAAKyd,gBAAgBnd,GAAWiG,MAE/B,CACD,MAAM2X,EAAW3X,EAAM4X,WAAW,GAC9BD,GAAY,IAAOA,GAAY,KAE/BL,EAD+BK,EAAW,GAAnB,KACU,EACjCJ,GAAkB,EAClB9d,KAAKyd,gBAAgBnd,GAAW8d,OAAOC,aAAqBH,EAAW,GAAnB,KAE/CA,GAAY,IAAOA,GAAY,IACpCL,EAAeK,IAAY,EAC3BJ,GAAkB,EAClB9d,KAAKyd,gBAAgBnd,GAAWiG,GAGhCvG,KAAKyd,gBAAgBnd,GAAWiG,CAExC,CACJ,CAEJ,MAAM+X,EAA2B,CAACJ,EAAU5d,KACnCud,EAAeK,KAChBle,KAAKyd,gBAAgBnd,GAAW8d,OAAOC,aAAaH,GACxD,EA4BJ,GA1BAI,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,IAC9BA,EAAyB,GAAK,KACzBR,EAAiB,CAClB,MAAMS,EAAiB,CAACje,EAAS4d,KAC7Ble,KAAKyd,gBAAgBnd,GAAW8d,OAAOC,aAAaH,EAAS,EAEjEK,EAAe,GAAK,IACpBA,EAAe,GAAK,IACpBA,EAAe,GAAK,IACpBA,EAAe,GAAK,IACpBA,EAAe,GAAK,IACpBA,EAAe,GAAK,IACpBA,EAAe,GAAK,IACpBA,EAAe,GAAK,IACpBA,EAAe,GAAK,IACpBA,EAAe,GAAK,IACpBA,EAAe,GAAK,GACxB,CACJ,CACA,aAAAxM,GACI,MAAMlK,EAAS,GACT2W,EAAmB,CACrB,GACA,KAEJ,IAAIC,EAAM,EACV5W,EAAOjH,KAAK,6IACZ,IAAK,IAAIR,EAAW,EAAIA,EAAW,IAAMA,IAAY,CACjD,IAA8C,IAA1C,KAA2BA,KACiB,IAAxCoe,EAAiB7e,QAAQS,GACzB,SAGJqe,EAAM,GAAM,IACZ5W,EAAOjH,KAAK,6IACZiH,EAAOjH,KAAK,8IAEhB6d,IACA,MAAM3I,EAAU9V,KAAK+d,UAAU3d,GACzB4d,EAAY,KAAc1R,SAASlM,GACnCL,EAAO,CAAC,EAAO,EAAO,EAAO,GACnC,IAAK,MAAM2e,KAAO3e,EAAM,CACpB,MAAMsT,KAAiB,EAANqL,GACXpL,KAAkB,EAANoL,GACZtL,KAAgB,EAANsL,GACVC,EAAgB,IAAM,KAActL,EAASC,EAAUF,GAAQ,EAAOhT,GACtEwe,EAAe5e,KAAK6e,cAAcF,GAClCG,EAAcF,EAAiB,KAAatS,SAASsS,EAAate,SAAY,KAC9Eye,EAAcH,EAAe,IAAM/C,GAAgC7b,KAAM,CAAC4e,IAAkB,KAC5FI,EAAc,GAAG3L,EAAU,QAAU,KAAKC,EAAW,SAAW,KAAKF,EAAS,OAAS,KAAK4K,IAC5FiB,EAAaF,EAAaA,EAAWG,eAAiB,KACtDC,EAAcF,EAAYA,EAAUG,QAAQ,YAAa,SAAW,KACpEC,EAAmBN,EAAaA,EAAW1T,uBAAyB,KACpEiU,EAASzD,GAAgCsB,gBAAgBwB,EAAe7I,GACxEyJ,EAAST,EAAa,GAAGzL,EAAU,QAAU,KAAKC,EAAW,SAAW,KAAKF,EAAS,OAAS,KAAK0L,IAAe,KAEnHU,EADaT,GAAaA,EAAWU,YACX,UAAY,UAC5C5X,EAAOjH,KAAK,KAAKZ,KAAK0f,SAASV,EAAa,SAASM,OAAYtf,KAAK0f,SAASH,EAAO,SAASvf,KAAK0f,SAASP,EAAY,UAAUnf,KAAK0f,SAASL,EAAiB,SAASG,MAC/K,CACA3X,EAAOjH,KAAK,4IAChB,CACA,OAAOiH,EAAO2D,KAAK,KACvB,CACA,QAAAkU,CAASpU,EAAKmT,GAIV,IAHY,OAARnT,IACAA,EAAM,QAEHA,EAAI3K,OAAS8d,GAChBnT,EAAM,IAAMA,EAEhB,OAAOA,CACX,CACA,oBAAA4Q,CAAqB5b,GACjB,OAAON,KAAK2f,oBAAoBrf,EACpC,CACA,sBAAAkc,CAAuBlc,GACnB,OAAON,KAAK2f,oBAAoBrf,EACpC,CACA,8BAAAsc,CAA+Btc,GAC3B,OAAIN,KAAKsd,cACE,KAAasC,iBAAiBtf,GAElC,KAAauf,sBAAsBvf,EAC9C,CACA,mCAAAoc,CAAoChc,GAChC,OAAO,KAAaof,sBAAsBpf,EAAMJ,QACpD,CACA,mBAAAqf,CAAoBrf,GAChB,OAAON,KAAKyd,gBAAgBnd,IAAc,KAAagM,SAAS,EACpE,CACA,oBAAAoH,CAAqBC,GACjB,MAAMN,EAAUM,EAAcN,SAAYrT,KAAKwd,oBAAsB7J,EAAcoM,YAC7E3M,EAASO,EAAcP,QAAWpT,KAAKwd,oBAAsB7J,EAAcoM,YAC3Erf,EAAQ,IAAM,KAChB2S,EACAM,EAAcL,SACdF,EACAO,EAAcR,QACdQ,EAAcrT,SAElB,OAAO,IAAMub,GAAgC7b,KAAM,CAACU,GACxD,CACA,aAAAme,CAAcne,GACV,IAAKA,EACD,OAAO,KAEX,GAAIA,aAAiB,KACjB,OAAKV,KAAK2d,eAAejd,EAAMJ,SAGxBI,EAFI,KAIf,MAAMJ,EAAUN,KAAK0d,mBAAmBhd,EAAMN,WAAa,EAC3D,OAAgB,IAAZE,GAAmBN,KAAK2d,eAAerd,GAGpC,IAAM,KAAaI,EAAM2S,QAAS3S,EAAM4S,SAAU5S,EAAM0S,OAAQ1S,EAAMyS,QAAS7S,GAF3E,IAGf,CACA,iBAAAoR,CAAkB3F,GACd,MAAMtL,GAAS,OAA6BsL,EAAWtL,OAAOuJ,KAAItJ,GAASV,KAAK6e,cAAcne,MAC9F,OAAID,EAAOE,OAAS,EACT,CAAC,IAAMkb,GAAgC7b,KAAMS,IAEjD,EACX,E,gBCxVJ,MAAMuf,GAAwB,GAC9B,MAAMC,WAAiC,KACnC,WAAA9T,CAAY2P,EAAQoE,EAAIzf,GACpBmN,MAAMsS,EAAIzf,GACVT,KAAK+b,QAAUD,CACnB,CACA,SAAAE,CAAUtb,GACN,OAAOV,KAAK+b,QAAQoE,2BAA2Bzf,EACnD,CACA,aAAA6b,CAAc7b,GACV,OAAOV,KAAK+b,QAAQqE,6BAA6B1f,EACrD,CACA,uBAAA+b,CAAwB/b,GACpB,OAAOV,KAAK+b,QAAQsE,4CAA4C3f,EACpE,CACA,qBAAAic,CAAsBjc,GAClB,OAAOV,KAAK+b,QAAQuE,qCAAqC5f,EAC7D,CACA,UAAAmc,CAAWtI,GACP,IAAKA,EACD,OAAO,EAEX,IAAsD,IAAlD,KAA2BA,EAAQnU,UACnC,OAAO,EAEX,MAAMmgB,EAAIvgB,KAAK+b,QAAQqE,6BAA6B7L,GAC9CiM,EAAIxgB,KAAK+b,QAAQuE,qCAAqC/L,GAC5D,OAAKgM,IAAMC,MAGND,IAAMC,IAGHD,EAAEvhB,gBAAkBwhB,EAAExhB,aAClC,CACA,iBAAA+d,CAAkBrc,GACd,OAAOV,KAAK+b,QAAQ0E,+BAA+B/f,EACvD,CACA,+BAAAuc,CAAgCvc,GAC5B,OAAyB,MAAnBA,EAAMN,UAAwC,MAAnBM,EAAMN,UAAwBM,EAAM4S,UAAa5S,EAAM0S,QAAW1S,EAAMyS,QAGhF,MAAnBzS,EAAMN,UAAwC,MAAnBM,EAAMN,UAAwBM,EAAM2S,SAAY3S,EAAM4S,UAAa5S,EAAMyS,QAGjF,MAAnBzS,EAAMN,UAAwC,MAAnBM,EAAMN,UAAwBM,EAAM2S,SAAY3S,EAAM0S,QAAW1S,EAAMyS,QAG/E,MAAnBzS,EAAMN,UAAwC,MAAnBM,EAAMN,UAAwBM,EAAM2S,SAAY3S,EAAM4S,UAAa5S,EAAM0S,OAGnG,KAFI,OAHA,QAHA,MAHA,MAYf,EAEJ,MAAMsN,GACF,WAAAvU,CAAYkH,EAASC,EAAUF,EAAQhT,GACnCJ,KAAKqT,QAAUA,EACfrT,KAAKsT,SAAWA,EAChBtT,KAAKoT,OAASA,EACdpT,KAAKI,SAAWA,CACpB,CACA,QAAAkM,GACI,MAAO,GAAGtM,KAAKqT,QAAU,QAAU,KAAKrT,KAAKsT,SAAW,SAAW,KAAKtT,KAAKoT,OAAS,OAAS,KAAS,KAAc9G,SAAStM,KAAKI,WACxI,CACA,MAAAugB,CAAOnG,GACH,OAAQxa,KAAKqT,UAAYmH,EAAMnH,SACxBrT,KAAKsT,WAAakH,EAAMlH,UACxBtT,KAAKoT,SAAWoH,EAAMpH,QACtBpT,KAAKI,WAAaoa,EAAMpa,QACnC,CACA,mBAAA8c,CAAoBpH,GAChB,OAAKA,EAGD9V,KAAKqT,SAAWrT,KAAKsT,UAAYtT,KAAKoT,OAC/B0C,EAAQmE,eAEfja,KAAKqT,SAAWrT,KAAKoT,OACd0C,EAAQkE,UAEfha,KAAKsT,SACEwC,EAAQiE,UAEZjE,EAAQvP,MAXJ,EAYf,CACA,eAAA4W,CAAgBrH,GACZ,MAAMoI,EAAW0C,GAAuBC,YAAY7gB,KAAKkd,oBAAoBpH,IAC7E,OAAiB,IAAboI,EACO,QAEPA,GAAY,KAAQA,GAAY,IACzB,KAAUA,EAAS5R,SAAS,IAEhC,KAAO8R,OAAOC,aAAaH,GAAY,IAClD,EAEJ,MAAM4C,GACF,WAAA3U,CAAYkH,EAASC,EAAUF,EAAQ9S,GACnCN,KAAKqT,QAAUA,EACfrT,KAAKsT,SAAWA,EAChBtT,KAAKoT,OAASA,EACdpT,KAAKM,QAAUA,CACnB,CACA,QAAAgM,GACI,MAAO,GAAGtM,KAAKqT,QAAU,QAAU,KAAKrT,KAAKsT,SAAW,SAAW,KAAKtT,KAAKoT,OAAS,OAAS,KAAS,KAAa9G,SAAStM,KAAKM,UACvI,EAEJ,MAAMygB,GACF,WAAA5U,GACInM,KAAK0d,mBAAqB,GAC1B1d,KAAKghB,mBAAqB,GAC1BhhB,KAAK0d,mBAAqB,GAC1B1d,KAAKghB,mBAAqB,EAC9B,CACA,oBAAAC,GACIjhB,KAAKkhB,WAAW,IAChBlhB,KAAKkhB,WAAW,IACpB,CACA,UAAAA,CAAW9gB,GACP,IAAK,IAAIse,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMyC,EAAuBnhB,KAAK0d,oBAAoBtd,GAAY,GAAKse,GACvE,GAAKyC,EAGL,IAAK,IAAInO,EAAI,EAAGe,EAAMoN,EAAqBxgB,OAAQqS,EAAIe,EAAKf,IAAK,CAC7D,MAAMoO,EAAwBphB,KAAKghB,mBAAmBG,EAAqBnO,IAC3E,GAAqC,IAAjCoO,EAAsBzgB,OAG1B,IAAK,IAAI0gB,EAAI,EAAGtN,EAAMqN,EAAsBzgB,OAAQ0gB,EAAItN,EAAKsN,IAAK,CAC9D,MAAMjX,EAAQgX,EAAsBC,GAEpC,GADuBjX,IAAU,IACXhK,EAAU,CAC5B,IAAK,IAAIiV,EAAIgM,EAAI,EAAGhM,EAAItB,EAAKsB,IACzB+L,EAAsB/L,EAAI,GAAK+L,EAAsB/L,GAEzD+L,EAAsBrN,EAAM,GAAK3J,CACrC,CACJ,CACJ,CACJ,CACJ,CACA,iBAAAkX,CAAkBC,EAAeC,GAC7B,GAA6B,IAAzBA,EAAalhB,QACb,OAEJ,MAAMmhB,EAAuBzhB,KAAK0hB,qBAAqBH,GACjDI,EAAsB3hB,KAAK4hB,oBAAoBJ,GAC/CK,EAAmBL,EAAalhB,SAAW,IAAOkhB,EAAalhB,SAAW,GAC1EwhB,EAAoBN,EAAalhB,SAAW,IAAOkhB,EAAalhB,SAAW,GAC3EyhB,EAAwB/hB,KAAK0d,mBAAmB+D,GACtD,GAAII,GAAkBC,GAClB,GAAIC,EACA,IAAK,IAAI/O,EAAI,EAAGe,EAAMgO,EAAsBphB,OAAQqS,EAAIe,EAAKf,IACzD,GAAI+O,EAAsB/O,KAAO2O,EAC7B,YAMZ,GAAII,GAA0D,IAAjCA,EAAsBphB,OAC/C,OAGRX,KAAK0d,mBAAmB+D,GAAwBzhB,KAAK0d,mBAAmB+D,IAAyB,GACjGzhB,KAAK0d,mBAAmB+D,GAAsBO,QAAQL,GACtD3hB,KAAKghB,mBAAmBW,GAAuB3hB,KAAKghB,mBAAmBW,IAAwB,GAC/F3hB,KAAKghB,mBAAmBW,GAAqBK,QAAQP,EACzD,CACA,kBAAAQ,CAAmBT,GACf,MAAMG,EAAsB3hB,KAAK4hB,oBAAoBJ,GAC/CU,EAAwBliB,KAAKghB,mBAAmBW,GACtD,IAAKO,GAA0D,IAAjCA,EAAsBvhB,OAChD,MAAO,GAEX,MAAMkH,EAAS,GACf,IAAK,IAAImL,EAAI,EAAGe,EAAMmO,EAAsBvhB,OAAQqS,EAAIe,EAAKf,IAAK,CAC9D,MAAMyO,EAAuBS,EAAsBlP,GAC7CK,KAAkC,EAAvBoO,GACXnO,KAAmC,EAAvBmO,GACZrO,KAAiC,EAAvBqO,GACVrhB,EAAYqhB,IAAyB,EAC3C5Z,EAAOmL,GAAK,IAAO0N,GAAcrN,EAASC,EAAUF,EAAQhT,EAChE,CACA,OAAOyH,CACX,CACA,mBAAAsa,CAAoBZ,GAChB,MAAME,EAAuBzhB,KAAK0hB,qBAAqBH,GACjDa,EAAuBpiB,KAAK0d,mBAAmB+D,GACrD,IAAKW,GAAwD,IAAhCA,EAAqBzhB,OAC9C,MAAO,GAEX,MAAMkH,EAAS,GACf,IAAK,IAAImL,EAAI,EAAGe,EAAMqO,EAAqBzhB,OAAQqS,EAAIe,EAAKf,IAAK,CAC7D,MAAM2O,EAAsBS,EAAqBpP,GAC3CK,KAAiC,EAAtBsO,GACXrO,KAAkC,EAAtBqO,GACZvO,KAAgC,EAAtBuO,GACVrhB,EAAWqhB,IAAwB,EACzC9Z,EAAOmL,GAAK,IAAO8N,GAAazN,EAASC,EAAUF,EAAQ9S,EAC/D,CACA,OAAOuH,CACX,CACA,kBAAAwa,CAAmBjiB,GACf,GAAIA,GAAY,IAAOA,GAAY,GAC/B,OAAQA,GACJ,KAAK,GAAK,OAAO,GACjB,KAAK,GAAK,OAAO,GACjB,KAAK,GAAK,OAAO,GACjB,KAAK,GAAK,OAAO,GACjB,KAAK,GAAK,OAAO,GACjB,KAAK,GAAK,OAAO,GACjB,KAAK,GAAK,OAAO,GACjB,KAAK,GAAK,OAAO,GACjB,KAAK,GAAK,OAAO,GACjB,KAAK,GAAK,OAAO,GAGzB,MAAMkiB,EAAiBtiB,KAAKmiB,oBAAoB,IAAOzB,IAAc,GAAO,GAAO,EAAOtgB,IACpFmiB,EAAiBviB,KAAKmiB,oBAAoB,IAAOzB,IAAc,GAAO,GAAM,EAAOtgB,IACzF,GAA8B,IAA1BkiB,EAAe3hB,QAA0C,IAA1B4hB,EAAe5hB,OAAc,CAC5D,MAAM6hB,EAAYF,EAAe,GAAGhP,SAC9BmP,EAAWH,EAAe,GAAGhiB,QAC7BoiB,EAAYH,EAAe,GAAGjP,SAEpC,GAAImP,IADaF,EAAe,GAAGjiB,SACNkiB,IAAcE,EACvC,OAAOD,CAEf,CACA,OAAQ,CACZ,CACA,oBAAAf,CAAqBH,GACjB,OAAOvhB,KAAK2iB,QAAQpB,EAAclO,QAASkO,EAAcjO,SAAUiO,EAAcnO,OAAQmO,EAAcnhB,SAC3G,CACA,mBAAAwhB,CAAoBJ,GAChB,OAAOxhB,KAAK2iB,QAAQnB,EAAanO,QAASmO,EAAalO,SAAUkO,EAAapO,OAAQoO,EAAalhB,QACvG,CACA,OAAAqiB,CAAQtP,EAASC,EAAUF,EAAQwP,GAC/B,QAAUvP,EAAU,EAAI,IAAM,GACtBC,EAAW,EAAI,IAAM,GACrBF,EAAS,EAAI,IAAM,EACrBwP,GAAa,KAAO,CAC9B,EAEJ,MAAMhC,GACF,WAAAzU,CAAYmR,EAAeC,EAAaC,EAAoBqF,GACxD7iB,KAAKsd,cAAgBA,EACrBtd,KAAKwd,mBAAqBA,EAC1Bxd,KAAK6iB,IAAMA,EACX7iB,KAAK8iB,iBAAmB,GACxB9iB,KAAK+iB,oBAAsB,GAC3B/iB,KAAK+d,UAAY,GACjB/d,KAAKgjB,uBAAyB,IAAOjC,GACrC/gB,KAAK8iB,iBAAmB,GACxB9iB,KAAK+iB,oBAAsB,GAC3B,MAAME,EAAqB,CAACC,EAAWC,EAAYC,EAAUhjB,EAAUijB,EAAWC,EAAYC,EAAUjjB,KACpGN,KAAKgjB,uBAAuB1B,kBAAkB,IAAOZ,KACjDwC,IACAC,IACAC,EACAhjB,GACC,IAAO0gB,KACRuC,IACAC,IACAC,EACAjjB,GACA,EAEFkjB,EAAqB,CAACC,EAAUC,EAAWC,EAASvjB,EAAUE,KAChE,IAAK,IAAI+S,EAAUoQ,EAAUpQ,GAAW,EAAGA,IACvC,IAAK,IAAIC,EAAWoQ,EAAWpQ,GAAY,EAAGA,IAC1C,IAAK,IAAIF,EAASuQ,EAASvQ,GAAU,EAAGA,IACpC6P,EAAmB5P,EAASC,EAAUF,EAAQhT,EAAUiT,EAASC,EAAUF,EAAQ9S,EAG/F,EAEJ,IAAK,IAAIF,EAAW,EAAIA,EAAW,IAAMA,IACrCJ,KAAK8iB,iBAAiB1iB,GAAY,KAEtC,IAAK,IAAIA,EAAW,EAAIA,EAAW,IAAMA,IACrCJ,KAAK+iB,oBAAoB3iB,GAAY,KAEzC,IAAK,IAAIA,EAAW,EAAIA,EAAW,IAAMA,IAAY,CACjD,MAAME,EAAU,KAA2BF,IAC1B,IAAbE,IACAkjB,EAAmB,EAAG,EAAG,EAAGpjB,EAAUE,GACtCN,KAAK8iB,iBAAiB1iB,GAAe,KAAakM,SAAShM,GAEvDN,KAAK+iB,oBAAoB3iB,GADb,IAAZE,GAA8B,IAAZA,GAA8B,KAAZA,GAA+B,IAAZA,GAA8B,IAAZA,EACpC,KAGA,IAAQ,KAAcgM,SAASlM,MAGhF,CACA,MAAMwjB,EAA8B,CAAC,EACrC,CACI,MAAMC,EAAsB,GAC5B,IAAK,MAAM1jB,KAAeod,EACtB,GAAIA,EAAYU,eAAe9d,GAAc,CACzC,MAAMC,EAAW,KAAcyV,OAAO1V,GACtC,GAAiB,IAAbC,EACA,SAEJ,IAA8C,IAA1C,KAA2BA,GAC3B,SAEJ,MAAM+R,EAAaoL,EAAYpd,GACzBoG,EAAQqa,GAAuBC,YAAY1O,EAAW5L,OACxDA,GAAS,IAAOA,GAAS,MAEzBsd,EAD+Btd,EAAQ,GAAhB,KACe,EAE9C,CAEJ,MAAM+X,EAA2B,CAACJ,EAAU9d,EAAUmG,EAAOwT,KACpD8J,EAAoB3F,KACrB0F,EAA+B,KAActX,SAASlM,IAAe,CACjEmG,MAAOA,EACPwT,UAAWA,EACXC,UAAW,GACXC,eAAgB,IAExB,EAEJqE,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,KACxCA,EAAyB,GAAK,GAAK,IAAK,IAC5C,CACA,MAAMwF,EAAW,GACjB,IAAIC,EAAc,EAClB,IAAK,MAAM5jB,KAAeod,EACtB,GAAIA,EAAYU,eAAe9d,GAAc,CACzC,MAAMC,EAAW,KAAcyV,OAAO1V,GACtC,GAAiB,IAAbC,EACA,SAEJ,IAA8C,IAA1C,KAA2BA,GAC3B,SAEJJ,KAAK+d,UAAU3d,GAAYmd,EAAYpd,GACvC,MAAMgS,EAAayR,EAA4BzjB,IAAgBod,EAAYpd,GACrEoG,EAAQqa,GAAuBC,YAAY1O,EAAW5L,OAItDuP,EAAU,CACZ1V,SAAUA,EACVmG,MAAOA,EACPwT,UANc6G,GAAuBC,YAAY1O,EAAW4H,WAO5DC,UANc4G,GAAuBC,YAAY1O,EAAW6H,WAO5DC,eANmB2G,GAAuBC,YAAY1O,EAAW8H,iBAUrE,GAFA6J,EAASC,KAAiBjO,EAC1B9V,KAAK+iB,oBAAoB3iB,GAAY,IAAQ,KAAckM,SAASlM,MAChEmG,GAAS,IAAOA,GAAS,IAAM,CAC/B,MAAMyd,EAAyBzd,EAAQ,GAAhB,GACvBvG,KAAK8iB,iBAAiB1iB,GAAYge,OAAOC,aAAa2F,EAC1D,MAEIhkB,KAAK8iB,iBAAiB1iB,GADjBmG,GAAS,IAAOA,GAAS,IAGzBA,EAF6B6X,OAAOC,aAAa9X,GAMpB,IAE1C,CAEJ,IAAK,IAAIyM,EAAI8Q,EAASnjB,OAAS,EAAGqS,GAAK,EAAGA,IAAK,CAC3C,MAAM8C,EAAUgO,EAAS9Q,GACnB5S,EAAW0V,EAAQ1V,SACnB6Z,EAAiBnE,EAAQmE,eAC/B,GAAIA,IAAmBnE,EAAQkE,WAAaC,IAAmBnE,EAAQiE,WAAaE,IAAmBnE,EAAQvP,MAC3G,SAEJ,MAAMkN,EAAKmN,GAAuBqD,cAAchK,GAChD,IAAKxG,EACD,SAEJ,MAAM6P,EAAa7P,EAAGH,SAChBhT,EAAUmT,EAAGnT,QAEf2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EADtCkjB,EACyC,EAGA,EAHG,EAAGhjB,EAKvD,CACA,IAAK,IAAI0S,EAAI8Q,EAASnjB,OAAS,EAAGqS,GAAK,EAAGA,IAAK,CAC3C,MAAM8C,EAAUgO,EAAS9Q,GACnB5S,EAAW0V,EAAQ1V,SACnB4Z,EAAYlE,EAAQkE,UAC1B,GAAIA,IAAclE,EAAQiE,WAAaC,IAAclE,EAAQvP,MACzD,SAEJ,MAAMkN,EAAKmN,GAAuBqD,cAAcjK,GAChD,IAAKvG,EACD,SAEJ,MAAM6P,EAAa7P,EAAGH,SAChBhT,EAAUmT,EAAGnT,QAEf2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EADtCkjB,EACyC,EAGA,EAHG,EAAGhjB,EAKvD,CACA,IAAK,IAAI0S,EAAI8Q,EAASnjB,OAAS,EAAGqS,GAAK,EAAGA,IAAK,CAC3C,MAAM8C,EAAUgO,EAAS9Q,GACnB5S,EAAW0V,EAAQ1V,SACnB2Z,EAAYjE,EAAQiE,UAC1B,GAAIA,IAAcjE,EAAQvP,MACtB,SAEJ,MAAMkN,EAAKmN,GAAuBqD,cAAclK,GAChD,IAAKtG,EACD,SAEJ,MAAM6P,EAAa7P,EAAGH,SAChBhT,EAAUmT,EAAGnT,QACfgjB,GACAL,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,KAG/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAEvD,CACA,IAAK,IAAI0S,EAAI8Q,EAASnjB,OAAS,EAAGqS,GAAK,EAAGA,IAAK,CAC3C,MAAM8C,EAAUgO,EAAS9Q,GACnB5S,EAAW0V,EAAQ1V,SACnBqT,EAAKmN,GAAuBqD,cAAcnO,EAAQvP,OACxD,IAAKkN,EACD,SAEJ,MAAM6P,EAAa7P,EAAGH,SAChBhT,EAAUmT,EAAGnT,QACfgjB,GACAL,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,KAG/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAC/C2iB,EAAmB,EAAG,EAAG,EAAG7iB,EAAU,EAAG,EAAG,EAAGE,GAEvD,CACAkjB,EAAmB,EAAG,EAAG,EAAG,GAAK,IACjCA,EAAmB,EAAG,EAAG,EAAG,GAAK,IACjCA,EAAmB,EAAG,EAAG,EAAG,GAAK,IACjCA,EAAmB,EAAG,EAAG,EAAG,GAAK,IACjCA,EAAmB,EAAG,EAAG,EAAG,GAAK,IACjCA,EAAmB,EAAG,EAAG,EAAG,GAAK,IACjCA,EAAmB,EAAG,EAAG,EAAG,GAAK,IACjCA,EAAmB,EAAG,EAAG,EAAG,GAAK,IACjCA,EAAmB,EAAG,EAAG,EAAG,GAAK,IACjCA,EAAmB,EAAG,EAAG,EAAG,GAAK,IACjCxjB,KAAKgjB,uBAAuB/B,sBAChC,CACA,aAAAlP,GACI,MAAMlK,EAAS,GACT2W,EAAmB,CACrB,GACA,KAEJ,IAAIC,EAAM,EACV5W,EAAOjH,KAAK,iBAAiBZ,KAAKsd,iBAClCzV,EAAOjH,KAAK,oNACZ,IAAK,IAAIR,EAAW,EAAIA,EAAW,IAAMA,IAAY,CACjD,IAA8C,IAA1C,KAA2BA,KACiB,IAAxCoe,EAAiB7e,QAAQS,GACzB,SAGJqe,EAAM,GAAM,IACZ5W,EAAOjH,KAAK,oNACZiH,EAAOjH,KAAK,qNAEhB6d,IACA,MAAM3I,EAAU9V,KAAK+d,UAAU3d,GAC/B,IAAK,IAAIse,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAGM6C,EAAgB,IAAOb,MAHJ,EAANhC,MACO,EAANA,MACI,EAANA,GAC0Dte,GACtE2e,EAAa/e,KAAK0T,qBAAqB,CACzCwQ,6BAA6B,EAC7B7Q,QAASkO,EAAclO,QACvBC,SAAUiO,EAAcjO,SACxBF,OAAQmO,EAAcnO,OACtBD,SAAS,EACT4M,aAAa,EACbzf,SAAU,EACVsV,KAAS,KAActJ,SAASlM,KAE9B+jB,EAAsB5C,EAAcjV,WACpCgT,EAASiC,EAAcpE,gBAAgBrH,GACvCmJ,EAAYF,EAAWG,eACvBC,EAAcF,EAAYA,EAAUG,QAAQ,YAAa,SAAW,KACpEC,EAAkBN,EAAW1T,uBAC7B+Y,EAAyBrF,EAAWsF,yBACpCC,EAAiBvF,EAAW9N,oBAAoB,GAEhDuO,EADaT,GAAaA,EAAWU,YACX,UAAY,UACtC8E,EAAWvkB,KAAKgjB,uBAAuBb,oBAAoBZ,GACjE,GAAwB,IAApBgD,EAAS5jB,OACTkH,EAAOjH,KAAK,KAAKZ,KAAK0f,SAASyE,EAAkB,SAAS7E,OAAYtf,KAAK0f,SAAS,GAAI,SAAS1f,KAAK0f,SAAS,GAAI,QAAQ1f,KAAK0f,SAASP,EAAY,SAASnf,KAAK0f,SAASL,EAAiB,SAASrf,KAAK0f,SAAS0E,EAAwB,SAASpkB,KAAK0f,SAAS4E,EAAgB,SAAS9E,YAG5R,IAAK,IAAIxM,EAAI,EAAGe,EAAMwQ,EAAS5jB,OAAQqS,EAAIe,EAAKf,IAAK,CACjD,MAAMwR,EAAUD,EAASvR,GACzB,IAAIyR,EACJ,MAAMC,EAAiB1kB,KAAKgjB,uBAAuBf,mBAAmBuC,GACtE,GAA8B,IAA1BE,EAAe/jB,OACf8jB,EAAc,OAEb,CACD,IAAIE,GAAY,EAChB,IAAK,IAAItD,EAAI,EAAGA,EAAIqD,EAAe/jB,OAAQ0gB,IACvC,GAAIqD,EAAerD,GAAGV,OAAOY,GAAgB,CACzCoD,EAAWtD,EAAI,EACf,KACJ,CAEJoD,EAAcrG,OAAOuG,EACzB,CACA,MAAMC,EAAmBJ,EAAQlY,WACvB,IAAN0G,EACAnL,EAAOjH,KAAK,KAAKZ,KAAK0f,SAASyE,EAAkB,SAAS7E,OAAYtf,KAAK0f,SAASkF,EAAe,SAAS5kB,KAAK0f,SAAS+E,EAAa,QAAQzkB,KAAK0f,SAASP,EAAY,SAASnf,KAAK0f,SAASL,EAAiB,SAASrf,KAAK0f,SAAS0E,EAAwB,SAASpkB,KAAK0f,SAAS4E,EAAgB,SAAS9E,OAGhT3X,EAAOjH,KAAK,KAAKZ,KAAK0f,SAAS,GAAI,iBAAiB1f,KAAK0f,SAASkF,EAAe,SAAS5kB,KAAK0f,SAAS+E,EAAa,QAAQzkB,KAAK0f,SAAS,GAAI,SAAS1f,KAAK0f,SAAS,GAAI,SAAS1f,KAAK0f,SAAS,GAAI,SAAS1f,KAAK0f,SAAS,GAAI,kBAExO,CAER,CACA7X,EAAOjH,KAAK,mNAChB,CACA,OAAOiH,EAAO2D,KAAK,KACvB,CACA,QAAAkU,CAASpU,EAAKmT,GAIV,IAHY,OAARnT,IACAA,EAAM,QAEHA,EAAI3K,OAAS8d,GAChBnT,EAAM,IAAMA,EAEhB,OAAOA,CACX,CACA,2BAAAuZ,CAA4BnkB,GACxB,GAAsB,IAAlBA,EAAMJ,QACN,MAAO,CAAC,IAAO,KACXI,EAAM2S,QACN3S,EAAM4S,SACN5S,EAAM0S,OACN1S,EAAMyS,QACN,KAGR,MAAMuR,EAAiB1kB,KAAKgjB,uBAAuBf,mBAAmB,IAAOnB,GAAapgB,EAAM2S,QAAS3S,EAAM4S,SAAU5S,EAAM0S,OAAQ1S,EAAMJ,UACvIuH,EAAS,GACf,IAAK,IAAImL,EAAI,EAAGe,EAAM2Q,EAAe/jB,OAAQqS,EAAIe,EAAKf,IAAK,CACvD,MAAMuO,EAAgBmD,EAAe1R,GACrCnL,EAAOmL,GAAK,IAAO,KACfuO,EAAclO,QACdkO,EAAcjO,SACdiO,EAAcnO,OACd1S,EAAMyS,QACNoO,EAAcnhB,SAEtB,CACA,OAAOyH,CACX,CACA,0BAAAsY,CAA2Bzf,GACvB,IAAKA,EACD,OAAO,KAEX,GAAIA,EAAMub,0BACN,MAAO,GAEX,GAAiB,IAAbjc,KAAK6iB,IACL,OAAQniB,EAAMN,UACV,KAAK,GACD,MAAO,IACX,KAAK,GACD,MAAO,IACX,KAAK,GACD,MAAO,IACX,KAAK,GACD,MAAO,IAGnB,OAAOJ,KAAK8iB,iBAAiBpiB,EAAMN,SACvC,CACA,4BAAAggB,CAA6B1f,GACzB,OAAKA,EAGDA,EAAMub,0BACC,GAEJjc,KAAK8iB,iBAAiBpiB,EAAMN,UALxB,IAMf,CACA,8BAAAqgB,CAA+B/f,GAC3B,MAAMokB,EAAe9kB,KAAK+iB,oBAAoBriB,EAAMN,UACpD,IAAK0kB,EACD,OAAO,KAEX,IAAIjd,EAAS,GAcb,OAbInH,EAAM2S,UACNxL,GAAU,SAEVnH,EAAM4S,WACNzL,GAAU,UAEVnH,EAAM0S,SACNvL,GAAU,QAEVnH,EAAMyS,UACNtL,GAAU,SAEdA,GAAUid,EACHjd,CACX,CACA,oCAAAyY,CAAqC5f,GACjC,IAAKA,EACD,OAAO,KAEX,GAAIA,EAAMub,0BACN,MAAO,GAEX,MAAM2B,EAAmB,KAA2Bld,EAAMN,UAC1D,IAA0B,IAAtBwd,EACA,OAAO,KAAagC,iBAAiBhC,GAAkB5e,cAE3D,MAAM+lB,EAAkB/kB,KAAKgjB,uBAAuBX,mBAAmB3hB,EAAMN,UAC7E,IAAyB,IAArB2kB,EAAyB,CACzB,MAAMC,EAAgBhlB,KAAK6kB,4BAA4B,IAAO,KAC1DnkB,EAAM2S,QACN3S,EAAM4S,SACN5S,EAAM0S,OACN1S,EAAMyS,QACN4R,IAEJ,IAAK,IAAI/R,EAAI,EAAGe,EAAMiR,EAAcrkB,OAAQqS,EAAIe,EAAKf,IAEjD,GADqBgS,EAAchS,GAClB5S,WAAaM,EAAMN,SAChC,OAAO,KAAawf,iBAAiBmF,GAAiB/lB,aAGlE,CACA,OAAOgB,KAAK+iB,oBAAoBriB,EAAMN,SAC1C,CACA,2CAAAigB,CAA4C3f,GACxC,IAAKA,EACD,OAAO,KAEX,MAAMkd,EAAmB,KAA2Bld,EAAMN,UAC1D,IAA0B,IAAtBwd,EACA,OAAO,KAAakC,sBAAsBlC,GAE9C,MAAMmH,EAAkB/kB,KAAKgjB,uBAAuBX,mBAAmB3hB,EAAMN,UAC7E,OAAiB,IAAbJ,KAAK6iB,KAAe7iB,KAAKsd,eACc,KAApByH,GACQ,KAApBA,GACoB,KAApBA,GACoB,KAApBA,GACoB,KAApBA,GACoB,KAApBA,GACoB,KAApBA,GACoB,KAApBA,GACoB,KAApBA,GAA+C,KAApBA,KAKb,IAArBA,EACO,KAAajF,sBAAsBiF,GAJ/B,IAOnB,CACA,qBAAAE,CAAsBC,GAClB,GAA0B,IAAtBA,EAAWvkB,OACX,MAAO,GAEX,MAAMkH,EAAS,GAEf,OADA7H,KAAKmlB,6BAA6BD,EAAY,EAAG,GAAIrd,GAC9CA,CACX,CACA,4BAAAsd,CAA6BD,EAAYE,EAAcC,EAAexd,GAClE,MAAMyd,EAAYJ,EAAWE,GACvBG,EAAeH,IAAiBF,EAAWvkB,OAAS,EAC1D,IAAK,IAAIqS,EAAI,EAAGe,EAAMuR,EAAU3kB,OAAQqS,EAAIe,EAAKf,IAAK,CAClD,MAAMvS,EAAS,IAAI4kB,EAAeC,EAAUtS,IACxCuS,EACA1d,EAAOjH,KAAK,IAAOqf,GAAyBjgB,KAAMA,KAAK6iB,IAAKpiB,IAG5DT,KAAKmlB,6BAA6BD,EAAYE,EAAe,EAAG3kB,EAAQoH,EAEhF,CACJ,CACA,oBAAA6L,CAAqBC,GACjB,IAAIiC,EAAO,KAAcC,OAAOlC,EAAciC,MACjC,KAATA,IACAA,EAAO,IAEX,MAAMtV,EAAUqT,EAAcrT,QAC9B,GAAkB,KAAZA,GACe,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,IAAZA,EAAkB,CACvB,MAAMklB,EAAoB,KAA2BllB,IAC1B,IAAvBklB,IACA5P,EAAO4P,EAEf,MAEI,IAAe,KAAT5P,GACY,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,IACDtV,GAAW,EAAG,CACd,MAAMklB,EAAoB,KAA2BllB,IAC1B,IAAvBklB,IACA5P,EAAO4P,EAEf,CAGR,MAAMnS,EAAUM,EAAcN,SAAYrT,KAAKwd,oBAAsB7J,EAAcoM,YAC7E3M,EAASO,EAAcP,QAAWpT,KAAKwd,oBAAsB7J,EAAcoM,YAC3Erf,EAAQ,IAAO,KAAc2S,EAASM,EAAcL,SAAUF,EAAQO,EAAcR,QAASyC,GACnG,OAAO,IACGqK,GAAyBjgB,KAAMA,KAAK6iB,IAAK,CAACniB,GAExD,CACA,aAAAme,CAAcne,GACV,OAAKA,EAGDA,aAAiB,KACV,CAACA,GAELV,KAAK6kB,4BAA4BnkB,GAL7B,EAMf,CACA,iBAAAgR,CAAkB3F,GACd,MAAMtL,EAAYsL,EAAWtL,OAAOuJ,KAAItJ,GAASV,KAAK6e,cAAcne,KACpE,OAAOV,KAAKilB,sBAAsBxkB,EACtC,CACA,wBAAOglB,CAAkBvH,GACrB,OAAQA,GACJ,KAAK,MAAQ,OAAO,GACpB,KAAK,MAEL,KAAK,MAAQ,OAAO,GADpB,KAAK,MAEL,KAAK,MAAQ,OAAO,GACpB,KAAK,MAAQ,OAAO,GACpB,KAAK,MAAQ,OAAO,GAExB,OAAOA,CACX,CACA,oBAAO+F,CAAc/F,GAEjB,OADAA,EAAWle,KAAKylB,kBAAkBvH,IACnB8B,GAAsBrf,OAC1Bqf,GAAsB9B,GAE1B,IACX,CACA,kBAAO2C,CAAYzD,GACf,GAAoB,IAAhBA,EAAKzc,OACL,OAAO,EAEX,MAAMud,EAAWd,EAAKe,WAAW,GACjC,OAAQD,GACJ,KAAK,IAAM,OAAO,GAClB,KAAK,IAAM,OAAO,IAClB,KAAK,IAAM,OAAO,GAClB,KAAK,IAAM,OAAO,IAClB,KAAK,IAAM,OAAO,IAClB,KAAK,IAAM,OAAO,KAClB,KAAK,IAAM,OAAO,IAClB,KAAK,IAAM,OAAO,IAClB,KAAK,IAAM,OAAO,IAClB,KAAK,IAAM,OAAO,IAClB,KAAK,IAAM,OAAO,IAEtB,OAAOA,CACX,GAEJ,WACI,SAASwH,EAAOxH,EAAU5d,EAASgT,GAC/B,IAAK,IAAIN,EAAIgN,GAAsBrf,OAAQqS,EAAIkL,EAAUlL,IACrDgN,GAAsBhN,GAAK,KAE/BgN,GAAsB9B,GAAY,CAAE5d,QAASA,EAASgT,SAAUA,EACpE,CACA,IAAK,IAAIqS,EAAS,GAAKA,GAAU,GAAKA,IAClCD,EAAOC,EAAgBA,EAAS,GAAjB,IAAwB,GAE3C,IAAK,IAAIA,EAAS,GAAKA,GAAU,IAAMA,IACnCD,EAAOC,EAAgBA,EAAS,GAAjB,IAAwB,GAE3CD,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,GACjBA,EAAO,IAAM,IAAK,GAClBA,EAAO,GAAK,IAAK,GACjBA,EAAO,IAAM,IAAK,GAClBA,EAAO,GAAK,IAAK,GACjBA,EAAO,IAAM,IAAK,GAClBA,EAAO,GAAK,IAAK,GACjBA,EAAO,IAAM,IAAK,GAClBA,EAAO,GAAK,IAAK,GACjBA,EAAO,GAAK,IAAK,EACpB,CAnCD,G,wCChzBA,MAAME,WAAyC,KAC3C,gBAAIC,GACA,OAAO7lB,KAAK8lB,iBAChB,CACA,eAAIC,GACA,OAAO/lB,KAAKgmB,YAChB,CACA,wBAAIC,GACA,OAAKjmB,KAAKkmB,aAGHlmB,KAAK8lB,mBAAmB5T,QAAU,KAF9B,IAGf,CACA,oBAAIiU,GACA,OAAKnmB,KAAKkmB,aAGHlmB,KAAK8lB,mBAAmBhQ,SAAW,KAF/B,IAGf,CACA,mBAAIsQ,GACA,OAASpmB,KAAKgmB,aAAahc,KAAIqc,GAAcA,EAAWnU,QAC5D,CACA,WAAA/F,CAAYma,GACR1Y,QACA5N,KAAKsmB,sBAAwBA,EAC7BtmB,KAAKumB,2BAA6B,IAAM,KACxCvmB,KAAKwmB,0BAA4BxmB,KAAKumB,2BAA2B5Q,MACjE3V,KAAKmO,gBAAkB,KACvBnO,KAAKkmB,cAAe,EACpBlmB,KAAKgmB,aAAe,GACpBhmB,KAAKymB,KAAO,GACZzmB,KAAK8lB,kBAAoB,KACrB5V,UAAUD,UAAYC,UAAUD,SAASyW,kBACzCxW,UAAUD,SAASyW,iBAAiB,gBAAgB,KAChD1mB,KAAK2mB,wBAAwB/X,MAAMkH,IAC3B9V,KAAK4mB,mBAAmB9Q,IAG5B9V,KAAK6mB,yBAAyB,GAChC,IAGV7mB,KAAKyO,UAAUzO,KAAKsmB,sBAAsBQ,0BAA0BvX,IAC5DA,EAAEwX,qBAAqB,cACvB/mB,KAAKmO,gBAAkB,KACvBnO,KAAKumB,2BAA2BjW,OACpC,IAER,CACA,sBAAA0W,CAAuB9U,GACnBlS,KAAKgmB,aAAaplB,KAAKsR,GACvBlS,KAAKymB,KAAOzmB,KAAKgmB,YACrB,CACA,oBAAAiB,CAAqB/U,GACjB,IAAIoD,EAAQtV,KAAKymB,KAAK9mB,QAAQuS,GAC9BlS,KAAKymB,KAAKS,OAAO5R,EAAO,GACxBA,EAAQtV,KAAKgmB,aAAarmB,QAAQuS,GAClClS,KAAKgmB,aAAakB,OAAO5R,EAAO,EACpC,CACA,oBAAA6R,CAAqBC,GACjB,IAAKA,EACD,OAAO,KAEX,MAAMC,EAAarnB,KAAKsnB,sBACxB,GAAID,EAAY,CACZ,IAAIE,EAAWF,EAAW5M,SAAS2M,GACnC,GAAiB,IAAbG,EACA,MAAO,CACH1f,OAAQwf,EACR3M,MAAO,GAGf,IAAI7S,EAASwf,EACb,IAAK,IAAIrU,EAAI,EAAGA,EAAIhT,KAAKymB,KAAK9lB,OAAQqS,IAAK,CACvC,MAAM0H,EAAQ1a,KAAKymB,KAAKzT,GAAGyH,SAAS2M,GACpC,GAAI1M,EAAQ6M,EAAU,CAClB,GAAc,IAAV7M,EACA,MAAO,CACH7S,OAAQ7H,KAAKymB,KAAKzT,GAClB0H,MAAO,GAGf6M,EAAW7M,EACX7S,EAAS7H,KAAKymB,KAAKzT,EACvB,CACJ,CACA,MAAO,CACHnL,SACA6S,MAAO6M,EAEf,CACA,IAAK,IAAIvU,EAAI,EAAGA,EAAIhT,KAAKymB,KAAK9lB,OAAQqS,IAClC,GAAIhT,KAAKymB,KAAKzT,GAAG8H,WAAWsM,GACxB,MAAO,CACHvf,OAAQ7H,KAAKymB,KAAKzT,GAClB0H,MAAO,GAInB,OAAO,IACX,CACA,mBAAA4M,GACI,MAAME,EAAoBxnB,KAAKymB,KAAKjQ,QAAOtE,GAAUA,EAAOA,OAAOuV,eACnE,OAAID,EAAkB7mB,OACX6mB,EAAkB,GAEtB,IACX,CACA,kBAAAZ,CAAmBc,GACf,OAAO1nB,KAAK8lB,mBAAqB4B,GAAU1nB,KAAK8lB,kBAAkBhL,WAAW4M,EACjF,CACA,mBAAAC,GACI3nB,KAAK8lB,kBAAoB9lB,KAAKsnB,qBAClC,CACA,mBAAAM,CAAoBF,GAChB,IAAIG,GAAgB,EACpB,MAAMC,EAAwB9nB,KAAKmnB,qBAAqBO,GAiBxD,GAhBII,IACK9nB,KAAK8lB,kBAID4B,GACDI,EAAsBjgB,OAAO4S,SAASiN,GAAU1nB,KAAK8lB,kBAAkBrL,SAASiN,KAChF1nB,KAAK8lB,kBAAoBgC,EAAsBjgB,OAC/CggB,GAAgB,IANpB7nB,KAAK8lB,kBAAoBgC,EAAsBjgB,OAC/CggB,GAAgB,IASnB7nB,KAAK8lB,oBACN9lB,KAAK8lB,kBAAoB9lB,KAAKsnB,sBAC9BO,GAAgB,IAEf7nB,KAAK8lB,oBAAsB+B,EAC5B,OAEJ,MAAMvS,EAAQtV,KAAKymB,KAAK9mB,QAAQK,KAAK8lB,mBACrC9lB,KAAKymB,KAAKS,OAAO5R,EAAO,GACxBtV,KAAKymB,KAAKzE,QAAQhiB,KAAK8lB,mBACvB9lB,KAAK+nB,iBAAiB/nB,KAAK8lB,kBAC/B,CACA,mBAAAkC,CAAoB3B,GAChBrmB,KAAK8lB,kBAAoBO,EACzB,MAAM/Q,EAAQtV,KAAKymB,KAAK9mB,QAAQK,KAAK8lB,mBACvB,IAAVxQ,IAGJtV,KAAKymB,KAAKS,OAAO5R,EAAO,GACxBtV,KAAKymB,KAAKzE,QAAQhiB,KAAK8lB,mBACvB9lB,KAAK+nB,iBAAiB/nB,KAAK8lB,mBAC/B,CACA,uBAAAe,GACI7mB,KAAKioB,2BAA2BjoB,KAAKkmB,aACzC,CACA,0BAAA+B,CAA2BC,EAAavU,GAC/BuU,GAGLloB,KAAK2mB,sBAAsBhT,GAAe/E,MAAKuZ,IACvCnoB,KAAK4mB,mBAAmBuB,IAG5BnoB,KAAK4nB,oBAAoBO,EAAO,GAExC,CACA,iBAAA/Z,GACI,MAAMga,EJrMd,SAA4BC,GACxB,MAAMpY,EAAWoY,EAAqBC,SAAS,YAG/C,MAAO,CAAEC,SAFiC,YAAvBtY,GAAUsY,SAAyB,EAAK,EAExCC,kBADOC,QAAQxY,GAAUuY,mBAEhD,CIgMuBE,CAAmB1oB,KAAKsmB,uBACvC,OAAwB,IAApB8B,EAAOG,UAAoBvoB,KAAKkmB,cAAiBlmB,KAAK8lB,mBAGrD9lB,KAAKmO,kBACNnO,KAAKmO,gBAAkB,IAAMkN,GACzBsN,GAA6BC,sBAAsB5oB,KAAK8lB,kBAAmBsC,EAAOI,qBAGnFxoB,KAAKmO,iBAPD,IAAM,KAAuBia,EAAOI,kBAAmB,EAAAzX,GAQtE,CACA,8BAAA6C,CAA+BD,GACtB3T,KAAKkmB,eAGgBlmB,KAAK6oB,gCAAgClV,IAI/D3T,KAAKioB,4BAA2B,EAAMtU,GAC1C,CACA,iBAAAmV,CAAkBC,GACd,MAAMC,EAAiBhpB,KAAK+lB,YAAYvP,QAAO6P,IAAc,OAAoBA,EAAWnU,UAAY6W,IACpGC,EAAeroB,OAAS,GACxBX,KAAKgoB,oBAAoBgB,EAAe,GAEhD,CACA,gBAAAjB,CAAiB1B,GACbrmB,KAAKkmB,cAAe,EACpBlmB,KAAKmO,gBAAkB,KACvBnO,KAAKumB,2BAA2BjW,MACpC,CACA,4BAAOsY,CAAsBvC,EAAYmC,GACrC,MAAMrW,EAAakU,EAAWvQ,QACxB2R,IAAiBpB,EAAWnU,OAAOuV,aACzC,OAAW,IAAP,EAAA1W,GACO,IAAMsM,GAAsBoK,EAActV,EAAYqW,GAEvB,IAApC/e,OAAO8P,KAAKpH,GAAaxR,OACpB,IAAM,KAAuB6nB,EAAmB,EAAAzX,IAEpD,IAAM6P,GAAuB6G,EAActV,EAAYqW,EAAmB,EAAAzX,GACrF,CACA,+BAAA8X,CAAgClV,GAC5B,IAAK3T,KAAKkmB,aACN,OAAO,EAEX,MAAM+C,EAAwBtV,EACxBuV,EAAgBlpB,KAAK8lB,kBAC3B,IAAKoD,EACD,OAAO,EAEX,GAA+C,SAA3CD,EAAsBE,aAAahqB,KAAkB8pB,EAAsBE,aAAa3Z,YACxF,OAAO,EAEX,MAAMsG,EAAUoT,EAAcpT,QAAQmT,EAAsBrT,MAC5D,IAAKE,EACD,OAAO,EAEX,GAAsB,KAAlBA,EAAQvP,MAWR,OAVIoN,EAAcN,SAAWM,EAAcR,UACvCiW,YAAW,KACPppB,KAAK2mB,wBAAwB/X,MAAM8Y,IAC3B1nB,KAAK4mB,mBAAmBc,IAG5B1nB,KAAK6mB,yBAAyB,GAChC,GACH,MAEA,EAEX,MAAMwC,EAAgBJ,EAAsB7V,QAAU6V,EAAsB3V,SAAWwC,EAAQmE,eAC3FgP,EAAsB7V,OAAS0C,EAAQkE,UACnCiP,EAAsB3V,SAAWwC,EAAQiE,UAAYjE,EAAQvP,MAC/D+iB,EAAUL,EAAsB7V,QAAU6V,EAAsB3V,UAAYwC,EAAQyT,yBACrFN,EAAsB7V,QAAU0C,EAAQ0T,oBACxCP,EAAsB3V,UAAYwC,EAAQ2T,oBAC3C3T,EAAQ4T,eACZ,QAAIJ,GAAqD,SAA3CL,EAAsBE,aAAahqB,MAG5CmqB,GAAUL,EAAsBE,aAAahqB,MAAQkqB,EAI9D,CACA,2BAAM1C,CAAsBhT,GACxB,GAAIzD,UAAUD,SACV,IACI,OAAOC,UAAUD,SAAS0Z,eAAe/a,MAAMW,IAC3C,MAAMuK,EAAM,CAAC,EACb,IAAK,MAAM3a,KAAOoQ,EACduK,EAAI3a,EAAI,IAAM,CACV,MAASA,EAAI,GACb,UAAa,GACb,UAAa,GACb,eAAkB,IAG1B,OAAO2a,CAAG,GAElB,CACA,MACA,MAEC,GAAInG,IAAkBA,EAAcL,WAAaK,EAAcP,SAAWO,EAAcR,UAAYQ,EAAcR,QAAS,CAC5H,MAAM2G,EAAM,CAAC,EACPmP,EAAwBtV,EAQ9B,OAPAmG,EAAImP,EAAsBE,aAAavT,MAAQ,CAC3C,MAASqT,EAAsBE,aAAahqB,IAC5C,UAAa,GACb,UAAa,GACb,eAAkB,IAEQa,KAAKmnB,qBAAqBrN,GAE7CA,EAEJ,IACX,CACA,OAAO,IACX,EAEJ,MAAM6O,WAAqC/C,GACvC,WAAAzZ,CAAYkc,EAAsBjb,EAAqBwc,EAAgB1c,GACnEU,MAAMya,GAhTd,SAA2CwB,GACzC,OAAQA,GACN,IAAK,kDAAmD,OAAO,+BAA0Djb,MAAKkb,GAAUA,EAAOtd,SAAWsd,IAC1J,IAAK,iDAAkD,OAAO,+BAAyDlb,MAAKkb,GAAUA,EAAOtd,SAAWsd,IACxJ,IAAK,+CAAgD,OAAO,+BAAuDlb,MAAKkb,GAAUA,EAAOtd,SAAWsd,IACpJ,QAAS,OAAO,IAAIC,SAAQ,SAASC,EAASC,IACjB,mBAAnBC,eAAgCA,eAAiBd,YACvDa,EAAOE,KAAK,KAAM,IAAIC,MAAM,oCAAsCP,IAEtE,IAEH,CAuSOQ,CAAkC,0CADjB,KAAY,MAAQ,KAAc,SAAW,SAC0B,OAAOzb,MAAM0b,IACjG,MAAMvE,EAAcuE,EAAEC,2BAA2BC,SAASC,YAC1DzqB,KAAKgmB,aAAaplB,QAAUmlB,EAAY/b,KAAIrB,GAAQ,IAAO8Q,GACvD9Q,EAAKuJ,OACLvJ,EAAK+Q,iBACL/Q,EAAKmN,QACLnN,EAAKiR,yBAET5Z,KAAKymB,KAAOzmB,KAAKgmB,aACjBhmB,KAAKkmB,cAAe,EACpBlmB,KAAK6mB,yBAAyB,GAEtC,EAEJ,MAAM6D,WAA2B,KAC7B,kBAAIC,GAAmB,OAAO3qB,KAAK4qB,eAAiB,CACpD,WAAAze,CAAY0e,EAAwBrd,GAChCI,QACA5N,KAAK6qB,uBAAyBA,EAC9B7qB,KAAKwN,YAAcA,EACnBxN,KAAKmW,aAAenW,KAAKyO,UAAU,IAAM,MACzCzO,KAAK8O,YAAc9O,KAAKmW,aAAaR,MACrC3V,KAAK4qB,gBAAkB,KACvB5qB,KAAKqW,6BAA+BrW,KAAKyO,UAAU,IAAM,MAAiB,IAAMzO,KAAKsW,SAAS1H,MAAK2H,IAC3FA,GACAvW,KAAKmW,aAAa7F,MACtB,KACA,KACJtQ,KAAKyO,UAAU,KAAM+H,OAAOxW,KAAKwN,YAAYiJ,kBAAkBlH,GAAKA,EAAEmH,SAAS1W,KAAK6qB,yBAArE,EAA8F,IAAM7qB,KAAKqW,6BAA6BQ,aACzJ,CACA,gBAAMlI,SACI3O,KAAKsW,QACf,CACA,YAAMA,GACF,MAAMwU,EAAW9qB,KAAK4qB,gBACtB,IACI,MAAMlT,QAAgB1X,KAAKwN,YAAYmK,SAAS3X,KAAK6qB,wBAC/CtkB,GAAQ,QAAQmR,EAAQnR,MAAM+F,YACpC,GAA2B,YAAvB,QAAY/F,GAAqB,CACjC,MAAMqL,EAAarL,EAAM2L,OACnB4R,EAAWvd,EAAM4L,WACvBnS,KAAK4qB,gBAAkBnR,GAAWY,kCAAkCzI,EAAYkS,GAAU,EAC9F,MAEI9jB,KAAK4qB,gBAAkB,IAE/B,CACA,MAAOrb,GACHvP,KAAK4qB,gBAAkB,IAC3B,CACA,OAAOE,IAAYrT,EAAA,GAAeqT,EAAU9qB,KAAK4qB,gBACrD,EAEJ,IAAIG,GAA+B,cAA2C,KAC1E,WAAA5e,CAAY6e,EAAoBxd,EAAaJ,EAAqBwc,EAAgB1c,EAAgBmb,GAC9Fza,QACA5N,KAAKqoB,qBAAuBA,EAC5BroB,KAAKirB,2BAA6B,IAAM,KACxCjrB,KAAKqO,0BAA4BrO,KAAKirB,2BAA2BtV,MACjE,MACMzD,EADiBmW,EAAqBC,SAAS,YACvBpW,OAC9BlS,KAAKkrB,oBAAsBhZ,GAAU,aACrClS,KAAKmrB,SAAW,IAAMxC,GAA6BN,EAAsBjb,EAAqBwc,EAAgB1c,GAC9GlN,KAAKyO,UAAUzO,KAAKmrB,SAAS3E,2BAA0B,KACnDxmB,KAAKirB,2BAA2B3a,MAAM,KAEtC4B,GAAqB,eAAXA,GACVlS,KAAKmrB,SAASrC,kBAAkB5W,GAEpClS,KAAKyO,UAAU4Z,EAAqBvB,0BAAyBvX,IACzD,GAAIA,EAAEwX,qBAAqB,mBAAoB,CAC3C,MACM7U,EADiBmW,EAAqBC,SAAS,YACvBpW,OAC9BlS,KAAKkrB,oBAAsBhZ,EACZ,eAAXA,EACAlS,KAAKmrB,SAAStE,0BAGd7mB,KAAKmrB,SAASrC,kBAAkB5W,EAExC,MAEJlS,KAAKorB,oBAAsB,IAAMV,GAAmBM,EAAmBH,uBAAwBrd,GAC/FxN,KAAKorB,oBAAoBzc,aAAaC,MAAK,KACnC5O,KAAKorB,oBAAoBT,iBACzB3qB,KAAKmrB,SAASnE,uBAAuBhnB,KAAKorB,oBAAoBT,gBAC9D3qB,KAAKqrB,iCACT,IAEJrrB,KAAKyO,UAAUzO,KAAKorB,oBAAoBtc,aAAY,KAChD,MAAMwc,EAAsBtrB,KAAKmrB,SAASpF,YAAYvP,QAAOtE,GAAUA,EAAO0H,uBAC1E0R,EAAoB3qB,OAChBX,KAAKorB,oBAAoBT,eACzBW,EAAoB,GAAG/Q,OAAOva,KAAKorB,oBAAoBT,gBAGvD3qB,KAAKmrB,SAASlE,qBAAqBqE,EAAoB,IAIvDtrB,KAAKorB,oBAAoBT,gBACzB3qB,KAAKmrB,SAASnE,uBAAuBhnB,KAAKorB,oBAAoBT,gBAGtE3qB,KAAKqrB,gCAAgC,IAE7C,CACA,8BAAAA,GACI,MACMnZ,EADiBlS,KAAKqoB,qBAAqBC,SAAS,YAC5BpW,OAC1BA,GAAUlS,KAAKorB,oBAAoBT,iBAC/B,OAAoB3qB,KAAKorB,oBAAoBT,eAAezY,UAAYA,GAAUlS,KAAKmrB,SAAStF,eAC3F7lB,KAAKorB,oBAAoBT,eAAe9P,MAAM7a,KAAKmrB,SAAStF,eAC7D7lB,KAAKmrB,SAASnD,oBAAoBhoB,KAAKorB,oBAAoBT,gBAI3E,CACA,iBAAAvc,GACI,OAAOpO,KAAKmrB,SAAS/c,mBACzB,CACA,wBAAAyD,GACI,OAAO7R,KAAKmrB,SAASlF,oBACzB,CACA,qBAAAsF,GACI,OAAOvrB,KAAKmrB,SAAS/E,eACzB,CACA,qBAAApU,GACI,OAAOhS,KAAKmrB,SAAShF,gBACzB,CACA,8BAAAvS,CAA+BD,GACM,eAA7B3T,KAAKkrB,qBAGTlrB,KAAKmrB,SAASvX,+BAA+BD,EACjD,GAEJoX,IAAiC,OAAW,EACtC,OAAQ,EAAG,OACX,OAAQ,EAAG,OACX,OAAQ,EAAG,OACX,OAAQ,EAAG,QACX,OAAQ,EAAG,MACX,OAAQ,EAAG,QACdA,IACH,MAAM,GAA0B,IAASxS,GAAG,MAAWwC,eACjD,GAAwB,CAC1B,GAAM,WACN,MAAS,GACT,KAAQ,SACR,MAAWtO,EAAA,GAAa,6BAA8B,YACtD,WAAc,CACV,kBAAmB,CACf,KAAQ,SACR,QAAW,aACX,YAAiBA,EAAA,GAAa,yBAA0B,+CAIpE,GAAsB2O,sBAAsB,I,gBChe5C,IAAIoQ,GAAiB,cAA6B,KAC9C,WAAArf,CAAYsf,EAAuBC,EAAmBC,GAClD/d,QACA5N,KAAKyrB,sBAAwBA,EAC7BzrB,KAAK0rB,kBAAoBA,EACzB1rB,KAAK2rB,YAAcA,EACnB3rB,KAAK4rB,uBAAwB,EAC7B5rB,KAAK6rB,sBAAwB7rB,KAAKyO,UAAU,IAAM,MAClDzO,KAAK8rB,qBAAuB9rB,KAAK6rB,sBAAsBlW,MACvD3V,KAAK+rB,qBAAuB,IAAM,KAClC/rB,KAAKgsB,oBAAsBhsB,KAAK+rB,qBAAqBpW,MACrD3V,KAAK0rB,kBAAkBO,oCAAoCrd,MAAKrI,GAASvG,KAAK4rB,sBAAwBrlB,IACtGvG,KAAKksB,gBAAkB,IAC3B,CACA,aAAAC,GAOI,OANKnsB,KAAKksB,kBACNlsB,KAAKksB,gBAAkBnC,QAAQqC,KAAK,CAChCpsB,KAAK0rB,kBAAkBW,gBAAgB,MACvC,QAAQ,QAGTrsB,KAAKksB,eAChB,CACA,oBAAMI,CAAexrB,KAAOkL,GACxBhM,KAAK2rB,YAAYY,MAAM,gCAAiCzrB,GACxD,MAAM0rB,EAAkB,aAAa1rB,IAErC,OAD8B,IAAiB2H,WAAW3H,GAElDd,KAAK0rB,kBAAkBe,sBAAsBD,GACtCxsB,KAAK0sB,mBAAmB5rB,EAAIkL,GAElChM,KAAK4rB,6BAIJ5rB,KAAK0rB,kBAAkBW,gBAAgBG,GACtCxsB,KAAK0sB,mBAAmB5rB,EAAIkL,KAJ/BhM,KAAK0rB,kBAAkBW,gBAAgBG,GAChCxsB,KAAK0sB,mBAAmB5rB,EAAIkL,WAKrC+d,QAAQ4C,IAAI,CACd3sB,KAAK0rB,kBAAkBW,gBAAgBG,GACvCzC,QAAQqC,KAAK,CACTpsB,KAAKmsB,gBACL,KAAMS,UAAU,KAAMpW,OAAO,IAAiBqW,sBAAsBtd,GAAKA,IAAMzO,SAGhFd,KAAK0sB,mBAAmB5rB,EAAIkL,GACvC,CACA,kBAAA0gB,CAAmB5rB,EAAIkL,GACnB,MAAMrH,EAAU,IAAiB8D,WAAW3H,GAC5C,IAAK6D,EACD,OAAOolB,QAAQE,OAAO,IAAMG,MAAM,YAAYtpB,iBAElD,IACId,KAAK6rB,sBAAsBvb,KAAK,CAAEuI,UAAW/X,EAAIkL,SACjD,MAAMnE,EAAS7H,KAAKyrB,sBAAsBqB,eAAenoB,EAAQooB,WAAY/gB,GAE7E,OADAhM,KAAK+rB,qBAAqBzb,KAAK,CAAEuI,UAAW/X,EAAIkL,SACzC+d,QAAQC,QAAQniB,EAC3B,CACA,MAAOmlB,GACH,OAAOjD,QAAQE,OAAO+C,EAC1B,CACJ,GAEJxB,IAAmB,OAAW,EACxB,OAAQ,EAAG,QACX,OAAQ,EAAG,OACX,OAAQ,EAAG,OACdA,I,kDCrEH,MAAMyB,WAAmC,KACrC,WAAA9gB,GACIyB,MAAM,CACF9M,GAAI,wCACJiG,MAAO,CAAER,MAASkG,EAAA,GAAa,uBAAwB,6CAA+CnG,SAAU,6CAChHY,SAAU,KAAWgmB,UACrBC,IAAI,GAEZ,CACA,GAAAC,CAAIC,GACgBA,EAAShjB,IAAI,MAAoBijB,iBAEtBD,EAAShjB,IAAI,KACrBiiB,eAAe,KAEtC,ECLJiB,eAAeC,GAAsBC,GACjC,MAAMC,EAA0B,KAAmBrjB,IAAI,aACjD,KAAmBA,IAAI,MAAcsjB,UAAUD,EAAwBE,eAAehX,oBAAqB,MAASvO,WAAWolB,GACzI,EDIA,QAAgBR,ICHhB,MAAMY,WAA0C7gB,GAC5C,WAAAb,GACIyB,SAASkgB,WACT9tB,KAAK+tB,oBAAsB,EAC/B,CACA,0BAAAC,CAA2BC,GAGvB,OAFAjuB,KAAK+tB,oBAAoBntB,KAAKqtB,GAC9BjuB,KAAKsO,kBACE,SAAa,KAChB,MAAM5D,EAAM1K,KAAK+tB,oBAAoBpuB,QAAQsuB,GACzCvjB,GAAO,IACP1K,KAAK+tB,oBAAoB7G,OAAOxc,EAAK,GACrC1K,KAAKsO,iBACT,GAER,CACA,YAAAiE,GACI,OAAO3E,MAAM2E,cACjB,CACA,sBAAAF,GACI,MAAO,IAAIzE,MAAMyE,4BAA6BrS,KAAK+tB,oBAAoBrd,SAAQud,GAAYA,MAC/F,EAEJ,SAASC,KACL,MAAO,KACA,WACH,CAAG,KAAmB5hB,YAAc,IAAI,IAAeuhB,GAAmC,IAAI,GAC9F,CAAG,IAAuBvhB,YAAc,IAAI,IAAeye,QAA8BzgB,GAAW,GACpG,CAAG,IAAgBgC,YAAc,IAAI,IAAekf,GAAgB,IAAI,GAEhF,C,kFC9CA,SAAS2C,EAAsBpZ,GAC3B,MAAMqZ,EAAkB,GAClBC,EAAU,IAAM/kB,IAChBT,EAAa,CAAC/H,EAAIwtB,KACpB,IAAMD,EAAQzkB,IAAI9I,KAGlButB,EAAQvkB,IAAIhJ,GAAI,GACF,MAAVA,EAAG,IAAwC,IAA1BA,EAAGnB,QAAQ,aAGF,IAA1BoV,EAAc1K,IAAIvJ,IAAtB,CAGA,IAAKwtB,EAAwB,CACzB,MAAM3pB,EAAU,IAAiB8D,WAAW3H,GAC5C,GAAI6D,GAA0C,iBAAxBA,EAAQ3D,cACvB,QAAgB2D,EAAQ3D,YAAYgL,MACvC,MAER,CACAoiB,EAAgBxtB,KAAKE,EARrB,CAQwB,EAE5B,IAAK,MAAM2E,KAAY,KAAa8oB,aAAa,KAAOxtB,iBAChD,QAAY0E,IACZoD,EAAWpD,EAASd,QAAQ7D,IAAI,GAGxC,IAAK,MAAM0tB,KAAgB,KAAyBC,mBAChD5lB,EAAW2lB,EAAa1tB,IAAI,GAEhC,IAAK,MAAMA,KAAQ,IAAiBiY,cAAcQ,OAC9C1Q,EAAW/H,GAAI,GAEnB,OAAOstB,CACX,C,mCCvCA,MAAMM,EAAwB,gC","sources":["webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/base/common/keybindingParser.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/actions/common/menusExtensionPoint.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/keybinding/common/keybindingIO.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/keybinding/browser/keybindingService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/keybinding/common/keymapInfo.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/platform/keyboardLayout/common/keyboardConfig.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/platform/keyboardLayout/common/keyboardMapper.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/keybinding/common/windowsKeyboardMapper.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/keybinding/common/macLinuxKeyboardMapper.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/keybinding/browser/keyboardLayoutService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/commands/common/commandService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/contrib/keybindings/browser/keybindings.contribution.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/service-override/keybindings.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/keybinding/browser/unboundCommands.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/log/common/logConstants.js"],"sourcesContent":["import { ScanCodeUtils, KeyCodeUtils } from 'monaco-editor/esm/vs/base/common/keyCodes.js';\nimport { ScanCodeChord, KeyCodeChord, Keybinding } from 'monaco-editor/esm/vs/base/common/keybindings.js';\nclass KeybindingParser {\n    static _readModifiers(input) {\n        input = input.toLowerCase().trim();\n        let ctrl = false;\n        let shift = false;\n        let alt = false;\n        let meta = false;\n        let matchedModifier;\n        do {\n            matchedModifier = false;\n            if (/^ctrl(\\+|\\-)/.test(input)) {\n                ctrl = true;\n                input = input.substr('ctrl-'.length);\n                matchedModifier = true;\n            }\n            if (/^shift(\\+|\\-)/.test(input)) {\n                shift = true;\n                input = input.substr('shift-'.length);\n                matchedModifier = true;\n            }\n            if (/^alt(\\+|\\-)/.test(input)) {\n                alt = true;\n                input = input.substr('alt-'.length);\n                matchedModifier = true;\n            }\n            if (/^meta(\\+|\\-)/.test(input)) {\n                meta = true;\n                input = input.substr('meta-'.length);\n                matchedModifier = true;\n            }\n            if (/^win(\\+|\\-)/.test(input)) {\n                meta = true;\n                input = input.substr('win-'.length);\n                matchedModifier = true;\n            }\n            if (/^cmd(\\+|\\-)/.test(input)) {\n                meta = true;\n                input = input.substr('cmd-'.length);\n                matchedModifier = true;\n            }\n        } while (matchedModifier);\n        let key;\n        const firstSpaceIdx = input.indexOf(' ');\n        if (firstSpaceIdx > 0) {\n            key = input.substring(0, firstSpaceIdx);\n            input = input.substring(firstSpaceIdx);\n        }\n        else {\n            key = input;\n            input = '';\n        }\n        return {\n            remains: input,\n            ctrl,\n            shift,\n            alt,\n            meta,\n            key\n        };\n    }\n    static parseChord(input) {\n        const mods = this._readModifiers(input);\n        const scanCodeMatch = mods.key.match(/^\\[([^\\]]+)\\]$/);\n        if (scanCodeMatch) {\n            const strScanCode = scanCodeMatch[1];\n            const scanCode = ScanCodeUtils.lowerCaseToEnum(strScanCode);\n            return [( new ScanCodeChord(mods.ctrl, mods.shift, mods.alt, mods.meta, scanCode)), mods.remains];\n        }\n        const keyCode = KeyCodeUtils.fromUserSettings(mods.key);\n        return [( new KeyCodeChord(mods.ctrl, mods.shift, mods.alt, mods.meta, keyCode)), mods.remains];\n    }\n    static parseKeybinding(input) {\n        if (!input) {\n            return null;\n        }\n        const chords = [];\n        let chord;\n        while (input.length > 0) {\n            [chord, input] = this.parseChord(input);\n            chords.push(chord);\n        }\n        return (chords.length > 0 ? ( new Keybinding(chords)) : null);\n    }\n}\nexport { KeybindingParser };\n","import { localize } from 'monaco-editor/esm/vs/nls.js';\nimport { isFalsyOrWhitespace } from 'monaco-editor/esm/vs/base/common/strings.js';\nimport * as resources from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';\nimport { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { MenuId, MenuRegistry } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';\nimport { index } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { isProposedApiEnabled } from '../../extensions/common/extensions.js';\nconst apiMenus = [\n    {\n        key: 'commandPalette',\n        id: MenuId.CommandPalette,\n        description: ( localize('menus.commandPalette', \"The Command Palette\")),\n        supportsSubmenus: false\n    },\n    {\n        key: 'touchBar',\n        id: MenuId.TouchBarContext,\n        description: ( localize('menus.touchBar', \"The touch bar (macOS only)\")),\n        supportsSubmenus: false\n    },\n    {\n        key: 'editor/title',\n        id: MenuId.EditorTitle,\n        description: ( localize('menus.editorTitle', \"The editor title menu\"))\n    },\n    {\n        key: 'editor/title/run',\n        id: MenuId.EditorTitleRun,\n        description: ( localize('menus.editorTitleRun', \"Run submenu inside the editor title menu\"))\n    },\n    {\n        key: 'editor/context',\n        id: MenuId.EditorContext,\n        description: ( localize('menus.editorContext', \"The editor context menu\"))\n    },\n    {\n        key: 'editor/context/copy',\n        id: MenuId.EditorContextCopy,\n        description: ( localize(\n            'menus.editorContextCopyAs',\n            \"'Copy as' submenu in the editor context menu\"\n        ))\n    },\n    {\n        key: 'editor/context/share',\n        id: MenuId.EditorContextShare,\n        description: ( localize('menus.editorContextShare', \"'Share' submenu in the editor context menu\")),\n        proposed: 'contribShareMenu'\n    },\n    {\n        key: 'explorer/context',\n        id: MenuId.ExplorerContext,\n        description: ( localize('menus.explorerContext', \"The file explorer context menu\"))\n    },\n    {\n        key: 'explorer/context/share',\n        id: MenuId.ExplorerContextShare,\n        description: ( localize(\n            'menus.explorerContextShare',\n            \"'Share' submenu in the file explorer context menu\"\n        )),\n        proposed: 'contribShareMenu'\n    },\n    {\n        key: 'editor/title/context',\n        id: MenuId.EditorTitleContext,\n        description: ( localize('menus.editorTabContext', \"The editor tabs context menu\"))\n    },\n    {\n        key: 'editor/title/context/share',\n        id: MenuId.EditorTitleContextShare,\n        description: ( localize(\n            'menus.editorTitleContextShare',\n            \"'Share' submenu inside the editor title context menu\"\n        )),\n        proposed: 'contribShareMenu'\n    },\n    {\n        key: 'debug/callstack/context',\n        id: MenuId.DebugCallStackContext,\n        description: ( localize('menus.debugCallstackContext', \"The debug callstack view context menu\"))\n    },\n    {\n        key: 'debug/variables/context',\n        id: MenuId.DebugVariablesContext,\n        description: ( localize('menus.debugVariablesContext', \"The debug variables view context menu\"))\n    },\n    {\n        key: 'debug/toolBar',\n        id: MenuId.DebugToolBar,\n        description: ( localize('menus.debugToolBar', \"The debug toolbar menu\"))\n    },\n    {\n        key: 'menuBar/home',\n        id: MenuId.MenubarHomeMenu,\n        description: ( localize('menus.home', \"The home indicator context menu (web only)\")),\n        proposed: 'contribMenuBarHome',\n        supportsSubmenus: false\n    },\n    {\n        key: 'menuBar/edit/copy',\n        id: MenuId.MenubarCopy,\n        description: ( localize('menus.opy', \"'Copy as' submenu in the top level Edit menu\"))\n    },\n    {\n        key: 'scm/title',\n        id: MenuId.SCMTitle,\n        description: ( localize('menus.scmTitle', \"The Source Control title menu\"))\n    },\n    {\n        key: 'scm/sourceControl',\n        id: MenuId.SCMSourceControl,\n        description: ( localize('menus.scmSourceControl', \"The Source Control menu\"))\n    },\n    {\n        key: 'scm/resourceState/context',\n        id: MenuId.SCMResourceContext,\n        description: ( localize(\n            'menus.resourceStateContext',\n            \"The Source Control resource state context menu\"\n        ))\n    },\n    {\n        key: 'scm/resourceFolder/context',\n        id: MenuId.SCMResourceFolderContext,\n        description: ( localize(\n            'menus.resourceFolderContext',\n            \"The Source Control resource folder context menu\"\n        ))\n    },\n    {\n        key: 'scm/resourceGroup/context',\n        id: MenuId.SCMResourceGroupContext,\n        description: ( localize(\n            'menus.resourceGroupContext',\n            \"The Source Control resource group context menu\"\n        ))\n    },\n    {\n        key: 'scm/change/title',\n        id: MenuId.SCMChangeContext,\n        description: ( localize('menus.changeTitle', \"The Source Control inline change menu\"))\n    },\n    {\n        key: 'statusBar/remoteIndicator',\n        id: MenuId.StatusBarRemoteIndicatorMenu,\n        description: ( localize(\n            'menus.statusBarRemoteIndicator',\n            \"The remote indicator menu in the status bar\"\n        )),\n        supportsSubmenus: false\n    },\n    {\n        key: 'view/title',\n        id: MenuId.ViewTitle,\n        description: ( localize('view.viewTitle', \"The contributed view title menu\"))\n    },\n    {\n        key: 'view/item/context',\n        id: MenuId.ViewItemContext,\n        description: ( localize('view.itemContext', \"The contributed view item context menu\"))\n    },\n    {\n        key: 'comments/comment/editorActions',\n        id: MenuId.CommentEditorActions,\n        description: ( localize('commentThread.editorActions', \"The contributed comment editor actions\")),\n        proposed: 'contribCommentEditorActionsMenu'\n    },\n    {\n        key: 'comments/commentThread/title',\n        id: MenuId.CommentThreadTitle,\n        description: ( localize('commentThread.title', \"The contributed comment thread title menu\"))\n    },\n    {\n        key: 'comments/commentThread/context',\n        id: MenuId.CommentThreadActions,\n        description: ( localize(\n            'commentThread.actions',\n            \"The contributed comment thread context menu, rendered as buttons below the comment editor\"\n        )),\n        supportsSubmenus: false\n    },\n    {\n        key: 'comments/commentThread/additionalActions',\n        id: MenuId.CommentThreadAdditionalActions,\n        description: ( localize(\n            'commentThread.actions',\n            \"The contributed comment thread context menu, rendered as buttons below the comment editor\"\n        )),\n        supportsSubmenus: false,\n        proposed: 'contribCommentThreadAdditionalMenu'\n    },\n    {\n        key: 'comments/commentThread/title/context',\n        id: MenuId.CommentThreadTitleContext,\n        description: ( localize(\n            'commentThread.titleContext',\n            \"The contributed comment thread title's peek context menu, rendered as a right click menu on the comment thread's peek title.\"\n        )),\n        proposed: 'contribCommentPeekContext'\n    },\n    {\n        key: 'comments/comment/title',\n        id: MenuId.CommentTitle,\n        description: ( localize('comment.title', \"The contributed comment title menu\"))\n    },\n    {\n        key: 'comments/comment/context',\n        id: MenuId.CommentActions,\n        description: ( localize(\n            'comment.actions',\n            \"The contributed comment context menu, rendered as buttons below the comment editor\"\n        )),\n        supportsSubmenus: false\n    },\n    {\n        key: 'comments/commentThread/comment/context',\n        id: MenuId.CommentThreadCommentContext,\n        description: ( localize(\n            'comment.commentContext',\n            \"The contributed comment context menu, rendered as a right click menu on the an individual comment in the comment thread's peek view.\"\n        )),\n        proposed: 'contribCommentPeekContext'\n    },\n    {\n        key: 'notebook/toolbar',\n        id: MenuId.NotebookToolbar,\n        description: ( localize('notebook.toolbar', \"The contributed notebook toolbar menu\"))\n    },\n    {\n        key: 'notebook/kernelSource',\n        id: MenuId.NotebookKernelSource,\n        description: ( localize('notebook.kernelSource', \"The contributed notebook kernel sources menu\")),\n        proposed: 'notebookKernelSource'\n    },\n    {\n        key: 'notebook/cell/title',\n        id: MenuId.NotebookCellTitle,\n        description: ( localize('notebook.cell.title', \"The contributed notebook cell title menu\"))\n    },\n    {\n        key: 'notebook/cell/execute',\n        id: MenuId.NotebookCellExecute,\n        description: ( localize('notebook.cell.execute', \"The contributed notebook cell execution menu\"))\n    },\n    {\n        key: 'interactive/toolbar',\n        id: MenuId.InteractiveToolbar,\n        description: ( localize('interactive.toolbar', \"The contributed interactive toolbar menu\")),\n    },\n    {\n        key: 'interactive/cell/title',\n        id: MenuId.InteractiveCellTitle,\n        description: ( localize('interactive.cell.title', \"The contributed interactive cell title menu\")),\n    },\n    {\n        key: 'testing/item/context',\n        id: MenuId.TestItem,\n        description: ( localize('testing.item.context', \"The contributed test item menu\")),\n    },\n    {\n        key: 'testing/item/gutter',\n        id: MenuId.TestItemGutter,\n        description: ( localize(\n            'testing.item.gutter.title',\n            \"The menu for a gutter decoration for a test item\"\n        )),\n    },\n    {\n        key: 'extension/context',\n        id: MenuId.ExtensionContext,\n        description: ( localize('menus.extensionContext', \"The extension context menu\"))\n    },\n    {\n        key: 'timeline/title',\n        id: MenuId.TimelineTitle,\n        description: ( localize('view.timelineTitle', \"The Timeline view title menu\"))\n    },\n    {\n        key: 'timeline/item/context',\n        id: MenuId.TimelineItemContext,\n        description: ( localize('view.timelineContext', \"The Timeline view item context menu\"))\n    },\n    {\n        key: 'ports/item/context',\n        id: MenuId.TunnelContext,\n        description: ( localize('view.tunnelContext', \"The Ports view item context menu\"))\n    },\n    {\n        key: 'ports/item/origin/inline',\n        id: MenuId.TunnelOriginInline,\n        description: ( localize('view.tunnelOriginInline', \"The Ports view item origin inline menu\"))\n    },\n    {\n        key: 'ports/item/port/inline',\n        id: MenuId.TunnelPortInline,\n        description: ( localize('view.tunnelPortInline', \"The Ports view item port inline menu\"))\n    },\n    {\n        key: 'file/newFile',\n        id: MenuId.NewFile,\n        description: ( localize(\n            'file.newFile',\n            \"The 'New File...' quick pick, shown on welcome page and File menu.\"\n        )),\n        supportsSubmenus: false,\n    },\n    {\n        key: 'webview/context',\n        id: MenuId.WebviewContext,\n        description: ( localize('webview.context', \"The webview context menu\"))\n    },\n    {\n        key: 'file/share',\n        id: MenuId.MenubarShare,\n        description: ( localize('menus.share', \"Share submenu shown in the top level File menu.\")),\n        proposed: 'contribShareMenu'\n    },\n    {\n        key: 'editor/inlineCompletions/actions',\n        id: MenuId.InlineCompletionsActions,\n        description: ( localize(\n            'inlineCompletions.actions',\n            \"The actions shown when hovering on an inline completion\"\n        )),\n        supportsSubmenus: false,\n        proposed: 'inlineCompletionsAdditions'\n    },\n    {\n        key: 'editor/content',\n        id: MenuId.EditorContent,\n        description: ( localize('merge.toolbar', \"The prominent button in an editor, overlays its content\")),\n        proposed: 'contribEditorContentMenu'\n    },\n    {\n        key: 'editor/lineNumber/context',\n        id: MenuId.EditorLineNumberContext,\n        description: ( localize(\n            'editorLineNumberContext',\n            \"The contributed editor line number context menu\"\n        ))\n    },\n    {\n        key: 'mergeEditor/result/title',\n        id: MenuId.MergeInputResultToolbar,\n        description: ( localize('menus.mergeEditorResult', \"The result toolbar of the merge editor\")),\n        proposed: 'contribMergeEditorMenus'\n    },\n];\nvar schema;\n( (function(schema) {\n    function isMenuItem(item) {\n        return typeof item.command === 'string';\n    }\n    schema.isMenuItem = isMenuItem;\n    function isValidMenuItem(item, collector) {\n        if (typeof item.command !== 'string') {\n            collector.error(( localize(\n                'requirestring',\n                \"property `{0}` is mandatory and must be of type `string`\",\n                'command'\n            )));\n            return false;\n        }\n        if (item.alt && typeof item.alt !== 'string') {\n            collector.error(( localize(\n                'optstring',\n                \"property `{0}` can be omitted or must be of type `string`\",\n                'alt'\n            )));\n            return false;\n        }\n        if (item.when && typeof item.when !== 'string') {\n            collector.error(( localize(\n                'optstring',\n                \"property `{0}` can be omitted or must be of type `string`\",\n                'when'\n            )));\n            return false;\n        }\n        if (item.group && typeof item.group !== 'string') {\n            collector.error(( localize(\n                'optstring',\n                \"property `{0}` can be omitted or must be of type `string`\",\n                'group'\n            )));\n            return false;\n        }\n        return true;\n    }\n    schema.isValidMenuItem = isValidMenuItem;\n    function isValidSubmenuItem(item, collector) {\n        if (typeof item.submenu !== 'string') {\n            collector.error(( localize(\n                'requirestring',\n                \"property `{0}` is mandatory and must be of type `string`\",\n                'submenu'\n            )));\n            return false;\n        }\n        if (item.when && typeof item.when !== 'string') {\n            collector.error(( localize(\n                'optstring',\n                \"property `{0}` can be omitted or must be of type `string`\",\n                'when'\n            )));\n            return false;\n        }\n        if (item.group && typeof item.group !== 'string') {\n            collector.error(( localize(\n                'optstring',\n                \"property `{0}` can be omitted or must be of type `string`\",\n                'group'\n            )));\n            return false;\n        }\n        return true;\n    }\n    schema.isValidSubmenuItem = isValidSubmenuItem;\n    function isValidItems(items, collector) {\n        if (!Array.isArray(items)) {\n            collector.error(( localize('requirearray', \"submenu items must be an array\")));\n            return false;\n        }\n        for (const item of items) {\n            if (isMenuItem(item)) {\n                if (!isValidMenuItem(item, collector)) {\n                    return false;\n                }\n            }\n            else {\n                if (!isValidSubmenuItem(item, collector)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    schema.isValidItems = isValidItems;\n    function isValidSubmenu(submenu, collector) {\n        if (typeof submenu !== 'object') {\n            collector.error(( localize('require', \"submenu items must be an object\")));\n            return false;\n        }\n        if (typeof submenu.id !== 'string') {\n            collector.error(( localize(\n                'requirestring',\n                \"property `{0}` is mandatory and must be of type `string`\",\n                'id'\n            )));\n            return false;\n        }\n        if (typeof submenu.label !== 'string') {\n            collector.error(( localize(\n                'requirestring',\n                \"property `{0}` is mandatory and must be of type `string`\",\n                'label'\n            )));\n            return false;\n        }\n        return true;\n    }\n    schema.isValidSubmenu = isValidSubmenu;\n    const menuItem = {\n        type: 'object',\n        required: ['command'],\n        properties: {\n            command: {\n                description: ( localize(\n                    'vscode.extension.contributes.menuItem.command',\n                    'Identifier of the command to execute. The command must be declared in the \\'commands\\'-section'\n                )),\n                type: 'string'\n            },\n            alt: {\n                description: ( localize(\n                    'vscode.extension.contributes.menuItem.alt',\n                    'Identifier of an alternative command to execute. The command must be declared in the \\'commands\\'-section'\n                )),\n                type: 'string'\n            },\n            when: {\n                description: ( localize(\n                    'vscode.extension.contributes.menuItem.when',\n                    'Condition which must be true to show this item'\n                )),\n                type: 'string'\n            },\n            group: {\n                description: ( localize(\n                    'vscode.extension.contributes.menuItem.group',\n                    'Group into which this item belongs'\n                )),\n                type: 'string'\n            }\n        }\n    };\n    const submenuItem = {\n        type: 'object',\n        required: ['submenu'],\n        properties: {\n            submenu: {\n                description: ( localize(\n                    'vscode.extension.contributes.menuItem.submenu',\n                    'Identifier of the submenu to display in this item.'\n                )),\n                type: 'string'\n            },\n            when: {\n                description: ( localize(\n                    'vscode.extension.contributes.menuItem.when',\n                    'Condition which must be true to show this item'\n                )),\n                type: 'string'\n            },\n            group: {\n                description: ( localize(\n                    'vscode.extension.contributes.menuItem.group',\n                    'Group into which this item belongs'\n                )),\n                type: 'string'\n            }\n        }\n    };\n    const submenu = {\n        type: 'object',\n        required: ['id', 'label'],\n        properties: {\n            id: {\n                description: ( localize(\n                    'vscode.extension.contributes.submenu.id',\n                    'Identifier of the menu to display as a submenu.'\n                )),\n                type: 'string'\n            },\n            label: {\n                description: ( localize(\n                    'vscode.extension.contributes.submenu.label',\n                    'The label of the menu item which leads to this submenu.'\n                )),\n                type: 'string'\n            },\n            icon: {\n                description: ( localize(\n                    { key: 'vscode.extension.contributes.submenu.icon', comment: ['do not translate or change `\\\\$(zap)`, \\\\ in front of $ is important.'] },\n                    '(Optional) Icon which is used to represent the submenu in the UI. Either a file path, an object with file paths for dark and light themes, or a theme icon references, like `\\\\$(zap)`'\n                )),\n                anyOf: [{\n                        type: 'string'\n                    },\n                    {\n                        type: 'object',\n                        properties: {\n                            light: {\n                                description: ( localize(\n                                    'vscode.extension.contributes.submenu.icon.light',\n                                    'Icon path when a light theme is used'\n                                )),\n                                type: 'string'\n                            },\n                            dark: {\n                                description: ( localize(\n                                    'vscode.extension.contributes.submenu.icon.dark',\n                                    'Icon path when a dark theme is used'\n                                )),\n                                type: 'string'\n                            }\n                        }\n                    }]\n            }\n        }\n    };\n    schema.menusContribution = {\n        description: ( localize(\n            'vscode.extension.contributes.menus',\n            \"Contributes menu items to the editor\"\n        )),\n        type: 'object',\n        properties: index(apiMenus, menu => menu.key, menu => ({\n            markdownDescription: menu.proposed ? ( localize(\n                'proposed',\n                \"Proposed API, requires `enabledApiProposal: [\\\"{0}\\\"]` - {1}\",\n                menu.proposed,\n                menu.description\n            )) : menu.description,\n            type: 'array',\n            items: menu.supportsSubmenus === false ? menuItem : { oneOf: [menuItem, submenuItem] }\n        })),\n        additionalProperties: {\n            description: 'Submenu',\n            type: 'array',\n            items: { oneOf: [menuItem, submenuItem] }\n        }\n    };\n    schema.submenusContribution = {\n        description: ( localize(\n            'vscode.extension.contributes.submenus',\n            \"Contributes submenu items to the editor\"\n        )),\n        type: 'array',\n        items: submenu\n    };\n    function isValidCommand(command, collector) {\n        if (!command) {\n            collector.error(( localize('nonempty', \"expected non-empty value.\")));\n            return false;\n        }\n        if (isFalsyOrWhitespace(command.command)) {\n            collector.error(( localize(\n                'requirestring',\n                \"property `{0}` is mandatory and must be of type `string`\",\n                'command'\n            )));\n            return false;\n        }\n        if (!isValidLocalizedString(command.title, collector, 'title')) {\n            return false;\n        }\n        if (command.shortTitle && !isValidLocalizedString(command.shortTitle, collector, 'shortTitle')) {\n            return false;\n        }\n        if (command.enablement && typeof command.enablement !== 'string') {\n            collector.error(( localize(\n                'optstring',\n                \"property `{0}` can be omitted or must be of type `string`\",\n                'precondition'\n            )));\n            return false;\n        }\n        if (command.category && !isValidLocalizedString(command.category, collector, 'category')) {\n            return false;\n        }\n        if (!isValidIcon(command.icon, collector)) {\n            return false;\n        }\n        return true;\n    }\n    schema.isValidCommand = isValidCommand;\n    function isValidIcon(icon, collector) {\n        if (typeof icon === 'undefined') {\n            return true;\n        }\n        if (typeof icon === 'string') {\n            return true;\n        }\n        else if (typeof icon.dark === 'string' && typeof icon.light === 'string') {\n            return true;\n        }\n        collector.error(( localize(\n            'opticon',\n            \"property `icon` can be omitted or must be either a string or a literal like `{dark, light}`\"\n        )));\n        return false;\n    }\n    function isValidLocalizedString(localized, collector, propertyName) {\n        if (typeof localized === 'undefined') {\n            collector.error(( localize(\n                'requireStringOrObject',\n                \"property `{0}` is mandatory and must be of type `string` or `object`\",\n                propertyName\n            )));\n            return false;\n        }\n        else if (typeof localized === 'string' && isFalsyOrWhitespace(localized)) {\n            collector.error(( localize(\n                'requirestring',\n                \"property `{0}` is mandatory and must be of type `string`\",\n                propertyName\n            )));\n            return false;\n        }\n        else if (typeof localized !== 'string' && (isFalsyOrWhitespace(localized.original) || isFalsyOrWhitespace(localized.value))) {\n            collector.error(( localize(\n                'requirestrings',\n                \"properties `{0}` and `{1}` are mandatory and must be of type `string`\",\n                `${propertyName}.value`,\n                `${propertyName}.original`\n            )));\n            return false;\n        }\n        return true;\n    }\n    const commandType = {\n        type: 'object',\n        required: ['command', 'title'],\n        properties: {\n            command: {\n                description: ( localize(\n                    'vscode.extension.contributes.commandType.command',\n                    'Identifier of the command to execute'\n                )),\n                type: 'string'\n            },\n            title: {\n                description: ( localize(\n                    'vscode.extension.contributes.commandType.title',\n                    'Title by which the command is represented in the UI'\n                )),\n                type: 'string'\n            },\n            shortTitle: {\n                markdownDescription: ( localize(\n                    'vscode.extension.contributes.commandType.shortTitle',\n                    '(Optional) Short title by which the command is represented in the UI. Menus pick either `title` or `shortTitle` depending on the context in which they show commands.'\n                )),\n                type: 'string'\n            },\n            category: {\n                description: ( localize(\n                    'vscode.extension.contributes.commandType.category',\n                    '(Optional) Category string by which the command is grouped in the UI'\n                )),\n                type: 'string'\n            },\n            enablement: {\n                description: ( localize(\n                    'vscode.extension.contributes.commandType.precondition',\n                    '(Optional) Condition which must be true to enable the command in the UI (menu and keybindings). Does not prevent executing the command by other means, like the `executeCommand`-api.'\n                )),\n                type: 'string'\n            },\n            icon: {\n                description: ( localize(\n                    { key: 'vscode.extension.contributes.commandType.icon', comment: ['do not translate or change `\\\\$(zap)`, \\\\ in front of $ is important.'] },\n                    '(Optional) Icon which is used to represent the command in the UI. Either a file path, an object with file paths for dark and light themes, or a theme icon references, like `\\\\$(zap)`'\n                )),\n                anyOf: [{\n                        type: 'string'\n                    },\n                    {\n                        type: 'object',\n                        properties: {\n                            light: {\n                                description: ( localize(\n                                    'vscode.extension.contributes.commandType.icon.light',\n                                    'Icon path when a light theme is used'\n                                )),\n                                type: 'string'\n                            },\n                            dark: {\n                                description: ( localize(\n                                    'vscode.extension.contributes.commandType.icon.dark',\n                                    'Icon path when a dark theme is used'\n                                )),\n                                type: 'string'\n                            }\n                        }\n                    }]\n            }\n        }\n    };\n    schema.commandsContribution = {\n        description: ( localize(\n            'vscode.extension.contributes.commands',\n            \"Contributes commands to the command palette.\"\n        )),\n        oneOf: [\n            commandType,\n            {\n                type: 'array',\n                items: commandType\n            }\n        ]\n    };\n})(schema || (schema = {})));\nconst _commandRegistrations = ( new DisposableStore());\nconst commandsExtensionPoint = ( ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'commands',\n    jsonSchema: schema.commandsContribution,\n    activationEventsGenerator: (contribs, result) => {\n        for (const contrib of contribs) {\n            if (contrib.command) {\n                result.push(`onCommand:${contrib.command}`);\n            }\n        }\n    }\n}));\ncommandsExtensionPoint.setHandler(extensions => {\n    function handleCommand(userFriendlyCommand, extension) {\n        if (!schema.isValidCommand(userFriendlyCommand, extension.collector)) {\n            return;\n        }\n        const { icon, enablement, category, title, shortTitle, command } = userFriendlyCommand;\n        let absoluteIcon;\n        if (icon) {\n            if (typeof icon === 'string') {\n                absoluteIcon = ThemeIcon.fromString(icon) ?? { dark: resources.joinPath(extension.description.extensionLocation, icon), light: resources.joinPath(extension.description.extensionLocation, icon) };\n            }\n            else {\n                absoluteIcon = {\n                    dark: resources.joinPath(extension.description.extensionLocation, icon.dark),\n                    light: resources.joinPath(extension.description.extensionLocation, icon.light)\n                };\n            }\n        }\n        const existingCmd = MenuRegistry.getCommand(command);\n        if (existingCmd) {\n            if (existingCmd.source) {\n                extension.collector.info(( localize(\n                    'dup1',\n                    \"Command `{0}` already registered by {1} ({2})\",\n                    userFriendlyCommand.command,\n                    existingCmd.source.title,\n                    existingCmd.source.id\n                )));\n            }\n            else {\n                extension.collector.info(( localize('dup0', \"Command `{0}` already registered\", userFriendlyCommand.command)));\n            }\n        }\n        _commandRegistrations.add(MenuRegistry.addCommand({\n            id: command,\n            title,\n            source: { id: extension.description.identifier.value, title: extension.description.displayName ?? extension.description.name },\n            shortTitle,\n            tooltip: title,\n            category,\n            precondition: ContextKeyExpr.deserialize(enablement),\n            icon: absoluteIcon\n        }));\n    }\n    _commandRegistrations.clear();\n    for (const extension of extensions) {\n        const { value } = extension;\n        if (Array.isArray(value)) {\n            for (const command of value) {\n                handleCommand(command, extension);\n            }\n        }\n        else {\n            handleCommand(value, extension);\n        }\n    }\n});\nconst _submenus = ( new Map());\nconst submenusExtensionPoint = ( ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'submenus',\n    jsonSchema: schema.submenusContribution\n}));\nsubmenusExtensionPoint.setHandler(extensions => {\n    _submenus.clear();\n    for (const extension of extensions) {\n        const { value, collector } = extension;\n        for (const [, submenuInfo] of Object.entries(value)) {\n            if (!schema.isValidSubmenu(submenuInfo, collector)) {\n                continue;\n            }\n            if (!submenuInfo.id) {\n                collector.warn(( localize(\n                    'submenuId.invalid.id',\n                    \"`{0}` is not a valid submenu identifier\",\n                    submenuInfo.id\n                )));\n                continue;\n            }\n            if (( _submenus.has(submenuInfo.id))) {\n                collector.info(( localize(\n                    'submenuId.duplicate.id',\n                    \"The `{0}` submenu was already previously registered.\",\n                    submenuInfo.id\n                )));\n                continue;\n            }\n            if (!submenuInfo.label) {\n                collector.warn(( localize(\n                    'submenuId.invalid.label',\n                    \"`{0}` is not a valid submenu label\",\n                    submenuInfo.label\n                )));\n                continue;\n            }\n            let absoluteIcon;\n            if (submenuInfo.icon) {\n                if (typeof submenuInfo.icon === 'string') {\n                    absoluteIcon = ThemeIcon.fromString(submenuInfo.icon) || { dark: resources.joinPath(extension.description.extensionLocation, submenuInfo.icon) };\n                }\n                else {\n                    absoluteIcon = {\n                        dark: resources.joinPath(extension.description.extensionLocation, submenuInfo.icon.dark),\n                        light: resources.joinPath(extension.description.extensionLocation, submenuInfo.icon.light)\n                    };\n                }\n            }\n            const item = {\n                id: MenuId.for(`api:${submenuInfo.id}`),\n                label: submenuInfo.label,\n                icon: absoluteIcon\n            };\n            _submenus.set(submenuInfo.id, item);\n        }\n    }\n});\nconst _apiMenusByKey = ( new Map(( apiMenus.map(menu => ([menu.key, menu])))));\nconst _menuRegistrations = ( new DisposableStore());\nconst _submenuMenuItems = ( new Map());\nconst menusExtensionPoint = ( ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'menus',\n    jsonSchema: schema.menusContribution,\n    deps: [submenusExtensionPoint]\n}));\nmenusExtensionPoint.setHandler(extensions => {\n    _menuRegistrations.clear();\n    _submenuMenuItems.clear();\n    for (const extension of extensions) {\n        const { value, collector } = extension;\n        for (const entry of Object.entries(value)) {\n            if (!schema.isValidItems(entry[1], collector)) {\n                continue;\n            }\n            let menu = _apiMenusByKey.get(entry[0]);\n            if (!menu) {\n                const submenu = _submenus.get(entry[0]);\n                if (submenu) {\n                    menu = {\n                        key: entry[0],\n                        id: submenu.id,\n                        description: ''\n                    };\n                }\n            }\n            if (!menu) {\n                continue;\n            }\n            if (menu.proposed && !isProposedApiEnabled(extension.description, menu.proposed)) {\n                collector.error(( localize(\n                    'proposedAPI.invalid',\n                    \"{0} is a proposed menu identifier. It requires 'package.json#enabledApiProposals: [\\\"{1}\\\"]' and is only available when running out of dev or with the following command line switch: --enable-proposed-api {2}\",\n                    entry[0],\n                    menu.proposed,\n                    extension.description.identifier.value\n                )));\n                continue;\n            }\n            for (const menuItem of entry[1]) {\n                let item;\n                if (schema.isMenuItem(menuItem)) {\n                    const command = MenuRegistry.getCommand(menuItem.command);\n                    const alt = menuItem.alt && MenuRegistry.getCommand(menuItem.alt) || undefined;\n                    if (!command) {\n                        collector.error(( localize(\n                            'missing.command',\n                            \"Menu item references a command `{0}` which is not defined in the 'commands' section.\",\n                            menuItem.command\n                        )));\n                        continue;\n                    }\n                    if (menuItem.alt && !alt) {\n                        collector.warn(( localize(\n                            'missing.altCommand',\n                            \"Menu item references an alt-command `{0}` which is not defined in the 'commands' section.\",\n                            menuItem.alt\n                        )));\n                    }\n                    if (menuItem.command === menuItem.alt) {\n                        collector.info(( localize(\n                            'dupe.command',\n                            \"Menu item references the same command as default and alt-command\"\n                        )));\n                    }\n                    item = { command, alt, group: undefined, order: undefined, when: undefined };\n                }\n                else {\n                    if (menu.supportsSubmenus === false) {\n                        collector.error(( localize(\n                            'unsupported.submenureference',\n                            \"Menu item references a submenu for a menu which doesn't have submenu support.\"\n                        )));\n                        continue;\n                    }\n                    const submenu = _submenus.get(menuItem.submenu);\n                    if (!submenu) {\n                        collector.error(( localize(\n                            'missing.submenu',\n                            \"Menu item references a submenu `{0}` which is not defined in the 'submenus' section.\",\n                            menuItem.submenu\n                        )));\n                        continue;\n                    }\n                    let submenuRegistrations = _submenuMenuItems.get(menu.id.id);\n                    if (!submenuRegistrations) {\n                        submenuRegistrations = ( new Set());\n                        _submenuMenuItems.set(menu.id.id, submenuRegistrations);\n                    }\n                    if (( submenuRegistrations.has(submenu.id.id))) {\n                        collector.warn(( localize(\n                            'submenuItem.duplicate',\n                            \"The `{0}` submenu was already contributed to the `{1}` menu.\",\n                            menuItem.submenu,\n                            entry[0]\n                        )));\n                        continue;\n                    }\n                    submenuRegistrations.add(submenu.id.id);\n                    item = { submenu: submenu.id, icon: submenu.icon, title: submenu.label, group: undefined, order: undefined, when: undefined };\n                }\n                if (menuItem.group) {\n                    const idx = menuItem.group.lastIndexOf('@');\n                    if (idx > 0) {\n                        item.group = menuItem.group.substr(0, idx);\n                        item.order = Number(menuItem.group.substr(idx + 1)) || undefined;\n                    }\n                    else {\n                        item.group = menuItem.group;\n                    }\n                }\n                item.when = ContextKeyExpr.deserialize(menuItem.when);\n                _menuRegistrations.add(MenuRegistry.appendMenuItem(menu.id, item));\n            }\n        }\n    }\n});\nexport { commandsExtensionPoint };\n","import { KeybindingParser } from '../../../../base/common/keybindingParser.js';\nimport { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nclass KeybindingIO {\n    static writeKeybindingItem(out, item) {\n        if (!item.resolvedKeybinding) {\n            return;\n        }\n        const quotedSerializedKeybinding = JSON.stringify(item.resolvedKeybinding.getUserSettingsLabel());\n        out.write(`{ \"key\": ${rightPaddedString(quotedSerializedKeybinding + ',', 25)} \"command\": `);\n        const quotedSerializedWhen = item.when ? JSON.stringify(item.when.serialize()) : '';\n        const quotedSerializeCommand = JSON.stringify(item.command);\n        if (quotedSerializedWhen.length > 0) {\n            out.write(`${quotedSerializeCommand},`);\n            out.writeLine();\n            out.write(`                                     \"when\": ${quotedSerializedWhen}`);\n        }\n        else {\n            out.write(`${quotedSerializeCommand}`);\n        }\n        if (item.commandArgs) {\n            out.write(',');\n            out.writeLine();\n            out.write(`                                     \"args\": ${JSON.stringify(item.commandArgs)}`);\n        }\n        out.write(' }');\n    }\n    static readUserKeybindingItem(input) {\n        const keybinding = 'key' in input && typeof input.key === 'string'\n            ? KeybindingParser.parseKeybinding(input.key)\n            : null;\n        const when = 'when' in input && typeof input.when === 'string'\n            ? ContextKeyExpr.deserialize(input.when)\n            : undefined;\n        const command = 'command' in input && typeof input.command === 'string'\n            ? input.command\n            : null;\n        const commandArgs = 'args' in input && typeof input.args !== 'undefined'\n            ? input.args\n            : undefined;\n        return {\n            keybinding,\n            command,\n            commandArgs,\n            when,\n            _sourceKey: 'key' in input && typeof input.key === 'string' ? input.key : undefined,\n        };\n    }\n}\nfunction rightPaddedString(str, minChars) {\n    if (str.length < minChars) {\n        return str + (( new Array(minChars - str.length)).join(' '));\n    }\n    return str;\n}\nclass OutputBuilder {\n    constructor() {\n        this._lines = [];\n        this._currentLine = '';\n    }\n    write(str) {\n        this._currentLine += str;\n    }\n    writeLine(str = '') {\n        this._lines.push(this._currentLine + str);\n        this._currentLine = '';\n    }\n    toString() {\n        this.writeLine();\n        return this._lines.join('\\n');\n    }\n}\nexport { KeybindingIO, OutputBuilder };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport * as browser from 'monaco-editor/esm/vs/base/browser/browser.js';\nimport { BrowserFeatures } from 'monaco-editor/esm/vs/base/browser/canIUse.js';\nimport * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';\nimport { printKeyboardEvent, printStandardKeyboardEvent, StandardKeyboardEvent } from 'monaco-editor/esm/vs/base/browser/keyboardEvent.js';\nimport { RunOnceScheduler } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { parse } from 'monaco-editor/esm/vs/base/common/json.js';\nimport { UserSettingsLabelProvider } from 'monaco-editor/esm/vs/base/common/keybindingLabels.js';\nimport { KeybindingParser } from '../../../../base/common/keybindingParser.js';\nimport { KeyCodeChord, ScanCodeChord } from 'monaco-editor/esm/vs/base/common/keybindings.js';\nimport { KeyCodeUtils, ScanCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE } from 'monaco-editor/esm/vs/base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport * as objects from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { OS, isMacintosh } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { dirname } from 'monaco-editor/esm/vs/base/common/resources.js';\nimport { MenuRegistry } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { CommandsRegistry, ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { ContextKeyExpr, IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';\nimport { AbstractKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/abstractKeybindingService.js';\nimport { KeybindingResolver } from 'monaco-editor/esm/vs/platform/keybinding/common/keybindingResolver.js';\nimport { KeybindingsRegistry } from 'monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js';\nimport { ResolvedKeybindingItem } from 'monaco-editor/esm/vs/platform/keybinding/common/resolvedKeybindingItem.js';\nimport { IKeyboardLayoutService } from '../../../../platform/keyboardLayout/common/keyboardLayout.js';\nimport { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';\nimport { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';\nimport { commandsExtensionPoint } from '../../actions/common/menusExtensionPoint.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { ExtensionsRegistry } from '../../extensions/common/extensionsRegistry.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { getAllUnboundCommands } from './unboundCommands.js';\nimport { KeybindingIO, OutputBuilder } from '../common/keybindingIO.js';\nimport { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';\nimport { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';\nfunction isValidContributedKeyBinding(keyBinding, rejects) {\n    if (!keyBinding) {\n        rejects.push(( nls.localize('nonempty', \"expected non-empty value.\")));\n        return false;\n    }\n    if (typeof keyBinding.command !== 'string') {\n        rejects.push(( nls.localize(\n            'requirestring',\n            \"property `{0}` is mandatory and must be of type `string`\",\n            'command'\n        )));\n        return false;\n    }\n    if (keyBinding.key && typeof keyBinding.key !== 'string') {\n        rejects.push(( nls.localize(\n            'optstring',\n            \"property `{0}` can be omitted or must be of type `string`\",\n            'key'\n        )));\n        return false;\n    }\n    if (keyBinding.when && typeof keyBinding.when !== 'string') {\n        rejects.push(( nls.localize(\n            'optstring',\n            \"property `{0}` can be omitted or must be of type `string`\",\n            'when'\n        )));\n        return false;\n    }\n    if (keyBinding.mac && typeof keyBinding.mac !== 'string') {\n        rejects.push(( nls.localize(\n            'optstring',\n            \"property `{0}` can be omitted or must be of type `string`\",\n            'mac'\n        )));\n        return false;\n    }\n    if (keyBinding.linux && typeof keyBinding.linux !== 'string') {\n        rejects.push(( nls.localize(\n            'optstring',\n            \"property `{0}` can be omitted or must be of type `string`\",\n            'linux'\n        )));\n        return false;\n    }\n    if (keyBinding.win && typeof keyBinding.win !== 'string') {\n        rejects.push(( nls.localize(\n            'optstring',\n            \"property `{0}` can be omitted or must be of type `string`\",\n            'win'\n        )));\n        return false;\n    }\n    return true;\n}\nconst keybindingType = {\n    type: 'object',\n    default: { command: '', key: '' },\n    properties: {\n        command: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.keybindings.command',\n                'Identifier of the command to run when keybinding is triggered.'\n            )),\n            type: 'string'\n        },\n        args: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.keybindings.args',\n                \"Arguments to pass to the command to execute.\"\n            ))\n        },\n        key: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.keybindings.key',\n                'Key or key sequence (separate keys with plus-sign and sequences with space, e.g. Ctrl+O and Ctrl+L L for a chord).'\n            )),\n            type: 'string'\n        },\n        mac: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.keybindings.mac',\n                'Mac specific key or key sequence.'\n            )),\n            type: 'string'\n        },\n        linux: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.keybindings.linux',\n                'Linux specific key or key sequence.'\n            )),\n            type: 'string'\n        },\n        win: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.keybindings.win',\n                'Windows specific key or key sequence.'\n            )),\n            type: 'string'\n        },\n        when: {\n            description: ( nls.localize(\n                'vscode.extension.contributes.keybindings.when',\n                'Condition when the key is active.'\n            )),\n            type: 'string'\n        },\n    }\n};\nconst keybindingsExtPoint = ( ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'keybindings',\n    deps: [commandsExtensionPoint],\n    jsonSchema: {\n        description: ( nls.localize('vscode.extension.contributes.keybindings', \"Contributes keybindings.\")),\n        oneOf: [\n            keybindingType,\n            {\n                type: 'array',\n                items: keybindingType\n            }\n        ]\n    }\n}));\nconst NUMPAD_PRINTABLE_SCANCODES = [\n    90 ,\n    91 ,\n    92 ,\n    93 ,\n    95 ,\n    96 ,\n    97 ,\n    98 ,\n    99 ,\n    100 ,\n    101 ,\n    102 ,\n    103 ,\n    104 ,\n    105\n];\nconst otherMacNumpadMapping = ( new Map());\notherMacNumpadMapping.set(95 , 22 );\notherMacNumpadMapping.set(96 , 23 );\notherMacNumpadMapping.set(97 , 24 );\notherMacNumpadMapping.set(98 , 25 );\notherMacNumpadMapping.set(99 , 26 );\notherMacNumpadMapping.set(100 , 27 );\notherMacNumpadMapping.set(101 , 28 );\notherMacNumpadMapping.set(102 , 29 );\notherMacNumpadMapping.set(103 , 30 );\notherMacNumpadMapping.set(104 , 21 );\nlet WorkbenchKeybindingService = class WorkbenchKeybindingService extends AbstractKeybindingService {\n    constructor(contextKeyService, commandService, telemetryService, notificationService, userDataProfileService, hostService, extensionService, fileService, uriIdentityService, logService, keyboardLayoutService) {\n        super(contextKeyService, commandService, telemetryService, notificationService, logService);\n        this.hostService = hostService;\n        this.keyboardLayoutService = keyboardLayoutService;\n        this._contributions = [];\n        this.isComposingGlobalContextKey = contextKeyService.createKey('isComposing', false);\n        this.kbsJsonSchema = ( new KeybindingsJsonSchema());\n        this.updateKeybindingsJsonSchema();\n        this._keyboardMapper = this.keyboardLayoutService.getKeyboardMapper();\n        this.keyboardLayoutService.onDidChangeKeyboardLayout(() => {\n            this._keyboardMapper = this.keyboardLayoutService.getKeyboardMapper();\n            this.updateResolver();\n        });\n        this._cachedResolver = null;\n        this.userKeybindings = this._register(( new UserKeybindings(userDataProfileService, uriIdentityService, fileService, logService)));\n        this.userKeybindings.initialize().then(() => {\n            if (this.userKeybindings.keybindings.length) {\n                this.updateResolver();\n            }\n        });\n        this._register(this.userKeybindings.onDidChange(() => {\n            logService.debug('User keybindings changed');\n            this.updateResolver();\n        }));\n        keybindingsExtPoint.setHandler((extensions) => {\n            const keybindings = [];\n            for (const extension of extensions) {\n                this._handleKeybindingsExtensionPointUser(extension.description.identifier, extension.description.isBuiltin, extension.value, extension.collector, keybindings);\n            }\n            KeybindingsRegistry.setExtensionKeybindings(keybindings);\n            this.updateResolver();\n        });\n        this.updateKeybindingsJsonSchema();\n        this._register(extensionService.onDidRegisterExtensions(() => this.updateKeybindingsJsonSchema()));\n        this._register(dom.addDisposableListener(window, dom.EventType.KEY_DOWN, (e) => {\n            this.isComposingGlobalContextKey.set(e.isComposing);\n            const keyEvent = ( new StandardKeyboardEvent(e));\n            this._log(`/ Received  keydown event - ${printKeyboardEvent(e)}`);\n            this._log(`| Converted keydown event - ${printStandardKeyboardEvent(keyEvent)}`);\n            const shouldPreventDefault = this._dispatch(keyEvent, keyEvent.target);\n            if (shouldPreventDefault) {\n                keyEvent.preventDefault();\n            }\n            this.isComposingGlobalContextKey.set(false);\n        }));\n        this._register(dom.addDisposableListener(window, dom.EventType.KEY_UP, (e) => {\n            this.isComposingGlobalContextKey.set(e.isComposing);\n            const keyEvent = ( new StandardKeyboardEvent(e));\n            const shouldPreventDefault = this._singleModifierDispatch(keyEvent, keyEvent.target);\n            if (shouldPreventDefault) {\n                keyEvent.preventDefault();\n            }\n            this.isComposingGlobalContextKey.set(false);\n        }));\n        this._register(browser.onDidChangeFullscreen(() => {\n            const keyboard = navigator.keyboard;\n            if (BrowserFeatures.keyboard === 2 ) {\n                return;\n            }\n            if (browser.isFullscreen()) {\n                keyboard?.lock(['Escape']);\n            }\n            else {\n                keyboard?.unlock();\n            }\n            this._cachedResolver = null;\n            this._onDidUpdateKeybindings.fire();\n        }));\n    }\n    registerSchemaContribution(contribution) {\n        this._contributions.push(contribution);\n        if (contribution.onDidChange) {\n            this._register(contribution.onDidChange(() => this.updateKeybindingsJsonSchema()));\n        }\n        this.updateKeybindingsJsonSchema();\n    }\n    updateKeybindingsJsonSchema() {\n        this.kbsJsonSchema.updateSchema(this._contributions.flatMap(x => x.getSchemaAdditions()));\n    }\n    _printKeybinding(keybinding) {\n        return UserSettingsLabelProvider.toLabel(OS, keybinding.chords, (chord) => {\n            if (chord instanceof KeyCodeChord) {\n                return ( KeyCodeUtils.toString(chord.keyCode));\n            }\n            return ( ScanCodeUtils.toString(chord.scanCode));\n        }) || '[null]';\n    }\n    _printResolvedKeybinding(resolvedKeybinding) {\n        return ( resolvedKeybinding.getDispatchChords().map(x => x || '[null]')).join(' ');\n    }\n    _printResolvedKeybindings(output, input, resolvedKeybindings) {\n        const padLength = 35;\n        const firstRow = `${input.padStart(padLength, ' ')} => `;\n        if (resolvedKeybindings.length === 0) {\n            output.push(`${firstRow}${'[NO BINDING]'.padStart(padLength, ' ')}`);\n            return;\n        }\n        for (const resolvedKeybinding of resolvedKeybindings) {\n            {\n                output.push(`${firstRow}${this._printResolvedKeybinding(resolvedKeybinding).padStart(padLength, ' ')}`);\n            }\n        }\n    }\n    _dumpResolveKeybindingDebugInfo() {\n        const seenBindings = ( new Set());\n        const result = [];\n        result.push(`Default Resolved Keybindings (unique only):`);\n        for (const item of KeybindingsRegistry.getDefaultKeybindings()) {\n            if (!item.keybinding) {\n                continue;\n            }\n            const input = this._printKeybinding(item.keybinding);\n            if (( seenBindings.has(input))) {\n                continue;\n            }\n            seenBindings.add(input);\n            const resolvedKeybindings = this._keyboardMapper.resolveKeybinding(item.keybinding);\n            this._printResolvedKeybindings(result, input, resolvedKeybindings);\n        }\n        result.push(`User Resolved Keybindings (unique only):`);\n        for (const item of this.userKeybindings.keybindings) {\n            if (!item.keybinding) {\n                continue;\n            }\n            const input = item._sourceKey ?? 'Impossible: missing source key, but has keybinding';\n            if (( seenBindings.has(input))) {\n                continue;\n            }\n            seenBindings.add(input);\n            const resolvedKeybindings = this._keyboardMapper.resolveKeybinding(item.keybinding);\n            this._printResolvedKeybindings(result, input, resolvedKeybindings);\n        }\n        return result.join('\\n');\n    }\n    _dumpDebugInfo() {\n        const layoutInfo = JSON.stringify(this.keyboardLayoutService.getCurrentKeyboardLayout(), null, '\\t');\n        const mapperInfo = this._keyboardMapper.dumpDebugInfo();\n        const resolvedKeybindings = this._dumpResolveKeybindingDebugInfo();\n        const rawMapping = JSON.stringify(this.keyboardLayoutService.getRawKeyboardMapping(), null, '\\t');\n        return `Layout info:\\n${layoutInfo}\\n\\n${resolvedKeybindings}\\n\\n${mapperInfo}\\n\\nRaw mapping:\\n${rawMapping}`;\n    }\n    _dumpDebugInfoJSON() {\n        const info = {\n            layout: this.keyboardLayoutService.getCurrentKeyboardLayout(),\n            rawMapping: this.keyboardLayoutService.getRawKeyboardMapping()\n        };\n        return JSON.stringify(info, null, '\\t');\n    }\n    customKeybindingsCount() {\n        return this.userKeybindings.keybindings.length;\n    }\n    updateResolver() {\n        this._cachedResolver = null;\n        this._onDidUpdateKeybindings.fire();\n    }\n    getUserKeybindingItems() {\n        return this._resolveUserKeybindingItems(this.userKeybindings.keybindings, false);\n    }\n    _getResolver() {\n        if (!this._cachedResolver) {\n            const defaults = this._resolveKeybindingItems(KeybindingsRegistry.getDefaultKeybindings(), true);\n            const overrides = this.getUserKeybindingItems();\n            this._cachedResolver = ( new KeybindingResolver(defaults, overrides, (str) => this._log(str)));\n        }\n        return this._cachedResolver;\n    }\n    _documentHasFocus() {\n        return this.hostService.hasFocus;\n    }\n    _resolveKeybindingItems(items, isDefault) {\n        const result = [];\n        let resultLen = 0;\n        for (const item of items) {\n            const when = item.when || undefined;\n            const keybinding = item.keybinding;\n            if (!keybinding) {\n                result[resultLen++] = ( new ResolvedKeybindingItem(\n                    undefined,\n                    item.command,\n                    item.commandArgs,\n                    when,\n                    isDefault,\n                    item.extensionId,\n                    item.isBuiltinExtension\n                ));\n            }\n            else {\n                if (this._assertBrowserConflicts(keybinding)) {\n                    continue;\n                }\n                const resolvedKeybindings = this._keyboardMapper.resolveKeybinding(keybinding);\n                for (let i = resolvedKeybindings.length - 1; i >= 0; i--) {\n                    const resolvedKeybinding = resolvedKeybindings[i];\n                    result[resultLen++] = ( new ResolvedKeybindingItem(\n                        resolvedKeybinding,\n                        item.command,\n                        item.commandArgs,\n                        when,\n                        isDefault,\n                        item.extensionId,\n                        item.isBuiltinExtension\n                    ));\n                }\n            }\n        }\n        return result;\n    }\n    _resolveUserKeybindingItems(items, isDefault) {\n        const result = [];\n        let resultLen = 0;\n        for (const item of items) {\n            const when = item.when || undefined;\n            if (!item.keybinding) {\n                result[resultLen++] = ( new ResolvedKeybindingItem(undefined, item.command, item.commandArgs, when, isDefault, null, false));\n            }\n            else {\n                const resolvedKeybindings = this._keyboardMapper.resolveKeybinding(item.keybinding);\n                for (const resolvedKeybinding of resolvedKeybindings) {\n                    result[resultLen++] = ( new ResolvedKeybindingItem(\n                        resolvedKeybinding,\n                        item.command,\n                        item.commandArgs,\n                        when,\n                        isDefault,\n                        null,\n                        false\n                    ));\n                }\n            }\n        }\n        return result;\n    }\n    _assertBrowserConflicts(keybinding) {\n        if (BrowserFeatures.keyboard === 0 ) {\n            return false;\n        }\n        if (BrowserFeatures.keyboard === 1  && browser.isFullscreen()) {\n            return false;\n        }\n        for (const chord of keybinding.chords) {\n            if (!chord.metaKey && !chord.altKey && !chord.ctrlKey && !chord.shiftKey) {\n                continue;\n            }\n            const modifiersMask = 2048  | 512  | 1024 ;\n            let partModifiersMask = 0;\n            if (chord.metaKey) {\n                partModifiersMask |= 2048 ;\n            }\n            if (chord.shiftKey) {\n                partModifiersMask |= 1024 ;\n            }\n            if (chord.altKey) {\n                partModifiersMask |= 512 ;\n            }\n            if (chord.ctrlKey && OS === 2 ) {\n                partModifiersMask |= 256 ;\n            }\n            if ((partModifiersMask & modifiersMask) === ((2048  | 512) )) {\n                if (chord instanceof ScanCodeChord && ((chord.scanCode === 86  || chord.scanCode === 85) )) {\n                    return true;\n                }\n                if (chord instanceof KeyCodeChord && ((chord.keyCode === 15  || chord.keyCode === 17) )) {\n                    return true;\n                }\n            }\n            if ((partModifiersMask & modifiersMask) === 2048 ) {\n                if (chord instanceof ScanCodeChord && ((chord.scanCode >= 36  && chord.scanCode <= 45) )) {\n                    return true;\n                }\n                if (chord instanceof KeyCodeChord && ((chord.keyCode >= 21  && chord.keyCode <= 30) )) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    resolveKeybinding(kb) {\n        return this._keyboardMapper.resolveKeybinding(kb);\n    }\n    resolveKeyboardEvent(keyboardEvent) {\n        this.keyboardLayoutService.validateCurrentKeyboardMapping(keyboardEvent);\n        return this._keyboardMapper.resolveKeyboardEvent(keyboardEvent);\n    }\n    resolveUserBinding(userBinding) {\n        const keybinding = KeybindingParser.parseKeybinding(userBinding);\n        return (keybinding ? this._keyboardMapper.resolveKeybinding(keybinding) : []);\n    }\n    _handleKeybindingsExtensionPointUser(extensionId, isBuiltin, keybindings, collector, result) {\n        if (Array.isArray(keybindings)) {\n            for (let i = 0, len = keybindings.length; i < len; i++) {\n                this._handleKeybinding(extensionId, isBuiltin, i + 1, keybindings[i], collector, result);\n            }\n        }\n        else {\n            this._handleKeybinding(extensionId, isBuiltin, 1, keybindings, collector, result);\n        }\n    }\n    _handleKeybinding(extensionId, isBuiltin, idx, keybindings, collector, result) {\n        const rejects = [];\n        if (isValidContributedKeyBinding(keybindings, rejects)) {\n            const rule = this._asCommandRule(extensionId, isBuiltin, idx++, keybindings);\n            if (rule) {\n                result.push(rule);\n            }\n        }\n        if (rejects.length > 0) {\n            collector.error(( nls.localize(\n                'invalid.keybindings',\n                \"Invalid `contributes.{0}`: {1}\",\n                keybindingsExtPoint.name,\n                rejects.join('\\n')\n            )));\n        }\n    }\n    static bindToCurrentPlatform(key, mac, linux, win) {\n        if (OS === 1  && win) {\n            if (win) {\n                return win;\n            }\n        }\n        else if (OS === 2 ) {\n            if (mac) {\n                return mac;\n            }\n        }\n        else {\n            if (linux) {\n                return linux;\n            }\n        }\n        return key;\n    }\n    _asCommandRule(extensionId, isBuiltin, idx, binding) {\n        const { command, args, when, key, mac, linux, win } = binding;\n        const keybinding = WorkbenchKeybindingService.bindToCurrentPlatform(key, mac, linux, win);\n        if (!keybinding) {\n            return undefined;\n        }\n        let weight;\n        if (isBuiltin) {\n            weight = 300  + idx;\n        }\n        else {\n            weight = 400  + idx;\n        }\n        const commandAction = MenuRegistry.getCommand(command);\n        const precondition = commandAction && commandAction.precondition;\n        let fullWhen;\n        if (when && precondition) {\n            fullWhen = ( ContextKeyExpr.and(precondition, ContextKeyExpr.deserialize(when)));\n        }\n        else if (when) {\n            fullWhen = ContextKeyExpr.deserialize(when);\n        }\n        else if (precondition) {\n            fullWhen = precondition;\n        }\n        const desc = {\n            id: command,\n            args,\n            when: fullWhen,\n            weight: weight,\n            keybinding: KeybindingParser.parseKeybinding(keybinding),\n            extensionId: extensionId.value,\n            isBuiltinExtension: isBuiltin\n        };\n        return desc;\n    }\n    getDefaultKeybindingsContent() {\n        const resolver = this._getResolver();\n        const defaultKeybindings = resolver.getDefaultKeybindings();\n        const boundCommands = resolver.getDefaultBoundCommands();\n        return (WorkbenchKeybindingService._getDefaultKeybindings(defaultKeybindings)\n            + '\\n\\n'\n            + WorkbenchKeybindingService._getAllCommandsAsComment(boundCommands));\n    }\n    static _getDefaultKeybindings(defaultKeybindings) {\n        const out = ( new OutputBuilder());\n        out.writeLine('[');\n        const lastIndex = defaultKeybindings.length - 1;\n        defaultKeybindings.forEach((k, index) => {\n            KeybindingIO.writeKeybindingItem(out, k);\n            if (index !== lastIndex) {\n                out.writeLine(',');\n            }\n            else {\n                out.writeLine();\n            }\n        });\n        out.writeLine(']');\n        return ( out.toString());\n    }\n    static _getAllCommandsAsComment(boundCommands) {\n        const unboundCommands = getAllUnboundCommands(boundCommands);\n        const pretty = unboundCommands.sort().join('\\n// - ');\n        return '// ' + ( nls.localize('unboundCommands', \"Here are other available commands: \")) + '\\n// - ' + pretty;\n    }\n    mightProducePrintableCharacter(event) {\n        if (event.ctrlKey || event.metaKey || event.altKey) {\n            return false;\n        }\n        const code = ScanCodeUtils.toEnum(event.code);\n        if (NUMPAD_PRINTABLE_SCANCODES.indexOf(code) !== -1) {\n            if (event.keyCode === IMMUTABLE_CODE_TO_KEY_CODE[code]) {\n                return true;\n            }\n            if (isMacintosh && event.keyCode === otherMacNumpadMapping.get(code)) {\n                return true;\n            }\n            return false;\n        }\n        const keycode = IMMUTABLE_CODE_TO_KEY_CODE[code];\n        if (keycode !== -1) {\n            return false;\n        }\n        const mapping = this.keyboardLayoutService.getRawKeyboardMapping();\n        if (!mapping) {\n            return false;\n        }\n        const keyInfo = mapping[event.code];\n        if (!keyInfo) {\n            return false;\n        }\n        if (!keyInfo.value || /\\s/.test(keyInfo.value)) {\n            return false;\n        }\n        return true;\n    }\n};\nWorkbenchKeybindingService = ( __decorate([\n    ( __param(0, IContextKeyService)),\n    ( __param(1, ICommandService)),\n    ( __param(2, ITelemetryService)),\n    ( __param(3, INotificationService)),\n    ( __param(4, IUserDataProfileService)),\n    ( __param(5, IHostService)),\n    ( __param(6, IExtensionService)),\n    ( __param(7, IFileService)),\n    ( __param(8, IUriIdentityService)),\n    ( __param(9, ILogService)),\n    ( __param(10, IKeyboardLayoutService))\n], WorkbenchKeybindingService));\nclass UserKeybindings extends Disposable {\n    get keybindings() { return this._keybindings; }\n    constructor(userDataProfileService, uriIdentityService, fileService, logService) {\n        super();\n        this.userDataProfileService = userDataProfileService;\n        this.uriIdentityService = uriIdentityService;\n        this.fileService = fileService;\n        this._rawKeybindings = [];\n        this._keybindings = [];\n        this.watchDisposables = this._register(( new DisposableStore()));\n        this._onDidChange = this._register(( new Emitter()));\n        this.onDidChange = this._onDidChange.event;\n        this.watch();\n        this.reloadConfigurationScheduler = this._register(( new RunOnceScheduler(() => this.reload().then(changed => {\n            if (changed) {\n                this._onDidChange.fire();\n            }\n        }), 50)));\n        this._register(Event.filter(this.fileService.onDidFilesChange, e => e.contains(this.userDataProfileService.currentProfile.keybindingsResource))(() => {\n            logService.debug('Keybindings file changed');\n            this.reloadConfigurationScheduler.schedule();\n        }));\n        this._register(this.fileService.onDidRunOperation((e) => {\n            if (e.operation === 4  && ( e.resource.toString()) === ( this.userDataProfileService.currentProfile.keybindingsResource.toString())) {\n                logService.debug('Keybindings file written');\n                this.reloadConfigurationScheduler.schedule();\n            }\n        }));\n        this._register(userDataProfileService.onDidChangeCurrentProfile(e => {\n            if (!this.uriIdentityService.extUri.isEqual(e.previous.keybindingsResource, e.profile.keybindingsResource)) {\n                e.join(this.whenCurrentProfileChanged());\n            }\n        }));\n    }\n    async whenCurrentProfileChanged() {\n        this.watch();\n        this.reloadConfigurationScheduler.schedule();\n    }\n    watch() {\n        this.watchDisposables.clear();\n        this.watchDisposables.add(this.fileService.watch(dirname(this.userDataProfileService.currentProfile.keybindingsResource)));\n        this.watchDisposables.add(this.fileService.watch(this.userDataProfileService.currentProfile.keybindingsResource));\n    }\n    async initialize() {\n        await this.reload();\n    }\n    async reload() {\n        const newKeybindings = await this.readUserKeybindings();\n        if (objects.equals(this._rawKeybindings, newKeybindings)) {\n            return false;\n        }\n        this._rawKeybindings = newKeybindings;\n        this._keybindings = ( this._rawKeybindings.map((k) => KeybindingIO.readUserKeybindingItem(k)));\n        return true;\n    }\n    async readUserKeybindings() {\n        try {\n            const content = await this.fileService.readFile(this.userDataProfileService.currentProfile.keybindingsResource);\n            const value = parse(( content.value.toString()));\n            return Array.isArray(value)\n                ? value.filter(v => v && typeof v === 'object' )\n                : [];\n        }\n        catch (e) {\n            return [];\n        }\n    }\n}\nclass KeybindingsJsonSchema {\n    static { this.schemaId = 'vscode://schemas/keybindings'; }\n    constructor() {\n        this.commandsSchemas = [];\n        this.commandsEnum = [];\n        this.removalCommandsEnum = [];\n        this.commandsEnumDescriptions = [];\n        this.schema = {\n            id: KeybindingsJsonSchema.schemaId,\n            type: 'array',\n            title: ( nls.localize('keybindings.json.title', \"Keybindings configuration\")),\n            allowTrailingCommas: true,\n            allowComments: true,\n            definitions: {\n                'editorGroupsSchema': {\n                    'type': 'array',\n                    'items': {\n                        'type': 'object',\n                        'properties': {\n                            'groups': {\n                                '$ref': '#/definitions/editorGroupsSchema',\n                                'default': [{}, {}]\n                            },\n                            'size': {\n                                'type': 'number',\n                                'default': 0.5\n                            }\n                        }\n                    }\n                },\n                'commandNames': {\n                    'type': 'string',\n                    'enum': this.commandsEnum,\n                    'enumDescriptions': this.commandsEnumDescriptions,\n                    'description': ( nls.localize('keybindings.json.command', \"Name of the command to execute\")),\n                },\n                'commandType': {\n                    'anyOf': [\n                        {\n                            $ref: '#/definitions/commandNames'\n                        },\n                        {\n                            'type': 'string',\n                            'enum': this.removalCommandsEnum,\n                            'enumDescriptions': this.commandsEnumDescriptions,\n                            'description': ( nls.localize(\n                                'keybindings.json.removalCommand',\n                                \"Name of the command to remove keyboard shortcut for\"\n                            )),\n                        },\n                        {\n                            'type': 'string'\n                        },\n                    ]\n                },\n                'commandsSchemas': {\n                    'allOf': this.commandsSchemas\n                }\n            },\n            items: {\n                'required': ['key'],\n                'type': 'object',\n                'defaultSnippets': [{ 'body': { 'key': '$1', 'command': '$2', 'when': '$3' } }],\n                'properties': {\n                    'key': {\n                        'type': 'string',\n                        'description': ( nls.localize('keybindings.json.key', \"Key or key sequence (separated by space)\")),\n                    },\n                    'command': {\n                        'anyOf': [\n                            {\n                                'if': {\n                                    'type': 'array'\n                                },\n                                'then': {\n                                    'not': {\n                                        'type': 'array'\n                                    },\n                                    'errorMessage': ( nls.localize(\n                                        'keybindings.commandsIsArray',\n                                        \"Incorrect type. Expected \\\"{0}\\\". The field 'command' does not support running multiple commands. Use command 'runCommands' to pass it multiple commands to run.\",\n                                        'string'\n                                    ))\n                                },\n                                'else': {\n                                    '$ref': '#/definitions/commandType'\n                                }\n                            },\n                            {\n                                '$ref': '#/definitions/commandType'\n                            }\n                        ]\n                    },\n                    'when': {\n                        'type': 'string',\n                        'description': ( nls.localize('keybindings.json.when', \"Condition when the key is active.\"))\n                    },\n                    'args': {\n                        'description': ( nls.localize('keybindings.json.args', \"Arguments to pass to the command to execute.\"))\n                    }\n                },\n                '$ref': '#/definitions/commandsSchemas'\n            }\n        };\n        this.schemaRegistry = ( Registry.as(Extensions.JSONContribution));\n        this.schemaRegistry.registerSchema(KeybindingsJsonSchema.schemaId, this.schema);\n    }\n    updateSchema(additionalContributions) {\n        this.commandsSchemas.length = 0;\n        this.commandsEnum.length = 0;\n        this.removalCommandsEnum.length = 0;\n        this.commandsEnumDescriptions.length = 0;\n        const knownCommands = ( new Set());\n        const addKnownCommand = (commandId, description) => {\n            if (!/^_/.test(commandId)) {\n                if (!( knownCommands.has(commandId))) {\n                    knownCommands.add(commandId);\n                    this.commandsEnum.push(commandId);\n                    this.commandsEnumDescriptions.push(description);\n                    this.removalCommandsEnum.push(`-${commandId}`);\n                }\n            }\n        };\n        const allCommands = CommandsRegistry.getCommands();\n        for (const [commandId, command] of allCommands) {\n            const commandDescription = command.description;\n            addKnownCommand(commandId, commandDescription ? commandDescription.description : undefined);\n            if (!commandDescription || !commandDescription.args || commandDescription.args.length !== 1 || !commandDescription.args[0].schema) {\n                continue;\n            }\n            const argsSchema = commandDescription.args[0].schema;\n            const argsRequired = ((typeof commandDescription.args[0].isOptional !== 'undefined')\n                ? (!commandDescription.args[0].isOptional)\n                : (Array.isArray(argsSchema.required) && argsSchema.required.length > 0));\n            const addition = {\n                'if': {\n                    'required': ['command'],\n                    'properties': {\n                        'command': { 'const': commandId }\n                    }\n                },\n                'then': {\n                    'required': [].concat(argsRequired ? ['args'] : []),\n                    'properties': {\n                        'args': argsSchema\n                    }\n                }\n            };\n            this.commandsSchemas.push(addition);\n        }\n        const menuCommands = MenuRegistry.getCommands();\n        for (const commandId of ( menuCommands.keys())) {\n            addKnownCommand(commandId);\n        }\n        this.commandsSchemas.push(...additionalContributions);\n        this.schemaRegistry.notifySchemaChanged(KeybindingsJsonSchema.schemaId);\n    }\n}\nexport { WorkbenchKeybindingService };\n","import { isWindows, isLinux } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { getKeyboardLayoutId } from '../../../../platform/keyboardLayout/common/keyboardLayout.js';\nfunction deserializeMapping(serializedMapping) {\n    const mapping = serializedMapping;\n    const ret = {};\n    for (const key in mapping) {\n        const result = mapping[key];\n        if (result.length) {\n            const value = result[0];\n            const withShift = result[1];\n            const withAltGr = result[2];\n            const withShiftAltGr = result[3];\n            const mask = Number(result[4]);\n            const vkey = result.length === 6 ? result[5] : undefined;\n            ret[key] = {\n                'value': value,\n                'vkey': vkey,\n                'withShift': withShift,\n                'withAltGr': withAltGr,\n                'withShiftAltGr': withShiftAltGr,\n                'valueIsDeadKey': (mask & 1) > 0,\n                'withShiftIsDeadKey': (mask & 2) > 0,\n                'withAltGrIsDeadKey': (mask & 4) > 0,\n                'withShiftAltGrIsDeadKey': (mask & 8) > 0\n            };\n        }\n        else {\n            ret[key] = {\n                'value': '',\n                'valueIsDeadKey': false,\n                'withShift': '',\n                'withShiftIsDeadKey': false,\n                'withAltGr': '',\n                'withAltGrIsDeadKey': false,\n                'withShiftAltGr': '',\n                'withShiftAltGrIsDeadKey': false\n            };\n        }\n    }\n    return ret;\n}\nclass KeymapInfo {\n    constructor(layout, secondaryLayouts, keyboardMapping, isUserKeyboardLayout) {\n        this.layout = layout;\n        this.secondaryLayouts = secondaryLayouts;\n        this.mapping = deserializeMapping(keyboardMapping);\n        this.isUserKeyboardLayout = !!isUserKeyboardLayout;\n        this.layout.isUserKeyboardLayout = !!isUserKeyboardLayout;\n    }\n    static createKeyboardLayoutFromDebugInfo(layout, value, isUserKeyboardLayout) {\n        const keyboardLayoutInfo = ( new KeymapInfo(layout, [], {}, true));\n        keyboardLayoutInfo.mapping = value;\n        return keyboardLayoutInfo;\n    }\n    update(other) {\n        this.layout = other.layout;\n        this.secondaryLayouts = other.secondaryLayouts;\n        this.mapping = other.mapping;\n        this.isUserKeyboardLayout = other.isUserKeyboardLayout;\n        this.layout.isUserKeyboardLayout = other.isUserKeyboardLayout;\n    }\n    getScore(other) {\n        let score = 0;\n        for (const key in other) {\n            if (isWindows && (key === 'Backslash' || key === 'KeyQ')) {\n                continue;\n            }\n            if (isLinux && (key === 'Backspace' || key === 'Escape')) {\n                continue;\n            }\n            const currentMapping = this.mapping[key];\n            if (currentMapping === undefined) {\n                score -= 1;\n            }\n            const otherMapping = other[key];\n            if (currentMapping && otherMapping && currentMapping.value !== otherMapping.value) {\n                score -= 1;\n            }\n        }\n        return score;\n    }\n    equal(other) {\n        if (this.isUserKeyboardLayout !== other.isUserKeyboardLayout) {\n            return false;\n        }\n        if (getKeyboardLayoutId(this.layout) !== getKeyboardLayoutId(other.layout)) {\n            return false;\n        }\n        return this.fuzzyEqual(other.mapping);\n    }\n    fuzzyEqual(other) {\n        for (const key in other) {\n            if (isWindows && (key === 'Backslash' || key === 'KeyQ')) {\n                continue;\n            }\n            if (this.mapping[key] === undefined) {\n                return false;\n            }\n            const currentMapping = this.mapping[key];\n            const otherMapping = other[key];\n            if (currentMapping.value !== otherMapping.value) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexport { KeymapInfo };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { OS } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nfunction readKeyboardConfig(configurationService) {\n    const keyboard = configurationService.getValue('keyboard');\n    const dispatch = ((keyboard?.dispatch === 'keyCode' ? 1  : 0) );\n    const mapAltGrToCtrlAlt = Boolean(keyboard?.mapAltGrToCtrlAlt);\n    return { dispatch, mapAltGrToCtrlAlt };\n}\nconst configurationRegistry = ( Registry.as(Extensions.Configuration));\nconst keyboardConfiguration = {\n    'id': 'keyboard',\n    'order': 15,\n    'type': 'object',\n    'title': ( nls.localize('keyboardConfigurationTitle', \"Keyboard\")),\n    'properties': {\n        'keyboard.dispatch': {\n            scope: 1 ,\n            type: 'string',\n            enum: ['code', 'keyCode'],\n            default: 'code',\n            markdownDescription: ( nls.localize(\n                'dispatch',\n                \"Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.\"\n            )),\n            included: OS === 2  || OS === 3\n        },\n        'keyboard.mapAltGrToCtrlAlt': {\n            scope: 1 ,\n            type: 'boolean',\n            default: false,\n            markdownDescription: ( nls.localize(\n                'mapAltGrToCtrlAlt',\n                \"Controls if the AltGraph+ modifier should be treated as Ctrl+Alt+.\"\n            )),\n            included: OS === 1\n        }\n    }\n};\nconfigurationRegistry.registerConfiguration(keyboardConfiguration);\nexport { readKeyboardConfig };\n","class CachedKeyboardMapper {\n    constructor(actual) {\n        this._actual = actual;\n        this._cache = ( new Map());\n    }\n    dumpDebugInfo() {\n        return this._actual.dumpDebugInfo();\n    }\n    resolveKeyboardEvent(keyboardEvent) {\n        return this._actual.resolveKeyboardEvent(keyboardEvent);\n    }\n    resolveKeybinding(keybinding) {\n        const hashCode = keybinding.getHashCode();\n        const resolved = this._cache.get(hashCode);\n        if (!resolved) {\n            const r = this._actual.resolveKeybinding(keybinding);\n            this._cache.set(hashCode, r);\n            return r;\n        }\n        return resolved;\n    }\n}\nexport { CachedKeyboardMapper };\n","import { KeyCodeUtils, ScanCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE, NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE } from 'monaco-editor/esm/vs/base/common/keyCodes.js';\nimport { KeyCodeChord, ScanCodeChord } from 'monaco-editor/esm/vs/base/common/keybindings.js';\nimport { UILabelProvider } from 'monaco-editor/esm/vs/base/common/keybindingLabels.js';\nimport { BaseResolvedKeybinding } from 'monaco-editor/esm/vs/platform/keybinding/common/baseResolvedKeybinding.js';\nimport { toEmptyArrayIfContainsNull } from 'monaco-editor/esm/vs/platform/keybinding/common/resolvedKeybindingItem.js';\nclass WindowsNativeResolvedKeybinding extends BaseResolvedKeybinding {\n    constructor(mapper, chords) {\n        super(1 , chords);\n        this._mapper = mapper;\n    }\n    _getLabel(chord) {\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        return this._mapper.getUILabelForKeyCode(chord.keyCode);\n    }\n    _getUSLabelForKeybinding(chord) {\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        return ( KeyCodeUtils.toString(chord.keyCode));\n    }\n    getUSLabel() {\n        return UILabelProvider.toLabel(this._os, this._chords, (keybinding) => this._getUSLabelForKeybinding(keybinding));\n    }\n    _getAriaLabel(chord) {\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        return this._mapper.getAriaLabelForKeyCode(chord.keyCode);\n    }\n    _getElectronAccelerator(chord) {\n        return this._mapper.getElectronAcceleratorForKeyBinding(chord);\n    }\n    _getUserSettingsLabel(chord) {\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        const result = this._mapper.getUserSettingsLabelForKeyCode(chord.keyCode);\n        return (result ? result.toLowerCase() : result);\n    }\n    _isWYSIWYG(chord) {\n        return this.__isWYSIWYG(chord.keyCode);\n    }\n    __isWYSIWYG(keyCode) {\n        if (keyCode === 15\n            || keyCode === 16\n            || keyCode === 17\n            || keyCode === 18 ) {\n            return true;\n        }\n        const ariaLabel = this._mapper.getAriaLabelForKeyCode(keyCode);\n        const userSettingsLabel = this._mapper.getUserSettingsLabelForKeyCode(keyCode);\n        return (ariaLabel === userSettingsLabel);\n    }\n    _getChordDispatch(chord) {\n        if (chord.isModifierKey()) {\n            return null;\n        }\n        let result = '';\n        if (chord.ctrlKey) {\n            result += 'ctrl+';\n        }\n        if (chord.shiftKey) {\n            result += 'shift+';\n        }\n        if (chord.altKey) {\n            result += 'alt+';\n        }\n        if (chord.metaKey) {\n            result += 'meta+';\n        }\n        result += ( KeyCodeUtils.toString(chord.keyCode));\n        return result;\n    }\n    _getSingleModifierChordDispatch(chord) {\n        if (chord.keyCode === 5  && !chord.shiftKey && !chord.altKey && !chord.metaKey) {\n            return 'ctrl';\n        }\n        if (chord.keyCode === 4  && !chord.ctrlKey && !chord.altKey && !chord.metaKey) {\n            return 'shift';\n        }\n        if (chord.keyCode === 6  && !chord.ctrlKey && !chord.shiftKey && !chord.metaKey) {\n            return 'alt';\n        }\n        if (chord.keyCode === 57  && !chord.ctrlKey && !chord.shiftKey && !chord.altKey) {\n            return 'meta';\n        }\n        return null;\n    }\n    static getProducedCharCode(chord, mapping) {\n        if (!mapping) {\n            return null;\n        }\n        if (chord.ctrlKey && chord.shiftKey && chord.altKey) {\n            return mapping.withShiftAltGr;\n        }\n        if (chord.ctrlKey && chord.altKey) {\n            return mapping.withAltGr;\n        }\n        if (chord.shiftKey) {\n            return mapping.withShift;\n        }\n        return mapping.value;\n    }\n    static getProducedChar(chord, mapping) {\n        const char = this.getProducedCharCode(chord, mapping);\n        if (char === null || char.length === 0) {\n            return ' --- ';\n        }\n        return '  ' + char + '  ';\n    }\n}\nclass WindowsKeyboardMapper {\n    constructor(_isUSStandard, rawMappings, _mapAltGrToCtrlAlt) {\n        this._isUSStandard = _isUSStandard;\n        this._mapAltGrToCtrlAlt = _mapAltGrToCtrlAlt;\n        this._keyCodeToLabel = [];\n        this._scanCodeToKeyCode = [];\n        this._keyCodeToLabel = [];\n        this._keyCodeExists = [];\n        this._keyCodeToLabel[0 ] = ( KeyCodeUtils.toString(0 ));\n        for (let scanCode = 0 ; scanCode < 193 ; scanCode++) {\n            const immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n            if (immutableKeyCode !== -1 ) {\n                this._scanCodeToKeyCode[scanCode] = immutableKeyCode;\n                this._keyCodeToLabel[immutableKeyCode] = ( KeyCodeUtils.toString(immutableKeyCode));\n                this._keyCodeExists[immutableKeyCode] = true;\n            }\n        }\n        const producesLetter = [];\n        let producesLetters = false;\n        this._codeInfo = [];\n        for (const strCode in rawMappings) {\n            if (rawMappings.hasOwnProperty(strCode)) {\n                const scanCode = ScanCodeUtils.toEnum(strCode);\n                if (scanCode === 0 ) {\n                    continue;\n                }\n                const rawMapping = rawMappings[strCode];\n                const immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n                if (immutableKeyCode !== -1 ) {\n                    const keyCode = NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || 0 ;\n                    if (keyCode === 0  || immutableKeyCode === keyCode) {\n                        continue;\n                    }\n                    if (scanCode !== 134 ) {\n                        continue;\n                    }\n                }\n                const value = rawMapping.value;\n                const withShift = rawMapping.withShift;\n                const withAltGr = rawMapping.withAltGr;\n                const withShiftAltGr = rawMapping.withShiftAltGr;\n                const keyCode = NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || 0 ;\n                const mapping = {\n                    scanCode: scanCode,\n                    keyCode: keyCode,\n                    value: value,\n                    withShift: withShift,\n                    withAltGr: withAltGr,\n                    withShiftAltGr: withShiftAltGr,\n                };\n                this._codeInfo[scanCode] = mapping;\n                this._scanCodeToKeyCode[scanCode] = keyCode;\n                if (keyCode === 0 ) {\n                    continue;\n                }\n                this._keyCodeExists[keyCode] = true;\n                if (value.length === 0) {\n                    this._keyCodeToLabel[keyCode] = null;\n                }\n                else if (value.length > 1) {\n                    this._keyCodeToLabel[keyCode] = value;\n                }\n                else {\n                    const charCode = value.charCodeAt(0);\n                    if (charCode >= 97  && charCode <= 122 ) {\n                        const upperCaseValue = 65  + ((charCode - 97) );\n                        producesLetter[upperCaseValue] = true;\n                        producesLetters = true;\n                        this._keyCodeToLabel[keyCode] = String.fromCharCode(65  + ((charCode - 97) ));\n                    }\n                    else if (charCode >= 65  && charCode <= 90 ) {\n                        producesLetter[charCode] = true;\n                        producesLetters = true;\n                        this._keyCodeToLabel[keyCode] = value;\n                    }\n                    else {\n                        this._keyCodeToLabel[keyCode] = value;\n                    }\n                }\n            }\n        }\n        const _registerLetterIfMissing = (charCode, keyCode) => {\n            if (!producesLetter[charCode]) {\n                this._keyCodeToLabel[keyCode] = String.fromCharCode(charCode);\n            }\n        };\n        _registerLetterIfMissing(65 , 31 );\n        _registerLetterIfMissing(66 , 32 );\n        _registerLetterIfMissing(67 , 33 );\n        _registerLetterIfMissing(68 , 34 );\n        _registerLetterIfMissing(69 , 35 );\n        _registerLetterIfMissing(70 , 36 );\n        _registerLetterIfMissing(71 , 37 );\n        _registerLetterIfMissing(72 , 38 );\n        _registerLetterIfMissing(73 , 39 );\n        _registerLetterIfMissing(74 , 40 );\n        _registerLetterIfMissing(75 , 41 );\n        _registerLetterIfMissing(76 , 42 );\n        _registerLetterIfMissing(77 , 43 );\n        _registerLetterIfMissing(78 , 44 );\n        _registerLetterIfMissing(79 , 45 );\n        _registerLetterIfMissing(80 , 46 );\n        _registerLetterIfMissing(81 , 47 );\n        _registerLetterIfMissing(82 , 48 );\n        _registerLetterIfMissing(83 , 49 );\n        _registerLetterIfMissing(84 , 50 );\n        _registerLetterIfMissing(85 , 51 );\n        _registerLetterIfMissing(86 , 52 );\n        _registerLetterIfMissing(87 , 53 );\n        _registerLetterIfMissing(88 , 54 );\n        _registerLetterIfMissing(89 , 55 );\n        _registerLetterIfMissing(90 , 56 );\n        if (!producesLetters) {\n            const _registerLabel = (keyCode, charCode) => {\n                this._keyCodeToLabel[keyCode] = String.fromCharCode(charCode);\n            };\n            _registerLabel(85 , 59 );\n            _registerLabel(86 , 61 );\n            _registerLabel(87 , 44 );\n            _registerLabel(88 , 45 );\n            _registerLabel(89 , 46 );\n            _registerLabel(90 , 47 );\n            _registerLabel(91 , 96 );\n            _registerLabel(92 , 91 );\n            _registerLabel(93 , 92 );\n            _registerLabel(94 , 93 );\n            _registerLabel(95 , 39 );\n        }\n    }\n    dumpDebugInfo() {\n        const result = [];\n        const immutableSamples = [\n            88 ,\n            104\n        ];\n        let cnt = 0;\n        result.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n        for (let scanCode = 0 ; scanCode < 193 ; scanCode++) {\n            if (IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== -1 ) {\n                if (immutableSamples.indexOf(scanCode) === -1) {\n                    continue;\n                }\n            }\n            if (cnt % 6 === 0) {\n                result.push(`|       HW Code combination      |  Key  |    KeyCode combination    |          UI label         |        User settings       | WYSIWYG |`);\n                result.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n            }\n            cnt++;\n            const mapping = this._codeInfo[scanCode];\n            const strCode = ( ScanCodeUtils.toString(scanCode));\n            const mods = [0b000, 0b010, 0b101, 0b111];\n            for (const mod of mods) {\n                const ctrlKey = (mod & 0b001) ? true : false;\n                const shiftKey = (mod & 0b010) ? true : false;\n                const altKey = (mod & 0b100) ? true : false;\n                const scanCodeChord = ( new ScanCodeChord(ctrlKey, shiftKey, altKey, false, scanCode));\n                const keyCodeChord = this._resolveChord(scanCodeChord);\n                const strKeyCode = (keyCodeChord ? ( KeyCodeUtils.toString(keyCodeChord.keyCode)) : null);\n                const resolvedKb = (keyCodeChord ? ( new WindowsNativeResolvedKeybinding(this, [keyCodeChord])) : null);\n                const outScanCode = `${ctrlKey ? 'Ctrl+' : ''}${shiftKey ? 'Shift+' : ''}${altKey ? 'Alt+' : ''}${strCode}`;\n                const ariaLabel = (resolvedKb ? resolvedKb.getAriaLabel() : null);\n                const outUILabel = (ariaLabel ? ariaLabel.replace(/Control\\+/, 'Ctrl+') : null);\n                const outUserSettings = (resolvedKb ? resolvedKb.getUserSettingsLabel() : null);\n                const outKey = WindowsNativeResolvedKeybinding.getProducedChar(scanCodeChord, mapping);\n                const outKb = (strKeyCode ? `${ctrlKey ? 'Ctrl+' : ''}${shiftKey ? 'Shift+' : ''}${altKey ? 'Alt+' : ''}${strKeyCode}` : null);\n                const isWYSIWYG = (resolvedKb ? resolvedKb.isWYSIWYG() : false);\n                const outWYSIWYG = (isWYSIWYG ? '       ' : '   NO  ');\n                result.push(`| ${this._leftPad(outScanCode, 30)} | ${outKey} | ${this._leftPad(outKb, 25)} | ${this._leftPad(outUILabel, 25)} |  ${this._leftPad(outUserSettings, 25)} | ${outWYSIWYG} |`);\n            }\n            result.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n        }\n        return result.join('\\n');\n    }\n    _leftPad(str, cnt) {\n        if (str === null) {\n            str = 'null';\n        }\n        while (str.length < cnt) {\n            str = ' ' + str;\n        }\n        return str;\n    }\n    getUILabelForKeyCode(keyCode) {\n        return this._getLabelForKeyCode(keyCode);\n    }\n    getAriaLabelForKeyCode(keyCode) {\n        return this._getLabelForKeyCode(keyCode);\n    }\n    getUserSettingsLabelForKeyCode(keyCode) {\n        if (this._isUSStandard) {\n            return KeyCodeUtils.toUserSettingsUS(keyCode);\n        }\n        return KeyCodeUtils.toUserSettingsGeneral(keyCode);\n    }\n    getElectronAcceleratorForKeyBinding(chord) {\n        return KeyCodeUtils.toElectronAccelerator(chord.keyCode);\n    }\n    _getLabelForKeyCode(keyCode) {\n        return this._keyCodeToLabel[keyCode] || ( KeyCodeUtils.toString(0 ));\n    }\n    resolveKeyboardEvent(keyboardEvent) {\n        const ctrlKey = keyboardEvent.ctrlKey || (this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n        const altKey = keyboardEvent.altKey || (this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n        const chord = ( new KeyCodeChord(\n            ctrlKey,\n            keyboardEvent.shiftKey,\n            altKey,\n            keyboardEvent.metaKey,\n            keyboardEvent.keyCode\n        ));\n        return ( new WindowsNativeResolvedKeybinding(this, [chord]));\n    }\n    _resolveChord(chord) {\n        if (!chord) {\n            return null;\n        }\n        if (chord instanceof KeyCodeChord) {\n            if (!this._keyCodeExists[chord.keyCode]) {\n                return null;\n            }\n            return chord;\n        }\n        const keyCode = this._scanCodeToKeyCode[chord.scanCode] || 0 ;\n        if (keyCode === 0  || !this._keyCodeExists[keyCode]) {\n            return null;\n        }\n        return ( new KeyCodeChord(chord.ctrlKey, chord.shiftKey, chord.altKey, chord.metaKey, keyCode));\n    }\n    resolveKeybinding(keybinding) {\n        const chords = toEmptyArrayIfContainsNull(( keybinding.chords.map(chord => this._resolveChord(chord))));\n        if (chords.length > 0) {\n            return [( new WindowsNativeResolvedKeybinding(this, chords))];\n        }\n        return [];\n    }\n}\nexport { WindowsKeyboardMapper, WindowsNativeResolvedKeybinding };\n","import { KeyCodeUtils, ScanCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE, IMMUTABLE_KEY_CODE_TO_CODE } from 'monaco-editor/esm/vs/base/common/keyCodes.js';\nimport { ScanCodeChord, KeyCodeChord } from 'monaco-editor/esm/vs/base/common/keybindings.js';\nimport { BaseResolvedKeybinding } from 'monaco-editor/esm/vs/platform/keybinding/common/baseResolvedKeybinding.js';\nconst CHAR_CODE_TO_KEY_CODE = [];\nclass NativeResolvedKeybinding extends BaseResolvedKeybinding {\n    constructor(mapper, os, chords) {\n        super(os, chords);\n        this._mapper = mapper;\n    }\n    _getLabel(chord) {\n        return this._mapper.getUILabelForScanCodeChord(chord);\n    }\n    _getAriaLabel(chord) {\n        return this._mapper.getAriaLabelForScanCodeChord(chord);\n    }\n    _getElectronAccelerator(chord) {\n        return this._mapper.getElectronAcceleratorLabelForScanCodeChord(chord);\n    }\n    _getUserSettingsLabel(chord) {\n        return this._mapper.getUserSettingsLabelForScanCodeChord(chord);\n    }\n    _isWYSIWYG(binding) {\n        if (!binding) {\n            return true;\n        }\n        if (IMMUTABLE_CODE_TO_KEY_CODE[binding.scanCode] !== -1 ) {\n            return true;\n        }\n        const a = this._mapper.getAriaLabelForScanCodeChord(binding);\n        const b = this._mapper.getUserSettingsLabelForScanCodeChord(binding);\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return (a.toLowerCase() === b.toLowerCase());\n    }\n    _getChordDispatch(chord) {\n        return this._mapper.getDispatchStrForScanCodeChord(chord);\n    }\n    _getSingleModifierChordDispatch(chord) {\n        if (((chord.scanCode === 157  || chord.scanCode === 161) ) && !chord.shiftKey && !chord.altKey && !chord.metaKey) {\n            return 'ctrl';\n        }\n        if (((chord.scanCode === 159  || chord.scanCode === 163) ) && !chord.ctrlKey && !chord.shiftKey && !chord.metaKey) {\n            return 'alt';\n        }\n        if (((chord.scanCode === 158  || chord.scanCode === 162) ) && !chord.ctrlKey && !chord.altKey && !chord.metaKey) {\n            return 'shift';\n        }\n        if (((chord.scanCode === 160  || chord.scanCode === 164) ) && !chord.ctrlKey && !chord.shiftKey && !chord.altKey) {\n            return 'meta';\n        }\n        return null;\n    }\n}\nclass ScanCodeCombo {\n    constructor(ctrlKey, shiftKey, altKey, scanCode) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.scanCode = scanCode;\n    }\n    toString() {\n        return `${this.ctrlKey ? 'Ctrl+' : ''}${this.shiftKey ? 'Shift+' : ''}${this.altKey ? 'Alt+' : ''}${( ( ScanCodeUtils.toString(this.scanCode)))}`;\n    }\n    equals(other) {\n        return (this.ctrlKey === other.ctrlKey\n            && this.shiftKey === other.shiftKey\n            && this.altKey === other.altKey\n            && this.scanCode === other.scanCode);\n    }\n    getProducedCharCode(mapping) {\n        if (!mapping) {\n            return '';\n        }\n        if (this.ctrlKey && this.shiftKey && this.altKey) {\n            return mapping.withShiftAltGr;\n        }\n        if (this.ctrlKey && this.altKey) {\n            return mapping.withAltGr;\n        }\n        if (this.shiftKey) {\n            return mapping.withShift;\n        }\n        return mapping.value;\n    }\n    getProducedChar(mapping) {\n        const charCode = MacLinuxKeyboardMapper.getCharCode(this.getProducedCharCode(mapping));\n        if (charCode === 0) {\n            return ' --- ';\n        }\n        if (charCode >= 768  && charCode <= 879 ) {\n            return 'U+' + ( (charCode.toString(16)));\n        }\n        return '  ' + String.fromCharCode(charCode) + '  ';\n    }\n}\nclass KeyCodeCombo {\n    constructor(ctrlKey, shiftKey, altKey, keyCode) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.keyCode = keyCode;\n    }\n    toString() {\n        return `${this.ctrlKey ? 'Ctrl+' : ''}${this.shiftKey ? 'Shift+' : ''}${this.altKey ? 'Alt+' : ''}${( ( KeyCodeUtils.toString(this.keyCode)))}`;\n    }\n}\nclass ScanCodeKeyCodeMapper {\n    constructor() {\n        this._scanCodeToKeyCode = [];\n        this._keyCodeToScanCode = [];\n        this._scanCodeToKeyCode = [];\n        this._keyCodeToScanCode = [];\n    }\n    registrationComplete() {\n        this._moveToEnd(56 );\n        this._moveToEnd(106 );\n    }\n    _moveToEnd(scanCode) {\n        for (let mod = 0; mod < 8; mod++) {\n            const encodedKeyCodeCombos = this._scanCodeToKeyCode[(scanCode << 3) + mod];\n            if (!encodedKeyCodeCombos) {\n                continue;\n            }\n            for (let i = 0, len = encodedKeyCodeCombos.length; i < len; i++) {\n                const encodedScanCodeCombos = this._keyCodeToScanCode[encodedKeyCodeCombos[i]];\n                if (encodedScanCodeCombos.length === 1) {\n                    continue;\n                }\n                for (let j = 0, len = encodedScanCodeCombos.length; j < len; j++) {\n                    const entry = encodedScanCodeCombos[j];\n                    const entryScanCode = (entry >>> 3);\n                    if (entryScanCode === scanCode) {\n                        for (let k = j + 1; k < len; k++) {\n                            encodedScanCodeCombos[k - 1] = encodedScanCodeCombos[k];\n                        }\n                        encodedScanCodeCombos[len - 1] = entry;\n                    }\n                }\n            }\n        }\n    }\n    registerIfUnknown(scanCodeCombo, keyCodeCombo) {\n        if (keyCodeCombo.keyCode === 0 ) {\n            return;\n        }\n        const scanCodeComboEncoded = this._encodeScanCodeCombo(scanCodeCombo);\n        const keyCodeComboEncoded = this._encodeKeyCodeCombo(keyCodeCombo);\n        const keyCodeIsDigit = ((keyCodeCombo.keyCode >= 21  && keyCodeCombo.keyCode <= 30) );\n        const keyCodeIsLetter = ((keyCodeCombo.keyCode >= 31  && keyCodeCombo.keyCode <= 56) );\n        const existingKeyCodeCombos = this._scanCodeToKeyCode[scanCodeComboEncoded];\n        if (keyCodeIsDigit || keyCodeIsLetter) {\n            if (existingKeyCodeCombos) {\n                for (let i = 0, len = existingKeyCodeCombos.length; i < len; i++) {\n                    if (existingKeyCodeCombos[i] === keyCodeComboEncoded) {\n                        return;\n                    }\n                }\n            }\n        }\n        else {\n            if (existingKeyCodeCombos && existingKeyCodeCombos.length !== 0) {\n                return;\n            }\n        }\n        this._scanCodeToKeyCode[scanCodeComboEncoded] = this._scanCodeToKeyCode[scanCodeComboEncoded] || [];\n        this._scanCodeToKeyCode[scanCodeComboEncoded].unshift(keyCodeComboEncoded);\n        this._keyCodeToScanCode[keyCodeComboEncoded] = this._keyCodeToScanCode[keyCodeComboEncoded] || [];\n        this._keyCodeToScanCode[keyCodeComboEncoded].unshift(scanCodeComboEncoded);\n    }\n    lookupKeyCodeCombo(keyCodeCombo) {\n        const keyCodeComboEncoded = this._encodeKeyCodeCombo(keyCodeCombo);\n        const scanCodeCombosEncoded = this._keyCodeToScanCode[keyCodeComboEncoded];\n        if (!scanCodeCombosEncoded || scanCodeCombosEncoded.length === 0) {\n            return [];\n        }\n        const result = [];\n        for (let i = 0, len = scanCodeCombosEncoded.length; i < len; i++) {\n            const scanCodeComboEncoded = scanCodeCombosEncoded[i];\n            const ctrlKey = (scanCodeComboEncoded & 0b001) ? true : false;\n            const shiftKey = (scanCodeComboEncoded & 0b010) ? true : false;\n            const altKey = (scanCodeComboEncoded & 0b100) ? true : false;\n            const scanCode = (scanCodeComboEncoded >>> 3);\n            result[i] = ( (new ScanCodeCombo(ctrlKey, shiftKey, altKey, scanCode)));\n        }\n        return result;\n    }\n    lookupScanCodeCombo(scanCodeCombo) {\n        const scanCodeComboEncoded = this._encodeScanCodeCombo(scanCodeCombo);\n        const keyCodeCombosEncoded = this._scanCodeToKeyCode[scanCodeComboEncoded];\n        if (!keyCodeCombosEncoded || keyCodeCombosEncoded.length === 0) {\n            return [];\n        }\n        const result = [];\n        for (let i = 0, len = keyCodeCombosEncoded.length; i < len; i++) {\n            const keyCodeComboEncoded = keyCodeCombosEncoded[i];\n            const ctrlKey = (keyCodeComboEncoded & 0b001) ? true : false;\n            const shiftKey = (keyCodeComboEncoded & 0b010) ? true : false;\n            const altKey = (keyCodeComboEncoded & 0b100) ? true : false;\n            const keyCode = (keyCodeComboEncoded >>> 3);\n            result[i] = ( (new KeyCodeCombo(ctrlKey, shiftKey, altKey, keyCode)));\n        }\n        return result;\n    }\n    guessStableKeyCode(scanCode) {\n        if (scanCode >= 36  && scanCode <= 45 ) {\n            switch (scanCode) {\n                case 36 : return 22 ;\n                case 37 : return 23 ;\n                case 38 : return 24 ;\n                case 39 : return 25 ;\n                case 40 : return 26 ;\n                case 41 : return 27 ;\n                case 42 : return 28 ;\n                case 43 : return 29 ;\n                case 44 : return 30 ;\n                case 45 : return 21 ;\n            }\n        }\n        const keyCodeCombos1 = this.lookupScanCodeCombo(( (new ScanCodeCombo(false, false, false, scanCode))));\n        const keyCodeCombos2 = this.lookupScanCodeCombo(( (new ScanCodeCombo(false, true, false, scanCode))));\n        if (keyCodeCombos1.length === 1 && keyCodeCombos2.length === 1) {\n            const shiftKey1 = keyCodeCombos1[0].shiftKey;\n            const keyCode1 = keyCodeCombos1[0].keyCode;\n            const shiftKey2 = keyCodeCombos2[0].shiftKey;\n            const keyCode2 = keyCodeCombos2[0].keyCode;\n            if (keyCode1 === keyCode2 && shiftKey1 !== shiftKey2) {\n                return keyCode1;\n            }\n        }\n        return -1 ;\n    }\n    _encodeScanCodeCombo(scanCodeCombo) {\n        return this._encode(scanCodeCombo.ctrlKey, scanCodeCombo.shiftKey, scanCodeCombo.altKey, scanCodeCombo.scanCode);\n    }\n    _encodeKeyCodeCombo(keyCodeCombo) {\n        return this._encode(keyCodeCombo.ctrlKey, keyCodeCombo.shiftKey, keyCodeCombo.altKey, keyCodeCombo.keyCode);\n    }\n    _encode(ctrlKey, shiftKey, altKey, principal) {\n        return (((ctrlKey ? 1 : 0) << 0)\n            | ((shiftKey ? 1 : 0) << 1)\n            | ((altKey ? 1 : 0) << 2)\n            | principal << 3) >>> 0;\n    }\n}\nclass MacLinuxKeyboardMapper {\n    constructor(_isUSStandard, rawMappings, _mapAltGrToCtrlAlt, _OS) {\n        this._isUSStandard = _isUSStandard;\n        this._mapAltGrToCtrlAlt = _mapAltGrToCtrlAlt;\n        this._OS = _OS;\n        this._scanCodeToLabel = [];\n        this._scanCodeToDispatch = [];\n        this._codeInfo = [];\n        this._scanCodeKeyCodeMapper = ( (new ScanCodeKeyCodeMapper()));\n        this._scanCodeToLabel = [];\n        this._scanCodeToDispatch = [];\n        const _registerIfUnknown = (hwCtrlKey, hwShiftKey, hwAltKey, scanCode, kbCtrlKey, kbShiftKey, kbAltKey, keyCode) => {\n            this._scanCodeKeyCodeMapper.registerIfUnknown(( (new ScanCodeCombo(\n                hwCtrlKey ? true : false,\n                hwShiftKey ? true : false,\n                hwAltKey ? true : false,\n                scanCode\n            ))), ( (new KeyCodeCombo(\n                kbCtrlKey ? true : false,\n                kbShiftKey ? true : false,\n                kbAltKey ? true : false,\n                keyCode\n            ))));\n        };\n        const _registerAllCombos = (_ctrlKey, _shiftKey, _altKey, scanCode, keyCode) => {\n            for (let ctrlKey = _ctrlKey; ctrlKey <= 1; ctrlKey++) {\n                for (let shiftKey = _shiftKey; shiftKey <= 1; shiftKey++) {\n                    for (let altKey = _altKey; altKey <= 1; altKey++) {\n                        _registerIfUnknown(ctrlKey, shiftKey, altKey, scanCode, ctrlKey, shiftKey, altKey, keyCode);\n                    }\n                }\n            }\n        };\n        for (let scanCode = 0 ; scanCode < 193 ; scanCode++) {\n            this._scanCodeToLabel[scanCode] = null;\n        }\n        for (let scanCode = 0 ; scanCode < 193 ; scanCode++) {\n            this._scanCodeToDispatch[scanCode] = null;\n        }\n        for (let scanCode = 0 ; scanCode < 193 ; scanCode++) {\n            const keyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n            if (keyCode !== -1 ) {\n                _registerAllCombos(0, 0, 0, scanCode, keyCode);\n                this._scanCodeToLabel[scanCode] = ( (KeyCodeUtils.toString(keyCode)));\n                if (keyCode === 0  || keyCode === 5  || keyCode === 57  || keyCode === 6  || keyCode === 4 ) {\n                    this._scanCodeToDispatch[scanCode] = null;\n                }\n                else {\n                    this._scanCodeToDispatch[scanCode] = `[${( ( ScanCodeUtils.toString(scanCode)))}]`;\n                }\n            }\n        }\n        const missingLatinLettersOverride = {};\n        {\n            const producesLatinLetter = [];\n            for (const strScanCode in rawMappings) {\n                if (rawMappings.hasOwnProperty(strScanCode)) {\n                    const scanCode = ScanCodeUtils.toEnum(strScanCode);\n                    if (scanCode === 0 ) {\n                        continue;\n                    }\n                    if (IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== -1 ) {\n                        continue;\n                    }\n                    const rawMapping = rawMappings[strScanCode];\n                    const value = MacLinuxKeyboardMapper.getCharCode(rawMapping.value);\n                    if (value >= 97  && value <= 122 ) {\n                        const upperCaseValue = 65  + ((value - 97) );\n                        producesLatinLetter[upperCaseValue] = true;\n                    }\n                }\n            }\n            const _registerLetterIfMissing = (charCode, scanCode, value, withShift) => {\n                if (!producesLatinLetter[charCode]) {\n                    missingLatinLettersOverride[( (ScanCodeUtils.toString(scanCode)))] = {\n                        value: value,\n                        withShift: withShift,\n                        withAltGr: '',\n                        withShiftAltGr: ''\n                    };\n                }\n            };\n            _registerLetterIfMissing(65 , 10 , 'a', 'A');\n            _registerLetterIfMissing(66 , 11 , 'b', 'B');\n            _registerLetterIfMissing(67 , 12 , 'c', 'C');\n            _registerLetterIfMissing(68 , 13 , 'd', 'D');\n            _registerLetterIfMissing(69 , 14 , 'e', 'E');\n            _registerLetterIfMissing(70 , 15 , 'f', 'F');\n            _registerLetterIfMissing(71 , 16 , 'g', 'G');\n            _registerLetterIfMissing(72 , 17 , 'h', 'H');\n            _registerLetterIfMissing(73 , 18 , 'i', 'I');\n            _registerLetterIfMissing(74 , 19 , 'j', 'J');\n            _registerLetterIfMissing(75 , 20 , 'k', 'K');\n            _registerLetterIfMissing(76 , 21 , 'l', 'L');\n            _registerLetterIfMissing(77 , 22 , 'm', 'M');\n            _registerLetterIfMissing(78 , 23 , 'n', 'N');\n            _registerLetterIfMissing(79 , 24 , 'o', 'O');\n            _registerLetterIfMissing(80 , 25 , 'p', 'P');\n            _registerLetterIfMissing(81 , 26 , 'q', 'Q');\n            _registerLetterIfMissing(82 , 27 , 'r', 'R');\n            _registerLetterIfMissing(83 , 28 , 's', 'S');\n            _registerLetterIfMissing(84 , 29 , 't', 'T');\n            _registerLetterIfMissing(85 , 30 , 'u', 'U');\n            _registerLetterIfMissing(86 , 31 , 'v', 'V');\n            _registerLetterIfMissing(87 , 32 , 'w', 'W');\n            _registerLetterIfMissing(88 , 33 , 'x', 'X');\n            _registerLetterIfMissing(89 , 34 , 'y', 'Y');\n            _registerLetterIfMissing(90 , 35 , 'z', 'Z');\n        }\n        const mappings = [];\n        let mappingsLen = 0;\n        for (const strScanCode in rawMappings) {\n            if (rawMappings.hasOwnProperty(strScanCode)) {\n                const scanCode = ScanCodeUtils.toEnum(strScanCode);\n                if (scanCode === 0 ) {\n                    continue;\n                }\n                if (IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== -1 ) {\n                    continue;\n                }\n                this._codeInfo[scanCode] = rawMappings[strScanCode];\n                const rawMapping = missingLatinLettersOverride[strScanCode] || rawMappings[strScanCode];\n                const value = MacLinuxKeyboardMapper.getCharCode(rawMapping.value);\n                const withShift = MacLinuxKeyboardMapper.getCharCode(rawMapping.withShift);\n                const withAltGr = MacLinuxKeyboardMapper.getCharCode(rawMapping.withAltGr);\n                const withShiftAltGr = MacLinuxKeyboardMapper.getCharCode(rawMapping.withShiftAltGr);\n                const mapping = {\n                    scanCode: scanCode,\n                    value: value,\n                    withShift: withShift,\n                    withAltGr: withAltGr,\n                    withShiftAltGr: withShiftAltGr,\n                };\n                mappings[mappingsLen++] = mapping;\n                this._scanCodeToDispatch[scanCode] = `[${( ( ScanCodeUtils.toString(scanCode)))}]`;\n                if (value >= 97  && value <= 122 ) {\n                    const upperCaseValue = 65  + ((value - 97) );\n                    this._scanCodeToLabel[scanCode] = String.fromCharCode(upperCaseValue);\n                }\n                else if (value >= 65  && value <= 90 ) {\n                    this._scanCodeToLabel[scanCode] = String.fromCharCode(value);\n                }\n                else if (value) {\n                    this._scanCodeToLabel[scanCode] = String.fromCharCode(value);\n                }\n                else {\n                    this._scanCodeToLabel[scanCode] = null;\n                }\n            }\n        }\n        for (let i = mappings.length - 1; i >= 0; i--) {\n            const mapping = mappings[i];\n            const scanCode = mapping.scanCode;\n            const withShiftAltGr = mapping.withShiftAltGr;\n            if (withShiftAltGr === mapping.withAltGr || withShiftAltGr === mapping.withShift || withShiftAltGr === mapping.value) {\n                continue;\n            }\n            const kb = MacLinuxKeyboardMapper._charCodeToKb(withShiftAltGr);\n            if (!kb) {\n                continue;\n            }\n            const kbShiftKey = kb.shiftKey;\n            const keyCode = kb.keyCode;\n            if (kbShiftKey) {\n                _registerIfUnknown(1, 1, 1, scanCode, 0, 1, 0, keyCode);\n            }\n            else {\n                _registerIfUnknown(1, 1, 1, scanCode, 0, 0, 0, keyCode);\n            }\n        }\n        for (let i = mappings.length - 1; i >= 0; i--) {\n            const mapping = mappings[i];\n            const scanCode = mapping.scanCode;\n            const withAltGr = mapping.withAltGr;\n            if (withAltGr === mapping.withShift || withAltGr === mapping.value) {\n                continue;\n            }\n            const kb = MacLinuxKeyboardMapper._charCodeToKb(withAltGr);\n            if (!kb) {\n                continue;\n            }\n            const kbShiftKey = kb.shiftKey;\n            const keyCode = kb.keyCode;\n            if (kbShiftKey) {\n                _registerIfUnknown(1, 0, 1, scanCode, 0, 1, 0, keyCode);\n            }\n            else {\n                _registerIfUnknown(1, 0, 1, scanCode, 0, 0, 0, keyCode);\n            }\n        }\n        for (let i = mappings.length - 1; i >= 0; i--) {\n            const mapping = mappings[i];\n            const scanCode = mapping.scanCode;\n            const withShift = mapping.withShift;\n            if (withShift === mapping.value) {\n                continue;\n            }\n            const kb = MacLinuxKeyboardMapper._charCodeToKb(withShift);\n            if (!kb) {\n                continue;\n            }\n            const kbShiftKey = kb.shiftKey;\n            const keyCode = kb.keyCode;\n            if (kbShiftKey) {\n                _registerIfUnknown(0, 1, 0, scanCode, 0, 1, 0, keyCode);\n                _registerIfUnknown(0, 1, 1, scanCode, 0, 1, 1, keyCode);\n                _registerIfUnknown(1, 1, 0, scanCode, 1, 1, 0, keyCode);\n                _registerIfUnknown(1, 1, 1, scanCode, 1, 1, 1, keyCode);\n            }\n            else {\n                _registerIfUnknown(0, 1, 0, scanCode, 0, 0, 0, keyCode);\n                _registerIfUnknown(0, 1, 0, scanCode, 0, 1, 0, keyCode);\n                _registerIfUnknown(0, 1, 1, scanCode, 0, 0, 1, keyCode);\n                _registerIfUnknown(0, 1, 1, scanCode, 0, 1, 1, keyCode);\n                _registerIfUnknown(1, 1, 0, scanCode, 1, 0, 0, keyCode);\n                _registerIfUnknown(1, 1, 0, scanCode, 1, 1, 0, keyCode);\n                _registerIfUnknown(1, 1, 1, scanCode, 1, 0, 1, keyCode);\n                _registerIfUnknown(1, 1, 1, scanCode, 1, 1, 1, keyCode);\n            }\n        }\n        for (let i = mappings.length - 1; i >= 0; i--) {\n            const mapping = mappings[i];\n            const scanCode = mapping.scanCode;\n            const kb = MacLinuxKeyboardMapper._charCodeToKb(mapping.value);\n            if (!kb) {\n                continue;\n            }\n            const kbShiftKey = kb.shiftKey;\n            const keyCode = kb.keyCode;\n            if (kbShiftKey) {\n                _registerIfUnknown(0, 0, 0, scanCode, 0, 1, 0, keyCode);\n                _registerIfUnknown(0, 0, 1, scanCode, 0, 1, 1, keyCode);\n                _registerIfUnknown(1, 0, 0, scanCode, 1, 1, 0, keyCode);\n                _registerIfUnknown(1, 0, 1, scanCode, 1, 1, 1, keyCode);\n            }\n            else {\n                _registerIfUnknown(0, 0, 0, scanCode, 0, 0, 0, keyCode);\n                _registerIfUnknown(0, 0, 1, scanCode, 0, 0, 1, keyCode);\n                _registerIfUnknown(0, 1, 0, scanCode, 0, 1, 0, keyCode);\n                _registerIfUnknown(0, 1, 1, scanCode, 0, 1, 1, keyCode);\n                _registerIfUnknown(1, 0, 0, scanCode, 1, 0, 0, keyCode);\n                _registerIfUnknown(1, 0, 1, scanCode, 1, 0, 1, keyCode);\n                _registerIfUnknown(1, 1, 0, scanCode, 1, 1, 0, keyCode);\n                _registerIfUnknown(1, 1, 1, scanCode, 1, 1, 1, keyCode);\n            }\n        }\n        _registerAllCombos(0, 0, 0, 36 , 22 );\n        _registerAllCombos(0, 0, 0, 37 , 23 );\n        _registerAllCombos(0, 0, 0, 38 , 24 );\n        _registerAllCombos(0, 0, 0, 39 , 25 );\n        _registerAllCombos(0, 0, 0, 40 , 26 );\n        _registerAllCombos(0, 0, 0, 41 , 27 );\n        _registerAllCombos(0, 0, 0, 42 , 28 );\n        _registerAllCombos(0, 0, 0, 43 , 29 );\n        _registerAllCombos(0, 0, 0, 44 , 30 );\n        _registerAllCombos(0, 0, 0, 45 , 21 );\n        this._scanCodeKeyCodeMapper.registrationComplete();\n    }\n    dumpDebugInfo() {\n        const result = [];\n        const immutableSamples = [\n            88 ,\n            104\n        ];\n        let cnt = 0;\n        result.push(`isUSStandard: ${this._isUSStandard}`);\n        result.push(`----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------`);\n        for (let scanCode = 0 ; scanCode < 193 ; scanCode++) {\n            if (IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== -1 ) {\n                if (immutableSamples.indexOf(scanCode) === -1) {\n                    continue;\n                }\n            }\n            if (cnt % 4 === 0) {\n                result.push(`|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |`);\n                result.push(`----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------`);\n            }\n            cnt++;\n            const mapping = this._codeInfo[scanCode];\n            for (let mod = 0; mod < 8; mod++) {\n                const hwCtrlKey = (mod & 0b001) ? true : false;\n                const hwShiftKey = (mod & 0b010) ? true : false;\n                const hwAltKey = (mod & 0b100) ? true : false;\n                const scanCodeCombo = ( (new ScanCodeCombo(hwCtrlKey, hwShiftKey, hwAltKey, scanCode)));\n                const resolvedKb = this.resolveKeyboardEvent({\n                    _standardKeyboardEventBrand: true,\n                    ctrlKey: scanCodeCombo.ctrlKey,\n                    shiftKey: scanCodeCombo.shiftKey,\n                    altKey: scanCodeCombo.altKey,\n                    metaKey: false,\n                    altGraphKey: false,\n                    keyCode: -1 ,\n                    code: ( (ScanCodeUtils.toString(scanCode)))\n                });\n                const outScanCodeCombo = ( (scanCodeCombo.toString()));\n                const outKey = scanCodeCombo.getProducedChar(mapping);\n                const ariaLabel = resolvedKb.getAriaLabel();\n                const outUILabel = (ariaLabel ? ariaLabel.replace(/Control\\+/, 'Ctrl+') : null);\n                const outUserSettings = resolvedKb.getUserSettingsLabel();\n                const outElectronAccelerator = resolvedKb.getElectronAccelerator();\n                const outDispatchStr = resolvedKb.getDispatchChords()[0];\n                const isWYSIWYG = (resolvedKb ? resolvedKb.isWYSIWYG() : false);\n                const outWYSIWYG = (isWYSIWYG ? '       ' : '   NO  ');\n                const kbCombos = this._scanCodeKeyCodeMapper.lookupScanCodeCombo(scanCodeCombo);\n                if (kbCombos.length === 0) {\n                    result.push(`| ${this._leftPad(outScanCodeCombo, 30)} | ${outKey} | ${this._leftPad('', 25)} | ${this._leftPad('', 3)} | ${this._leftPad(outUILabel, 25)} | ${this._leftPad(outUserSettings, 30)} | ${this._leftPad(outElectronAccelerator, 25)} | ${this._leftPad(outDispatchStr, 30)} | ${outWYSIWYG} |`);\n                }\n                else {\n                    for (let i = 0, len = kbCombos.length; i < len; i++) {\n                        const kbCombo = kbCombos[i];\n                        let colPriority;\n                        const scanCodeCombos = this._scanCodeKeyCodeMapper.lookupKeyCodeCombo(kbCombo);\n                        if (scanCodeCombos.length === 1) {\n                            colPriority = '';\n                        }\n                        else {\n                            let priority = -1;\n                            for (let j = 0; j < scanCodeCombos.length; j++) {\n                                if (scanCodeCombos[j].equals(scanCodeCombo)) {\n                                    priority = j + 1;\n                                    break;\n                                }\n                            }\n                            colPriority = String(priority);\n                        }\n                        const outKeybinding = ( (kbCombo.toString()));\n                        if (i === 0) {\n                            result.push(`| ${this._leftPad(outScanCodeCombo, 30)} | ${outKey} | ${this._leftPad(outKeybinding, 25)} | ${this._leftPad(colPriority, 3)} | ${this._leftPad(outUILabel, 25)} | ${this._leftPad(outUserSettings, 30)} | ${this._leftPad(outElectronAccelerator, 25)} | ${this._leftPad(outDispatchStr, 30)} | ${outWYSIWYG} |`);\n                        }\n                        else {\n                            result.push(`| ${this._leftPad('', 30)} |       | ${this._leftPad(outKeybinding, 25)} | ${this._leftPad(colPriority, 3)} | ${this._leftPad('', 25)} | ${this._leftPad('', 30)} | ${this._leftPad('', 25)} | ${this._leftPad('', 30)} |         |`);\n                        }\n                    }\n                }\n            }\n            result.push(`----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------`);\n        }\n        return result.join('\\n');\n    }\n    _leftPad(str, cnt) {\n        if (str === null) {\n            str = 'null';\n        }\n        while (str.length < cnt) {\n            str = ' ' + str;\n        }\n        return str;\n    }\n    keyCodeChordToScanCodeChord(chord) {\n        if (chord.keyCode === 3 ) {\n            return [( (new ScanCodeChord(\n                chord.ctrlKey,\n                chord.shiftKey,\n                chord.altKey,\n                chord.metaKey,\n                46\n            )))];\n        }\n        const scanCodeCombos = this._scanCodeKeyCodeMapper.lookupKeyCodeCombo(( (new KeyCodeCombo(chord.ctrlKey, chord.shiftKey, chord.altKey, chord.keyCode))));\n        const result = [];\n        for (let i = 0, len = scanCodeCombos.length; i < len; i++) {\n            const scanCodeCombo = scanCodeCombos[i];\n            result[i] = ( (new ScanCodeChord(\n                scanCodeCombo.ctrlKey,\n                scanCodeCombo.shiftKey,\n                scanCodeCombo.altKey,\n                chord.metaKey,\n                scanCodeCombo.scanCode\n            )));\n        }\n        return result;\n    }\n    getUILabelForScanCodeChord(chord) {\n        if (!chord) {\n            return null;\n        }\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        if (this._OS === 2 ) {\n            switch (chord.scanCode) {\n                case 86 :\n                    return '←';\n                case 88 :\n                    return '↑';\n                case 85 :\n                    return '→';\n                case 87 :\n                    return '↓';\n            }\n        }\n        return this._scanCodeToLabel[chord.scanCode];\n    }\n    getAriaLabelForScanCodeChord(chord) {\n        if (!chord) {\n            return null;\n        }\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        return this._scanCodeToLabel[chord.scanCode];\n    }\n    getDispatchStrForScanCodeChord(chord) {\n        const codeDispatch = this._scanCodeToDispatch[chord.scanCode];\n        if (!codeDispatch) {\n            return null;\n        }\n        let result = '';\n        if (chord.ctrlKey) {\n            result += 'ctrl+';\n        }\n        if (chord.shiftKey) {\n            result += 'shift+';\n        }\n        if (chord.altKey) {\n            result += 'alt+';\n        }\n        if (chord.metaKey) {\n            result += 'meta+';\n        }\n        result += codeDispatch;\n        return result;\n    }\n    getUserSettingsLabelForScanCodeChord(chord) {\n        if (!chord) {\n            return null;\n        }\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        const immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[chord.scanCode];\n        if (immutableKeyCode !== -1 ) {\n            return KeyCodeUtils.toUserSettingsUS(immutableKeyCode).toLowerCase();\n        }\n        const constantKeyCode = this._scanCodeKeyCodeMapper.guessStableKeyCode(chord.scanCode);\n        if (constantKeyCode !== -1 ) {\n            const reverseChords = this.keyCodeChordToScanCodeChord(( (new KeyCodeChord(\n                chord.ctrlKey,\n                chord.shiftKey,\n                chord.altKey,\n                chord.metaKey,\n                constantKeyCode\n            ))));\n            for (let i = 0, len = reverseChords.length; i < len; i++) {\n                const reverseChord = reverseChords[i];\n                if (reverseChord.scanCode === chord.scanCode) {\n                    return KeyCodeUtils.toUserSettingsUS(constantKeyCode).toLowerCase();\n                }\n            }\n        }\n        return this._scanCodeToDispatch[chord.scanCode];\n    }\n    getElectronAcceleratorLabelForScanCodeChord(chord) {\n        if (!chord) {\n            return null;\n        }\n        const immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[chord.scanCode];\n        if (immutableKeyCode !== -1 ) {\n            return KeyCodeUtils.toElectronAccelerator(immutableKeyCode);\n        }\n        const constantKeyCode = this._scanCodeKeyCodeMapper.guessStableKeyCode(chord.scanCode);\n        if (this._OS === 3  && !this._isUSStandard) {\n            const isOEMKey = ((constantKeyCode === 85\n                || constantKeyCode === 86\n                || constantKeyCode === 87\n                || constantKeyCode === 88\n                || constantKeyCode === 89\n                || constantKeyCode === 90\n                || constantKeyCode === 91\n                || constantKeyCode === 92\n                || constantKeyCode === 93  || constantKeyCode === 94) );\n            if (isOEMKey) {\n                return null;\n            }\n        }\n        if (constantKeyCode !== -1 ) {\n            return KeyCodeUtils.toElectronAccelerator(constantKeyCode);\n        }\n        return null;\n    }\n    _toResolvedKeybinding(chordParts) {\n        if (chordParts.length === 0) {\n            return [];\n        }\n        const result = [];\n        this._generateResolvedKeybindings(chordParts, 0, [], result);\n        return result;\n    }\n    _generateResolvedKeybindings(chordParts, currentIndex, previousParts, result) {\n        const chordPart = chordParts[currentIndex];\n        const isFinalIndex = currentIndex === chordParts.length - 1;\n        for (let i = 0, len = chordPart.length; i < len; i++) {\n            const chords = [...previousParts, chordPart[i]];\n            if (isFinalIndex) {\n                result.push(( (new NativeResolvedKeybinding(this, this._OS, chords))));\n            }\n            else {\n                this._generateResolvedKeybindings(chordParts, currentIndex + 1, chords, result);\n            }\n        }\n    }\n    resolveKeyboardEvent(keyboardEvent) {\n        let code = ScanCodeUtils.toEnum(keyboardEvent.code);\n        if (code === 94 ) {\n            code = 46 ;\n        }\n        const keyCode = keyboardEvent.keyCode;\n        if (((keyCode === 15) )\n            || ((keyCode === 16) )\n            || ((keyCode === 17) )\n            || ((keyCode === 18) )\n            || ((keyCode === 20) )\n            || ((keyCode === 19) )\n            || ((keyCode === 14) )\n            || ((keyCode === 13) )\n            || ((keyCode === 12) )\n            || ((keyCode === 11) )\n            || ((keyCode === 1) )) {\n            const immutableScanCode = IMMUTABLE_KEY_CODE_TO_CODE[keyCode];\n            if (immutableScanCode !== -1 ) {\n                code = immutableScanCode;\n            }\n        }\n        else {\n            if (((code === 95) )\n                || ((code === 96) )\n                || ((code === 97) )\n                || ((code === 98) )\n                || ((code === 99) )\n                || ((code === 100) )\n                || ((code === 101) )\n                || ((code === 102) )\n                || ((code === 103) )\n                || ((code === 104) )\n                || ((code === 105) )) {\n                if (keyCode >= 0) {\n                    const immutableScanCode = IMMUTABLE_KEY_CODE_TO_CODE[keyCode];\n                    if (immutableScanCode !== -1 ) {\n                        code = immutableScanCode;\n                    }\n                }\n            }\n        }\n        const ctrlKey = keyboardEvent.ctrlKey || (this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n        const altKey = keyboardEvent.altKey || (this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n        const chord = ( (new ScanCodeChord(ctrlKey, keyboardEvent.shiftKey, altKey, keyboardEvent.metaKey, code)));\n        return (\n             (new NativeResolvedKeybinding(this, this._OS, [chord]))\n        );\n    }\n    _resolveChord(chord) {\n        if (!chord) {\n            return [];\n        }\n        if (chord instanceof ScanCodeChord) {\n            return [chord];\n        }\n        return this.keyCodeChordToScanCodeChord(chord);\n    }\n    resolveKeybinding(keybinding) {\n        const chords = ( (keybinding.chords.map(chord => this._resolveChord(chord))));\n        return this._toResolvedKeybinding(chords);\n    }\n    static _redirectCharCode(charCode) {\n        switch (charCode) {\n            case 12290 : return 46 ;\n            case 12300 : return 91 ;\n            case 12301 : return 93 ;\n            case 12304 : return 91 ;\n            case 12305 : return 93 ;\n            case 65307 : return 59 ;\n            case 65292 : return 44 ;\n        }\n        return charCode;\n    }\n    static _charCodeToKb(charCode) {\n        charCode = this._redirectCharCode(charCode);\n        if (charCode < CHAR_CODE_TO_KEY_CODE.length) {\n            return CHAR_CODE_TO_KEY_CODE[charCode];\n        }\n        return null;\n    }\n    static getCharCode(char) {\n        if (char.length === 0) {\n            return 0;\n        }\n        const charCode = char.charCodeAt(0);\n        switch (charCode) {\n            case 768 : return 96 ;\n            case 769 : return 180 ;\n            case 770 : return 94 ;\n            case 771 : return 732 ;\n            case 772 : return 175 ;\n            case 773 : return 8254 ;\n            case 774 : return 728 ;\n            case 775 : return 729 ;\n            case 776 : return 168 ;\n            case 778 : return 730 ;\n            case 779 : return 733 ;\n        }\n        return charCode;\n    }\n}\n(function () {\n    function define(charCode, keyCode, shiftKey) {\n        for (let i = CHAR_CODE_TO_KEY_CODE.length; i < charCode; i++) {\n            CHAR_CODE_TO_KEY_CODE[i] = null;\n        }\n        CHAR_CODE_TO_KEY_CODE[charCode] = { keyCode: keyCode, shiftKey: shiftKey };\n    }\n    for (let chCode = 65 ; chCode <= 90 ; chCode++) {\n        define(chCode, 31  + ((chCode - 65) ), true);\n    }\n    for (let chCode = 97 ; chCode <= 122 ; chCode++) {\n        define(chCode, 31  + ((chCode - 97) ), false);\n    }\n    define(59 , 85 , false);\n    define(58 , 85 , true);\n    define(61 , 86 , false);\n    define(43 , 86 , true);\n    define(44 , 87 , false);\n    define(60 , 87 , true);\n    define(45 , 88 , false);\n    define(95 , 88 , true);\n    define(46 , 89 , false);\n    define(62 , 89 , true);\n    define(47 , 90 , false);\n    define(63 , 90 , true);\n    define(96 , 91 , false);\n    define(126 , 91 , true);\n    define(91 , 92 , false);\n    define(123 , 92 , true);\n    define(92 , 93 , false);\n    define(124 , 93 , true);\n    define(93 , 94 , false);\n    define(125 , 94 , true);\n    define(39 , 95 , false);\n    define(34 , 95 , true);\n})();\nexport { MacLinuxKeyboardMapper, NativeResolvedKeybinding };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { KeymapInfo } from '../common/keymapInfo.js';\nimport { readKeyboardConfig } from '../../../../platform/keyboardLayout/common/keyboardConfig.js';\nimport { CachedKeyboardMapper } from '../../../../platform/keyboardLayout/common/keyboardMapper.js';\nimport { OS, isWindows, isMacintosh } from 'monaco-editor/esm/vs/base/common/platform.js';\nimport { WindowsKeyboardMapper } from '../common/windowsKeyboardMapper.js';\nimport { FallbackKeyboardMapper } from '../common/fallbackKeyboardMapper.js';\nimport { MacLinuxKeyboardMapper } from '../common/macLinuxKeyboardMapper.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { RunOnceScheduler } from 'monaco-editor/esm/vs/base/common/async.js';\nimport { parse, getNodeType } from 'monaco-editor/esm/vs/base/common/json.js';\nimport * as objects from 'monaco-editor/esm/vs/base/common/objects.js';\nimport { IEnvironmentService } from 'monaco-editor/esm/vs/platform/environment/common/environment.js';\nimport { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';\nimport { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';\nimport { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';\nimport { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';\nimport { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';\nimport { getKeyboardLayoutId } from '../../../../platform/keyboardLayout/common/keyboardLayout.js';\nfunction __variableDynamicImportRuntime0__(path) {\n  switch (path) {\n    case './keyboardLayouts/layout.contribution.darwin.js': return import('./keyboardLayouts/layout.contribution.darwin.js').then(module => module.default ?? module);\n    case './keyboardLayouts/layout.contribution.linux.js': return import('./keyboardLayouts/layout.contribution.linux.js').then(module => module.default ?? module);\n    case './keyboardLayouts/layout.contribution.win.js': return import('./keyboardLayouts/layout.contribution.win.js').then(module => module.default ?? module);\n    default: return new Promise(function(resolve, reject) {\n      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(\n        reject.bind(null, new Error(\"Unknown variable dynamic import: \" + path))\n      );\n    })\n   }\n }\nclass BrowserKeyboardMapperFactoryBase extends Disposable {\n    get activeKeymap() {\n        return this._activeKeymapInfo;\n    }\n    get keymapInfos() {\n        return this._keymapInfos;\n    }\n    get activeKeyboardLayout() {\n        if (!this._initialized) {\n            return null;\n        }\n        return this._activeKeymapInfo?.layout ?? null;\n    }\n    get activeKeyMapping() {\n        if (!this._initialized) {\n            return null;\n        }\n        return this._activeKeymapInfo?.mapping ?? null;\n    }\n    get keyboardLayouts() {\n        return ( this._keymapInfos.map(keymapInfo => keymapInfo.layout));\n    }\n    constructor(_configurationService) {\n        super();\n        this._configurationService = _configurationService;\n        this._onDidChangeKeyboardMapper = ( new Emitter());\n        this.onDidChangeKeyboardMapper = this._onDidChangeKeyboardMapper.event;\n        this._keyboardMapper = null;\n        this._initialized = false;\n        this._keymapInfos = [];\n        this._mru = [];\n        this._activeKeymapInfo = null;\n        if (navigator.keyboard && navigator.keyboard.addEventListener) {\n            navigator.keyboard.addEventListener('layoutchange', () => {\n                this._getBrowserKeyMapping().then((mapping) => {\n                    if (this.isKeyMappingActive(mapping)) {\n                        return;\n                    }\n                    this.setLayoutFromBrowserAPI();\n                });\n            });\n        }\n        this._register(this._configurationService.onDidChangeConfiguration((e) => {\n            if (e.affectsConfiguration('keyboard')) {\n                this._keyboardMapper = null;\n                this._onDidChangeKeyboardMapper.fire();\n            }\n        }));\n    }\n    registerKeyboardLayout(layout) {\n        this._keymapInfos.push(layout);\n        this._mru = this._keymapInfos;\n    }\n    removeKeyboardLayout(layout) {\n        let index = this._mru.indexOf(layout);\n        this._mru.splice(index, 1);\n        index = this._keymapInfos.indexOf(layout);\n        this._keymapInfos.splice(index, 1);\n    }\n    getMatchedKeymapInfo(keyMapping) {\n        if (!keyMapping) {\n            return null;\n        }\n        const usStandard = this.getUSStandardLayout();\n        if (usStandard) {\n            let maxScore = usStandard.getScore(keyMapping);\n            if (maxScore === 0) {\n                return {\n                    result: usStandard,\n                    score: 0\n                };\n            }\n            let result = usStandard;\n            for (let i = 0; i < this._mru.length; i++) {\n                const score = this._mru[i].getScore(keyMapping);\n                if (score > maxScore) {\n                    if (score === 0) {\n                        return {\n                            result: this._mru[i],\n                            score: 0\n                        };\n                    }\n                    maxScore = score;\n                    result = this._mru[i];\n                }\n            }\n            return {\n                result,\n                score: maxScore\n            };\n        }\n        for (let i = 0; i < this._mru.length; i++) {\n            if (this._mru[i].fuzzyEqual(keyMapping)) {\n                return {\n                    result: this._mru[i],\n                    score: 0\n                };\n            }\n        }\n        return null;\n    }\n    getUSStandardLayout() {\n        const usStandardLayouts = this._mru.filter(layout => layout.layout.isUSStandard);\n        if (usStandardLayouts.length) {\n            return usStandardLayouts[0];\n        }\n        return null;\n    }\n    isKeyMappingActive(keymap) {\n        return this._activeKeymapInfo && keymap && this._activeKeymapInfo.fuzzyEqual(keymap);\n    }\n    setUSKeyboardLayout() {\n        this._activeKeymapInfo = this.getUSStandardLayout();\n    }\n    setActiveKeyMapping(keymap) {\n        let keymapUpdated = false;\n        const matchedKeyboardLayout = this.getMatchedKeymapInfo(keymap);\n        if (matchedKeyboardLayout) {\n            if (!this._activeKeymapInfo) {\n                this._activeKeymapInfo = matchedKeyboardLayout.result;\n                keymapUpdated = true;\n            }\n            else if (keymap) {\n                if (matchedKeyboardLayout.result.getScore(keymap) > this._activeKeymapInfo.getScore(keymap)) {\n                    this._activeKeymapInfo = matchedKeyboardLayout.result;\n                    keymapUpdated = true;\n                }\n            }\n        }\n        if (!this._activeKeymapInfo) {\n            this._activeKeymapInfo = this.getUSStandardLayout();\n            keymapUpdated = true;\n        }\n        if (!this._activeKeymapInfo || !keymapUpdated) {\n            return;\n        }\n        const index = this._mru.indexOf(this._activeKeymapInfo);\n        this._mru.splice(index, 1);\n        this._mru.unshift(this._activeKeymapInfo);\n        this._setKeyboardData(this._activeKeymapInfo);\n    }\n    setActiveKeymapInfo(keymapInfo) {\n        this._activeKeymapInfo = keymapInfo;\n        const index = this._mru.indexOf(this._activeKeymapInfo);\n        if (index === 0) {\n            return;\n        }\n        this._mru.splice(index, 1);\n        this._mru.unshift(this._activeKeymapInfo);\n        this._setKeyboardData(this._activeKeymapInfo);\n    }\n    setLayoutFromBrowserAPI() {\n        this._updateKeyboardLayoutAsync(this._initialized);\n    }\n    _updateKeyboardLayoutAsync(initialized, keyboardEvent) {\n        if (!initialized) {\n            return;\n        }\n        this._getBrowserKeyMapping(keyboardEvent).then(keyMap => {\n            if (this.isKeyMappingActive(keyMap)) {\n                return;\n            }\n            this.setActiveKeyMapping(keyMap);\n        });\n    }\n    getKeyboardMapper() {\n        const config = readKeyboardConfig(this._configurationService);\n        if (config.dispatch === 1  || !this._initialized || !this._activeKeymapInfo) {\n            return ( new FallbackKeyboardMapper(config.mapAltGrToCtrlAlt, OS));\n        }\n        if (!this._keyboardMapper) {\n            this._keyboardMapper = ( new CachedKeyboardMapper(\n                BrowserKeyboardMapperFactory._createKeyboardMapper(this._activeKeymapInfo, config.mapAltGrToCtrlAlt)\n            ));\n        }\n        return this._keyboardMapper;\n    }\n    validateCurrentKeyboardMapping(keyboardEvent) {\n        if (!this._initialized) {\n            return;\n        }\n        const isCurrentKeyboard = this._validateCurrentKeyboardMapping(keyboardEvent);\n        if (isCurrentKeyboard) {\n            return;\n        }\n        this._updateKeyboardLayoutAsync(true, keyboardEvent);\n    }\n    setKeyboardLayout(layoutName) {\n        const matchedLayouts = this.keymapInfos.filter(keymapInfo => getKeyboardLayoutId(keymapInfo.layout) === layoutName);\n        if (matchedLayouts.length > 0) {\n            this.setActiveKeymapInfo(matchedLayouts[0]);\n        }\n    }\n    _setKeyboardData(keymapInfo) {\n        this._initialized = true;\n        this._keyboardMapper = null;\n        this._onDidChangeKeyboardMapper.fire();\n    }\n    static _createKeyboardMapper(keymapInfo, mapAltGrToCtrlAlt) {\n        const rawMapping = keymapInfo.mapping;\n        const isUSStandard = !!keymapInfo.layout.isUSStandard;\n        if (OS === 1 ) {\n            return ( new WindowsKeyboardMapper(isUSStandard, rawMapping, mapAltGrToCtrlAlt));\n        }\n        if (( Object.keys(rawMapping)).length === 0) {\n            return ( new FallbackKeyboardMapper(mapAltGrToCtrlAlt, OS));\n        }\n        return ( new MacLinuxKeyboardMapper(isUSStandard, rawMapping, mapAltGrToCtrlAlt, OS));\n    }\n    _validateCurrentKeyboardMapping(keyboardEvent) {\n        if (!this._initialized) {\n            return true;\n        }\n        const standardKeyboardEvent = keyboardEvent;\n        const currentKeymap = this._activeKeymapInfo;\n        if (!currentKeymap) {\n            return true;\n        }\n        if (standardKeyboardEvent.browserEvent.key === 'Dead' || standardKeyboardEvent.browserEvent.isComposing) {\n            return true;\n        }\n        const mapping = currentKeymap.mapping[standardKeyboardEvent.code];\n        if (!mapping) {\n            return false;\n        }\n        if (mapping.value === '') {\n            if (keyboardEvent.ctrlKey || keyboardEvent.metaKey) {\n                setTimeout(() => {\n                    this._getBrowserKeyMapping().then((keymap) => {\n                        if (this.isKeyMappingActive(keymap)) {\n                            return;\n                        }\n                        this.setLayoutFromBrowserAPI();\n                    });\n                }, 350);\n            }\n            return true;\n        }\n        const expectedValue = standardKeyboardEvent.altKey && standardKeyboardEvent.shiftKey ? mapping.withShiftAltGr :\n            standardKeyboardEvent.altKey ? mapping.withAltGr :\n                standardKeyboardEvent.shiftKey ? mapping.withShift : mapping.value;\n        const isDead = (standardKeyboardEvent.altKey && standardKeyboardEvent.shiftKey && mapping.withShiftAltGrIsDeadKey) ||\n            (standardKeyboardEvent.altKey && mapping.withAltGrIsDeadKey) ||\n            (standardKeyboardEvent.shiftKey && mapping.withShiftIsDeadKey) ||\n            mapping.valueIsDeadKey;\n        if (isDead && standardKeyboardEvent.browserEvent.key !== 'Dead') {\n            return false;\n        }\n        if (!isDead && standardKeyboardEvent.browserEvent.key !== expectedValue) {\n            return false;\n        }\n        return true;\n    }\n    async _getBrowserKeyMapping(keyboardEvent) {\n        if (navigator.keyboard) {\n            try {\n                return navigator.keyboard.getLayoutMap().then((e) => {\n                    const ret = {};\n                    for (const key of e) {\n                        ret[key[0]] = {\n                            'value': key[1],\n                            'withShift': '',\n                            'withAltGr': '',\n                            'withShiftAltGr': ''\n                        };\n                    }\n                    return ret;\n                });\n            }\n            catch {\n            }\n        }\n        else if (keyboardEvent && !keyboardEvent.shiftKey && !keyboardEvent.altKey && !keyboardEvent.metaKey && !keyboardEvent.metaKey) {\n            const ret = {};\n            const standardKeyboardEvent = keyboardEvent;\n            ret[standardKeyboardEvent.browserEvent.code] = {\n                'value': standardKeyboardEvent.browserEvent.key,\n                'withShift': '',\n                'withAltGr': '',\n                'withShiftAltGr': ''\n            };\n            const matchedKeyboardLayout = this.getMatchedKeymapInfo(ret);\n            if (matchedKeyboardLayout) {\n                return ret;\n            }\n            return null;\n        }\n        return null;\n    }\n}\nclass BrowserKeyboardMapperFactory extends BrowserKeyboardMapperFactoryBase {\n    constructor(configurationService, notificationService, storageService, commandService) {\n        super(configurationService);\n        const platform = isWindows ? 'win' : isMacintosh ? 'darwin' : 'linux';\n        __variableDynamicImportRuntime0__('./keyboardLayouts/layout.contribution.' + platform + '.js').then((m) => {\n            const keymapInfos = m.KeyboardLayoutContribution.INSTANCE.layoutInfos;\n            this._keymapInfos.push(...( keymapInfos.map(info => (( new KeymapInfo(\n                info.layout,\n                info.secondaryLayouts,\n                info.mapping,\n                info.isUserKeyboardLayout\n            ))))));\n            this._mru = this._keymapInfos;\n            this._initialized = true;\n            this.setLayoutFromBrowserAPI();\n        });\n    }\n}\nclass UserKeyboardLayout extends Disposable {\n    get keyboardLayout() { return this._keyboardLayout; }\n    constructor(keyboardLayoutResource, fileService) {\n        super();\n        this.keyboardLayoutResource = keyboardLayoutResource;\n        this.fileService = fileService;\n        this._onDidChange = this._register(( new Emitter()));\n        this.onDidChange = this._onDidChange.event;\n        this._keyboardLayout = null;\n        this.reloadConfigurationScheduler = this._register(( new RunOnceScheduler(() => this.reload().then(changed => {\n            if (changed) {\n                this._onDidChange.fire();\n            }\n        }), 50)));\n        this._register(Event.filter(this.fileService.onDidFilesChange, e => e.contains(this.keyboardLayoutResource))(() => this.reloadConfigurationScheduler.schedule()));\n    }\n    async initialize() {\n        await this.reload();\n    }\n    async reload() {\n        const existing = this._keyboardLayout;\n        try {\n            const content = await this.fileService.readFile(this.keyboardLayoutResource);\n            const value = parse(( content.value.toString()));\n            if (getNodeType(value) === 'object') {\n                const layoutInfo = value.layout;\n                const mappings = value.rawMapping;\n                this._keyboardLayout = KeymapInfo.createKeyboardLayoutFromDebugInfo(layoutInfo, mappings, true);\n            }\n            else {\n                this._keyboardLayout = null;\n            }\n        }\n        catch (e) {\n            this._keyboardLayout = null;\n        }\n        return existing ? !objects.equals(existing, this._keyboardLayout) : true;\n    }\n}\nlet BrowserKeyboardLayoutService = class BrowserKeyboardLayoutService extends Disposable {\n    constructor(environmentService, fileService, notificationService, storageService, commandService, configurationService) {\n        super();\n        this.configurationService = configurationService;\n        this._onDidChangeKeyboardLayout = ( new Emitter());\n        this.onDidChangeKeyboardLayout = this._onDidChangeKeyboardLayout.event;\n        const keyboardConfig = configurationService.getValue('keyboard');\n        const layout = keyboardConfig.layout;\n        this._keyboardLayoutMode = layout ?? 'autodetect';\n        this._factory = ( new BrowserKeyboardMapperFactory(configurationService, notificationService, storageService, commandService));\n        this._register(this._factory.onDidChangeKeyboardMapper(() => {\n            this._onDidChangeKeyboardLayout.fire();\n        }));\n        if (layout && layout !== 'autodetect') {\n            this._factory.setKeyboardLayout(layout);\n        }\n        this._register(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('keyboard.layout')) {\n                const keyboardConfig = configurationService.getValue('keyboard');\n                const layout = keyboardConfig.layout;\n                this._keyboardLayoutMode = layout;\n                if (layout === 'autodetect') {\n                    this._factory.setLayoutFromBrowserAPI();\n                }\n                else {\n                    this._factory.setKeyboardLayout(layout);\n                }\n            }\n        }));\n        this._userKeyboardLayout = ( new UserKeyboardLayout(environmentService.keyboardLayoutResource, fileService));\n        this._userKeyboardLayout.initialize().then(() => {\n            if (this._userKeyboardLayout.keyboardLayout) {\n                this._factory.registerKeyboardLayout(this._userKeyboardLayout.keyboardLayout);\n                this.setUserKeyboardLayoutIfMatched();\n            }\n        });\n        this._register(this._userKeyboardLayout.onDidChange(() => {\n            const userKeyboardLayouts = this._factory.keymapInfos.filter(layout => layout.isUserKeyboardLayout);\n            if (userKeyboardLayouts.length) {\n                if (this._userKeyboardLayout.keyboardLayout) {\n                    userKeyboardLayouts[0].update(this._userKeyboardLayout.keyboardLayout);\n                }\n                else {\n                    this._factory.removeKeyboardLayout(userKeyboardLayouts[0]);\n                }\n            }\n            else {\n                if (this._userKeyboardLayout.keyboardLayout) {\n                    this._factory.registerKeyboardLayout(this._userKeyboardLayout.keyboardLayout);\n                }\n            }\n            this.setUserKeyboardLayoutIfMatched();\n        }));\n    }\n    setUserKeyboardLayoutIfMatched() {\n        const keyboardConfig = this.configurationService.getValue('keyboard');\n        const layout = keyboardConfig.layout;\n        if (layout && this._userKeyboardLayout.keyboardLayout) {\n            if (getKeyboardLayoutId(this._userKeyboardLayout.keyboardLayout.layout) === layout && this._factory.activeKeymap) {\n                if (!this._userKeyboardLayout.keyboardLayout.equal(this._factory.activeKeymap)) {\n                    this._factory.setActiveKeymapInfo(this._userKeyboardLayout.keyboardLayout);\n                }\n            }\n        }\n    }\n    getKeyboardMapper() {\n        return this._factory.getKeyboardMapper();\n    }\n    getCurrentKeyboardLayout() {\n        return this._factory.activeKeyboardLayout;\n    }\n    getAllKeyboardLayouts() {\n        return this._factory.keyboardLayouts;\n    }\n    getRawKeyboardMapping() {\n        return this._factory.activeKeyMapping;\n    }\n    validateCurrentKeyboardMapping(keyboardEvent) {\n        if (this._keyboardLayoutMode !== 'autodetect') {\n            return;\n        }\n        this._factory.validateCurrentKeyboardMapping(keyboardEvent);\n    }\n};\nBrowserKeyboardLayoutService = ( __decorate([\n    ( __param(0, IEnvironmentService)),\n    ( __param(1, IFileService)),\n    ( __param(2, INotificationService)),\n    ( __param(3, IStorageService)),\n    ( __param(4, ICommandService)),\n    ( __param(5, IConfigurationService))\n], BrowserKeyboardLayoutService));\nconst configurationRegistry = ( Registry.as(Extensions.Configuration));\nconst keyboardConfiguration = {\n    'id': 'keyboard',\n    'order': 15,\n    'type': 'object',\n    'title': ( nls.localize('keyboardConfigurationTitle', \"Keyboard\")),\n    'properties': {\n        'keyboard.layout': {\n            'type': 'string',\n            'default': 'autodetect',\n            'description': ( nls.localize('keyboard.layout.config', \"Control the keyboard layout used in web.\"))\n        }\n    }\n};\nconfigurationRegistry.registerConfiguration(keyboardConfiguration);\nexport { BrowserKeyboardLayoutService, BrowserKeyboardMapperFactory, BrowserKeyboardMapperFactoryBase };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { CommandsRegistry } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';\nimport { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';\nimport { timeout } from 'monaco-editor/esm/vs/base/common/async.js';\nlet CommandService = class CommandService extends Disposable {\n    constructor(_instantiationService, _extensionService, _logService) {\n        super();\n        this._instantiationService = _instantiationService;\n        this._extensionService = _extensionService;\n        this._logService = _logService;\n        this._extensionHostIsReady = false;\n        this._onWillExecuteCommand = this._register(( new Emitter()));\n        this.onWillExecuteCommand = this._onWillExecuteCommand.event;\n        this._onDidExecuteCommand = ( new Emitter());\n        this.onDidExecuteCommand = this._onDidExecuteCommand.event;\n        this._extensionService.whenInstalledExtensionsRegistered().then(value => this._extensionHostIsReady = value);\n        this._starActivation = null;\n    }\n    _activateStar() {\n        if (!this._starActivation) {\n            this._starActivation = Promise.race([\n                this._extensionService.activateByEvent(`*`),\n                timeout(30000)\n            ]);\n        }\n        return this._starActivation;\n    }\n    async executeCommand(id, ...args) {\n        this._logService.trace('CommandService#executeCommand', id);\n        const activationEvent = `onCommand:${id}`;\n        const commandIsRegistered = !!CommandsRegistry.getCommand(id);\n        if (commandIsRegistered) {\n            if (this._extensionService.activationEventIsDone(activationEvent)) {\n                return this._tryExecuteCommand(id, args);\n            }\n            if (!this._extensionHostIsReady) {\n                this._extensionService.activateByEvent(activationEvent);\n                return this._tryExecuteCommand(id, args);\n            }\n            await this._extensionService.activateByEvent(activationEvent);\n            return this._tryExecuteCommand(id, args);\n        }\n        await Promise.all([\n            this._extensionService.activateByEvent(activationEvent),\n            Promise.race([\n                this._activateStar(),\n                Event.toPromise(Event.filter(CommandsRegistry.onDidRegisterCommand, e => e === id))\n            ]),\n        ]);\n        return this._tryExecuteCommand(id, args);\n    }\n    _tryExecuteCommand(id, args) {\n        const command = CommandsRegistry.getCommand(id);\n        if (!command) {\n            return Promise.reject(( new Error(`command '${id}' not found`)));\n        }\n        try {\n            this._onWillExecuteCommand.fire({ commandId: id, args });\n            const result = this._instantiationService.invokeFunction(command.handler, ...args);\n            this._onDidExecuteCommand.fire({ commandId: id, args });\n            return Promise.resolve(result);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n};\nCommandService = ( __decorate([\n    ( __param(0, IInstantiationService)),\n    ( __param(1, IExtensionService)),\n    ( __param(2, ILogService))\n], CommandService));\nexport { CommandService };\n","import * as nls from 'monaco-editor/esm/vs/nls.js';\nimport { registerAction2, Action2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { Categories } from 'monaco-editor/esm/vs/platform/action/common/actionCommonCategories.js';\nimport { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { showWindowLogActionId } from '../../../services/log/common/logConstants.js';\nclass ToggleKeybindingsLogAction extends Action2 {\n    constructor() {\n        super({\n            id: 'workbench.action.toggleKeybindingsLog',\n            title: { value: ( nls.localize('toggleKeybindingsLog', \"Toggle Keyboard Shortcuts Troubleshooting\")), original: 'Toggle Keyboard Shortcuts Troubleshooting' },\n            category: Categories.Developer,\n            f1: true\n        });\n    }\n    run(accessor) {\n        const logging = accessor.get(IKeybindingService).toggleLogging();\n        if (logging) {\n            const commandService = accessor.get(ICommandService);\n            commandService.executeCommand(showWindowLogActionId);\n        }\n    }\n}\nregisterAction2(ToggleKeybindingsLogAction);\n","import '../missing-services.js';\nimport { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nimport { WorkbenchKeybindingService } from '../vscode/vs/workbench/services/keybinding/browser/keybindingService.js';\nimport { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';\nimport { VSBuffer } from 'monaco-editor/esm/vs/base/common/buffer.js';\nimport { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';\nimport { IKeyboardLayoutService } from '../vscode/vs/platform/keyboardLayout/common/keyboardLayout.js';\nimport { BrowserKeyboardLayoutService } from '../vscode/vs/workbench/services/keybinding/browser/keyboardLayoutService.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { CommandService } from '../vscode/vs/workbench/services/commands/common/commandService.js';\nimport { toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport getServiceOverride$1 from './files.js';\nimport '../vscode/vs/workbench/browser/workbench.contribution.js';\nimport '../vscode/vs/workbench/contrib/keybindings/browser/keybindings.contribution.js';\nasync function updateUserKeybindings(keybindingsJson) {\n    const userDataProfilesService = StandaloneServices.get(IUserDataProfilesService);\n    await StandaloneServices.get(IFileService).writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(keybindingsJson));\n}\nclass DynamicWorkbenchKeybindingService extends WorkbenchKeybindingService {\n    constructor() {\n        super(...arguments);\n        this.keybindingProviders = [];\n    }\n    registerKeybindingProvider(provider) {\n        this.keybindingProviders.push(provider);\n        this.updateResolver();\n        return toDisposable(() => {\n            const idx = this.keybindingProviders.indexOf(provider);\n            if (idx >= 0) {\n                this.keybindingProviders.splice(idx, 1);\n                this.updateResolver();\n            }\n        });\n    }\n    _getResolver() {\n        return super._getResolver();\n    }\n    getUserKeybindingItems() {\n        return [...super.getUserKeybindingItems(), ...this.keybindingProviders.flatMap(provider => provider())];\n    }\n}\nfunction getServiceOverride() {\n    return {\n        ...getServiceOverride$1(),\n        [( IKeybindingService.toString())]: new SyncDescriptor(DynamicWorkbenchKeybindingService, [], false),\n        [( IKeyboardLayoutService.toString())]: new SyncDescriptor(BrowserKeyboardLayoutService, undefined, true),\n        [( ICommandService.toString())]: new SyncDescriptor(CommandService, [], true)\n    };\n}\nexport { getServiceOverride as default, updateUserKeybindings };\n","import { CommandsRegistry } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';\nimport { isNonEmptyArray } from 'monaco-editor/esm/vs/base/common/arrays.js';\nimport { EditorExtensionsRegistry } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';\nimport { MenuRegistry, MenuId, isIMenuItem } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';\nfunction getAllUnboundCommands(boundCommands) {\n    const unboundCommands = [];\n    const seenMap = ( new Map());\n    const addCommand = (id, includeCommandWithArgs) => {\n        if (( seenMap.has(id))) {\n            return;\n        }\n        seenMap.set(id, true);\n        if (id[0] === '_' || id.indexOf('vscode.') === 0) {\n            return;\n        }\n        if (boundCommands.get(id) === true) {\n            return;\n        }\n        if (!includeCommandWithArgs) {\n            const command = CommandsRegistry.getCommand(id);\n            if (command && typeof command.description === 'object'\n                && isNonEmptyArray(command.description.args)) {\n                return;\n            }\n        }\n        unboundCommands.push(id);\n    };\n    for (const menuItem of MenuRegistry.getMenuItems(MenuId.CommandPalette)) {\n        if (isIMenuItem(menuItem)) {\n            addCommand(menuItem.command.id, true);\n        }\n    }\n    for (const editorAction of EditorExtensionsRegistry.getEditorActions()) {\n        addCommand(editorAction.id, true);\n    }\n    for (const id of ( CommandsRegistry.getCommands().keys())) {\n        addCommand(id, false);\n    }\n    return unboundCommands;\n}\nexport { getAllUnboundCommands };\n","const showWindowLogActionId = 'workbench.action.showWindowLog';\nexport { showWindowLogActionId };\n"],"names":["KeybindingParser","_readModifiers","input","toLowerCase","trim","matchedModifier","key","ctrl","shift","alt","meta","test","substr","firstSpaceIdx","indexOf","substring","remains","parseChord","mods","this","scanCodeMatch","match","strScanCode","scanCode","lowerCaseToEnum","keyCode","fromUserSettings","parseKeybinding","chords","chord","length","push","apiMenus","id","CommandPalette","description","supportsSubmenus","TouchBarContext","EditorTitle","EditorTitleRun","EditorContext","EditorContextCopy","EditorContextShare","proposed","ExplorerContext","ExplorerContextShare","EditorTitleContext","EditorTitleContextShare","DebugCallStackContext","DebugVariablesContext","DebugToolBar","MenubarHomeMenu","MenubarCopy","SCMTitle","SCMSourceControl","SCMResourceContext","SCMResourceFolderContext","SCMResourceGroupContext","SCMChangeContext","StatusBarRemoteIndicatorMenu","ViewTitle","ViewItemContext","CommentEditorActions","CommentThreadTitle","CommentThreadActions","CommentThreadAdditionalActions","CommentThreadTitleContext","CommentTitle","CommentActions","CommentThreadCommentContext","NotebookToolbar","NotebookKernelSource","NotebookCellTitle","NotebookCellExecute","InteractiveToolbar","InteractiveCellTitle","TestItem","TestItemGutter","ExtensionContext","TimelineTitle","TimelineItemContext","TunnelContext","TunnelOriginInline","TunnelPortInline","NewFile","WebviewContext","MenubarShare","InlineCompletionsActions","EditorContent","EditorLineNumberContext","MergeInputResultToolbar","schema","isMenuItem","item","command","isValidMenuItem","collector","error","when","group","isValidSubmenuItem","submenu","isValidItems","items","Array","isArray","isValidSubmenu","label","menuItem","type","required","properties","submenuItem","icon","comment","anyOf","light","dark","isValidLocalizedString","localized","propertyName","original","value","menusContribution","menu","markdownDescription","oneOf","additionalProperties","submenusContribution","isValidCommand","title","shortTitle","enablement","category","isValidIcon","commandType","commandsContribution","_commandRegistrations","commandsExtensionPoint","registerExtensionPoint","extensionPoint","jsonSchema","activationEventsGenerator","contribs","result","contrib","setHandler","extensions","handleCommand","userFriendlyCommand","extension","absoluteIcon","fromString","resources","extensionLocation","existingCmd","getCommand","source","info","add","addCommand","identifier","displayName","name","tooltip","precondition","deserialize","clear","_submenus","Map","submenusExtensionPoint","submenuInfo","Object","entries","warn","has","for","set","_apiMenusByKey","map","_menuRegistrations","_submenuMenuItems","deps","entry","get","undefined","order","submenuRegistrations","Set","idx","lastIndexOf","Number","appendMenuItem","KeybindingIO","writeKeybindingItem","out","resolvedKeybinding","quotedSerializedKeybinding","JSON","stringify","getUserSettingsLabel","str","write","join","quotedSerializedWhen","serialize","quotedSerializeCommand","writeLine","commandArgs","readUserKeybindingItem","keybinding","args","_sourceKey","OutputBuilder","constructor","_lines","_currentLine","toString","keybindingType","default","nls","mac","linux","win","keybindingsExtPoint","NUMPAD_PRINTABLE_SCANCODES","otherMacNumpadMapping","WorkbenchKeybindingService","contextKeyService","commandService","telemetryService","notificationService","userDataProfileService","hostService","extensionService","fileService","uriIdentityService","logService","keyboardLayoutService","super","_contributions","isComposingGlobalContextKey","createKey","kbsJsonSchema","KeybindingsJsonSchema","updateKeybindingsJsonSchema","_keyboardMapper","getKeyboardMapper","onDidChangeKeyboardLayout","updateResolver","_cachedResolver","userKeybindings","_register","UserKeybindings","initialize","then","keybindings","onDidChange","debug","_handleKeybindingsExtensionPointUser","isBuiltin","setExtensionKeybindings","onDidRegisterExtensions","dom","window","KEY_DOWN","e","isComposing","keyEvent","_log","_dispatch","target","preventDefault","KEY_UP","_singleModifierDispatch","browser","keyboard","navigator","lock","unlock","_onDidUpdateKeybindings","fire","registerSchemaContribution","contribution","updateSchema","flatMap","x","getSchemaAdditions","_printKeybinding","toLabel","OS","_printResolvedKeybinding","getDispatchChords","_printResolvedKeybindings","output","resolvedKeybindings","firstRow","padStart","_dumpResolveKeybindingDebugInfo","seenBindings","getDefaultKeybindings","resolveKeybinding","_dumpDebugInfo","layoutInfo","getCurrentKeyboardLayout","mapperInfo","dumpDebugInfo","getRawKeyboardMapping","_dumpDebugInfoJSON","layout","rawMapping","customKeybindingsCount","getUserKeybindingItems","_resolveUserKeybindingItems","_getResolver","defaults","_resolveKeybindingItems","overrides","_documentHasFocus","hasFocus","isDefault","resultLen","_assertBrowserConflicts","i","extensionId","isBuiltinExtension","metaKey","altKey","ctrlKey","shiftKey","modifiersMask","partModifiersMask","kb","resolveKeyboardEvent","keyboardEvent","validateCurrentKeyboardMapping","resolveUserBinding","userBinding","len","_handleKeybinding","rejects","keyBinding","isValidContributedKeyBinding","rule","_asCommandRule","bindToCurrentPlatform","binding","weight","commandAction","fullWhen","and","getDefaultKeybindingsContent","resolver","defaultKeybindings","boundCommands","getDefaultBoundCommands","_getDefaultKeybindings","_getAllCommandsAsComment","lastIndex","forEach","k","index","pretty","g","sort","mightProducePrintableCharacter","event","code","toEnum","mapping","keyInfo","_keybindings","_rawKeybindings","watchDisposables","_onDidChange","watch","reloadConfigurationScheduler","reload","changed","filter","onDidFilesChange","contains","currentProfile","keybindingsResource","schedule","onDidRunOperation","operation","resource","onDidChangeCurrentProfile","extUri","isEqual","previous","profile","whenCurrentProfileChanged","newKeybindings","readUserKeybindings","objects","content","readFile","v","schemaId","commandsSchemas","commandsEnum","removalCommandsEnum","commandsEnumDescriptions","allowTrailingCommas","allowComments","definitions","$ref","schemaRegistry","as","JSONContribution","registerSchema","additionalContributions","knownCommands","addKnownCommand","commandId","allCommands","getCommands","commandDescription","argsSchema","argsRequired","isOptional","addition","concat","menuCommands","keys","notifySchemaChanged","KeymapInfo","secondaryLayouts","keyboardMapping","isUserKeyboardLayout","serializedMapping","ret","withShift","withAltGr","withShiftAltGr","mask","vkey","deserializeMapping","createKeyboardLayoutFromDebugInfo","keyboardLayoutInfo","update","other","getScore","score","currentMapping","otherMapping","equal","fuzzyEqual","Configuration","keyboardConfiguration","scope","enum","included","registerConfiguration","CachedKeyboardMapper","actual","_actual","_cache","hashCode","getHashCode","resolved","r","WindowsNativeResolvedKeybinding","mapper","_mapper","_getLabel","isDuplicateModifierCase","getUILabelForKeyCode","_getUSLabelForKeybinding","getUSLabel","_os","_chords","_getAriaLabel","getAriaLabelForKeyCode","_getElectronAccelerator","getElectronAcceleratorForKeyBinding","_getUserSettingsLabel","getUserSettingsLabelForKeyCode","_isWYSIWYG","__isWYSIWYG","_getChordDispatch","isModifierKey","_getSingleModifierChordDispatch","getProducedCharCode","getProducedChar","char","WindowsKeyboardMapper","_isUSStandard","rawMappings","_mapAltGrToCtrlAlt","_keyCodeToLabel","_scanCodeToKeyCode","_keyCodeExists","immutableKeyCode","producesLetter","producesLetters","_codeInfo","strCode","hasOwnProperty","charCode","charCodeAt","String","fromCharCode","_registerLetterIfMissing","_registerLabel","immutableSamples","cnt","mod","scanCodeChord","keyCodeChord","_resolveChord","strKeyCode","resolvedKb","outScanCode","ariaLabel","getAriaLabel","outUILabel","replace","outUserSettings","outKey","outKb","outWYSIWYG","isWYSIWYG","_leftPad","_getLabelForKeyCode","toUserSettingsUS","toUserSettingsGeneral","toElectronAccelerator","altGraphKey","CHAR_CODE_TO_KEY_CODE","NativeResolvedKeybinding","os","getUILabelForScanCodeChord","getAriaLabelForScanCodeChord","getElectronAcceleratorLabelForScanCodeChord","getUserSettingsLabelForScanCodeChord","a","b","getDispatchStrForScanCodeChord","ScanCodeCombo","equals","MacLinuxKeyboardMapper","getCharCode","KeyCodeCombo","ScanCodeKeyCodeMapper","_keyCodeToScanCode","registrationComplete","_moveToEnd","encodedKeyCodeCombos","encodedScanCodeCombos","j","registerIfUnknown","scanCodeCombo","keyCodeCombo","scanCodeComboEncoded","_encodeScanCodeCombo","keyCodeComboEncoded","_encodeKeyCodeCombo","keyCodeIsDigit","keyCodeIsLetter","existingKeyCodeCombos","unshift","lookupKeyCodeCombo","scanCodeCombosEncoded","lookupScanCodeCombo","keyCodeCombosEncoded","guessStableKeyCode","keyCodeCombos1","keyCodeCombos2","shiftKey1","keyCode1","shiftKey2","_encode","principal","_OS","_scanCodeToLabel","_scanCodeToDispatch","_scanCodeKeyCodeMapper","_registerIfUnknown","hwCtrlKey","hwShiftKey","hwAltKey","kbCtrlKey","kbShiftKey","kbAltKey","_registerAllCombos","_ctrlKey","_shiftKey","_altKey","missingLatinLettersOverride","producesLatinLetter","mappings","mappingsLen","upperCaseValue","_charCodeToKb","_standardKeyboardEventBrand","outScanCodeCombo","outElectronAccelerator","getElectronAccelerator","outDispatchStr","kbCombos","kbCombo","colPriority","scanCodeCombos","priority","outKeybinding","keyCodeChordToScanCodeChord","codeDispatch","constantKeyCode","reverseChords","_toResolvedKeybinding","chordParts","_generateResolvedKeybindings","currentIndex","previousParts","chordPart","isFinalIndex","immutableScanCode","_redirectCharCode","define","chCode","BrowserKeyboardMapperFactoryBase","activeKeymap","_activeKeymapInfo","keymapInfos","_keymapInfos","activeKeyboardLayout","_initialized","activeKeyMapping","keyboardLayouts","keymapInfo","_configurationService","_onDidChangeKeyboardMapper","onDidChangeKeyboardMapper","_mru","addEventListener","_getBrowserKeyMapping","isKeyMappingActive","setLayoutFromBrowserAPI","onDidChangeConfiguration","affectsConfiguration","registerKeyboardLayout","removeKeyboardLayout","splice","getMatchedKeymapInfo","keyMapping","usStandard","getUSStandardLayout","maxScore","usStandardLayouts","isUSStandard","keymap","setUSKeyboardLayout","setActiveKeyMapping","keymapUpdated","matchedKeyboardLayout","_setKeyboardData","setActiveKeymapInfo","_updateKeyboardLayoutAsync","initialized","keyMap","config","configurationService","getValue","dispatch","mapAltGrToCtrlAlt","Boolean","readKeyboardConfig","BrowserKeyboardMapperFactory","_createKeyboardMapper","_validateCurrentKeyboardMapping","setKeyboardLayout","layoutName","matchedLayouts","standardKeyboardEvent","currentKeymap","browserEvent","setTimeout","expectedValue","isDead","withShiftAltGrIsDeadKey","withAltGrIsDeadKey","withShiftIsDeadKey","valueIsDeadKey","getLayoutMap","storageService","path","module","Promise","resolve","reject","queueMicrotask","bind","Error","__variableDynamicImportRuntime0__","m","KeyboardLayoutContribution","INSTANCE","layoutInfos","UserKeyboardLayout","keyboardLayout","_keyboardLayout","keyboardLayoutResource","existing","BrowserKeyboardLayoutService","environmentService","_onDidChangeKeyboardLayout","_keyboardLayoutMode","_factory","_userKeyboardLayout","setUserKeyboardLayoutIfMatched","userKeyboardLayouts","getAllKeyboardLayouts","CommandService","_instantiationService","_extensionService","_logService","_extensionHostIsReady","_onWillExecuteCommand","onWillExecuteCommand","_onDidExecuteCommand","onDidExecuteCommand","whenInstalledExtensionsRegistered","_starActivation","_activateStar","race","activateByEvent","executeCommand","trace","activationEvent","activationEventIsDone","_tryExecuteCommand","all","toPromise","onDidRegisterCommand","invokeFunction","handler","err","ToggleKeybindingsLogAction","Developer","f1","run","accessor","toggleLogging","async","updateUserKeybindings","keybindingsJson","userDataProfilesService","writeFile","defaultProfile","DynamicWorkbenchKeybindingService","arguments","keybindingProviders","registerKeybindingProvider","provider","getServiceOverride","getAllUnboundCommands","unboundCommands","seenMap","includeCommandWithArgs","getMenuItems","editorAction","getEditorActions","showWindowLogActionId"],"sourceRoot":""}