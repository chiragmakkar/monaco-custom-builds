{"version":3,"file":"812.bundle.js","mappings":"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","sources":["webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/editor/common/services/modelUndoRedoParticipant.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/vscode/vs/workbench/services/textmodelResolver/common/textModelResolverService.js","webpack://monaco-custom-bundle/./node_modules/vscode/dist/service-override/model.js"],"sourcesContent":["import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';\nimport { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';\nimport { ITextModelService } from 'monaco-editor/esm/vs/editor/common/services/resolverService.js';\nimport { Disposable, dispose } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { IUndoRedoService } from 'monaco-editor/esm/vs/platform/undoRedo/common/undoRedo.js';\nimport { MultiModelEditStackElement } from 'monaco-editor/esm/vs/editor/common/model/editStack.js';\nlet ModelUndoRedoParticipant = class ModelUndoRedoParticipant extends Disposable {\n    constructor(_modelService, _textModelService, _undoRedoService) {\n        super();\n        this._modelService = _modelService;\n        this._textModelService = _textModelService;\n        this._undoRedoService = _undoRedoService;\n        this._register(this._modelService.onModelRemoved((model) => {\n            const elements = this._undoRedoService.getElements(model.uri);\n            if (elements.past.length === 0 && elements.future.length === 0) {\n                return;\n            }\n            for (const element of elements.past) {\n                if (element instanceof MultiModelEditStackElement) {\n                    element.setDelegate(this);\n                }\n            }\n            for (const element of elements.future) {\n                if (element instanceof MultiModelEditStackElement) {\n                    element.setDelegate(this);\n                }\n            }\n        }));\n    }\n    prepareUndoRedo(element) {\n        const missingModels = element.getMissingModels();\n        if (missingModels.length === 0) {\n            return Disposable.None;\n        }\n        const disposablesPromises = ( missingModels.map(async (uri) => {\n            try {\n                const reference = await this._textModelService.createModelReference(uri);\n                return reference;\n            }\n            catch (err) {\n                return Disposable.None;\n            }\n        }));\n        return Promise.all(disposablesPromises).then(disposables => {\n            return {\n                dispose: () => dispose(disposables)\n            };\n        });\n    }\n};\nModelUndoRedoParticipant = ( __decorate([\n    ( __param(0, IModelService)),\n    ( __param(1, ITextModelService)),\n    ( __param(2, IUndoRedoService))\n], ModelUndoRedoParticipant));\nexport { ModelUndoRedoParticipant };\n","import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';\nimport { URI } from 'monaco-editor/esm/vs/base/common/uri.js';\nimport { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';\nimport { Disposable, AsyncReferenceCollection, ReferenceCollection, toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';\nimport { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';\nimport { TextResourceEditorModel } from '../../../common/editor/textResourceEditorModel.js';\nimport { ITextFileService } from '../../textfile/common/textfiles.js';\nimport { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';\nimport { isResolvedTextEditorModel } from 'monaco-editor/esm/vs/editor/common/services/resolverService.js';\nimport { TextFileEditorModel } from '../../textfile/common/textFileEditorModel.js';\nimport { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';\nimport { IUndoRedoService } from 'monaco-editor/esm/vs/platform/undoRedo/common/undoRedo.js';\nimport { ModelUndoRedoParticipant } from '../../../../editor/common/services/modelUndoRedoParticipant.js';\nimport { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';\nlet ResourceModelCollection = class ResourceModelCollection extends ReferenceCollection {\n    constructor(instantiationService, textFileService, fileService, modelService) {\n        super();\n        this.instantiationService = instantiationService;\n        this.textFileService = textFileService;\n        this.fileService = fileService;\n        this.modelService = modelService;\n        this.providers = ( new Map());\n        this.modelsToDispose = ( new Set());\n    }\n    createReferencedObject(key) {\n        return this.doCreateReferencedObject(key);\n    }\n    async doCreateReferencedObject(key, skipActivateProvider) {\n        this.modelsToDispose.delete(key);\n        const resource = ( URI.parse(key));\n        if (resource.scheme === Schemas.inMemory) {\n            const cachedModel = this.modelService.getModel(resource);\n            if (!cachedModel) {\n                throw new Error(`Unable to resolve inMemory resource ${key}`);\n            }\n            const model = this.instantiationService.createInstance(TextResourceEditorModel, resource);\n            if (this.ensureResolvedModel(model, key)) {\n                return model;\n            }\n        }\n        if (resource.scheme === Schemas.untitled) {\n            const model = await this.textFileService.untitled.resolve({ untitledResource: resource });\n            if (this.ensureResolvedModel(model, key)) {\n                return model;\n            }\n        }\n        if (this.fileService.hasProvider(resource)) {\n            const model = await this.textFileService.files.resolve(resource, { reason: 2  });\n            if (this.ensureResolvedModel(model, key)) {\n                return model;\n            }\n        }\n        if (( this.providers.has(resource.scheme))) {\n            await this.resolveTextModelContent(key);\n            const model = this.instantiationService.createInstance(TextResourceEditorModel, resource);\n            if (this.ensureResolvedModel(model, key)) {\n                return model;\n            }\n        }\n        if (!skipActivateProvider) {\n            await this.fileService.activateProvider(resource.scheme);\n            return this.doCreateReferencedObject(key, true);\n        }\n        throw new Error(`Unable to resolve resource ${key}`);\n    }\n    ensureResolvedModel(model, key) {\n        if (isResolvedTextEditorModel(model)) {\n            return true;\n        }\n        throw new Error(`Unable to resolve resource ${key}`);\n    }\n    destroyReferencedObject(key, modelPromise) {\n        const resource = ( URI.parse(key));\n        if (resource.scheme === Schemas.untitled || resource.scheme === Schemas.inMemory) {\n            return;\n        }\n        this.modelsToDispose.add(key);\n        (async () => {\n            try {\n                const model = await modelPromise;\n                if (!( this.modelsToDispose.has(key))) {\n                    return;\n                }\n                if (model instanceof TextFileEditorModel) {\n                    await this.textFileService.files.canDispose(model);\n                }\n                if (!( this.modelsToDispose.has(key))) {\n                    return;\n                }\n                model.dispose();\n            }\n            catch (error) {\n            }\n            finally {\n                this.modelsToDispose.delete(key);\n            }\n        })();\n    }\n    registerTextModelContentProvider(scheme, provider) {\n        let providers = this.providers.get(scheme);\n        if (!providers) {\n            providers = [];\n            this.providers.set(scheme, providers);\n        }\n        providers.unshift(provider);\n        return toDisposable(() => {\n            const providersForScheme = this.providers.get(scheme);\n            if (!providersForScheme) {\n                return;\n            }\n            const index = providersForScheme.indexOf(provider);\n            if (index === -1) {\n                return;\n            }\n            providersForScheme.splice(index, 1);\n            if (providersForScheme.length === 0) {\n                this.providers.delete(scheme);\n            }\n        });\n    }\n    hasTextModelContentProvider(scheme) {\n        return this.providers.get(scheme) !== undefined;\n    }\n    async resolveTextModelContent(key) {\n        const resource = ( URI.parse(key));\n        const providersForScheme = this.providers.get(resource.scheme) || [];\n        for (const provider of providersForScheme) {\n            const value = await provider.provideTextContent(resource);\n            if (value) {\n                return value;\n            }\n        }\n        throw new Error(`Unable to resolve text model content for resource ${key}`);\n    }\n};\nResourceModelCollection = ( __decorate([\n    ( __param(0, IInstantiationService)),\n    ( __param(1, ITextFileService)),\n    ( __param(2, IFileService)),\n    ( __param(3, IModelService))\n], ResourceModelCollection));\nlet TextModelResolverService = class TextModelResolverService extends Disposable {\n    get resourceModelCollection() {\n        if (!this._resourceModelCollection) {\n            this._resourceModelCollection = this.instantiationService.createInstance(ResourceModelCollection);\n        }\n        return this._resourceModelCollection;\n    }\n    get asyncModelCollection() {\n        if (!this._asyncModelCollection) {\n            this._asyncModelCollection = ( new AsyncReferenceCollection(this.resourceModelCollection));\n        }\n        return this._asyncModelCollection;\n    }\n    constructor(instantiationService, fileService, undoRedoService, modelService, uriIdentityService) {\n        super();\n        this.instantiationService = instantiationService;\n        this.fileService = fileService;\n        this.undoRedoService = undoRedoService;\n        this.modelService = modelService;\n        this.uriIdentityService = uriIdentityService;\n        this._resourceModelCollection = undefined;\n        this._asyncModelCollection = undefined;\n        this._register(( new ModelUndoRedoParticipant(this.modelService, this, this.undoRedoService)));\n    }\n    async createModelReference(resource) {\n        resource = this.uriIdentityService.asCanonicalUri(resource);\n        return await this.asyncModelCollection.acquire(( resource.toString()));\n    }\n    registerTextModelContentProvider(scheme, provider) {\n        return this.resourceModelCollection.registerTextModelContentProvider(scheme, provider);\n    }\n    canHandleResource(resource) {\n        if (this.fileService.hasProvider(resource) || resource.scheme === Schemas.untitled || resource.scheme === Schemas.inMemory) {\n            return true;\n        }\n        return this.resourceModelCollection.hasTextModelContentProvider(resource.scheme);\n    }\n};\nTextModelResolverService = ( __decorate([\n    ( __param(0, IInstantiationService)),\n    ( __param(1, IFileService)),\n    ( __param(2, IUndoRedoService)),\n    ( __param(3, IModelService)),\n    ( __param(4, IUriIdentityService))\n], TextModelResolverService));\nexport { TextModelResolverService };\n","import '../missing-services.js';\nimport { ITextModelService } from 'monaco-editor/esm/vs/editor/common/services/resolverService.js';\nimport { TextModelResolverService } from '../vscode/vs/workbench/services/textmodelResolver/common/textModelResolverService.js';\nimport { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';\nfunction getServiceOverride() {\n    return {\n        [( ITextModelService.toString())]: new SyncDescriptor(TextModelResolverService, undefined, true)\n    };\n}\nexport { getServiceOverride as default };\n"],"names":["ModelUndoRedoParticipant","constructor","_modelService","_textModelService","_undoRedoService","super","this","_register","onModelRemoved","model","elements","getElements","uri","past","length","future","element","setDelegate","prepareUndoRedo","missingModels","getMissingModels","None","disposablesPromises","map","async","createModelReference","err","Promise","all","then","disposables","dispose","ResourceModelCollection","instantiationService","textFileService","fileService","modelService","providers","Map","modelsToDispose","Set","createReferencedObject","key","doCreateReferencedObject","skipActivateProvider","delete","resource","parse","scheme","inMemory","getModel","Error","createInstance","ensureResolvedModel","untitled","resolve","untitledResource","hasProvider","files","reason","has","resolveTextModelContent","activateProvider","destroyReferencedObject","modelPromise","add","canDispose","error","registerTextModelContentProvider","provider","get","set","unshift","providersForScheme","index","indexOf","splice","hasTextModelContentProvider","undefined","value","provideTextContent","TextModelResolverService","resourceModelCollection","_resourceModelCollection","asyncModelCollection","_asyncModelCollection","undoRedoService","uriIdentityService","asCanonicalUri","acquire","toString","canHandleResource","getServiceOverride"],"sourceRoot":""}